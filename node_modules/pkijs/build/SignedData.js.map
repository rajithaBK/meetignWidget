{"version":3,"sources":["../src/SignedData.js"],"names":["SignedData","constructor","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","ocsps","signerInfos","fromSchema","schema","memberName","EncapsulatedContentInfo","Error","compareWithDefault","memberValue","length","names","optional","asn1js","Sequence","name","blockName","value","Integer","Set","Repeated","AlgorithmIdentifier","Constructed","idBlock","tagClass","tagNumber","CertificateSet","valueBlock","RevocationInfoChoices","SignerInfo","asn1","compareSchema","verified","result","valueDec","Array","from","algorithm","certificateSet","slice","crl","CertificateRevocationList","OtherRevocationInfoFormat","signerInfoSchema","toSchema","encodeFlag","outputArray","some","o","OtherCertificateFormat","AttributeCertificateV2","AttributeCertificateV1","eContentType","ID_DATA","push","certificateSetSchema","crlSchema","signerInfo","toJSON","_object","certificate","verify","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","extendedMode","passedWhenNotRevValues","findOrigin","findIssuer","sequence","Promise","resolve","messageDigestValue","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","engine","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","IssuerAndSerialNumber","then","Certificate","issuer","isEqual","serialNumber","keyId","isConstructed","valueHex","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","e","fromBER","eContent","tstInfo","TSTInfo","ex","genTime","byteLength","checkCA","cert","isCA","extensions","extension","extnID","parsedValue","cA","promiseResults","filter","certificateChainValidationEngineParameters","certs","_result","certificateChainEngine","CertificateChainValidationEngine","otherRevInfoFormat","BasicOCSPResponse","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","signedAttrs","attributes","attribute","type","values","encodedValue","subtle","verifyWithPublicKey","signature","signatureAlgorithm","sign","privateKey","signerIndex","hashAlgorithm","hashAlgorithmOID","algorithmParams","Null","getSignatureParameters","toBER","view","content","signWithPrivateKey","OctetString"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport TSTInfo from \"./TSTInfo.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @desc digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @desc encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @desc certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\tif(\"ocsps\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @desc signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"ocsps\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t *    encapContentInfo EncapsulatedContentInfo,\r\n\t *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t *    signerInfos SignerInfos }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certificates || \"SignedData.certificates\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignedData.version\",\r\n\t\t\t\"SignedData.digestAlgorithms\",\r\n\t\t\t\"SignedData.encapContentInfo\",\r\n\t\t\t\"SignedData.certificates\",\r\n\t\t\t\"SignedData.crls\",\r\n\t\t\t\"SignedData.signerInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result[\"SignedData.certificates\"].valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tthis.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\t// IF ((certificates is present) AND\r\n\t\t// \t(any certificates with a type of other are present)) OR\r\n\t\t// \t((crls is present) AND\r\n\t\t// \t(any crls with a type of other are present))\r\n\t\t// THEN version MUST be 5\r\n\t\t// ELSE\r\n\t\t// \tIF (certificates is present) AND\r\n\t\t// \t\t\t(any version 2 attribute certificates are present)\r\n\t\t// \tTHEN version MUST be 4\r\n\t\t// \tELSE\r\n\t\t// \t\t\tIF ((certificates is present) AND\r\n\t\t// \t\t\t\t(any version 1 attribute certificates are present)) OR\r\n\t\t// \t\t\t\t(any SignerInfo structures are version 3) OR\r\n\t\t// \t\t\t\t(encapContentInfo eContentType is other than id-data)\r\n\t\t// \t\t\tTHEN version MUST be 3\r\n\t\t// \t\t\tELSE version MUST be 1\r\n\t\tif ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\r\n\t\t\t|| (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\r\n\t\t\tthis.version = 5;\r\n\t\t} else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\r\n\t\t\tthis.version = 4;\r\n\t\t} else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\r\n\t\t\t|| this.signerInfos.some(o => o.version === 3)\r\n\t\t\t|| this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\r\n\t\t\tthis.version = 3;\r\n\t\t} else {\r\n\t\t\tthis.version = 1;\r\n\t\t}\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({ certificates: this.certificates });\r\n\t\t\tconst certificateSetSchema = certificateSet.toSchema();\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t},\r\n\t\t\t\tvalue: certificateSetSchema.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param {Object} [param={}]\r\n\t * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n\t * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n\t * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n\t * @param {Date} [param.checkDate=new Date()]\r\n\t * @param {Boolean} [param.checkChain=false]\r\n\t * @param {Boolean} [param.extendedMode=false]\r\n\t * @param {?Function} [findOrigin=null]\r\n\t * @param {?Function} [findIssuer=null]\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\textendedMode = false,\r\n\t\tpassedWhenNotRevValues = false,\r\n\t\tfindOrigin = null,\r\n\t\tfindIssuer = null\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = (async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst sid = this.signerInfos[signer].sid;\r\n\t\t\t\t\tconst keyId = sid.idBlock.isConstructed\r\n\t\t\t\t\t\t? sid.valueBlock.value[0].valueBlock.valueHex // EXPLICIT OCTET STRING\r\n\t\t\t\t\t\t: sid.valueBlock.valueHex; // IMPLICIT OCTET STRING\r\n\r\n\t\t\t\t\tfor (const certificate of this.certificates) {\r\n\t\t\t\t\t\tif (!(certificate instanceof Certificate)) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tconst digest = await crypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t\t\t\t\t\tif(isEqualBuffer(digest, keyId))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!signerCertificate) {\r\n\t\t\t\t\t\tthrow new Error(\"Signing certificate not found\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow \"Unable to find signer certificate\";\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainValidationEngineParameters = {\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif(findIssuer !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findIssuer = findIssuer;\r\n\t\t\t\t\r\n\t\t\t\tif(findOrigin !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findOrigin = findOrigin;\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"thisUpdate\" in crl)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify({ passedWhenNotRevValues }).then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\r\n\t\t});\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n\r\nSignedData.ID_DATA = \"1.2.840.113549.1.7.1\";\r\n//**************************************************************************************\r\n"],"file":"SignedData.js"}
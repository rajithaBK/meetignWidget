{"version":3,"sources":["../src/EnvelopedData.js"],"names":["defaultEncryptionParams","kdfAlgorithm","kekEncryptionLength","curveLengthByName","EnvelopedData","constructor","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","OriginatorInfo","EncryptedContentInfo","Error","compareWithDefault","memberValue","certs","certificates","length","crls","contentType","contentEncryptionAlgorithm","encryptedContent","names","asn1js","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","Set","Repeated","RecipientInfo","Attribute","asn1","compareSchema","verified","result","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","addRecipientByCertificate","certificate","variant","encryptionParameters","Object","assign","useOAEP","oaepHashAlgorithm","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","algorithmParams","hashOID","hashAlgorithm","AlgorithmIdentifier","Null","rsaOAEPParams","RSAESOAEPParams","maskGenAlgorithm","keyInfo","KeyTransRecipientInfo","rid","IssuerAndSerialNumber","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","recipientIdentifier","KeyAgreeRecipientIdentifier","_addKeyAgreeRecipientInfo","addRecipientByPreDefinedData","preDefinedData","ArrayBuffer","byteLength","keyIdentifierBuffer","keyIdentifierView","Uint8Array","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","KEKRecipientInfo","kekid","KEKIdentifier","OctetString","valueHex","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","PBKDF2Params","salt","prf","PasswordRecipientinfo","keyDerivationAlgorithm","password","addRecipientByKeyIdentifier","key","keyId","RecipientKeyIdentifier","subjectKeyIdentifier","recipientPublicKey","extraRecipientInfoParams","encryptedKey","RecipientEncryptedKey","aesKWoid","aesKW","ecdhOID","kdf","ukmBuffer","ukmView","recipientInfoParams","ukm","recipientEncryptedKeys","RecipientEncryptedKeys","encryptedKeys","KeyAgreeRecipientInfo","encrypt","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","iv","error","exportKey","SubKeyAgreeRecipientInfo","index","currentSequence","recipientInfo","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","namedCurve","curveObject","ObjectIdentifier","curveOID","toString","getPublicKey","usages","publicKey","privateKey","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","ECCCMSSharedInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","OriginatorIdentifierOrKey","OriginatorPublicKey","SubKeyTransRecipientInfo","algorithmParameters","ex","jjj","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","passwordView","iterations","deriveKey","i","all","decrypt","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","applyKDF","includeAlgorithmParams","keyInfoAlgorithm","sharedSecret","importAesKwKey","kdfResult","unwrapSessionKey","aesKwKey","unwrapKey","catch","dataBuffer","isConstructed","content"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientKeyIdentifier from \"./RecipientKeyIdentifier.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\nconst defaultEncryptionParams = {\r\n\tkdfAlgorithm: \"SHA-512\",\r\n\tkekEncryptionLength: 256\r\n};\r\nconst curveLengthByName = {\r\n\t\"P-256\": 256,\r\n\t\"P-384\": 384,\r\n\t\"P-521\": 528\r\n};\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @desc originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @desc recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EnvelopedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t *    recipientInfos RecipientInfos,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originatorInfo\",\r\n\t\t\t\"recipientInfos\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EnvelopedData\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.originatorInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initialize encryption parameters\r\n\t\tconst encryptionParameters = Object.assign(\r\n\t\t\t{ useOAEP: true, oaepHashAlgorithm: \"SHA-512\" },\r\n\t\t\tdefaultEncryptionParams,\r\n\t\t\tparameters || {}\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t\tlet algorithmId;\r\n\t\t\t\t\tlet algorithmParams;\r\n\r\n\t\t\t\t\tif(encryptionParameters.useOAEP === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\t\talgorithmId = getOIDByAlgorithm({\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(algorithmId === \"\")\r\n\t\t\t\t\t\t\tthrow new Error(\"Can not find OID for RSA-OAEP\");\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\r\n\t\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\talgorithmParams = rsaOAEPParams.toSchema();\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse // Use old RSAES-PKCS1-v1_5 schema instead\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\t\talgorithmId = getOIDByAlgorithm({\r\n\t\t\t\t\t\t\tname: \"RSAES-PKCS1-v1_5\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(algorithmId === \"\")\r\n\t\t\t\t\t\t\tthrow new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\talgorithmParams = new asn1js.Null();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId,\r\n\t\t\t\t\t\t\talgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t\tconst recipientIdentifier = new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis._addKeyAgreeRecipientInfo(\r\n\t\t\t\t\t\trecipientIdentifier,\r\n\t\t\t\t\t\tencryptionParameters,\r\n\t\t\t\t\t\t{recipientCertificate: certificate}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \"variant\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \"variant\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add a \"RecipientInfo\" using a KeyAgreeRecipientInfo of type RecipientKeyIdentifier.\r\n\t * @param {CryptoKey} [key] Recipient's public key\r\n\t * @param {ArrayBuffer} [keyId] The id for the recipient's public key\r\n\t * @param {Object} [parameters] Additional parameters for \"fine tuning\" the encryption process\r\n\t */\r\n\taddRecipientByKeyIdentifier(key, keyId, parameters)\r\n\t{\r\n\t\t//region Initialize encryption parameters\r\n\t\tconst encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});\r\n\t\t//endregion\r\n\r\n\t\tconst recipientIdentifier = new KeyAgreeRecipientIdentifier({\r\n\t\t\tvariant: 2,\r\n\t\t\tvalue: new RecipientKeyIdentifier({\r\n\t\t\t\tsubjectKeyIdentifier: new asn1js.OctetString({valueHex: keyId}),\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis._addKeyAgreeRecipientInfo(\r\n\t\t\trecipientIdentifier,\r\n\t\t\tencryptionParameters,\r\n\t\t\t{recipientPublicKey: key}\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add a \"RecipientInfo\" using a KeyAgreeRecipientInfo of type RecipientKeyIdentifier.\r\n\t * @param {KeyAgreeRecipientIdentifier} [recipientIdentifier] Recipient identifier\r\n\t * @param {Object} [encryptionParameters] Additional parameters for \"fine tuning\" the encryption process\r\n\t * @param {Object} [extraRecipientInfoParams] Additional params for KeyAgreeRecipientInfo\r\n\t */\r\n\t_addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams)\r\n\t{\r\n\t\t//region RecipientEncryptedKey\r\n\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\trid: recipientIdentifier\r\n\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region keyEncryptionAlgorithm\r\n\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\tname: \"AES-KW\",\r\n\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t});\r\n\t\tif (aesKWoid === \"\")\r\n\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\r\n\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: aesKWoid,\r\n\t\t});\r\n\t\t//endregion\r\n\r\n\t\t//region KeyAgreeRecipientInfo\r\n\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\tname: \"ECDH\",\r\n\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t});\r\n\t\tif (ecdhOID === \"\")\r\n\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\r\n\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\r\n\t\tconst recipientInfoParams = {\r\n\t\t\tversion: 3,\r\n\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\tukm: new asn1js.OctetString({valueHex: ukmBuffer}),\r\n\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t}),\r\n\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t})\r\n\t\t};\r\n\t\tconst keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));\r\n\t\t//endregion\r\n\r\n\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\tvariant: 2,\r\n\t\t\tvalue: keyInfo\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\r\n\t\tconst recipientsPromises = [];\r\n\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\r\n\t\t\tconst recipientInfo = _this.recipientInfos[index];\r\n\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\r\n\t\t\tlet recipientPublicKey;\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get public key and named curve from recipient's certificate or public key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif (recipientInfo.value.recipientPublicKey) {\r\n\t\t\t\t\trecipientCurve = recipientInfo.value.recipientPublicKey.algorithm.namedCurve;\r\n\t\t\t\t\treturn recipientInfo.value.recipientPublicKey;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst curveObject = recipientInfo.value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\r\n\t\t\t\t\tif (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\r\n\t\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\r\n\t\t\t\t\tswitch (curveOID) {\r\n\t\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn recipientInfo.value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result => {\r\n\t\t\t\trecipientPublicKey = result;\r\n\t\t\t\trecipientCurveLength = curveLengthByName[recipientCurve];\r\n\r\n\t\t\t\treturn crypto.generateKey(\r\n\t\t\t\t\t{name: \"ECDH\", namedCurve: recipientCurve},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Save public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(() => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: recipientPublicKey\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.value.keyEncryptionAlgorithm.algorithmParams });\r\n\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: recipientInfo.value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(recipientInfo.value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${recipientInfo.value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\r\n\t\t\t\trecipientInfo.value.originator = originator;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\trecipientInfo.value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn {ecdhPrivateKey};\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tasync function SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\tconst algorithmParameters = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\tif(\"name\" in algorithmParameters === false)\r\n\t\t\t\tthrow new Error(`Unknown keyEncryptionAlgorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\r\n\t\t\t//region RSA-OAEP case\r\n\t\t\tif(algorithmParameters.name === \"RSA-OAEP\")\r\n\t\t\t{\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\r\n\t\t\t\talgorithmParameters.hash = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in algorithmParameters.hash) === false)\r\n\t\t\t\t\tthrow new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst publicKey = await _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: algorithmParameters,\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\r\n\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({valueHex: encryptedKey});\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tconst jjj = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\t//endregion\r\n\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tconst decryptionParameters = parameters || {};\r\n\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\r\n\t\t\tlet curveOID;\r\n\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst originator = _this.recipientInfos[index].value.originator;\r\n\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif (\"recipientCertificate\" in decryptionParameters) {\r\n\t\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\tif(curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t} else if (\"algorithmParams\" in originator.value.algorithm) {\r\n\t\t\t\t\tconst curveObject = originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\tif(curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect originator for index ${index}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\" if algorithm params are missing from originator\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in originator.value.algorithm) === false)\r\n\t\t\t\t\toriginator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tfunction applyKDF(includeAlgorithmParams) {\r\n\t\t\t\tincludeAlgorithmParams = includeAlgorithmParams || false;\r\n\r\n\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\r\n\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\r\n\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\r\n\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t{\r\n\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\tconst keyInfoAlgorithm = {\r\n\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId\r\n\t\t\t\t};\r\n\t\t\t\tif (includeAlgorithmParams) {\r\n\t\t\t\t\tkeyInfoAlgorithm.algorithmParams = new asn1js.Null();\r\n\t\t\t\t}\r\n\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\tkeyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),\r\n\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn kdf(ecdhAlgorithm.kdf, sharedSecret, KWalgorithm.length, encodedInfo);\r\n\t\t\t}\r\n\t\t\tlet sharedSecret;\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tsharedSecret = result;\r\n\t\t\t\t\treturn applyKDF();\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tfunction importAesKwKey(kdfResult) {\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tkdfResult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\timportAesKwKey,\r\n\t\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tfunction unwrapSessionKey(aesKwKey) {\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\taesKwKey,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\tresult => unwrapSessionKey(result).catch(() => applyKDF(true).then(importAesKwKey).then(unwrapSessionKey)),\r\n\t\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tasync function SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\tthrow new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\r\n\t\t\tconst algorithmParameters = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\tif(\"name\" in algorithmParameters === false)\r\n\t\t\t\tthrow new Error(`Unknown keyEncryptionAlgorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\r\n\t\t\t//region RSA-OAEP case\r\n\t\t\tif(algorithmParameters.name === \"RSA-OAEP\")\r\n\t\t\t{\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\r\n\t\t\t\talgorithmParameters.hash = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in algorithmParameters.hash) === false)\r\n\t\t\t\t\tthrow new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tconst privateKey = await crypto.importKey(\r\n\t\t\t\t\"pkcs8\",\r\n\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\talgorithmParameters,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"decrypt\"]\r\n\t\t\t);\r\n\r\n\t\t\tconst sessionKey = await crypto.decrypt(\r\n\t\t\t\tprivateKey.algorithm,\r\n\t\t\t\tprivateKey,\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t);\r\n\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\tthrow new Error(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\tsessionKey,\r\n\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"decrypt\"]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\r\n\t\t//endregion\r\n\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EnvelopedData.js"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar IssuerAndSerialNumber = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for IssuerAndSerialNumber class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function IssuerAndSerialNumber() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IssuerAndSerialNumber);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {RelativeDistinguishedNames}\r\n     * @desc issuer\r\n     */\n    this.issuer = getParametersValue(parameters, \"issuer\", IssuerAndSerialNumber.defaultValues(\"issuer\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerAndSerialNumber.defaultValues(\"serialNumber\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(IssuerAndSerialNumber, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"issuer\", \"serialNumber\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, IssuerAndSerialNumber.schema({\n        names: {\n          issuer: {\n            names: {\n              blockName: \"issuer\"\n            }\n          },\n          serialNumber: \"serialNumber\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for IssuerAndSerialNumber\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.issuer = new RelativeDistinguishedNames({\n        schema: asn1.result.issuer\n      });\n      this.serialNumber = asn1.result.serialNumber; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.issuer.toSchema(), this.serialNumber]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        issuer: this.issuer.toJSON(),\n        serialNumber: this.serialNumber.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"issuer\":\n          return new RelativeDistinguishedNames();\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        default:\n          throw new Error(\"Invalid member name for IssuerAndSerialNumber class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * IssuerAndSerialNumber ::= SEQUENCE {\r\n     *    issuer Name,\r\n     *    serialNumber CertificateSerialNumber }\r\n     *\r\n     * CertificateSerialNumber ::= INTEGER\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [issuer]\r\n       * @property {string} [serialNumber]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [RelativeDistinguishedNames.schema(names.issuer || {}), new asn1js.Integer({\n          name: names.serialNumber || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return IssuerAndSerialNumber;\n}(); //**************************************************************************************\n\n\nexport { IssuerAndSerialNumber as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/IssuerAndSerialNumber.js"],"names":["asn1js","getParametersValue","clearProps","RelativeDistinguishedNames","IssuerAndSerialNumber","parameters","issuer","defaultValues","serialNumber","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","toSchema","toJSON","memberName","Integer","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class IssuerAndSerialNumber\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerAndSerialNumber class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerAndSerialNumber.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerAndSerialNumber.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerAndSerialNumber class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * IssuerAndSerialNumber ::= SEQUENCE {\r\n\t *    issuer Name,\r\n\t *    serialNumber CertificateSerialNumber }\r\n\t *\r\n\t * CertificateSerialNumber ::= INTEGER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tRelativeDistinguishedNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuer\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerAndSerialNumber.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerAndSerialNumber\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\rkanthet\\\\Documents\\\\test_window_object\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\"; //**************************************************************************************\n\nexport var SignedCertificateTimestamp = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for SignedCertificateTimestamp class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function SignedCertificateTimestamp() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SignedCertificateTimestamp);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n    /**\n     * @type {ArrayBuffer}\n     * @desc logID\n     */\n\n    this.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n    /**\n     * @type {Date}\n     * @desc timestamp\n     */\n\n    this.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n    /**\n     * @type {ArrayBuffer}\n     * @desc extensions\n     */\n\n    this.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n    /**\n     * @type {string}\n     * @desc hashAlgorithm\n     */\n\n    this.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n    /**\n     * @type {string}\n     * @desc signatureAlgorithm\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n    /**\n     * @type {Object}\n     * @desc signature\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"stream\"\n\n    if (\"stream\" in parameters) this.fromStream(parameters.stream); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(SignedCertificateTimestamp, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      if (schema instanceof asn1js.RawData === false) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n      var seqStream = new SeqStream({\n        stream: new ByteStream({\n          buffer: schema.data\n        })\n      });\n      this.fromStream(seqStream);\n    } //**********************************************************************************\n\n    /**\n     * Convert SeqStream data into current class\n     * @param {!SeqStream} stream\n     */\n\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(stream) {\n      var blockLength = stream.getUint16();\n      this.version = stream.getBlock(1)[0];\n\n      if (this.version === 0) {\n        this.logID = new Uint8Array(stream.getBlock(32)).buffer.slice(0);\n        this.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8)); //region Extensions\n\n        var extensionsLength = stream.getUint16();\n        this.extensions = new Uint8Array(stream.getBlock(extensionsLength)).buffer.slice(0); //endregion\n        //region Hash algorithm\n\n        switch (stream.getBlock(1)[0]) {\n          case 0:\n            this.hashAlgorithm = \"none\";\n            break;\n\n          case 1:\n            this.hashAlgorithm = \"md5\";\n            break;\n\n          case 2:\n            this.hashAlgorithm = \"sha1\";\n            break;\n\n          case 3:\n            this.hashAlgorithm = \"sha224\";\n            break;\n\n          case 4:\n            this.hashAlgorithm = \"sha256\";\n            break;\n\n          case 5:\n            this.hashAlgorithm = \"sha384\";\n            break;\n\n          case 6:\n            this.hashAlgorithm = \"sha512\";\n            break;\n\n          default:\n            throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n        } //endregion\n        //region Signature algorithm\n\n\n        switch (stream.getBlock(1)[0]) {\n          case 0:\n            this.signatureAlgorithm = \"anonymous\";\n            break;\n\n          case 1:\n            this.signatureAlgorithm = \"rsa\";\n            break;\n\n          case 2:\n            this.signatureAlgorithm = \"dsa\";\n            break;\n\n          case 3:\n            this.signatureAlgorithm = \"ecdsa\";\n            break;\n\n          default:\n            throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n        } //endregion\n        //region Signature\n\n\n        var signatureLength = stream.getUint16();\n        var signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n        var asn1 = asn1js.fromBER(signatureData);\n        if (asn1.offset === -1) throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n        this.signature = asn1.result; //endregion\n\n        if (blockLength !== 47 + extensionsLength + signatureLength) throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n      }\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var stream = this.toStream();\n      return new asn1js.RawData({\n        data: stream.stream.buffer\n      });\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to SeqStream data\n     * @returns {SeqStream} SeqStream object\n     */\n\n  }, {\n    key: \"toStream\",\n    value: function toStream() {\n      var stream = new SeqStream();\n      stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n      stream.appendChar(this.version);\n      stream.appendView(new Uint8Array(this.logID));\n      var timeBuffer = new ArrayBuffer(8);\n      var timeView = new Uint8Array(timeBuffer);\n      var baseArray = utilToBase(this.timestamp.valueOf(), 8);\n      timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n      stream.appendView(timeView);\n      stream.appendUint16(this.extensions.byteLength);\n      if (this.extensions.byteLength) stream.appendView(new Uint8Array(this.extensions));\n\n      var _hashAlgorithm;\n\n      switch (this.hashAlgorithm.toLowerCase()) {\n        case \"none\":\n          _hashAlgorithm = 0;\n          break;\n\n        case \"md5\":\n          _hashAlgorithm = 1;\n          break;\n\n        case \"sha1\":\n          _hashAlgorithm = 2;\n          break;\n\n        case \"sha224\":\n          _hashAlgorithm = 3;\n          break;\n\n        case \"sha256\":\n          _hashAlgorithm = 4;\n          break;\n\n        case \"sha384\":\n          _hashAlgorithm = 5;\n          break;\n\n        case \"sha512\":\n          _hashAlgorithm = 6;\n          break;\n\n        default:\n          throw new Error(\"Incorrect data for hashAlgorithm: \".concat(this.hashAlgorithm));\n      }\n\n      stream.appendChar(_hashAlgorithm);\n\n      var _signatureAlgorithm;\n\n      switch (this.signatureAlgorithm.toLowerCase()) {\n        case \"anonymous\":\n          _signatureAlgorithm = 0;\n          break;\n\n        case \"rsa\":\n          _signatureAlgorithm = 1;\n          break;\n\n        case \"dsa\":\n          _signatureAlgorithm = 2;\n          break;\n\n        case \"ecdsa\":\n          _signatureAlgorithm = 3;\n          break;\n\n        default:\n          throw new Error(\"Incorrect data for signatureAlgorithm: \".concat(this.signatureAlgorithm));\n      }\n\n      stream.appendChar(_signatureAlgorithm);\n\n      var _signature = this.signature.toBER(false);\n\n      stream.appendUint16(_signature.byteLength);\n      stream.appendView(new Uint8Array(_signature));\n      return stream;\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        version: this.version,\n        logID: bufferToHexCodes(this.logID),\n        timestamp: this.timestamp,\n        extensions: bufferToHexCodes(this.extensions),\n        hashAlgorithm: this.hashAlgorithm,\n        signatureAlgorithm: this.signatureAlgorithm,\n        signature: this.signature.toJSON()\n      };\n    } //**********************************************************************************\n\n    /**\n     * Verify SignedCertificateTimestamp for specific input data\n     * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n     * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n     * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n     * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\n     * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\n     * @return {Promise<void>}\n     */\n\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(logs, data) {\n        var dataType,\n            logId,\n            publicKeyBase64,\n            publicKeyInfo,\n            stream,\n            _iterator,\n            _step,\n            log,\n            asn1,\n            timeBuffer,\n            timeView,\n            baseArray,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dataType = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;\n                //region Initial variables\n                logId = toBase64(arrayBufferToString(this.logID));\n                publicKeyBase64 = null;\n                stream = new SeqStream(); //endregion\n                //region Found and init public key\n\n                _iterator = _createForOfIteratorHelper(logs);\n                _context.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 14;\n                  break;\n                }\n\n                log = _step.value;\n\n                if (!(log.log_id === logId)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                publicKeyBase64 = log.key;\n                return _context.abrupt(\"break\", 14);\n\n              case 12:\n                _context.next = 7;\n                break;\n\n              case 14:\n                _context.next = 19;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](5);\n\n                _iterator.e(_context.t0);\n\n              case 19:\n                _context.prev = 19;\n\n                _iterator.f();\n\n                return _context.finish(19);\n\n              case 22:\n                if (!(publicKeyBase64 === null)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                throw new Error(\"Public key not found for CT with logId: \".concat(logId));\n\n              case 24:\n                asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\n\n                if (!(asn1.offset === -1)) {\n                  _context.next = 27;\n                  break;\n                }\n\n                throw new Error(\"Incorrect key value for CT Log with logId: \".concat(logId));\n\n              case 27:\n                publicKeyInfo = new PublicKeyInfo({\n                  schema: asn1.result\n                }); //endregion\n                //region Initialize signed data block\n\n                stream.appendChar(0x00); // sct_version\n\n                stream.appendChar(0x00); // signature_type = certificate_timestamp\n\n                timeBuffer = new ArrayBuffer(8);\n                timeView = new Uint8Array(timeBuffer);\n                baseArray = utilToBase(this.timestamp.valueOf(), 8);\n                timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n                stream.appendView(timeView);\n                stream.appendUint16(dataType);\n                if (dataType === 0) stream.appendUint24(data.byteLength);\n                stream.appendView(new Uint8Array(data));\n                stream.appendUint16(this.extensions.byteLength);\n                if (this.extensions.byteLength !== 0) stream.appendView(new Uint8Array(this.extensions)); //endregion\n                //region Perform verification\n\n                return _context.abrupt(\"return\", getEngine().subtle.verifyWithPublicKey(stream._stream._buffer.slice(0, stream._length), {\n                  valueBlock: {\n                    valueHex: this.signature.toBER(false)\n                  }\n                }, publicKeyInfo, {\n                  algorithmId: \"\"\n                }, \"SHA-256\"));\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 16, 19, 22]]);\n      }));\n\n      function verify(_x, _x2) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }() //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"logID\":\n        case \"extensions\":\n          return new ArrayBuffer(0);\n\n        case \"timestamp\":\n          return new Date(0);\n\n        case \"hashAlgorithm\":\n        case \"signatureAlgorithm\":\n          return \"\";\n\n        case \"signature\":\n          return new asn1js.Any();\n\n        default:\n          throw new Error(\"Invalid member name for SignedCertificateTimestamp class: \".concat(memberName));\n      }\n    }\n  }]);\n\n  return SignedCertificateTimestamp;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC6962\n */\n\nvar SignedCertificateTimestampList = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for SignedCertificateTimestampList class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function SignedCertificateTimestampList() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SignedCertificateTimestampList);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {Array.<SignedCertificateTimestamp>}\n     * @desc timestamps\n     */\n    this.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(SignedCertificateTimestampList, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Check the schema is valid\n      if (schema instanceof asn1js.OctetString === false) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\"); //endregion\n      //region Get internal properties from parsed schema\n\n      var seqStream = new SeqStream({\n        stream: new ByteStream({\n          buffer: schema.valueBlock.valueHex\n        })\n      });\n      var dataLength = seqStream.getUint16();\n      if (dataLength !== seqStream.length) throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\n      while (seqStream.length) {\n        this.timestamps.push(new SignedCertificateTimestamp({\n          stream: seqStream\n        }));\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Initial variables\n      var stream = new SeqStream();\n      var overallLength = 0;\n      var timestampsData = []; //endregion\n      //region Get overall length\n\n      var _iterator2 = _createForOfIteratorHelper(this.timestamps),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _timestamp = _step2.value;\n\n          var timestampStream = _timestamp.toStream();\n\n          timestampsData.push(timestampStream);\n          overallLength += timestampStream.stream.buffer.byteLength;\n        } //endregion\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      stream.appendUint16(overallLength); //region Set data from all timestamps\n\n      for (var _i = 0, _timestampsData = timestampsData; _i < _timestampsData.length; _i++) {\n        var timestamp = _timestampsData[_i];\n        stream.appendView(timestamp.stream.view);\n      } //endregion\n\n\n      return new asn1js.OctetString({\n        valueHex: stream.stream.buffer.slice(0)\n      });\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        timestamps: Array.from(this.timestamps, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"timestamps\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for SignedCertificateTimestampList class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"timestamps\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for SignedCertificateTimestampList class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * SignedCertificateTimestampList ::= OCTET STRING\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [optional]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      if (\"optional\" in names === false) names.optional = false;\n      return new asn1js.OctetString({\n        name: names.blockName || \"SignedCertificateTimestampList\",\n        optional: names.optional\n      });\n    }\n  }]);\n\n  return SignedCertificateTimestampList;\n}(); //**************************************************************************************\n\n/**\n * Verify SignedCertificateTimestamp for specific certificate content\n * @param {Certificate} certificate Certificate for which verification would be performed\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\n * @return {Array} Array of verification results\n */\n\n\nexport { SignedCertificateTimestampList as default };\nexport function verifySCTsForCertificate(_x3, _x4, _x5) {\n  return _verifySCTsForCertificate.apply(this, arguments);\n} //**********************************************************************************\n\nfunction _verifySCTsForCertificate() {\n  _verifySCTsForCertificate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(certificate, issuerCertificate, logs) {\n    var index,\n        parsedValue,\n        tbs,\n        issuerId,\n        stream,\n        preCert,\n        crypto,\n        i,\n        verifyArray,\n        _iterator3,\n        _step3,\n        timestamp,\n        verifyResult,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            index = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : -1;\n            //region Initial variables\n            parsedValue = null;\n            stream = new SeqStream();\n            //endregion\n            //region Get a \"crypto\" extension\n            crypto = getCrypto();\n\n            if (!(typeof crypto === \"undefined\")) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Promise.reject(\"Unable to create WebCrypto object\"));\n\n          case 6:\n            i = 0;\n\n          case 7:\n            if (!(i < certificate.extensions.length)) {\n              _context2.next = 19;\n              break;\n            }\n\n            _context2.t0 = certificate.extensions[i].extnID;\n            _context2.next = _context2.t0 === \"1.3.6.1.4.1.11129.2.4.2\" ? 11 : 16;\n            break;\n\n          case 11:\n            parsedValue = certificate.extensions[i].parsedValue;\n\n            if (!(parsedValue.timestamps.length === 0)) {\n              _context2.next = 14;\n              break;\n            }\n\n            throw new Error(\"Nothing to verify in the certificate\");\n\n          case 14:\n            certificate.extensions.splice(i, 1);\n            return _context2.abrupt(\"break\", 16);\n\n          case 16:\n            i++;\n            _context2.next = 7;\n            break;\n\n          case 19:\n            if (!(parsedValue === null)) {\n              _context2.next = 21;\n              break;\n            }\n\n            throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n\n          case 21:\n            //endregion\n            //region Prepare modifier TBS value\n            tbs = certificate.encodeTBS().toBER(false); //endregion\n            //region Initialize \"issuer_key_hash\" value\n\n            _context2.next = 24;\n            return crypto.digest({\n              name: \"SHA-256\"\n            }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n\n          case 24:\n            issuerId = _context2.sent;\n            //endregion\n            //region Make final \"PreCert\" value\n            stream.appendView(new Uint8Array(issuerId));\n            stream.appendUint24(tbs.byteLength);\n            stream.appendView(new Uint8Array(tbs));\n            preCert = stream._stream._buffer.slice(0, stream._length); //endregion\n            //region Call verification function for specified index\n\n            if (!(index === -1)) {\n              _context2.next = 51;\n              break;\n            }\n\n            verifyArray = [];\n            _iterator3 = _createForOfIteratorHelper(parsedValue.timestamps);\n            _context2.prev = 32;\n\n            _iterator3.s();\n\n          case 34:\n            if ((_step3 = _iterator3.n()).done) {\n              _context2.next = 42;\n              break;\n            }\n\n            timestamp = _step3.value;\n            _context2.next = 38;\n            return timestamp.verify(logs, preCert, 1);\n\n          case 38:\n            verifyResult = _context2.sent;\n            verifyArray.push(verifyResult);\n\n          case 40:\n            _context2.next = 34;\n            break;\n\n          case 42:\n            _context2.next = 47;\n            break;\n\n          case 44:\n            _context2.prev = 44;\n            _context2.t1 = _context2[\"catch\"](32);\n\n            _iterator3.e(_context2.t1);\n\n          case 47:\n            _context2.prev = 47;\n\n            _iterator3.f();\n\n            return _context2.finish(47);\n\n          case 50:\n            return _context2.abrupt(\"return\", verifyArray);\n\n          case 51:\n            if (index >= parsedValue.timestamps.length) index = parsedValue.timestamps.length - 1;\n            _context2.next = 54;\n            return parsedValue.timestamps[index].verify(logs, preCert, 1);\n\n          case 54:\n            _context2.t2 = _context2.sent;\n            return _context2.abrupt(\"return\", [_context2.t2]);\n\n          case 56:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[32, 44, 47, 50]]);\n  }));\n  return _verifySCTsForCertificate.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SignedCertificateTimestampList.js"],"names":["asn1js","getParametersValue","utilFromBase","utilToBase","bufferToHexCodes","toBase64","fromBase64","arrayBufferToString","stringToArrayBuffer","ByteStream","SeqStream","getCrypto","getEngine","PublicKeyInfo","SignedCertificateTimestamp","parameters","version","defaultValues","logID","timestamp","extensions","hashAlgorithm","signatureAlgorithm","signature","fromSchema","schema","fromStream","stream","RawData","Error","seqStream","buffer","data","blockLength","getUint16","getBlock","Uint8Array","slice","Date","extensionsLength","signatureLength","signatureData","asn1","fromBER","offset","result","toStream","appendUint16","byteLength","valueBeforeDecode","appendChar","appendView","timeBuffer","ArrayBuffer","timeView","baseArray","valueOf","set","_hashAlgorithm","toLowerCase","_signatureAlgorithm","_signature","toBER","toJSON","logs","dataType","logId","publicKeyBase64","log","log_id","key","publicKeyInfo","appendUint24","subtle","verifyWithPublicKey","_stream","_buffer","_length","valueBlock","valueHex","algorithmId","memberName","Any","SignedCertificateTimestampList","timestamps","OctetString","dataLength","length","push","overallLength","timestampsData","timestampStream","view","Array","from","element","memberValue","names","optional","name","blockName","verifySCTsForCertificate","certificate","issuerCertificate","index","parsedValue","crypto","Promise","reject","i","extnID","splice","tbs","encodeTBS","digest","subjectPublicKeyInfo","toSchema","issuerId","preCert","verifyArray","verify","verifyResult"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\n//**************************************************************************************\nexport class SignedCertificateTimestamp\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestamp class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc logID\n\t\t */\n\t\tthis.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n\t\t/**\n\t\t * @type {Date}\n\t\t * @desc timestamp\n\t\t */\n\t\tthis.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc extensions\n\t\t */\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc hashAlgorithm\n\t\t */\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {Object}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"stream\"\n\t\tif(\"stream\" in parameters)\n\t\t\tthis.fromStream(parameters.stream);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"logID\":\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"timestamp\":\n\t\t\t\treturn new Date(0);\n\t\t\tcase \"hashAlgorithm\":\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"signature\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\tif((schema instanceof asn1js.RawData) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n\t\t\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.data\n\t\t\t})\n\t\t});\n\t\t\n\t\tthis.fromStream(seqStream);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert SeqStream data into current class\n\t * @param {!SeqStream} stream\n\t */\n\tfromStream(stream)\n\t{\n\t\tconst blockLength = stream.getUint16();\n\t\t\n\t\tthis.version = (stream.getBlock(1))[0];\n\t\t\n\t\tif(this.version === 0)\n\t\t{\n\t\t\tthis.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n\t\t\tthis.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n\t\t\t\n\t\t\t//region Extensions\n\t\t\tconst extensionsLength = stream.getUint16();\n\t\t\tthis.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Hash algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature\n\t\t\tconst signatureLength = stream.getUint16();\n\t\t\tconst signatureData = (new Uint8Array(stream.getBlock(signatureLength))).buffer.slice(0);\n\t\t\t\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\n\t\t\tif(asn1.offset === (-1))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t\n\t\t\tthis.signature = asn1.result;\n\t\t\t//endregion\n\t\t\t\n\t\t\tif(blockLength !== (47 + extensionsLength + signatureLength))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst stream = this.toStream();\n\t\t\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to SeqStream data\n\t * @returns {SeqStream} SeqStream object\n\t */\n\ttoStream()\n\t{\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n\t\tstream.appendChar(this.version);\n\t\tstream.appendView(new Uint8Array(this.logID));\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t\n\t\tlet _hashAlgorithm;\n\t\t\n\t\tswitch(this.hashAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"none\":\n\t\t\t\t_hashAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"md5\":\n\t\t\t\t_hashAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"sha1\":\n\t\t\t\t_hashAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"sha224\":\n\t\t\t\t_hashAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tcase \"sha256\":\n\t\t\t\t_hashAlgorithm = 4;\n\t\t\t\tbreak;\n\t\t\tcase \"sha384\":\n\t\t\t\t_hashAlgorithm = 5;\n\t\t\t\tbreak;\n\t\t\tcase \"sha512\":\n\t\t\t\t_hashAlgorithm = 6;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_hashAlgorithm);\n\t\t\n\t\tlet _signatureAlgorithm;\n\t\t\n\t\tswitch(this.signatureAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"anonymous\":\n\t\t\t\t_signatureAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"rsa\":\n\t\t\t\t_signatureAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"dsa\":\n\t\t\t\t_signatureAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"ecdsa\":\n\t\t\t\t_signatureAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_signatureAlgorithm);\n\t\t\n\t\tconst _signature = this.signature.toBER(false);\n\t\t\n\t\tstream.appendUint16(_signature.byteLength);\n\t\tstream.appendView(new Uint8Array(_signature));\n\t\t\n\t\treturn stream;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\tlogID: bufferToHexCodes(this.logID),\n\t\t\ttimestamp: this.timestamp,\n\t\t\textensions: bufferToHexCodes(this.extensions),\n\t\t\thashAlgorithm: this.hashAlgorithm,\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\n\t\t\tsignature: this.signature.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Verify SignedCertificateTimestamp for specific input data\n\t * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n\t * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n\t * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n\t * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\n\t * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\n\t * @return {Promise<void>}\n\t */\n\tasync verify(logs, data, dataType = 0)\n\t{\n\t\t//region Initial variables\n\t\tlet logId = toBase64(arrayBufferToString(this.logID));\n\t\t\n\t\tlet publicKeyBase64 = null;\n\t\tlet publicKeyInfo;\n\t\t\n\t\tlet stream = new SeqStream();\n\t\t//endregion\n\t\t\n\t\t//region Found and init public key\n\t\tfor(const log of logs)\n\t\t{\n\t\t\tif(log.log_id === logId)\n\t\t\t{\n\t\t\t\tpublicKeyBase64 = log.key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(publicKeyBase64 === null)\n\t\t\tthrow new Error(`Public key not found for CT with logId: ${logId}`);\n\t\t\n\t\tconst asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\n\t\tif(asn1.offset === (-1))\n\t\t\tthrow new Error(`Incorrect key value for CT Log with logId: ${logId}`);\n\t\t\n\t\tpublicKeyInfo = new PublicKeyInfo({ schema: asn1.result });\n\t\t//endregion\n\t\t\n\t\t//region Initialize signed data block\n\t\tstream.appendChar(0x00); // sct_version\n\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\t\n\t\tstream.appendUint16(dataType);\n\t\t\n\t\tif(dataType === 0)\n\t\t\tstream.appendUint24(data.byteLength);\n\t\t\n\t\tstream.appendView(new Uint8Array(data));\n\t\t\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength !== 0)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t//endregion\n\t\t\n\t\t//region Perform verification\n\t\treturn getEngine().subtle.verifyWithPublicKey(\n\t\t\tstream._stream._buffer.slice(0, stream._length),\n\t\t\t{ valueBlock: { valueHex: this.signature.toBER(false) } },\n\t\t\tpublicKeyInfo,\n\t\t\t{ algorithmId: \"\" },\n\t\t\t\"SHA-256\"\n\t\t);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC6962\n */\nexport default class SignedCertificateTimestampList\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestampList class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array.<SignedCertificateTimestamp>}\n\t\t * @desc timestamps\n\t\t */\n\t\tthis.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * SignedCertificateTimestampList ::= OCTET STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [optional]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\tif((\"optional\" in names) === false)\n\t\t\tnames.optional = false;\n\t\t\n\t\treturn (new asn1js.OctetString({\n\t\t\tname: (names.blockName || \"SignedCertificateTimestampList\"),\n\t\t\toptional: names.optional\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif((schema instanceof asn1js.OctetString) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.valueBlock.valueHex\n\t\t\t})\n\t\t});\n\t\t\n\t\tlet dataLength = seqStream.getUint16();\n\t\tif(dataLength !== seqStream.length)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t\n\t\twhile(seqStream.length)\n\t\t\tthis.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Initial variables\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tlet overallLength = 0;\n\t\t\n\t\tconst timestampsData = [];\n\t\t//endregion\n\t\t\n\t\t//region Get overall length\n\t\tfor(const timestamp of this.timestamps)\n\t\t{\n\t\t\tconst timestampStream = timestamp.toStream();\n\t\t\ttimestampsData.push(timestampStream);\n\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\n\t\t}\n\t\t//endregion\n\t\t\n\t\tstream.appendUint16(overallLength);\n\t\t\n\t\t//region Set data from all timestamps\n\t\tfor(const timestamp of timestampsData)\n\t\t\tstream.appendView(timestamp.stream.view);\n\t\t//endregion\n\t\t\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Verify SignedCertificateTimestamp for specific certificate content\n * @param {Certificate} certificate Certificate for which verification would be performed\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\n * @return {Array} Array of verification results\n */\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1))\n{\n\t//region Initial variables\n\tlet parsedValue = null;\n\tlet tbs;\n\tlet issuerId;\n\t\n\tconst stream = new SeqStream();\n\t\n\tlet preCert;\n\t//endregion\n\t\n\t//region Get a \"crypto\" extension\n\tconst crypto = getCrypto();\n\tif(typeof crypto === \"undefined\")\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\n\t//endregion\n\t\n\t//region Remove certificate extension\n\tfor(let i = 0; i < certificate.extensions.length; i++)\n\t{\n\t\tswitch(certificate.extensions[i].extnID)\n\t\t{\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\n\t\t\t\t{\n\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\n\t\t\t\t\t\n\t\t\t\t\tif(parsedValue.timestamps.length === 0)\n\t\t\t\t\t\tthrow new Error(\"Nothing to verify in the certificate\");\n\t\t\t\t\t\n\t\t\t\t\tcertificate.extensions.splice(i, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\t//endregion\n\t\n\t//region Check we do have what to verify\n\tif(parsedValue === null)\n\t\tthrow new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n\t//endregion\n\t\n\t//region Prepare modifier TBS value\n\ttbs = certificate.encodeTBS().toBER(false);\n\t//endregion\n\t\n\t//region Initialize \"issuer_key_hash\" value\n\tissuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n\t//endregion\n\t\n\t//region Make final \"PreCert\" value\n\tstream.appendView(new Uint8Array(issuerId));\n\tstream.appendUint24(tbs.byteLength);\n\tstream.appendView(new Uint8Array(tbs));\n\t\n\tpreCert = stream._stream._buffer.slice(0, stream._length);\n\t//endregion\n\t\n\t//region Call verification function for specified index\n\tif(index === (-1))\n\t{\n\t\tconst verifyArray = [];\n\t\t\n\t\tfor(const timestamp of parsedValue.timestamps)\n\t\t{\n\t\t\tconst verifyResult = await timestamp.verify(logs, preCert, 1);\n\t\t\tverifyArray.push(verifyResult);\n\t\t}\n\t\t\n\t\treturn verifyArray;\n\t}\n\t\n\tif(index >= parsedValue.timestamps.length)\n\t\tindex = (parsedValue.timestamps.length - 1);\n\t\n\treturn [await parsedValue.timestamps[index].verify(logs, preCert, 1)];\n\t//endregion\n}\n//**********************************************************************************\n"]},"metadata":{},"sourceType":"module"}
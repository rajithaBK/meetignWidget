{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/freeze\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _eventsScope = _interopRequireDefault(require(\"../common/events/events-scope\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n  * Meeting - network quality event\n  * Emitted on each interval of retrieving stats Analyzer data\n  * @event network:quality\n  * @type {Object}\n  * @property {string} mediaType {video|audio}\n  * @property {number} networkQualityScore - value determined in determineUplinkNetworkQuality\n  * @memberof NetworkQualityMonitor\n  */\n\n/**\n * NetworkQualityMonitor class that will emit events based on detected quality\n *\n * @class NetworkQualityMonitor\n * @extends {EventsScope}\n */\n\n\nvar NetworkQualityMonitor = /*#__PURE__*/function (_EventsScope) {\n  (0, _inherits2.default)(NetworkQualityMonitor, _EventsScope);\n\n  var _super = _createSuper(NetworkQualityMonitor);\n  /**\n   * Creates a new instance of NetworkQualityMonitor\n   * @constructor\n   * @public\n   * @param {Object} config\n   * @property {Object} indicatorTypes - network properties used to evaluate network quality used as constants\n   * @property {Object} frequencyTypes - frequency properties used as constants {uplink|send} {downlink|receive}\n   * @property {number} networkQualityScore  - 0|1 1 is acceptable 0 is bad/unknown\n   * @property {Object} networkQualityStatus - hash object based on indicatorTypes and frequencyTypes\n   * @property {string} mediaType - audio|video\n   */\n\n\n  function NetworkQualityMonitor(config) {\n    var _this$frequencyTypes$;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, NetworkQualityMonitor);\n    _this = _super.call(this);\n    _this.config = config;\n    _this.indicatorTypes = (0, _freeze.default)({\n      PACKETLOSS: 'packetLoss',\n      LATENCY: 'latency',\n      JITTER: 'jitter'\n    });\n    _this.frequencyTypes = (0, _freeze.default)({\n      UPLINK: 'uplink',\n      DOWNLINK: 'downlink'\n    });\n    _this.networkQualityScore = 1;\n    _this.networkQualityStatus = (0, _defineProperty2.default)({}, _this.frequencyTypes.UPLINK, (_this$frequencyTypes$ = {}, (0, _defineProperty2.default)(_this$frequencyTypes$, _constants.STATS.VIDEO_CORRELATE, {}), (0, _defineProperty2.default)(_this$frequencyTypes$, _constants.STATS.AUDIO_CORRELATE, {}), (0, _defineProperty2.default)(_this$frequencyTypes$, _constants.STATS.SHARE_CORRELATE, {}), _this$frequencyTypes$));\n    _this.mediaType = null;\n    return _this;\n  }\n  /**\n   * emits NETWORK_QUALITY event on meeting with payload of media type and uplinkNetworkQuality score\n   *\n   * @memberof NetworkQualityMonitor\n   * @returns {void}\n   */\n\n\n  (0, _createClass2.default)(NetworkQualityMonitor, [{\n    key: \"emitNetworkQuality\",\n    value: function emitNetworkQuality() {\n      this.emit({\n        file: 'networkQualityMonitor',\n        function: 'emitNetworkQuality'\n      }, _constants.EVENT_TRIGGERS.NETWORK_QUALITY, {\n        mediaType: this.mediaType,\n        networkQualityScore: this.networkQualityScore\n      });\n    }\n    /**\n     * invokes emitNetworkQuality method resets values back to default\n     * @returns {void}\n     * @memberof NetworkQualityMonitor\n     */\n\n  }, {\n    key: \"updateNetworkQualityStatus\",\n    value: function updateNetworkQualityStatus() {\n      this.emitNetworkQuality(); // reset values\n\n      this.networkQualityScore = 1;\n      this.mediaType = null;\n    }\n    /**\n     * filter data to determine uplink network quality, invoked on same interval as stats analyzer remote-inbout-rtp\n     * @param {Object} configObj\n     * @param {string} configObj.mediaType {audio|video}\n     * @param {RTCStats} configObj.remoteRtpResults RTC stats remote obj\n     * @param {Object} configObj.statsAnalyzerCurrentStats statsResults\n     * @returns {void}\n     * @public\n     * @memberof NetworkQualityMonitor\n     */\n\n  }, {\n    key: \"determineUplinkNetworkQuality\",\n    value: function determineUplinkNetworkQuality(_ref) {\n      var _this2 = this;\n\n      var mediaType = _ref.mediaType,\n          remoteRtpResults = _ref.remoteRtpResults,\n          statsAnalyzerCurrentStats = _ref.statsAnalyzerCurrentStats;\n      var roundTripTimeInMilliseconds = remoteRtpResults.roundTripTime * 1000;\n      var jitterInMilliseconds = remoteRtpResults.jitter * 1000;\n      var currentPacketLossRatio = statsAnalyzerCurrentStats[mediaType].send.currentPacketLossRatio;\n      this.mediaType = mediaType;\n      var _this$indicatorTypes = this.indicatorTypes,\n          JITTER = _this$indicatorTypes.JITTER,\n          PACKETLOSS = _this$indicatorTypes.PACKETLOSS,\n          LATENCY = _this$indicatorTypes.LATENCY;\n      var UPLINK = this.frequencyTypes.UPLINK;\n      /**\n       * determines if packetLoss ratio is over threshold set in config\n       * sets networkQualityScore to 0 if over threshold\n       * @returns {boolean}\n       */\n\n      var determinePacketLoss = function determinePacketLoss() {\n        if (currentPacketLossRatio > _this2.config.videoPacketLossRatioThreshold) {\n          _this2.networkQualityScore = 0;\n          return false;\n        }\n\n        return true;\n      };\n      /**\n       * determines if round trip time value is over threshold set in config\n       * sets networkQualityScore to 0 if over threshold\n       * @returns {boolean}\n       */\n\n\n      var determineLatency = function determineLatency() {\n        if (roundTripTimeInMilliseconds > _this2.config.rttThreshold) {\n          _this2.networkQualityScore = 0;\n          return false;\n        }\n\n        return true;\n      };\n      /**\n       * determines if jitter value is over threshold in config\n       * sets networkQualityScore to 0 if over threshold\n       * @returns {boolean}\n       */\n\n\n      var deterMineJitter = function deterMineJitter() {\n        if (jitterInMilliseconds > _this2.config.jitterThreshold) {\n          _this2.networkQualityScore = 0;\n          return false;\n        }\n\n        return true;\n      };\n      /**\n       * returns null if val is specifically undefined\n       * @param {(number|undefined)} value\n       * @returns {(number|null)}\n       */\n\n\n      var determineIfUndefined = function determineIfUndefined(value) {\n        return typeof value === 'undefined' ? null : value;\n      };\n      /**\n       * Values for some browsers specifically Safari will be undefined we explicitly set to null\n       * https://bugs.webkit.org/show_bug.cgi?id=206645\n       * https://bugs.webkit.org/show_bug.cgi?id=212668\n       */\n      // PACKET LOSS\n\n\n      this.networkQualityStatus[UPLINK][mediaType][PACKETLOSS] = {\n        acceptable: determinePacketLoss(),\n        value: determineIfUndefined(currentPacketLossRatio)\n      }; // LATENCY measured in Round trip time\n\n      this.networkQualityStatus[UPLINK][mediaType][LATENCY] = {\n        acceptable: determineLatency(),\n        value: determineIfUndefined(remoteRtpResults.roundTripTime)\n      }; // JITTER\n\n      this.networkQualityStatus[UPLINK][mediaType][JITTER] = {\n        acceptable: deterMineJitter(),\n        value: determineIfUndefined(remoteRtpResults.jitter)\n      };\n      this.updateNetworkQualityStatus();\n    }\n    /**\n     * Get the current status of network quaility object - networkQualityStatus\n     * @returns {Object}\n     * @public\n     */\n\n  }, {\n    key: \"networkQualityStats\",\n    get: function get() {\n      var UPLINK = this.frequencyTypes.UPLINK;\n      return this.networkQualityStatus[UPLINK];\n    }\n  }]);\n  return NetworkQualityMonitor;\n}(_eventsScope.default);\n\nexports.default = NetworkQualityMonitor;","map":{"version":3,"mappings":"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","names":["NetworkQualityMonitor","config","_this","indicatorTypes","PACKETLOSS","LATENCY","JITTER","frequencyTypes","UPLINK","DOWNLINK","networkQualityScore","networkQualityStatus","STATS","VIDEO_CORRELATE","AUDIO_CORRELATE","SHARE_CORRELATE","mediaType","emit","file","function","EVENT_TRIGGERS","NETWORK_QUALITY","emitNetworkQuality","remoteRtpResults","statsAnalyzerCurrentStats","roundTripTimeInMilliseconds","roundTripTime","jitterInMilliseconds","jitter","currentPacketLossRatio","send","determinePacketLoss","_this2","videoPacketLossRatioThreshold","determineLatency","rttThreshold","deterMineJitter","jitterThreshold","determineIfUndefined","value","acceptable","updateNetworkQualityStatus","EventsScope"],"sources":["index.js"],"sourcesContent":["import EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS, STATS} from '../constants';\n\n\n/**\n  * Meeting - network quality event\n  * Emitted on each interval of retrieving stats Analyzer data\n  * @event network:quality\n  * @type {Object}\n  * @property {string} mediaType {video|audio}\n  * @property {number} networkQualityScore - value determined in determineUplinkNetworkQuality\n  * @memberof NetworkQualityMonitor\n  */\n/**\n * NetworkQualityMonitor class that will emit events based on detected quality\n *\n * @class NetworkQualityMonitor\n * @extends {EventsScope}\n */\nexport default class NetworkQualityMonitor extends EventsScope {\n  /**\n   * Creates a new instance of NetworkQualityMonitor\n   * @constructor\n   * @public\n   * @param {Object} config\n   * @property {Object} indicatorTypes - network properties used to evaluate network quality used as constants\n   * @property {Object} frequencyTypes - frequency properties used as constants {uplink|send} {downlink|receive}\n   * @property {number} networkQualityScore  - 0|1 1 is acceptable 0 is bad/unknown\n   * @property {Object} networkQualityStatus - hash object based on indicatorTypes and frequencyTypes\n   * @property {string} mediaType - audio|video\n   */\n  constructor(config) {\n    super();\n    this.config = config;\n    this.indicatorTypes = Object.freeze({\n      PACKETLOSS: 'packetLoss',\n      LATENCY: 'latency',\n      JITTER: 'jitter'\n    });\n    this.frequencyTypes = Object.freeze({\n      UPLINK: 'uplink',\n      DOWNLINK: 'downlink'\n    });\n    this.networkQualityScore = 1;\n    this.networkQualityStatus = {\n      [this.frequencyTypes.UPLINK]: {\n        [STATS.VIDEO_CORRELATE]: {},\n        [STATS.AUDIO_CORRELATE]: {},\n        [STATS.SHARE_CORRELATE]: {}\n      }\n    };\n    this.mediaType = null;\n  }\n\n  /**\n   * emits NETWORK_QUALITY event on meeting with payload of media type and uplinkNetworkQuality score\n   *\n   * @memberof NetworkQualityMonitor\n   * @returns {void}\n   */\n  emitNetworkQuality() {\n    this.emit(\n      {\n        file: 'networkQualityMonitor',\n        function: 'emitNetworkQuality'\n      },\n      EVENT_TRIGGERS.NETWORK_QUALITY,\n      {\n        mediaType: this.mediaType,\n        networkQualityScore: this.networkQualityScore\n      }\n    );\n  }\n\n  /**\n   * invokes emitNetworkQuality method resets values back to default\n   * @returns {void}\n   * @memberof NetworkQualityMonitor\n   */\n  updateNetworkQualityStatus() {\n    this.emitNetworkQuality();\n\n    // reset values\n    this.networkQualityScore = 1;\n    this.mediaType = null;\n  }\n\n\n  /**\n   * filter data to determine uplink network quality, invoked on same interval as stats analyzer remote-inbout-rtp\n   * @param {Object} configObj\n   * @param {string} configObj.mediaType {audio|video}\n   * @param {RTCStats} configObj.remoteRtpResults RTC stats remote obj\n   * @param {Object} configObj.statsAnalyzerCurrentStats statsResults\n   * @returns {void}\n   * @public\n   * @memberof NetworkQualityMonitor\n   */\n  determineUplinkNetworkQuality({mediaType, remoteRtpResults, statsAnalyzerCurrentStats}) {\n    const roundTripTimeInMilliseconds = remoteRtpResults.roundTripTime * 1000;\n    const jitterInMilliseconds = remoteRtpResults.jitter * 1000;\n    const {currentPacketLossRatio} = statsAnalyzerCurrentStats[mediaType].send;\n\n    this.mediaType = mediaType;\n\n    const {JITTER, PACKETLOSS, LATENCY} = this.indicatorTypes;\n    const {UPLINK} = this.frequencyTypes;\n\n    /**\n     * determines if packetLoss ratio is over threshold set in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const determinePacketLoss = () => {\n      if (currentPacketLossRatio >\n        this.config.videoPacketLossRatioThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * determines if round trip time value is over threshold set in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const determineLatency = () => {\n      if (roundTripTimeInMilliseconds > this.config.rttThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * determines if jitter value is over threshold in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const deterMineJitter = () => {\n      if (jitterInMilliseconds > this.config.jitterThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * returns null if val is specifically undefined\n     * @param {(number|undefined)} value\n     * @returns {(number|null)}\n     */\n    const determineIfUndefined = (value) => (typeof value === 'undefined' ? null : value);\n\n    /**\n     * Values for some browsers specifically Safari will be undefined we explicitly set to null\n     * https://bugs.webkit.org/show_bug.cgi?id=206645\n     * https://bugs.webkit.org/show_bug.cgi?id=212668\n     */\n    // PACKET LOSS\n    this.networkQualityStatus[UPLINK][mediaType][PACKETLOSS] = {\n      acceptable: determinePacketLoss(),\n      value: determineIfUndefined(currentPacketLossRatio)\n    };\n\n\n    // LATENCY measured in Round trip time\n    this.networkQualityStatus[UPLINK][mediaType][LATENCY] = {\n      acceptable: determineLatency(),\n      value: determineIfUndefined(remoteRtpResults.roundTripTime)\n    };\n\n    // JITTER\n    this.networkQualityStatus[UPLINK][mediaType][JITTER] = {\n      acceptable: deterMineJitter(),\n      value: determineIfUndefined(remoteRtpResults.jitter)\n    };\n\n    this.updateNetworkQualityStatus();\n  }\n\n  /**\n   * Get the current status of network quaility object - networkQualityStatus\n   * @returns {Object}\n   * @public\n   */\n  get networkQualityStats() {\n    const {UPLINK} = this.frequencyTypes;\n\n    return this.networkQualityStatus[UPLINK];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
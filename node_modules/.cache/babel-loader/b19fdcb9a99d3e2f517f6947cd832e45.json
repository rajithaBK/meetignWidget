{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161. Accuracy represents the time deviation around the UTC time contained in GeneralizedTime.\r\n */\n\nvar Accuracy = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Accuracy class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function Accuracy() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Accuracy);\n\n    //region Internal properties of the object\n    if (\"seconds\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc seconds\r\n       */\n      this.seconds = getParametersValue(parameters, \"seconds\", Accuracy.defaultValues(\"seconds\"));\n    if (\"millis\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc millis\r\n       */\n      this.millis = getParametersValue(parameters, \"millis\", Accuracy.defaultValues(\"millis\"));\n    if (\"micros\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc micros\r\n       */\n      this.micros = getParametersValue(parameters, \"micros\", Accuracy.defaultValues(\"micros\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(Accuracy, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"seconds\", \"millis\", \"micros\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Accuracy.schema({\n        names: {\n          seconds: \"seconds\",\n          millis: \"millis\",\n          micros: \"micros\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Accuracy\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"seconds\" in asn1.result) this.seconds = asn1.result.seconds.valueBlock.valueDec;\n\n      if (\"millis\" in asn1.result) {\n        var intMillis = new asn1js.Integer({\n          valueHex: asn1.result.millis.valueBlock.valueHex\n        });\n        this.millis = intMillis.valueBlock.valueDec;\n      }\n\n      if (\"micros\" in asn1.result) {\n        var intMicros = new asn1js.Integer({\n          valueHex: asn1.result.micros.valueBlock.valueHex\n        });\n        this.micros = intMicros.valueBlock.valueDec;\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array of output sequence\n      var outputArray = [];\n      if (\"seconds\" in this) outputArray.push(new asn1js.Integer({\n        value: this.seconds\n      }));\n\n      if (\"millis\" in this) {\n        var intMillis = new asn1js.Integer({\n          value: this.millis\n        });\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          valueHex: intMillis.valueBlock.valueHex\n        }));\n      }\n\n      if (\"micros\" in this) {\n        var intMicros = new asn1js.Integer({\n          value: this.micros\n        });\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          valueHex: intMicros.valueBlock.valueHex\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {};\n      if (\"seconds\" in this) _object.seconds = this.seconds;\n      if (\"millis\" in this) _object.millis = this.millis;\n      if (\"micros\" in this) _object.micros = this.micros;\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"seconds\":\n        case \"millis\":\n        case \"micros\":\n          return 0;\n\n        default:\n          throw new Error(\"Invalid member name for Accuracy class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"seconds\":\n        case \"millis\":\n        case \"micros\":\n          return memberValue === Accuracy.defaultValues(memberName);\n\n        default:\n          throw new Error(\"Invalid member name for Accuracy class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * Accuracy ::= SEQUENCE {\r\n     *    seconds        INTEGER              OPTIONAL,\r\n     *    millis     [0] INTEGER  (1..999)    OPTIONAL,\r\n     *    micros     [1] INTEGER  (1..999)    OPTIONAL  }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [seconds]\r\n       * @property {string} [millis]\r\n       * @property {string} [micros]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        optional: true,\n        value: [new asn1js.Integer({\n          optional: true,\n          name: names.seconds || \"\"\n        }), new asn1js.Primitive({\n          name: names.millis || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          }\n        }), new asn1js.Primitive({\n          name: names.micros || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          }\n        })]\n      });\n    }\n  }]);\n\n  return Accuracy;\n}(); //**************************************************************************************\n\n\nexport { Accuracy as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Accuracy.js"],"names":["asn1js","getParametersValue","clearProps","Accuracy","parameters","seconds","defaultValues","millis","micros","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","valueDec","intMillis","Integer","valueHex","intMicros","outputArray","push","value","Primitive","idBlock","tagClass","tagNumber","Sequence","_object","memberName","memberValue","name","blockName","optional"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C,C,CACA;;AACA;AACA;AACA;;IACqBC,Q;AAEpB;;AACA;AACD;AACA;AACA;AACA;AACC,sBACA;AAAA,QADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA,QAAG,aAAaA,UAAhB;AACC;AACH;AACA;AACA;AACG,WAAKC,OAAL,GAAeJ,kBAAkB,CAACG,UAAD,EAAa,SAAb,EAAwBD,QAAQ,CAACG,aAAT,CAAuB,SAAvB,CAAxB,CAAjC;AAED,QAAG,YAAYF,UAAf;AACC;AACH;AACA;AACA;AACG,WAAKG,MAAL,GAAcN,kBAAkB,CAACG,UAAD,EAAa,QAAb,EAAuBD,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAvB,CAAhC;AAED,QAAG,YAAYF,UAAf;AACC;AACH;AACA;AACA;AACG,WAAKI,MAAL,GAAcP,kBAAkB,CAACG,UAAD,EAAa,QAAb,EAAuBD,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAvB,CAAhC,CArBF,CAsBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,UAAU,CAACM,MAA3B,EA1BF,CA2BC;AACA,G,CACD;;AACA;AACD;AACA;AACA;;;;;WAoFC;;AACA;AACD;AACA;AACA;AACC,wBAAWA,MAAX,EACA;AACC;AACAR,MAAAA,UAAU,CAACQ,MAAD,EAAS,CAClB,SADkB,EAElB,QAFkB,EAGlB,QAHkB,CAAT,CAAV,CAFD,CAOC;AAEA;;AACA,UAAMC,IAAI,GAAGX,MAAM,CAACY,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZP,QAAQ,CAACO,MAAT,CAAgB;AACfG,QAAAA,KAAK,EAAE;AACNR,UAAAA,OAAO,EAAE,SADH;AAENE,UAAAA,MAAM,EAAE,QAFF;AAGNC,UAAAA,MAAM,EAAE;AAHF;AADQ,OAAhB,CAFY,CAAb;AAWA,UAAGG,IAAI,CAACG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN,CAtBF,CAuBC;AAEA;;AACA,UAAG,aAAaJ,IAAI,CAACK,MAArB,EACC,KAAKX,OAAL,GAAeM,IAAI,CAACK,MAAL,CAAYX,OAAZ,CAAoBY,UAApB,CAA+BC,QAA9C;;AAED,UAAG,YAAYP,IAAI,CAACK,MAApB,EACA;AACC,YAAMG,SAAS,GAAG,IAAInB,MAAM,CAACoB,OAAX,CAAmB;AAAEC,UAAAA,QAAQ,EAAEV,IAAI,CAACK,MAAL,CAAYT,MAAZ,CAAmBU,UAAnB,CAA8BI;AAA1C,SAAnB,CAAlB;AACA,aAAKd,MAAL,GAAcY,SAAS,CAACF,UAAV,CAAqBC,QAAnC;AACA;;AAED,UAAG,YAAYP,IAAI,CAACK,MAApB,EACA;AACC,YAAMM,SAAS,GAAG,IAAItB,MAAM,CAACoB,OAAX,CAAmB;AAAEC,UAAAA,QAAQ,EAAEV,IAAI,CAACK,MAAL,CAAYR,MAAZ,CAAmBS,UAAnB,CAA8BI;AAA1C,SAAnB,CAAlB;AACA,aAAKb,MAAL,GAAcc,SAAS,CAACL,UAAV,CAAqBC,QAAnC;AACA,OAvCF,CAwCC;;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,oBACA;AACC;AACA,UAAMK,WAAW,GAAG,EAApB;AAEA,UAAG,aAAa,IAAhB,EACCA,WAAW,CAACC,IAAZ,CAAiB,IAAIxB,MAAM,CAACoB,OAAX,CAAmB;AAAEK,QAAAA,KAAK,EAAE,KAAKpB;AAAd,OAAnB,CAAjB;;AAED,UAAG,YAAY,IAAf,EACA;AACC,YAAMc,SAAS,GAAG,IAAInB,MAAM,CAACoB,OAAX,CAAmB;AAAEK,UAAAA,KAAK,EAAE,KAAKlB;AAAd,SAAnB,CAAlB;AAEAgB,QAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAIxB,MAAM,CAAC0B,SAAX,CAAqB;AACrCC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCR,UAAAA,QAAQ,EAAEF,SAAS,CAACF,UAAV,CAAqBI;AALM,SAArB,CAAjB;AAOA;;AAED,UAAG,YAAY,IAAf,EACA;AACC,YAAMC,SAAS,GAAG,IAAItB,MAAM,CAACoB,OAAX,CAAmB;AAAEK,UAAAA,KAAK,EAAE,KAAKjB;AAAd,SAAnB,CAAlB;AAEAe,QAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAIxB,MAAM,CAAC0B,SAAX,CAAqB;AACrCC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCR,UAAAA,QAAQ,EAAEC,SAAS,CAACL,UAAV,CAAqBI;AALM,SAArB,CAAjB;AAOA,OA/BF,CAgCC;AAEA;;;AACA,aAAQ,IAAIrB,MAAM,CAAC8B,QAAX,CAAoB;AAC3BL,QAAAA,KAAK,EAAEF;AADoB,OAApB,CAAR,CAnCD,CAsCC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBACA;AACC,UAAMQ,OAAO,GAAG,EAAhB;AAEA,UAAG,aAAa,IAAhB,EACCA,OAAO,CAAC1B,OAAR,GAAkB,KAAKA,OAAvB;AAED,UAAG,YAAY,IAAf,EACC0B,OAAO,CAACxB,MAAR,GAAiB,KAAKA,MAAtB;AAED,UAAG,YAAY,IAAf,EACCwB,OAAO,CAACvB,MAAR,GAAiB,KAAKA,MAAtB;AAED,aAAOuB,OAAP;AACA,K,CACD;;;;WArMA,uBAAqBC,UAArB,EACA;AACC,cAAOA,UAAP;AAEC,aAAK,SAAL;AACA,aAAK,QAAL;AACA,aAAK,QAAL;AACC,iBAAO,CAAP;;AACD;AACC,gBAAM,IAAIjB,KAAJ,mDAAqDiB,UAArD,EAAN;AAPF;AASA,K,CACD;;AACA;AACD;AACA;AACA;AACA;;;;WACC,4BAA0BA,UAA1B,EAAsCC,WAAtC,EACA;AACC,cAAOD,UAAP;AAEC,aAAK,SAAL;AACA,aAAK,QAAL;AACA,aAAK,QAAL;AACC,iBAAQC,WAAW,KAAK9B,QAAQ,CAACG,aAAT,CAAuB0B,UAAvB,CAAxB;;AACD;AACC,gBAAM,IAAIjB,KAAJ,mDAAqDiB,UAArD,EAAN;AAPF;AASA,K,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBACA;AAAA,UADc5B,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAMS,KAAK,GAAGZ,kBAAkB,CAACG,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,aAAQ,IAAIJ,MAAM,CAAC8B,QAAX,CAAoB;AAC3BI,QAAAA,IAAI,EAAGrB,KAAK,CAACsB,SAAN,IAAmB,EADC;AAE3BC,QAAAA,QAAQ,EAAE,IAFiB;AAG3BX,QAAAA,KAAK,EAAE,CACN,IAAIzB,MAAM,CAACoB,OAAX,CAAmB;AAClBgB,UAAAA,QAAQ,EAAE,IADQ;AAElBF,UAAAA,IAAI,EAAGrB,KAAK,CAACR,OAAN,IAAiB;AAFN,SAAnB,CADM,EAKN,IAAIL,MAAM,CAAC0B,SAAX,CAAqB;AACpBQ,UAAAA,IAAI,EAAGrB,KAAK,CAACN,MAAN,IAAgB,EADH;AAEpB6B,UAAAA,QAAQ,EAAE,IAFU;AAGpBT,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CALM,EAaN,IAAI7B,MAAM,CAAC0B,SAAX,CAAqB;AACpBQ,UAAAA,IAAI,EAAGrB,KAAK,CAACL,MAAN,IAAgB,EADH;AAEpB4B,UAAAA,QAAQ,EAAE,IAFU;AAGpBT,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CAbM;AAHoB,OAApB,CAAR;AA0BA;;;;KAqHF;;;SAlPqB1B,Q","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161. Accuracy represents the time deviation around the UTC time contained in GeneralizedTime.\r\n */\r\nexport default class Accuracy\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Accuracy class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"seconds\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc seconds\r\n\t\t\t */\r\n\t\t\tthis.seconds = getParametersValue(parameters, \"seconds\", Accuracy.defaultValues(\"seconds\"));\r\n\t\t\r\n\t\tif(\"millis\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc millis\r\n\t\t\t */\r\n\t\t\tthis.millis = getParametersValue(parameters, \"millis\", Accuracy.defaultValues(\"millis\"));\r\n\t\t\r\n\t\tif(\"micros\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc micros\r\n\t\t\t */\r\n\t\t\tthis.micros = getParametersValue(parameters, \"micros\", Accuracy.defaultValues(\"micros\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"seconds\":\r\n\t\t\tcase \"millis\":\r\n\t\t\tcase \"micros\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Accuracy class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"seconds\":\r\n\t\t\tcase \"millis\":\r\n\t\t\tcase \"micros\":\r\n\t\t\t\treturn (memberValue === Accuracy.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Accuracy class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Accuracy ::= SEQUENCE {\r\n\t *    seconds        INTEGER              OPTIONAL,\r\n\t *    millis     [0] INTEGER  (1..999)    OPTIONAL,\r\n\t *    micros     [1] INTEGER  (1..999)    OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [seconds]\r\n\t\t * @property {string} [millis]\r\n\t\t * @property {string} [micros]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.seconds || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.millis || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.micros || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"seconds\",\r\n\t\t\t\"millis\",\r\n\t\t\t\"micros\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAccuracy.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tseconds: \"seconds\",\r\n\t\t\t\t\tmillis: \"millis\",\r\n\t\t\t\t\tmicros: \"micros\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Accuracy\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"seconds\" in asn1.result)\r\n\t\t\tthis.seconds = asn1.result.seconds.valueBlock.valueDec;\r\n\r\n\t\tif(\"millis\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst intMillis = new asn1js.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\r\n\t\t\tthis.millis = intMillis.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"micros\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst intMicros = new asn1js.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\r\n\t\t\tthis.micros = intMicros.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\tif(\"seconds\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.seconds }));\r\n\r\n\t\tif(\"millis\" in this)\r\n\t\t{\r\n\t\t\tconst intMillis = new asn1js.Integer({ value: this.millis });\r\n\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: intMillis.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"micros\" in this)\r\n\t\t{\r\n\t\t\tconst intMicros = new asn1js.Integer({ value: this.micros });\r\n\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: intMicros.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"seconds\" in this)\r\n\t\t\t_object.seconds = this.seconds;\r\n\r\n\t\tif(\"millis\" in this)\r\n\t\t\t_object.millis = this.millis;\r\n\r\n\t\tif(\"micros\" in this)\r\n\t\t\t_object.micros = this.micros;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
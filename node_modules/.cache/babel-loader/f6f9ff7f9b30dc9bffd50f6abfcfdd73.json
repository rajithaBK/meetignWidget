{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _webexPlugin = _interopRequireDefault(require(\"../lib/webex-plugin\"));\n\nvar _webexCore = require(\"../webex-core\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\n\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  var impls = precedence[level];\n\n  if (impls) {\n    impls = impls.slice();\n\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod() {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    /* eslint no-invalid-this: [0] */\n\n    /* istanbul ignore if */\n\n\n    if (process.env.NODE_ENV === 'test' && this.webex && this.webex.internal.device && this.webex.internal.device.url) {\n      args.unshift(this.webex.internal.device.url.slice(-3));\n    }\n\n    (_console = console)[level].apply(_console, args);\n  };\n}\n\nvar Logger = _webexPlugin.default.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace'),\n  version: \"1.154.2\"\n});\n\n(0, _webexCore.registerPlugin)('logger', Logger);\nvar _default = Logger;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;AAGA;;AACA;AAJA;AACA;AACA;;;AAIA,IAAMA,UAAU,GAAG;AACjBC,OAAK,EAAE,CAAC,KAAD,CADU;AAEjBC,MAAI,EAAE,CAAC,OAAD,EAAU,KAAV,CAFW;AAGjBC,MAAI,EAAE,CAAC,KAAD,CAHW;AAIjBC,OAAK,EAAE,CAAC,MAAD,EAAS,KAAT,CAJU;AAKjBC,OAAK,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB;AALU,CAAnB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,MAAIC,KAAK,GAAGR,UAAU,CAACO,KAAD,CAAtB;;AAEA,MAAIC,KAAJ,EAAW;AACTA,SAAK,GAAGA,KAAK,CAACC,KAAND,EAARA;;AACA,WAAO,CAACE,OAAO,CAACH,KAAD,CAAf,EAAwB;AACtBA,WAAK,GAAGC,KAAK,CAACG,GAANH,EAARD;AACD;AACF;;AAED,SAAO,SAASK,oBAAT,GAAuC;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM,MAANA,GAAMC,eAAND;AAAM;AAC5C;;AACA;;;AACA,QAAIE,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,MAAzBA,IAAmC,KAAKG,KAAxCH,IAAiD,KAAKG,KAAL,CAAWC,QAAX,CAAoBC,MAArEL,IAA+E,KAAKG,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA9G,EAAmH;AACjHR,UAAI,CAACS,OAALT,CAAa,KAAKK,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,CAA+BZ,KAA/B,CAAqC,CAAC,CAAtC,CAAbI;AACD;;AACD,yBAAQN,KAAR,kBAAkBM,IAAlB;AANF;AAQD;;AAED,IAAMU,MAAM,GAAGC,qBAAYC,MAAZD,CAAmB;AAChCE,WAAS,EAAE,QADqB;AAEhCzB,OAAK,EAAEK,iBAAiB,CAAC,OAAD,CAFQ;AAGhCJ,MAAI,EAAEI,iBAAiB,CAAC,MAAD,CAHS;AAIhCqB,KAAG,EAAErB,iBAAiB,CAAC,KAAD,CAJU;AAKhCH,MAAI,EAAEG,iBAAiB,CAAC,MAAD,CALS;AAMhCF,OAAK,EAAEE,iBAAiB,CAAC,OAAD,CANQ;AAOhCD,OAAK,EAAEC,iBAAiB,CAAC,OAAD,CAPQ;AAAAsB;AAAA,CAAnBJ,CAAf;;AAUA,+BAAe,QAAf,EAAyBD,MAAzB;eAEeA","names":["precedence","error","warn","info","debug","trace","wrapConsoleMethod","level","impls","slice","console","pop","wrappedConsoleMethod","args","arguments","process","env","NODE_ENV","webex","internal","device","url","unshift","Logger","WebexPlugin","extend","namespace","log","version"],"sources":["logger.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport WebexPlugin from '../lib/webex-plugin';\nimport {registerPlugin} from '../webex-core';\n\nconst precedence = {\n  error: ['log'],\n  warn: ['error', 'log'],\n  info: ['log'],\n  debug: ['info', 'log'],\n  trace: ['debug', 'info', 'log']\n};\n\n/**\n * Assigns the specified console method to Logger; uses `precedence` to fallback\n * to other console methods if the current environment doesn't provide the\n * specified level.\n * @param {string} level\n * @returns {Function}\n */\nfunction wrapConsoleMethod(level) {\n  /* eslint no-console: [0] */\n  let impls = precedence[level];\n\n  if (impls) {\n    impls = impls.slice();\n    while (!console[level]) {\n      level = impls.pop();\n    }\n  }\n\n  return function wrappedConsoleMethod(...args) {\n    /* eslint no-invalid-this: [0] */\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV === 'test' && this.webex && this.webex.internal.device && this.webex.internal.device.url) {\n      args.unshift(this.webex.internal.device.url.slice(-3));\n    }\n    console[level](...args);\n  };\n}\n\nconst Logger = WebexPlugin.extend({\n  namespace: 'Logger',\n  error: wrapConsoleMethod('error'),\n  warn: wrapConsoleMethod('warn'),\n  log: wrapConsoleMethod('log'),\n  info: wrapConsoleMethod('info'),\n  debug: wrapConsoleMethod('debug'),\n  trace: wrapConsoleMethod('trace')\n});\n\nregisterPlugin('logger', Logger);\n\nexport default Logger;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _toConsumableArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\nimport PBKDF2Params from \"./PBKDF2Params.js\";\nimport PBES2Params from \"./PBES2Params.js\"; //**************************************************************************************\n\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\n\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount) {\n  //region Initial variables\n  var u;\n  var v;\n  var result = []; //endregion\n  //region Get \"u\" and \"v\" values\n\n  switch (hashAlgorithm.toUpperCase()) {\n    case \"SHA-1\":\n      u = 20; // 160\n\n      v = 64; // 512\n\n      break;\n\n    case \"SHA-256\":\n      u = 32; // 256\n\n      v = 64; // 512\n\n      break;\n\n    case \"SHA-384\":\n      u = 48; // 384\n\n      v = 128; // 1024\n\n      break;\n\n    case \"SHA-512\":\n      u = 64; // 512\n\n      v = 128; // 1024\n\n      break;\n\n    default:\n      throw new Error(\"Unsupported hashing algorithm\");\n  } //endregion\n  //region Main algorithm making key\n  //region Transform password to UTF-8 like string\n\n\n  var passwordViewInitial = new Uint8Array(password);\n  var passwordTransformed = new ArrayBuffer(password.byteLength * 2 + 2);\n  var passwordTransformedView = new Uint8Array(passwordTransformed);\n\n  for (var i = 0; i < passwordViewInitial.length; i++) {\n    passwordTransformedView[i * 2] = 0x00;\n    passwordTransformedView[i * 2 + 1] = passwordViewInitial[i];\n  }\n\n  passwordTransformedView[passwordTransformedView.length - 2] = 0x00;\n  passwordTransformedView[passwordTransformedView.length - 1] = 0x00;\n  password = passwordTransformed.slice(0); //endregion\n  //region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\n\n  var D = new ArrayBuffer(v);\n  var dView = new Uint8Array(D);\n\n  for (var _i = 0; _i < D.byteLength; _i++) {\n    dView[_i] = 3;\n  } // The ID value equal to \"3\" for MACing (see B.3 of standard)\n  //endregion\n  //region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\n\n\n  var saltLength = salt.byteLength;\n  var sLen = v * Math.ceil(saltLength / v);\n  var S = new ArrayBuffer(sLen);\n  var sView = new Uint8Array(S);\n  var saltView = new Uint8Array(salt);\n\n  for (var _i2 = 0; _i2 < sLen; _i2++) {\n    sView[_i2] = saltView[_i2 % saltLength];\n  } //endregion\n  //region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\n\n\n  var passwordLength = password.byteLength;\n  var pLen = v * Math.ceil(passwordLength / v);\n  var P = new ArrayBuffer(pLen);\n  var pView = new Uint8Array(P);\n  var passwordView = new Uint8Array(password);\n\n  for (var _i3 = 0; _i3 < pLen; _i3++) {\n    pView[_i3] = passwordView[_i3 % passwordLength];\n  } //endregion\n  //region Set I=S||P to be the concatenation of S and P\n\n\n  var sPlusPLength = S.byteLength + P.byteLength;\n  var I = new ArrayBuffer(sPlusPLength);\n  var iView = new Uint8Array(I);\n  iView.set(sView);\n  iView.set(pView, sView.length); //endregion\n  //region Set c=ceil(n / u)\n\n  var c = Math.ceil((keyLength >> 3) / u); //endregion\n  //region Initial variables\n\n  var internalSequence = Promise.resolve(I); //endregion\n  //region For i=1, 2, ..., c, do the following:\n\n  for (var _i4 = 0; _i4 <= c; _i4++) {\n    internalSequence = internalSequence.then(function (_I) {\n      //region Create contecanetion of D and I\n      var dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\n      var dAndIView = new Uint8Array(dAndI);\n      dAndIView.set(dView);\n      dAndIView.set(iView, dView.length); //endregion\n\n      return dAndI;\n    }); //region Make \"iterationCount\" rounds of hashing\n\n    for (var j = 0; j < iterationCount; j++) {\n      internalSequence = internalSequence.then(function (roundBuffer) {\n        return cryptoEngine.digest({\n          name: hashAlgorithm\n        }, new Uint8Array(roundBuffer));\n      });\n    } //endregion\n\n\n    internalSequence = internalSequence.then(function (roundBuffer) {\n      //region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\n      var B = new ArrayBuffer(v);\n      var bView = new Uint8Array(B);\n\n      for (var _j = 0; _j < B.byteLength; _j++) {\n        bView[_j] = roundBuffer[_j % roundBuffer.length];\n      } //endregion\n      //region Make new I value\n\n\n      var k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\n      var iRound = [];\n      var sliceStart = 0;\n      var sliceLength = v;\n\n      for (var _j2 = 0; _j2 < k; _j2++) {\n        var chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\n        sliceStart += v;\n        if (sliceStart + v > I.byteLength) sliceLength = I.byteLength - sliceStart;\n        var x = 0x1ff;\n\n        for (var l = B.byteLength - 1; l >= 0; l--) {\n          x >>= 8;\n          x += bView[l] + chunk[l];\n          chunk[l] = x & 0xff;\n        }\n\n        iRound.push.apply(iRound, _toConsumableArray(chunk));\n      }\n\n      I = new ArrayBuffer(iRound.length);\n      iView = new Uint8Array(I);\n      iView.set(iRound); //endregion\n\n      result.push.apply(result, _toConsumableArray(new Uint8Array(roundBuffer)));\n      return I;\n    });\n  } //endregion\n  //region Initialize final key\n\n\n  internalSequence = internalSequence.then(function () {\n    var resultBuffer = new ArrayBuffer(keyLength >> 3);\n    var resultView = new Uint8Array(resultBuffer);\n    resultView.set(new Uint8Array(result).slice(0, keyLength >> 3));\n    return resultBuffer;\n  }); //endregion\n  //endregion\n\n  return internalSequence;\n} //**************************************************************************************\n\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\n\n\nvar CryptoEngine = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CryptoEngine class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function CryptoEngine() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CryptoEngine);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Object}\r\n     * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n     */\n    this.crypto = getParametersValue(parameters, \"crypto\", {});\n    /**\r\n     * @type {Object}\r\n     * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n     */\n\n    this.subtle = getParametersValue(parameters, \"subtle\", {});\n    /**\r\n     * @type {string}\r\n     * @desc Name of the \"crypto engine\"\r\n     */\n\n    this.name = getParametersValue(parameters, \"name\", \"\"); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Import WebCrypto keys from different formats\r\n   * @param {string} format\r\n   * @param {ArrayBuffer|Uint8Array} keyData\r\n   * @param {Object} algorithm\r\n   * @param {boolean} extractable\r\n   * @param {Array} keyUsages\r\n   * @returns {Promise}\r\n   */\n\n\n  _createClass(CryptoEngine, [{\n    key: \"importKey\",\n    value: function importKey(format, keyData, algorithm, extractable, keyUsages) {\n      var _this = this;\n\n      //region Initial variables\n      var jwk = {}; //endregion\n      //region Change \"keyData\" type if needed\n\n      if (keyData instanceof Uint8Array) keyData = keyData.buffer; //endregion\n\n      switch (format.toLowerCase()) {\n        case \"raw\":\n          return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n\n        case \"spki\":\n          {\n            var asn1 = asn1js.fromBER(keyData);\n            if (asn1.offset === -1) return Promise.reject(\"Incorrect keyData\");\n            var publicKeyInfo = new PublicKeyInfo();\n\n            try {\n              publicKeyInfo.fromSchema(asn1.result);\n            } catch (ex) {\n              return Promise.reject(\"Incorrect keyData\");\n            } // noinspection FallThroughInSwitchStatementJS\n\n\n            switch (algorithm.name.toUpperCase()) {\n              case \"RSA-PSS\":\n                {\n                  //region Get information about used hash function\n                  switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                      jwk.alg = \"PS1\";\n                      break;\n\n                    case \"SHA-256\":\n                      jwk.alg = \"PS256\";\n                      break;\n\n                    case \"SHA-384\":\n                      jwk.alg = \"PS384\";\n                      break;\n\n                    case \"SHA-512\":\n                      jwk.alg = \"PS512\";\n                      break;\n\n                    default:\n                      return Promise.reject(\"Incorrect hash algorithm: \".concat(algorithm.hash.name.toUpperCase()));\n                  } //endregion\n\n                }\n              // break omitted\n\n              case \"RSASSA-PKCS1-V1_5\":\n                {\n                  keyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\n\n                  jwk.kty = \"RSA\";\n                  jwk.ext = extractable;\n                  jwk.key_ops = keyUsages;\n                  if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\") return Promise.reject(\"Incorrect public key algorithm: \".concat(publicKeyInfo.algorithm.algorithmId)); //region Get information about used hash function\n\n                  if (\"alg\" in jwk === false) {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                      case \"SHA-1\":\n                        jwk.alg = \"RS1\";\n                        break;\n\n                      case \"SHA-256\":\n                        jwk.alg = \"RS256\";\n                        break;\n\n                      case \"SHA-384\":\n                        jwk.alg = \"RS384\";\n                        break;\n\n                      case \"SHA-512\":\n                        jwk.alg = \"RS512\";\n                        break;\n\n                      default:\n                        return Promise.reject(\"Incorrect hash algorithm: \".concat(algorithm.hash.name.toUpperCase()));\n                    }\n                  } //endregion\n                  //region Create RSA Public Key elements\n\n\n                  var publicKeyJSON = publicKeyInfo.toJSON();\n\n                  for (var _i5 = 0, _Object$keys = Object.keys(publicKeyJSON); _i5 < _Object$keys.length; _i5++) {\n                    var key = _Object$keys[_i5];\n                    jwk[key] = publicKeyJSON[key];\n                  } //endregion\n\n                }\n                break;\n\n              case \"ECDSA\":\n                keyUsages = [\"verify\"];\n              // Override existing keyUsages value since the key is a public key\n              // break omitted\n\n              case \"ECDH\":\n                {\n                  //region Initial variables\n                  jwk = {\n                    kty: \"EC\",\n                    ext: extractable,\n                    key_ops: keyUsages\n                  }; //endregion\n                  //region Get information about algorithm\n\n                  if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") return Promise.reject(\"Incorrect public key algorithm: \".concat(publicKeyInfo.algorithm.algorithmId)); //endregion\n                  //region Create ECDSA Public Key elements\n\n                  var _publicKeyJSON = publicKeyInfo.toJSON();\n\n                  for (var _i6 = 0, _Object$keys2 = Object.keys(_publicKeyJSON); _i6 < _Object$keys2.length; _i6++) {\n                    var _key = _Object$keys2[_i6];\n                    jwk[_key] = _publicKeyJSON[_key];\n                  } //endregion\n\n                }\n                break;\n\n              case \"RSA-OAEP\":\n                {\n                  jwk.kty = \"RSA\";\n                  jwk.ext = extractable;\n                  jwk.key_ops = keyUsages;\n                  if (this.name.toLowerCase() === \"safari\") jwk.alg = \"RSA-OAEP\";else {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                      case \"SHA-1\":\n                        jwk.alg = \"RSA-OAEP\";\n                        break;\n\n                      case \"SHA-256\":\n                        jwk.alg = \"RSA-OAEP-256\";\n                        break;\n\n                      case \"SHA-384\":\n                        jwk.alg = \"RSA-OAEP-384\";\n                        break;\n\n                      case \"SHA-512\":\n                        jwk.alg = \"RSA-OAEP-512\";\n                        break;\n\n                      default:\n                        return Promise.reject(\"Incorrect hash algorithm: \".concat(algorithm.hash.name.toUpperCase()));\n                    }\n                  } //region Create ECDSA Public Key elements\n\n                  var _publicKeyJSON2 = publicKeyInfo.toJSON();\n\n                  for (var _i7 = 0, _Object$keys3 = Object.keys(_publicKeyJSON2); _i7 < _Object$keys3.length; _i7++) {\n                    var _key2 = _Object$keys3[_i7];\n                    jwk[_key2] = _publicKeyJSON2[_key2];\n                  } //endregion\n\n                }\n                break;\n\n              case \"RSAES-PKCS1-V1_5\":\n                {\n                  jwk.kty = \"RSA\";\n                  jwk.ext = extractable;\n                  jwk.key_ops = keyUsages;\n                  jwk.alg = \"PS1\";\n\n                  var _publicKeyJSON3 = publicKeyInfo.toJSON();\n\n                  for (var _i8 = 0, _Object$keys4 = Object.keys(_publicKeyJSON3); _i8 < _Object$keys4.length; _i8++) {\n                    var _key3 = _Object$keys4[_i8];\n                    jwk[_key3] = _publicKeyJSON3[_key3];\n                  }\n                }\n                break;\n\n              default:\n                return Promise.reject(\"Incorrect algorithm name: \".concat(algorithm.name.toUpperCase()));\n            }\n          }\n          break;\n\n        case \"pkcs8\":\n          {\n            var privateKeyInfo = new PrivateKeyInfo(); //region Parse \"PrivateKeyInfo\" object\n\n            var _asn = asn1js.fromBER(keyData);\n\n            if (_asn.offset === -1) return Promise.reject(\"Incorrect keyData\");\n\n            try {\n              privateKeyInfo.fromSchema(_asn.result);\n            } catch (ex) {\n              return Promise.reject(\"Incorrect keyData\");\n            }\n\n            if (\"parsedKey\" in privateKeyInfo === false) return Promise.reject(\"Incorrect keyData\"); //endregion\n            // noinspection FallThroughInSwitchStatementJS\n            // noinspection FallThroughInSwitchStatementJS\n\n            switch (algorithm.name.toUpperCase()) {\n              case \"RSA-PSS\":\n                {\n                  //region Get information about used hash function\n                  switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                      jwk.alg = \"PS1\";\n                      break;\n\n                    case \"SHA-256\":\n                      jwk.alg = \"PS256\";\n                      break;\n\n                    case \"SHA-384\":\n                      jwk.alg = \"PS384\";\n                      break;\n\n                    case \"SHA-512\":\n                      jwk.alg = \"PS512\";\n                      break;\n\n                    default:\n                      return Promise.reject(\"Incorrect hash algorithm: \".concat(algorithm.hash.name.toUpperCase()));\n                  } //endregion\n\n                }\n              // break omitted\n\n              case \"RSASSA-PKCS1-V1_5\":\n                {\n                  keyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\n\n                  jwk.kty = \"RSA\";\n                  jwk.ext = extractable;\n                  jwk.key_ops = keyUsages; //region Get information about used hash function\n\n                  if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\") return Promise.reject(\"Incorrect private key algorithm: \".concat(privateKeyInfo.privateKeyAlgorithm.algorithmId)); //endregion\n                  //region Get information about used hash function\n\n                  if (\"alg\" in jwk === false) {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                      case \"SHA-1\":\n                        jwk.alg = \"RS1\";\n                        break;\n\n                      case \"SHA-256\":\n                        jwk.alg = \"RS256\";\n                        break;\n\n                      case \"SHA-384\":\n                        jwk.alg = \"RS384\";\n                        break;\n\n                      case \"SHA-512\":\n                        jwk.alg = \"RS512\";\n                        break;\n\n                      default:\n                        return Promise.reject(\"Incorrect hash algorithm: \".concat(algorithm.hash.name.toUpperCase()));\n                    }\n                  } //endregion\n                  //region Create RSA Private Key elements\n\n\n                  var privateKeyJSON = privateKeyInfo.toJSON();\n\n                  for (var _i9 = 0, _Object$keys5 = Object.keys(privateKeyJSON); _i9 < _Object$keys5.length; _i9++) {\n                    var _key4 = _Object$keys5[_i9];\n                    jwk[_key4] = privateKeyJSON[_key4];\n                  } //endregion\n\n                }\n                break;\n\n              case \"ECDSA\":\n                keyUsages = [\"sign\"];\n              // Override existing keyUsages value since the key is a private key\n              // break omitted\n\n              case \"ECDH\":\n                {\n                  //region Initial variables\n                  jwk = {\n                    kty: \"EC\",\n                    ext: extractable,\n                    key_ops: keyUsages\n                  }; //endregion\n                  //region Get information about used hash function\n\n                  if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\") return Promise.reject(\"Incorrect algorithm: \".concat(privateKeyInfo.privateKeyAlgorithm.algorithmId)); //endregion\n                  //region Create ECDSA Private Key elements\n\n                  var _privateKeyJSON = privateKeyInfo.toJSON();\n\n                  for (var _i10 = 0, _Object$keys6 = Object.keys(_privateKeyJSON); _i10 < _Object$keys6.length; _i10++) {\n                    var _key5 = _Object$keys6[_i10];\n                    jwk[_key5] = _privateKeyJSON[_key5];\n                  } //endregion\n\n                }\n                break;\n\n              case \"RSA-OAEP\":\n                {\n                  jwk.kty = \"RSA\";\n                  jwk.ext = extractable;\n                  jwk.key_ops = keyUsages; //region Get information about used hash function\n\n                  if (this.name.toLowerCase() === \"safari\") jwk.alg = \"RSA-OAEP\";else {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                      case \"SHA-1\":\n                        jwk.alg = \"RSA-OAEP\";\n                        break;\n\n                      case \"SHA-256\":\n                        jwk.alg = \"RSA-OAEP-256\";\n                        break;\n\n                      case \"SHA-384\":\n                        jwk.alg = \"RSA-OAEP-384\";\n                        break;\n\n                      case \"SHA-512\":\n                        jwk.alg = \"RSA-OAEP-512\";\n                        break;\n\n                      default:\n                        return Promise.reject(\"Incorrect hash algorithm: \".concat(algorithm.hash.name.toUpperCase()));\n                    }\n                  } //endregion\n                  //region Create RSA Private Key elements\n\n                  var _privateKeyJSON2 = privateKeyInfo.toJSON();\n\n                  for (var _i11 = 0, _Object$keys7 = Object.keys(_privateKeyJSON2); _i11 < _Object$keys7.length; _i11++) {\n                    var _key6 = _Object$keys7[_i11];\n                    jwk[_key6] = _privateKeyJSON2[_key6];\n                  } //endregion\n\n                }\n                break;\n\n              case \"RSAES-PKCS1-V1_5\":\n                {\n                  keyUsages = [\"decrypt\"]; // Override existing keyUsages value since the key is a private key\n\n                  jwk.kty = \"RSA\";\n                  jwk.ext = extractable;\n                  jwk.key_ops = keyUsages;\n                  jwk.alg = \"PS1\"; //region Create RSA Private Key elements\n\n                  var _privateKeyJSON3 = privateKeyInfo.toJSON();\n\n                  for (var _i12 = 0, _Object$keys8 = Object.keys(_privateKeyJSON3); _i12 < _Object$keys8.length; _i12++) {\n                    var _key7 = _Object$keys8[_i12];\n                    jwk[_key7] = _privateKeyJSON3[_key7];\n                  } //endregion\n\n                }\n                break;\n\n              default:\n                return Promise.reject(\"Incorrect algorithm name: \".concat(algorithm.name.toUpperCase()));\n            }\n          }\n          break;\n\n        case \"jwk\":\n          jwk = keyData;\n          break;\n\n        default:\n          return Promise.reject(\"Incorrect format: \".concat(format));\n      } //region Special case for Safari browser (since its acting not as WebCrypto standard describes)\n\n\n      if (this.name.toLowerCase() === \"safari\") {\n        // Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\n        return Promise.resolve().then(function () {\n          return _this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);\n        }).then(function (result) {\n          return result;\n        }, function () {\n          return _this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n        });\n      } //endregion\n\n\n      return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n    } //**********************************************************************************\n\n    /**\r\n     * Export WebCrypto keys to different formats\r\n     * @param {string} format\r\n     * @param {Object} key\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"exportKey\",\n    value: function exportKey(format, key) {\n      var sequence = this.subtle.exportKey(\"jwk\", key); //region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\n\n      if (this.name.toLowerCase() === \"safari\") {\n        sequence = sequence.then(function (result) {\n          // Some additional checks for Safari Technology Preview\n          if (result instanceof ArrayBuffer) return JSON.parse(arrayBufferToString(result));\n          return result;\n        });\n      } //endregion\n\n\n      switch (format.toLowerCase()) {\n        case \"raw\":\n          return this.subtle.exportKey(\"raw\", key);\n\n        case \"spki\":\n          sequence = sequence.then(function (result) {\n            var publicKeyInfo = new PublicKeyInfo();\n\n            try {\n              publicKeyInfo.fromJSON(result);\n            } catch (ex) {\n              return Promise.reject(\"Incorrect key data\");\n            }\n\n            return publicKeyInfo.toSchema().toBER(false);\n          });\n          break;\n\n        case \"pkcs8\":\n          sequence = sequence.then(function (result) {\n            var privateKeyInfo = new PrivateKeyInfo();\n\n            try {\n              privateKeyInfo.fromJSON(result);\n            } catch (ex) {\n              return Promise.reject(\"Incorrect key data\");\n            }\n\n            return privateKeyInfo.toSchema().toBER(false);\n          });\n          break;\n\n        case \"jwk\":\n          break;\n\n        default:\n          return Promise.reject(\"Incorrect format: \".concat(format));\n      }\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Convert WebCrypto keys between different export formats\r\n     * @param {string} inputFormat\r\n     * @param {string} outputFormat\r\n     * @param {ArrayBuffer|Object} keyData\r\n     * @param {Object} algorithm\r\n     * @param {boolean} extractable\r\n     * @param {Array} keyUsages\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"convert\",\n    value: function convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n      var _this2 = this;\n\n      switch (inputFormat.toLowerCase()) {\n        case \"raw\":\n          switch (outputFormat.toLowerCase()) {\n            case \"raw\":\n              return Promise.resolve(keyData);\n\n            case \"spki\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"spki\", result);\n              });\n\n            case \"pkcs8\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"pkcs8\", result);\n              });\n\n            case \"jwk\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"jwk\", result);\n              });\n\n            default:\n              return Promise.reject(\"Incorrect outputFormat: \".concat(outputFormat));\n          }\n\n        case \"spki\":\n          switch (outputFormat.toLowerCase()) {\n            case \"raw\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"spki\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"raw\", result);\n              });\n\n            case \"spki\":\n              return Promise.resolve(keyData);\n\n            case \"pkcs8\":\n              return Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\n\n            case \"jwk\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"spki\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"jwk\", result);\n              });\n\n            default:\n              return Promise.reject(\"Incorrect outputFormat: \".concat(outputFormat));\n          }\n\n        case \"pkcs8\":\n          switch (outputFormat.toLowerCase()) {\n            case \"raw\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"raw\", result);\n              });\n\n            case \"spki\":\n              return Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\n\n            case \"pkcs8\":\n              return Promise.resolve(keyData);\n\n            case \"jwk\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"jwk\", result);\n              });\n\n            default:\n              return Promise.reject(\"Incorrect outputFormat: \".concat(outputFormat));\n          }\n\n        case \"jwk\":\n          switch (outputFormat.toLowerCase()) {\n            case \"raw\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"raw\", result);\n              });\n\n            case \"spki\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"spki\", result);\n              });\n\n            case \"pkcs8\":\n              return Promise.resolve().then(function () {\n                return _this2.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages);\n              }).then(function (result) {\n                return _this2.exportKey(\"pkcs8\", result);\n              });\n\n            case \"jwk\":\n              return Promise.resolve(keyData);\n\n            default:\n              return Promise.reject(\"Incorrect outputFormat: \".concat(outputFormat));\n          }\n\n        default:\n          return Promise.reject(\"Incorrect inputFormat: \".concat(inputFormat));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"encrypt\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt() {\n      var _this$subtle;\n\n      return (_this$subtle = this.subtle).encrypt.apply(_this$subtle, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"decrypt\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt() {\n      var _this$subtle2;\n\n      return (_this$subtle2 = this.subtle).decrypt.apply(_this$subtle2, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"sign\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      var _this$subtle3;\n\n      return (_this$subtle3 = this.subtle).sign.apply(_this$subtle3, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"verify\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var _this$subtle4;\n\n      return (_this$subtle4 = this.subtle).verify.apply(_this$subtle4, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"digest\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var _this$subtle5;\n\n      return (_this$subtle5 = this.subtle).digest.apply(_this$subtle5, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"generateKey\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"generateKey\",\n    value: function generateKey() {\n      var _this$subtle6;\n\n      return (_this$subtle6 = this.subtle).generateKey.apply(_this$subtle6, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"deriveKey\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"deriveKey\",\n    value: function deriveKey() {\n      var _this$subtle7;\n\n      return (_this$subtle7 = this.subtle).deriveKey.apply(_this$subtle7, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"deriveBits\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"deriveBits\",\n    value: function deriveBits() {\n      var _this$subtle8;\n\n      return (_this$subtle8 = this.subtle).deriveBits.apply(_this$subtle8, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"wrapKey\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"wrapKey\",\n    value: function wrapKey() {\n      var _this$subtle9;\n\n      return (_this$subtle9 = this.subtle).wrapKey.apply(_this$subtle9, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Wrapper for standard function \"unwrapKey\"\r\n     * @param args\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"unwrapKey\",\n    value: function unwrapKey() {\n      var _this$subtle10;\n\n      return (_this$subtle10 = this.subtle).unwrapKey.apply(_this$subtle10, arguments);\n    } //**********************************************************************************\n\n    /**\r\n     * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n     * @param {!Uint8Array} view\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"getRandomValues\",\n    value: function getRandomValues(view) {\n      if (\"getRandomValues\" in this.crypto === false) throw new Error(\"No support for getRandomValues\");\n      return this.crypto.getRandomValues(view);\n    } //**********************************************************************************\n\n    /**\r\n     * Get WebCrypto algorithm by wel-known OID\r\n     * @param {string} oid well-known OID to search for\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"getAlgorithmByOID\",\n    value: function getAlgorithmByOID(oid) {\n      switch (oid) {\n        case \"1.2.840.113549.1.1.1\":\n          return {\n            name: \"RSAES-PKCS1-v1_5\"\n          };\n\n        case \"1.2.840.113549.1.1.5\":\n          return {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n              name: \"SHA-1\"\n            }\n          };\n\n        case \"1.2.840.113549.1.1.11\":\n          return {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n              name: \"SHA-256\"\n            }\n          };\n\n        case \"1.2.840.113549.1.1.12\":\n          return {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n              name: \"SHA-384\"\n            }\n          };\n\n        case \"1.2.840.113549.1.1.13\":\n          return {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n              name: \"SHA-512\"\n            }\n          };\n\n        case \"1.2.840.113549.1.1.10\":\n          return {\n            name: \"RSA-PSS\"\n          };\n\n        case \"1.2.840.113549.1.1.7\":\n          return {\n            name: \"RSA-OAEP\"\n          };\n\n        case \"1.2.840.10045.2.1\":\n        case \"1.2.840.10045.4.1\":\n          return {\n            name: \"ECDSA\",\n            hash: {\n              name: \"SHA-1\"\n            }\n          };\n\n        case \"1.2.840.10045.4.3.2\":\n          return {\n            name: \"ECDSA\",\n            hash: {\n              name: \"SHA-256\"\n            }\n          };\n\n        case \"1.2.840.10045.4.3.3\":\n          return {\n            name: \"ECDSA\",\n            hash: {\n              name: \"SHA-384\"\n            }\n          };\n\n        case \"1.2.840.10045.4.3.4\":\n          return {\n            name: \"ECDSA\",\n            hash: {\n              name: \"SHA-512\"\n            }\n          };\n\n        case \"1.3.133.16.840.63.0.2\":\n          return {\n            name: \"ECDH\",\n            kdf: \"SHA-1\"\n          };\n\n        case \"1.3.132.1.11.1\":\n          return {\n            name: \"ECDH\",\n            kdf: \"SHA-256\"\n          };\n\n        case \"1.3.132.1.11.2\":\n          return {\n            name: \"ECDH\",\n            kdf: \"SHA-384\"\n          };\n\n        case \"1.3.132.1.11.3\":\n          return {\n            name: \"ECDH\",\n            kdf: \"SHA-512\"\n          };\n\n        case \"2.16.840.1.101.3.4.1.2\":\n          return {\n            name: \"AES-CBC\",\n            length: 128\n          };\n\n        case \"2.16.840.1.101.3.4.1.22\":\n          return {\n            name: \"AES-CBC\",\n            length: 192\n          };\n\n        case \"2.16.840.1.101.3.4.1.42\":\n          return {\n            name: \"AES-CBC\",\n            length: 256\n          };\n\n        case \"2.16.840.1.101.3.4.1.6\":\n          return {\n            name: \"AES-GCM\",\n            length: 128\n          };\n\n        case \"2.16.840.1.101.3.4.1.26\":\n          return {\n            name: \"AES-GCM\",\n            length: 192\n          };\n\n        case \"2.16.840.1.101.3.4.1.46\":\n          return {\n            name: \"AES-GCM\",\n            length: 256\n          };\n\n        case \"2.16.840.1.101.3.4.1.4\":\n          return {\n            name: \"AES-CFB\",\n            length: 128\n          };\n\n        case \"2.16.840.1.101.3.4.1.24\":\n          return {\n            name: \"AES-CFB\",\n            length: 192\n          };\n\n        case \"2.16.840.1.101.3.4.1.44\":\n          return {\n            name: \"AES-CFB\",\n            length: 256\n          };\n\n        case \"2.16.840.1.101.3.4.1.5\":\n          return {\n            name: \"AES-KW\",\n            length: 128\n          };\n\n        case \"2.16.840.1.101.3.4.1.25\":\n          return {\n            name: \"AES-KW\",\n            length: 192\n          };\n\n        case \"2.16.840.1.101.3.4.1.45\":\n          return {\n            name: \"AES-KW\",\n            length: 256\n          };\n\n        case \"1.2.840.113549.2.7\":\n          return {\n            name: \"HMAC\",\n            hash: {\n              name: \"SHA-1\"\n            }\n          };\n\n        case \"1.2.840.113549.2.9\":\n          return {\n            name: \"HMAC\",\n            hash: {\n              name: \"SHA-256\"\n            }\n          };\n\n        case \"1.2.840.113549.2.10\":\n          return {\n            name: \"HMAC\",\n            hash: {\n              name: \"SHA-384\"\n            }\n          };\n\n        case \"1.2.840.113549.2.11\":\n          return {\n            name: \"HMAC\",\n            hash: {\n              name: \"SHA-512\"\n            }\n          };\n\n        case \"1.2.840.113549.1.9.16.3.5\":\n          return {\n            name: \"DH\"\n          };\n\n        case \"1.3.14.3.2.26\":\n          return {\n            name: \"SHA-1\"\n          };\n\n        case \"2.16.840.1.101.3.4.2.1\":\n          return {\n            name: \"SHA-256\"\n          };\n\n        case \"2.16.840.1.101.3.4.2.2\":\n          return {\n            name: \"SHA-384\"\n          };\n\n        case \"2.16.840.1.101.3.4.2.3\":\n          return {\n            name: \"SHA-512\"\n          };\n\n        case \"1.2.840.113549.1.5.12\":\n          return {\n            name: \"PBKDF2\"\n          };\n        //region Special case - OIDs for ECC curves\n\n        case \"1.2.840.10045.3.1.7\":\n          return {\n            name: \"P-256\"\n          };\n\n        case \"1.3.132.0.34\":\n          return {\n            name: \"P-384\"\n          };\n\n        case \"1.3.132.0.35\":\n          return {\n            name: \"P-521\"\n          };\n        //endregion\n\n        default:\n      }\n\n      return {};\n    } //**********************************************************************************\n\n    /**\r\n     * Get OID for each specific algorithm\r\n     * @param {Object} algorithm\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"getOIDByAlgorithm\",\n    value: function getOIDByAlgorithm(algorithm) {\n      var result = \"\";\n\n      switch (algorithm.name.toUpperCase()) {\n        case \"RSAES-PKCS1-V1_5\":\n          result = \"1.2.840.113549.1.1.1\";\n          break;\n\n        case \"RSASSA-PKCS1-V1_5\":\n          switch (algorithm.hash.name.toUpperCase()) {\n            case \"SHA-1\":\n              result = \"1.2.840.113549.1.1.5\";\n              break;\n\n            case \"SHA-256\":\n              result = \"1.2.840.113549.1.1.11\";\n              break;\n\n            case \"SHA-384\":\n              result = \"1.2.840.113549.1.1.12\";\n              break;\n\n            case \"SHA-512\":\n              result = \"1.2.840.113549.1.1.13\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"RSA-PSS\":\n          result = \"1.2.840.113549.1.1.10\";\n          break;\n\n        case \"RSA-OAEP\":\n          result = \"1.2.840.113549.1.1.7\";\n          break;\n\n        case \"ECDSA\":\n          switch (algorithm.hash.name.toUpperCase()) {\n            case \"SHA-1\":\n              result = \"1.2.840.10045.4.1\";\n              break;\n\n            case \"SHA-256\":\n              result = \"1.2.840.10045.4.3.2\";\n              break;\n\n            case \"SHA-384\":\n              result = \"1.2.840.10045.4.3.3\";\n              break;\n\n            case \"SHA-512\":\n              result = \"1.2.840.10045.4.3.4\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"ECDH\":\n          switch (algorithm.kdf.toUpperCase()) {\n            case \"SHA-1\":\n              result = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\n\n              break;\n\n            case \"SHA-256\":\n              result = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\n\n              break;\n\n            case \"SHA-384\":\n              result = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\n\n              break;\n\n            case \"SHA-512\":\n              result = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\n\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"AES-CTR\":\n          break;\n\n        case \"AES-CBC\":\n          switch (algorithm.length) {\n            case 128:\n              result = \"2.16.840.1.101.3.4.1.2\";\n              break;\n\n            case 192:\n              result = \"2.16.840.1.101.3.4.1.22\";\n              break;\n\n            case 256:\n              result = \"2.16.840.1.101.3.4.1.42\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"AES-CMAC\":\n          break;\n\n        case \"AES-GCM\":\n          switch (algorithm.length) {\n            case 128:\n              result = \"2.16.840.1.101.3.4.1.6\";\n              break;\n\n            case 192:\n              result = \"2.16.840.1.101.3.4.1.26\";\n              break;\n\n            case 256:\n              result = \"2.16.840.1.101.3.4.1.46\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"AES-CFB\":\n          switch (algorithm.length) {\n            case 128:\n              result = \"2.16.840.1.101.3.4.1.4\";\n              break;\n\n            case 192:\n              result = \"2.16.840.1.101.3.4.1.24\";\n              break;\n\n            case 256:\n              result = \"2.16.840.1.101.3.4.1.44\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"AES-KW\":\n          switch (algorithm.length) {\n            case 128:\n              result = \"2.16.840.1.101.3.4.1.5\";\n              break;\n\n            case 192:\n              result = \"2.16.840.1.101.3.4.1.25\";\n              break;\n\n            case 256:\n              result = \"2.16.840.1.101.3.4.1.45\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"HMAC\":\n          switch (algorithm.hash.name.toUpperCase()) {\n            case \"SHA-1\":\n              result = \"1.2.840.113549.2.7\";\n              break;\n\n            case \"SHA-256\":\n              result = \"1.2.840.113549.2.9\";\n              break;\n\n            case \"SHA-384\":\n              result = \"1.2.840.113549.2.10\";\n              break;\n\n            case \"SHA-512\":\n              result = \"1.2.840.113549.2.11\";\n              break;\n\n            default:\n          }\n\n          break;\n\n        case \"DH\":\n          result = \"1.2.840.113549.1.9.16.3.5\";\n          break;\n\n        case \"SHA-1\":\n          result = \"1.3.14.3.2.26\";\n          break;\n\n        case \"SHA-256\":\n          result = \"2.16.840.1.101.3.4.2.1\";\n          break;\n\n        case \"SHA-384\":\n          result = \"2.16.840.1.101.3.4.2.2\";\n          break;\n\n        case \"SHA-512\":\n          result = \"2.16.840.1.101.3.4.2.3\";\n          break;\n\n        case \"CONCAT\":\n          break;\n\n        case \"HKDF\":\n          break;\n\n        case \"PBKDF2\":\n          result = \"1.2.840.113549.1.5.12\";\n          break;\n        //region Special case - OIDs for ECC curves\n\n        case \"P-256\":\n          result = \"1.2.840.10045.3.1.7\";\n          break;\n\n        case \"P-384\":\n          result = \"1.3.132.0.34\";\n          break;\n\n        case \"P-521\":\n          result = \"1.3.132.0.35\";\n          break;\n        //endregion\n\n        default:\n      }\n\n      return result;\n    } //**********************************************************************************\n\n    /**\r\n     * Get default algorithm parameters for each kind of operation\r\n     * @param {string} algorithmName Algorithm name to get common parameters for\r\n     * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"getAlgorithmParameters\",\n    value: function getAlgorithmParameters(algorithmName, operation) {\n      var result = {\n        algorithm: {},\n        usages: []\n      };\n\n      switch (algorithmName.toUpperCase()) {\n        case \"RSAES-PKCS1-V1_5\":\n        case \"RSASSA-PKCS1-V1_5\":\n          switch (operation.toLowerCase()) {\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"RSASSA-PKCS1-v1_5\",\n                  modulusLength: 2048,\n                  publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                  hash: {\n                    name: \"SHA-256\"\n                  }\n                },\n                usages: [\"sign\", \"verify\"]\n              };\n              break;\n\n            case \"verify\":\n            case \"sign\":\n            case \"importkey\":\n              result = {\n                algorithm: {\n                  name: \"RSASSA-PKCS1-v1_5\",\n                  hash: {\n                    name: \"SHA-256\"\n                  }\n                },\n                usages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\n\n              };\n              break;\n\n            case \"exportkey\":\n            default:\n              return {\n                algorithm: {\n                  name: \"RSASSA-PKCS1-v1_5\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"RSA-PSS\":\n          switch (operation.toLowerCase()) {\n            case \"sign\":\n            case \"verify\":\n              result = {\n                algorithm: {\n                  name: \"RSA-PSS\",\n                  hash: {\n                    name: \"SHA-1\"\n                  },\n                  saltLength: 20\n                },\n                usages: [\"sign\", \"verify\"]\n              };\n              break;\n\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"RSA-PSS\",\n                  modulusLength: 2048,\n                  publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                  hash: {\n                    name: \"SHA-1\"\n                  }\n                },\n                usages: [\"sign\", \"verify\"]\n              };\n              break;\n\n            case \"importkey\":\n              result = {\n                algorithm: {\n                  name: \"RSA-PSS\",\n                  hash: {\n                    name: \"SHA-1\"\n                  }\n                },\n                usages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\n\n              };\n              break;\n\n            case \"exportkey\":\n            default:\n              return {\n                algorithm: {\n                  name: \"RSA-PSS\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"RSA-OAEP\":\n          switch (operation.toLowerCase()) {\n            case \"encrypt\":\n            case \"decrypt\":\n              result = {\n                algorithm: {\n                  name: \"RSA-OAEP\"\n                },\n                usages: [\"encrypt\", \"decrypt\"]\n              };\n              break;\n\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"RSA-OAEP\",\n                  modulusLength: 2048,\n                  publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                  hash: {\n                    name: \"SHA-256\"\n                  }\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            case \"importkey\":\n              result = {\n                algorithm: {\n                  name: \"RSA-OAEP\",\n                  hash: {\n                    name: \"SHA-256\"\n                  }\n                },\n                usages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\n\n              };\n              break;\n\n            case \"exportkey\":\n            default:\n              return {\n                algorithm: {\n                  name: \"RSA-OAEP\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"ECDSA\":\n          switch (operation.toLowerCase()) {\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"ECDSA\",\n                  namedCurve: \"P-256\"\n                },\n                usages: [\"sign\", \"verify\"]\n              };\n              break;\n\n            case \"importkey\":\n              result = {\n                algorithm: {\n                  name: \"ECDSA\",\n                  namedCurve: \"P-256\"\n                },\n                usages: [\"verify\"] // \"sign\" for \"pkcs8\"\n\n              };\n              break;\n\n            case \"verify\":\n            case \"sign\":\n              result = {\n                algorithm: {\n                  name: \"ECDSA\",\n                  hash: {\n                    name: \"SHA-256\"\n                  }\n                },\n                usages: [\"sign\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"ECDSA\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"ECDH\":\n          switch (operation.toLowerCase()) {\n            case \"exportkey\":\n            case \"importkey\":\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"ECDH\",\n                  namedCurve: \"P-256\"\n                },\n                usages: [\"deriveKey\", \"deriveBits\"]\n              };\n              break;\n\n            case \"derivekey\":\n            case \"derivebits\":\n              result = {\n                algorithm: {\n                  name: \"ECDH\",\n                  namedCurve: \"P-256\",\n                  public: [] // Must be a \"publicKey\"\n\n                },\n                usages: [\"encrypt\", \"decrypt\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"ECDH\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"AES-CTR\":\n          switch (operation.toLowerCase()) {\n            case \"importkey\":\n            case \"exportkey\":\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"AES-CTR\",\n                  length: 256\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            case \"decrypt\":\n            case \"encrypt\":\n              result = {\n                algorithm: {\n                  name: \"AES-CTR\",\n                  counter: new Uint8Array(16),\n                  length: 10\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"AES-CTR\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"AES-CBC\":\n          switch (operation.toLowerCase()) {\n            case \"importkey\":\n            case \"exportkey\":\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"AES-CBC\",\n                  length: 256\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            case \"decrypt\":\n            case \"encrypt\":\n              result = {\n                algorithm: {\n                  name: \"AES-CBC\",\n                  iv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\n\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"AES-CBC\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"AES-GCM\":\n          switch (operation.toLowerCase()) {\n            case \"importkey\":\n            case \"exportkey\":\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"AES-GCM\",\n                  length: 256\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            case \"decrypt\":\n            case \"encrypt\":\n              result = {\n                algorithm: {\n                  name: \"AES-GCM\",\n                  iv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\n\n                },\n                usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"AES-GCM\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"AES-KW\":\n          switch (operation.toLowerCase()) {\n            case \"importkey\":\n            case \"exportkey\":\n            case \"generatekey\":\n            case \"wrapkey\":\n            case \"unwrapkey\":\n              result = {\n                algorithm: {\n                  name: \"AES-KW\",\n                  length: 256\n                },\n                usages: [\"wrapKey\", \"unwrapKey\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"AES-KW\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"HMAC\":\n          switch (operation.toLowerCase()) {\n            case \"sign\":\n            case \"verify\":\n              result = {\n                algorithm: {\n                  name: \"HMAC\"\n                },\n                usages: [\"sign\", \"verify\"]\n              };\n              break;\n\n            case \"importkey\":\n            case \"exportkey\":\n            case \"generatekey\":\n              result = {\n                algorithm: {\n                  name: \"HMAC\",\n                  length: 32,\n                  hash: {\n                    name: \"SHA-256\"\n                  }\n                },\n                usages: [\"sign\", \"verify\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"HMAC\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"HKDF\":\n          switch (operation.toLowerCase()) {\n            case \"derivekey\":\n              result = {\n                algorithm: {\n                  name: \"HKDF\",\n                  hash: \"SHA-256\",\n                  salt: new Uint8Array([]),\n                  info: new Uint8Array([])\n                },\n                usages: [\"encrypt\", \"decrypt\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"HKDF\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        case \"PBKDF2\":\n          switch (operation.toLowerCase()) {\n            case \"derivekey\":\n              result = {\n                algorithm: {\n                  name: \"PBKDF2\",\n                  hash: {\n                    name: \"SHA-256\"\n                  },\n                  salt: new Uint8Array([]),\n                  iterations: 10000\n                },\n                usages: [\"encrypt\", \"decrypt\"]\n              };\n              break;\n\n            default:\n              return {\n                algorithm: {\n                  name: \"PBKDF2\"\n                },\n                usages: []\n              };\n          }\n\n          break;\n\n        default:\n      }\n\n      return result;\n    } //**********************************************************************************\n\n    /**\r\n     * Getting hash algorithm by signature algorithm\r\n     * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"getHashAlgorithm\",\n    value: function getHashAlgorithm(signatureAlgorithm) {\n      var result = \"\";\n\n      switch (signatureAlgorithm.algorithmId) {\n        case \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\n\n        case \"1.2.840.113549.1.1.5\":\n          result = \"SHA-1\";\n          break;\n\n        case \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\n\n        case \"1.2.840.113549.1.1.11\":\n          result = \"SHA-256\";\n          break;\n\n        case \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\n\n        case \"1.2.840.113549.1.1.12\":\n          result = \"SHA-384\";\n          break;\n\n        case \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\n\n        case \"1.2.840.113549.1.1.13\":\n          result = \"SHA-512\";\n          break;\n\n        case \"1.2.840.113549.1.1.10\":\n          // RSA-PSS\n          {\n            try {\n              var params = new RSASSAPSSParams({\n                schema: signatureAlgorithm.algorithmParams\n              });\n\n              if (\"hashAlgorithm\" in params) {\n                var algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n                if (\"name\" in algorithm === false) return \"\";\n                result = algorithm.name;\n              } else result = \"SHA-1\";\n            } catch (ex) {}\n          }\n          break;\n\n        default:\n      }\n\n      return result;\n    } //**********************************************************************************\n\n    /**\r\n     * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n     * @param {Object} parameters\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"encryptEncryptedContentInfo\",\n    value: function encryptEncryptedContentInfo(parameters) {\n      var _this3 = this;\n\n      //region Check for input parameters\n      if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n      if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n      if (\"contentEncryptionAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\n      if (\"hmacHashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\n      if (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n      if (\"contentToEncrypt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\n      if (\"contentType\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\n      var contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\n      if (contentEncryptionOID === \"\") return Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\n      var pbkdf2OID = this.getOIDByAlgorithm({\n        name: \"PBKDF2\"\n      });\n      if (pbkdf2OID === \"\") return Promise.reject(\"Can not find OID for PBKDF2\");\n      var hmacOID = this.getOIDByAlgorithm({\n        name: \"HMAC\",\n        hash: {\n          name: parameters.hmacHashAlgorithm\n        }\n      });\n      if (hmacOID === \"\") return Promise.reject(\"Incorrect value for \\\"hmacHashAlgorithm\\\": \".concat(parameters.hmacHashAlgorithm)); //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve();\n      var ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\n\n      var ivView = new Uint8Array(ivBuffer);\n      this.getRandomValues(ivView);\n      var saltBuffer = new ArrayBuffer(64);\n      var saltView = new Uint8Array(saltBuffer);\n      this.getRandomValues(saltView);\n      var contentView = new Uint8Array(parameters.contentToEncrypt);\n      var pbkdf2Params = new PBKDF2Params({\n        salt: new asn1js.OctetString({\n          valueHex: saltBuffer\n        }),\n        iterationCount: parameters.iterationCount,\n        prf: new AlgorithmIdentifier({\n          algorithmId: hmacOID,\n          algorithmParams: new asn1js.Null()\n        })\n      }); //endregion\n      //region Derive PBKDF2 key from \"password\" buffer\n\n      sequence = sequence.then(function () {\n        var passwordView = new Uint8Array(parameters.password);\n        return _this3.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n      //region Derive key for \"contentEncryptionAlgorithm\"\n\n      sequence = sequence.then(function (result) {\n        return _this3.deriveKey({\n          name: \"PBKDF2\",\n          hash: {\n            name: parameters.hmacHashAlgorithm\n          },\n          salt: saltView,\n          iterations: parameters.iterationCount\n        }, result, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n      //region Encrypt content\n\n      sequence = sequence.then(function (result) {\n        return _this3.encrypt({\n          name: parameters.contentEncryptionAlgorithm.name,\n          iv: ivView\n        }, result, contentView);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n      //region Store all parameters in EncryptedData object\n\n      sequence = sequence.then(function (result) {\n        var pbes2Parameters = new PBES2Params({\n          keyDerivationFunc: new AlgorithmIdentifier({\n            algorithmId: pbkdf2OID,\n            algorithmParams: pbkdf2Params.toSchema()\n          }),\n          encryptionScheme: new AlgorithmIdentifier({\n            algorithmId: contentEncryptionOID,\n            algorithmParams: new asn1js.OctetString({\n              valueHex: ivBuffer\n            })\n          })\n        });\n        return new EncryptedContentInfo({\n          contentType: parameters.contentType,\n          contentEncryptionAlgorithm: new AlgorithmIdentifier({\n            algorithmId: \"1.2.840.113549.1.5.13\",\n            // pkcs5PBES2\n            algorithmParams: pbes2Parameters.toSchema()\n          }),\n          encryptedContent: new asn1js.OctetString({\n            valueHex: result\n          })\n        });\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n     * @param parameters\r\n     * @return {Promise}\r\n     */\n\n  }, {\n    key: \"decryptEncryptedContentInfo\",\n    value: function decryptEncryptedContentInfo(parameters) {\n      var _this4 = this;\n\n      //region Check for input parameters\n      if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n      if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n      if (\"encryptedContentInfo\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\n      if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\n        return Promise.reject(\"Unknown \\\"contentEncryptionAlgorithm\\\": \".concat(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId)); //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve();\n      var pbes2Parameters;\n\n      try {\n        pbes2Parameters = new PBES2Params({\n          schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams\n        });\n      } catch (ex) {\n        return Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n      }\n\n      var pbkdf2Params;\n\n      try {\n        pbkdf2Params = new PBKDF2Params({\n          schema: pbes2Parameters.keyDerivationFunc.algorithmParams\n        });\n      } catch (ex) {\n        return Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n      }\n\n      var contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\n      if (\"name\" in contentEncryptionAlgorithm === false) return Promise.reject(\"Incorrect OID for \\\"contentEncryptionAlgorithm\\\": \".concat(pbes2Parameters.encryptionScheme.algorithmId));\n      var ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n      var ivView = new Uint8Array(ivBuffer);\n      var saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n      var saltView = new Uint8Array(saltBuffer);\n      var iterationCount = pbkdf2Params.iterationCount;\n      var hmacHashAlgorithm = \"SHA-1\";\n\n      if (\"prf\" in pbkdf2Params) {\n        var algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\n        if (\"name\" in algorithm === false) return Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\n        hmacHashAlgorithm = algorithm.hash.name;\n      } //endregion\n      //region Derive PBKDF2 key from \"password\" buffer\n\n\n      sequence = sequence.then(function () {\n        return _this4.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n      //region Derive key for \"contentEncryptionAlgorithm\"\n\n      sequence = sequence.then(function (result) {\n        return _this4.deriveKey({\n          name: \"PBKDF2\",\n          hash: {\n            name: hmacHashAlgorithm\n          },\n          salt: saltView,\n          iterations: iterationCount\n        }, result, contentEncryptionAlgorithm, false, [\"decrypt\"]);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n      //region Decrypt internal content using derived key\n\n      sequence = sequence.then(function (result) {\n        //region Create correct data block for decryption\n        var dataBuffer = new ArrayBuffer(0);\n        if (parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false) dataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;else {\n          var _iterator = _createForOfIteratorHelper(parameters.encryptedContentInfo.encryptedContent.valueBlock.value),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var content = _step.value;\n              dataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } //endregion\n\n        return _this4.decrypt({\n          name: contentEncryptionAlgorithm.name,\n          iv: ivView\n        }, result, dataBuffer);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Stamping (signing) data using algorithm simular to HMAC\r\n     * @param {Object} parameters\r\n     * @return {Promise.<T>|Promise}\r\n     */\n\n  }, {\n    key: \"stampDataWithPassword\",\n    value: function stampDataWithPassword(parameters) {\n      var _this5 = this;\n\n      //region Check for input parameters\n      if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n      if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n      if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\n      if (\"salt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n      if (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\n      if (\"contentToStamp\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\"); //endregion\n      //region Choose correct length for HMAC key\n\n      var length;\n\n      switch (parameters.hashAlgorithm.toLowerCase()) {\n        case \"sha-1\":\n          length = 160;\n          break;\n\n        case \"sha-256\":\n          length = 256;\n          break;\n\n        case \"sha-384\":\n          length = 384;\n          break;\n\n        case \"sha-512\":\n          length = 512;\n          break;\n\n        default:\n          return Promise.reject(\"Incorrect \\\"parameters.hashAlgorithm\\\" parameter: \".concat(parameters.hashAlgorithm));\n      } //endregion\n      //region Initial variables\n\n\n      var sequence = Promise.resolve();\n      var hmacAlgorithm = {\n        name: \"HMAC\",\n        length: length,\n        hash: {\n          name: parameters.hashAlgorithm\n        }\n      }; //endregion\n      //region Create PKCS#12 key for integrity checking\n\n      sequence = sequence.then(function () {\n        return makePKCS12B2Key(_this5, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n      }); //endregion\n      //region Import HMAC key\n      // noinspection JSCheckFunctionSignatures\n\n      sequence = sequence.then(function (result) {\n        return _this5.importKey(\"raw\", new Uint8Array(result), hmacAlgorithm, false, [\"sign\"]);\n      }); //endregion\n      //region Make signed HMAC value\n\n      sequence = sequence.then(function (result) {\n        return _this5.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp));\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }, {\n    key: \"verifyDataStampedWithPassword\",\n    value: function verifyDataStampedWithPassword(parameters) {\n      var _this6 = this;\n\n      //region Check for input parameters\n      if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\");\n      if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\n      if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\n      if (\"salt\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\n      if (\"iterationCount\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\n      if (\"contentToVerify\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\n      if (\"signatureToVerify\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\"); //endregion\n      //region Choose correct length for HMAC key\n\n      var length;\n\n      switch (parameters.hashAlgorithm.toLowerCase()) {\n        case \"sha-1\":\n          length = 160;\n          break;\n\n        case \"sha-256\":\n          length = 256;\n          break;\n\n        case \"sha-384\":\n          length = 384;\n          break;\n\n        case \"sha-512\":\n          length = 512;\n          break;\n\n        default:\n          return Promise.reject(\"Incorrect \\\"parameters.hashAlgorithm\\\" parameter: \".concat(parameters.hashAlgorithm));\n      } //endregion\n      //region Initial variables\n\n\n      var sequence = Promise.resolve();\n      var hmacAlgorithm = {\n        name: \"HMAC\",\n        length: length,\n        hash: {\n          name: parameters.hashAlgorithm\n        }\n      }; //endregion\n      //region Create PKCS#12 key for integrity checking\n\n      sequence = sequence.then(function () {\n        return makePKCS12B2Key(_this6, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n      }); //endregion\n      //region Import HMAC key\n      // noinspection JSCheckFunctionSignatures\n\n      sequence = sequence.then(function (result) {\n        return _this6.importKey(\"raw\", new Uint8Array(result), hmacAlgorithm, false, [\"verify\"]);\n      }); //endregion\n      //region Make signed HMAC value\n\n      sequence = sequence.then(function (result) {\n        return _this6.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Get signature parameters by analyzing private key algorithm\r\n     * @param {Object} privateKey The private key user would like to use\r\n     * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n     * @return {Promise.<T>|Promise}\r\n     */\n\n  }, {\n    key: \"getSignatureParameters\",\n    value: function getSignatureParameters(privateKey) {\n      var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"SHA-1\";\n      //region Check hashing algorithm\n      var oid = this.getOIDByAlgorithm({\n        name: hashAlgorithm\n      });\n      if (oid === \"\") return Promise.reject(\"Unsupported hash algorithm: \".concat(hashAlgorithm)); //endregion\n      //region Initial variables\n\n      var signatureAlgorithm = new AlgorithmIdentifier(); //endregion\n      //region Get a \"default parameters\" for current algorithm\n\n      var parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n      parameters.algorithm.hash.name = hashAlgorithm; //endregion\n      //region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\n\n      switch (privateKey.algorithm.name.toUpperCase()) {\n        case \"RSASSA-PKCS1-V1_5\":\n        case \"ECDSA\":\n          signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\n          break;\n\n        case \"RSA-PSS\":\n          {\n            //region Set \"saltLength\" as a length (in octets) of hash function result\n            switch (hashAlgorithm.toUpperCase()) {\n              case \"SHA-256\":\n                parameters.algorithm.saltLength = 32;\n                break;\n\n              case \"SHA-384\":\n                parameters.algorithm.saltLength = 48;\n                break;\n\n              case \"SHA-512\":\n                parameters.algorithm.saltLength = 64;\n                break;\n\n              default:\n            } //endregion\n            //region Fill \"RSASSA_PSS_params\" object\n\n\n            var paramsObject = {};\n\n            if (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\n              var hashAlgorithmOID = this.getOIDByAlgorithm({\n                name: hashAlgorithm\n              });\n              if (hashAlgorithmOID === \"\") return Promise.reject(\"Unsupported hash algorithm: \".concat(hashAlgorithm));\n              paramsObject.hashAlgorithm = new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js.Null()\n              });\n              paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\n                algorithmId: \"1.2.840.113549.1.1.8\",\n                // MGF1\n                algorithmParams: paramsObject.hashAlgorithm.toSchema()\n              });\n            }\n\n            if (parameters.algorithm.saltLength !== 20) paramsObject.saltLength = parameters.algorithm.saltLength;\n            var pssParameters = new RSASSAPSSParams(paramsObject); //endregion\n            //region Automatically set signature algorithm\n\n            signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n            signatureAlgorithm.algorithmParams = pssParameters.toSchema(); //endregion\n          }\n          break;\n\n        default:\n          return Promise.reject(\"Unsupported signature algorithm: \".concat(privateKey.algorithm.name));\n      } //endregion\n\n\n      return Promise.resolve().then(function () {\n        return {\n          signatureAlgorithm: signatureAlgorithm,\n          parameters: parameters\n        };\n      });\n    } //**********************************************************************************\n\n    /**\r\n     * Sign data with pre-defined private key\r\n     * @param {ArrayBuffer} data Data to be signed\r\n     * @param {Object} privateKey Private key to use\r\n     * @param {Object} parameters Parameters for used algorithm\r\n     * @return {Promise.<T>|Promise}\r\n     */\n\n  }, {\n    key: \"signWithPrivateKey\",\n    value: function signWithPrivateKey(data, privateKey, parameters) {\n      return this.sign(parameters.algorithm, privateKey, new Uint8Array(data)).then(function (result) {\n        //region Special case for ECDSA algorithm\n        if (parameters.algorithm.name === \"ECDSA\") result = createCMSECDSASignature(result); //endregion\n\n        return result;\n      }, function (error) {\n        return Promise.reject(\"Signing error: \".concat(error));\n      });\n    } //**********************************************************************************\n\n  }, {\n    key: \"fillPublicKeyParameters\",\n    value: function fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n      var parameters = {}; //region Find signer's hashing algorithm\n\n      var shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n      if (shaAlgorithm === \"\") return Promise.reject(\"Unsupported signature algorithm: \".concat(signatureAlgorithm.algorithmId)); //endregion\n      //region Get information about public key algorithm and default parameters for import\n\n      var algorithmId;\n      if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;\n      var algorithmObject = this.getAlgorithmByOID(algorithmId);\n      if (\"name\" in algorithmObject === \"\") return Promise.reject(\"Unsupported public key algorithm: \".concat(signatureAlgorithm.algorithmId));\n      parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\n      if (\"hash\" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm; //region Special case for ECDSA\n\n      if (algorithmObject.name === \"ECDSA\") {\n        //region Get information about named curve\n        var algorithmParamsChecked = false;\n\n        if (\"algorithmParams\" in publicKeyInfo.algorithm === true) {\n          if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n            if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;\n          }\n        }\n\n        if (algorithmParamsChecked === false) return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\n        var curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\n        if (\"name\" in curveObject === false) return Promise.reject(\"Unsupported named curve algorithm: \".concat(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString())); //endregion\n\n        parameters.algorithm.algorithm.namedCurve = curveObject.name;\n      } //endregion\n      //endregion\n\n\n      return parameters;\n    } //**********************************************************************************\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey(publicKeyInfo, signatureAlgorithm) {\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (parameters === null) parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n      var publicKeyInfoSchema = publicKeyInfo.toSchema();\n      var publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\n      var publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\n      return this.importKey(\"spki\", publicKeyInfoView, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n    } //**********************************************************************************\n\n  }, {\n    key: \"verifyWithPublicKey\",\n    value: function verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm) {\n      var _this7 = this;\n\n      var shaAlgorithm = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      //region Initial variables\n      var sequence = Promise.resolve(); //endregion\n      //region Find signer's hashing algorithm\n\n      if (shaAlgorithm === null) {\n        shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n        if (shaAlgorithm === \"\") return Promise.reject(\"Unsupported signature algorithm: \".concat(signatureAlgorithm.algorithmId)); //region Import public key\n\n        sequence = sequence.then(function () {\n          return _this7.getPublicKey(publicKeyInfo, signatureAlgorithm);\n        }); //endregion\n      } else {\n        var parameters = {}; //region Get information about public key algorithm and default parameters for import\n\n        var algorithmId;\n        if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\") algorithmId = signatureAlgorithm.algorithmId;else algorithmId = publicKeyInfo.algorithm.algorithmId;\n        var algorithmObject = this.getAlgorithmByOID(algorithmId);\n        if (\"name\" in algorithmObject === \"\") return Promise.reject(\"Unsupported public key algorithm: \".concat(signatureAlgorithm.algorithmId));\n        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\n        if (\"hash\" in parameters.algorithm.algorithm) parameters.algorithm.algorithm.hash.name = shaAlgorithm; //region Special case for ECDSA\n\n        if (algorithmObject.name === \"ECDSA\") {\n          //region Get information about named curve\n          var algorithmParamsChecked = false;\n\n          if (\"algorithmParams\" in publicKeyInfo.algorithm === true) {\n            if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n              if (publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1 && publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6) algorithmParamsChecked = true;\n            }\n          }\n\n          if (algorithmParamsChecked === false) return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\n          var curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\n          if (\"name\" in curveObject === false) return Promise.reject(\"Unsupported named curve algorithm: \".concat(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString())); //endregion\n\n          parameters.algorithm.algorithm.namedCurve = curveObject.name;\n        } //endregion\n        //endregion\n        //region Import public key\n\n\n        sequence = sequence.then(function () {\n          return _this7.getPublicKey(publicKeyInfo, null, parameters);\n        }); //endregion\n      } //endregion\n      //region Verify signature\n\n\n      sequence = sequence.then(function (publicKey) {\n        //region Get default algorithm parameters for verification\n        var algorithm = _this7.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n\n        if (\"hash\" in algorithm.algorithm) algorithm.algorithm.hash.name = shaAlgorithm; //endregion\n        //region Special case for ECDSA signatures\n\n        var signatureValue = signature.valueBlock.valueHex;\n\n        if (publicKey.algorithm.name === \"ECDSA\") {\n          var asn1 = asn1js.fromBER(signatureValue); // noinspection JSCheckFunctionSignatures\n\n          signatureValue = createECDSASignatureFromCMS(asn1.result);\n        } //endregion\n        //region Special case for RSA-PSS\n\n\n        if (publicKey.algorithm.name === \"RSA-PSS\") {\n          var pssParameters;\n\n          try {\n            pssParameters = new RSASSAPSSParams({\n              schema: signatureAlgorithm.algorithmParams\n            });\n          } catch (ex) {\n            return Promise.reject(ex);\n          }\n\n          if (\"saltLength\" in pssParameters) algorithm.algorithm.saltLength = pssParameters.saltLength;else algorithm.algorithm.saltLength = 20;\n          var hashAlgo = \"SHA-1\";\n\n          if (\"hashAlgorithm\" in pssParameters) {\n            var hashAlgorithm = _this7.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\n\n            if (\"name\" in hashAlgorithm === false) return Promise.reject(\"Unrecognized hash algorithm: \".concat(pssParameters.hashAlgorithm.algorithmId));\n            hashAlgo = hashAlgorithm.name;\n          }\n\n          algorithm.algorithm.hash.name = hashAlgo;\n        } //endregion\n\n\n        return _this7.verify(algorithm.algorithm, publicKey, new Uint8Array(signatureValue), new Uint8Array(data));\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }]);\n\n  return CryptoEngine;\n}(); //**************************************************************************************\n\n\nexport { CryptoEngine as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CryptoEngine.js"],"names":["asn1js","getParametersValue","stringToArrayBuffer","arrayBufferToString","utilConcatBuf","createCMSECDSASignature","createECDSASignatureFromCMS","PublicKeyInfo","PrivateKeyInfo","AlgorithmIdentifier","EncryptedContentInfo","RSASSAPSSParams","PBKDF2Params","PBES2Params","makePKCS12B2Key","cryptoEngine","hashAlgorithm","keyLength","password","salt","iterationCount","u","v","result","toUpperCase","Error","passwordViewInitial","Uint8Array","passwordTransformed","ArrayBuffer","byteLength","passwordTransformedView","i","length","slice","D","dView","saltLength","sLen","Math","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","set","c","internalSequence","Promise","resolve","then","_I","dAndI","dAndIView","j","roundBuffer","digest","name","B","bView","k","iRound","sliceStart","sliceLength","chunk","Array","from","x","l","push","resultBuffer","resultView","CryptoEngine","parameters","crypto","subtle","format","keyData","algorithm","extractable","keyUsages","jwk","buffer","toLowerCase","importKey","asn1","fromBER","offset","reject","publicKeyInfo","fromSchema","ex","hash","alg","kty","ext","key_ops","algorithmId","publicKeyJSON","toJSON","Object","keys","key","privateKeyInfo","privateKeyAlgorithm","privateKeyJSON","JSON","stringify","sequence","exportKey","parse","fromJSON","toSchema","toBER","inputFormat","outputFormat","encrypt","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","view","getRandomValues","oid","kdf","algorithmName","operation","usages","modulusLength","publicExponent","namedCurve","public","counter","iv","info","iterations","signatureAlgorithm","params","schema","algorithmParams","getAlgorithmByOID","contentEncryptionOID","getOIDByAlgorithm","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","OctetString","valueHex","prf","Null","error","pbes2Parameters","keyDerivationFunc","encryptionScheme","contentType","encryptedContent","encryptedContentInfo","valueBlock","dataBuffer","idBlock","isConstructed","value","content","hmacAlgorithm","contentToStamp","signatureToVerify","contentToVerify","privateKey","getAlgorithmParameters","paramsObject","hashAlgorithmOID","maskGenAlgorithm","pssParameters","data","shaAlgorithm","getHashAlgorithm","algorithmObject","algorithmParamsChecked","tagClass","tagNumber","curveObject","toString","fillPublicKeyParameters","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","signature","getPublicKey","publicKey","signatureValue","hashAlgo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"decrypt\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSAES-PKCS1-v1_5\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar RevocationInfoChoices = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RevocationInfoChoices class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function RevocationInfoChoices() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RevocationInfoChoices);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<CertificateRevocationList>}\r\n     * @desc crls\r\n     */\n    this.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\n    /**\r\n     * @type {Array.<OtherRevocationInfoFormat>}\r\n     * @desc otherRevocationInfos\r\n     */\n\n    this.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(RevocationInfoChoices, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"crls\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RevocationInfoChoices.schema({\n        names: {\n          crls: \"crls\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\"); //endregion\n      //region Get internal properties from parsed schema\n\n      var _iterator = _createForOfIteratorHelper(asn1.result.crls),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n          if (element.idBlock.tagClass === 1) this.crls.push(new CertificateRevocationList({\n            schema: element\n          }));else this.otherRevocationInfos.push(new OtherRevocationInfoFormat({\n            schema: element\n          }));\n        } //endregion\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output set\n      var outputArray = [];\n      outputArray.push.apply(outputArray, _toConsumableArray(Array.from(this.crls, function (element) {\n        return element.toSchema();\n      })));\n      outputArray.push.apply(outputArray, _toConsumableArray(Array.from(this.otherRevocationInfos, function (element) {\n        var schema = element.toSchema();\n        schema.idBlock.tagClass = 3;\n        schema.idBlock.tagNumber = 1;\n        return schema;\n      }))); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Set({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        crls: Array.from(this.crls, function (element) {\n          return element.toJSON();\n        }),\n        otherRevocationInfos: Array.from(this.otherRevocationInfos, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"crls\":\n          return [];\n\n        case \"otherRevocationInfos\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for RevocationInfoChoices class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n     *\r\n     * RevocationInfoChoice ::= CHOICE {\r\n     *    crl CertificateList,\r\n     *    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [crls]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Set({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.crls || \"\",\n          value: new asn1js.Choice({\n            value: [CertificateRevocationList.schema(), new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 1 // [1]\n\n              },\n              value: [new asn1js.ObjectIdentifier(), new asn1js.Any()]\n            })]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return RevocationInfoChoices;\n}(); //**************************************************************************************\n\n\nexport { RevocationInfoChoices as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RevocationInfoChoices.js"],"names":["asn1js","getParametersValue","clearProps","CertificateRevocationList","OtherRevocationInfoFormat","RevocationInfoChoices","parameters","crls","defaultValues","otherRevocationInfos","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","element","idBlock","tagClass","push","outputArray","Array","from","toSchema","tagNumber","Set","value","toJSON","memberName","name","blockName","Repeated","Choice","Constructed","ObjectIdentifier","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RevocationInfoChoices \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @desc otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\t *\r\n\t * RevocationInfoChoice ::= CHOICE {\r\n\t *    crl CertificateList,\r\n\t *    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element =>\r\n\t\t{\r\n\t\t\tconst schema = element.toSchema();\r\n\t\t\t\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
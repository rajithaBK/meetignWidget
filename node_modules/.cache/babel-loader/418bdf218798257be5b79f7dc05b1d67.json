{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar EncryptedContentInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EncryptedContentInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function EncryptedContentInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, EncryptedContentInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc contentType\r\n     */\n    this.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc contentEncryptionAlgorithm\r\n     */\n\n    this.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\n\n    if (\"encryptedContent\" in parameters) {\n      /**\r\n       * @type {OctetString}\r\n       * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n       */\n      this.encryptedContent = parameters.encryptedContent;\n\n      if (this.encryptedContent.idBlock.tagClass === 1 && this.encryptedContent.idBlock.tagNumber === 4) {\n        //region Divide OCTETSTRING value down to small pieces\n        if (this.encryptedContent.idBlock.isConstructed === false) {\n          var constrString = new asn1js.OctetString({\n            idBlock: {\n              isConstructed: true\n            },\n            isConstructed: true\n          });\n          var offset = 0;\n          var length = this.encryptedContent.valueBlock.valueHex.byteLength;\n\n          while (length > 0) {\n            var pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, offset + 1024 > this.encryptedContent.valueBlock.valueHex.byteLength ? this.encryptedContent.valueBlock.valueHex.byteLength - offset : 1024);\n\n            var _array = new ArrayBuffer(pieceView.length);\n\n            var _view = new Uint8Array(_array);\n\n            for (var i = 0; i < _view.length; i++) {\n              _view[i] = pieceView[i];\n            }\n\n            constrString.valueBlock.value.push(new asn1js.OctetString({\n              valueHex: _array\n            }));\n            length -= pieceView.length;\n            offset += pieceView.length;\n          }\n\n          this.encryptedContent = constrString;\n        } //endregion\n\n      }\n    } //endregion\n    //region If input argument array contains \"schema\" for this object\n\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(EncryptedContentInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"contentType\", \"contentEncryptionAlgorithm\", \"encryptedContent\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({\n        names: {\n          contentType: \"contentType\",\n          contentEncryptionAlgorithm: {\n            names: {\n              blockName: \"contentEncryptionAlgorithm\"\n            }\n          },\n          encryptedContent: \"encryptedContent\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.contentType = asn1.result.contentType.valueBlock.toString();\n      this.contentEncryptionAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.contentEncryptionAlgorithm\n      });\n\n      if (\"encryptedContent\" in asn1.result) {\n        this.encryptedContent = asn1.result.encryptedContent;\n        this.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\n\n        this.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var sequenceLengthBlock = {\n        isIndefiniteForm: false\n      };\n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.contentType\n      }));\n      outputArray.push(this.contentEncryptionAlgorithm.toSchema());\n\n      if (\"encryptedContent\" in this) {\n        sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n        var encryptedValue = this.encryptedContent;\n        encryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\n\n        encryptedValue.idBlock.tagNumber = 0; // [0]\n\n        encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n        outputArray.push(encryptedValue);\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        lenBlock: sequenceLengthBlock,\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        contentType: this.contentType,\n        contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n      };\n      if (\"encryptedContent\" in this) _object.encryptedContent = this.encryptedContent.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"contentType\":\n          return \"\";\n\n        case \"contentEncryptionAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"encryptedContent\":\n          return new asn1js.OctetString();\n\n        default:\n          throw new Error(\"Invalid member name for EncryptedContentInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"contentType\":\n          return memberValue === \"\";\n\n        case \"contentEncryptionAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"encryptedContent\":\n          return memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName));\n\n        default:\n          throw new Error(\"Invalid member name for EncryptedContentInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * EncryptedContentInfo ::= SEQUENCE {\r\n     *    contentType ContentType,\r\n     *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n     *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n     *\r\n     * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n     *\r\n     * EncryptedContent ::= OCTET STRING\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [contentType]\r\n       * @property {string} [contentEncryptionAlgorithm]\r\n       * @property {string} [encryptedContent]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.contentType || \"\"\n        }), AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}), // The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\n        // or \"primitive\" form of encoding and we need to handle both variants\n        new asn1js.Choice({\n          value: [new asn1js.Constructed({\n            name: names.encryptedContent || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Repeated({\n              value: new asn1js.OctetString()\n            })]\n          }), new asn1js.Primitive({\n            name: names.encryptedContent || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return EncryptedContentInfo;\n}(); //**************************************************************************************\n\n\nexport { EncryptedContentInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/EncryptedContentInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","EncryptedContentInfo","parameters","contentType","defaultValues","contentEncryptionAlgorithm","encryptedContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","toString","sequenceLengthBlock","isIndefiniteForm","outputArray","ObjectIdentifier","toSchema","encryptedValue","lenBlock","Sequence","_object","toJSON","memberName","memberValue","algorithmId","isEqual","name","Choice","Constructed","Repeated","Primitive"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t *\r\n\t * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t *\r\n\t * EncryptedContent ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"contentEncryptionAlgorithm\",\r\n\t\t\t\"encryptedContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
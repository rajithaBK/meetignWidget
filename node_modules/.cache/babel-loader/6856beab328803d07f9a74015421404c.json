{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport ECPublicKey from \"./ECPublicKey.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5915\n */\n\nexport default class ECPrivateKey {\n  //**********************************************************************************\n\n  /**\n   * Constructor for ECPrivateKey class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\n    /**\n     * @type {OctetString}\n     * @desc privateKey\n     */\n\n    this.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\n    if (\"namedCurve\" in parameters)\n      /**\n       * @type {string}\n       * @desc namedCurve\n       */\n      this.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\n    if (\"publicKey\" in parameters)\n      /**\n       * @type {ECPublicKey}\n       * @desc publicKey\n       */\n      this.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 1;\n\n      case \"privateKey\":\n        return new asn1js.OctetString();\n\n      case \"namedCurve\":\n        return \"\";\n\n      case \"publicKey\":\n        return new ECPublicKey();\n\n      default:\n        throw new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"version\":\n        return memberValue === ECPrivateKey.defaultValues(memberName);\n\n      case \"privateKey\":\n        return memberValue.isEqual(ECPrivateKey.defaultValues(memberName));\n\n      case \"namedCurve\":\n        return memberValue === \"\";\n\n      case \"publicKey\":\n        return ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve) && ECPublicKey.compareWithDefault(\"x\", memberValue.x) && ECPublicKey.compareWithDefault(\"y\", memberValue.y);\n\n      default:\n        throw new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * ECPrivateKey ::= SEQUENCE {\n   * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n   * privateKey     OCTET STRING,\n   * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n   * publicKey  [1] BIT STRING OPTIONAL\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [version]\n     * @property {string} [privateKey]\n     * @property {string} [namedCurve]\n     * @property {string} [publicKey]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), new asn1js.OctetString({\n        name: names.privateKey || \"\"\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.ObjectIdentifier({\n          name: names.namedCurve || \"\"\n        })]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.BitString({\n          name: names.publicKey || \"\"\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"privateKey\", \"namedCurve\", \"publicKey\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({\n      names: {\n        version: \"version\",\n        privateKey: \"privateKey\",\n        namedCurve: \"namedCurve\",\n        publicKey: \"publicKey\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ECPrivateKey\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.privateKey = asn1.result.privateKey;\n    if (\"namedCurve\" in asn1.result) this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n\n    if (\"publicKey\" in asn1.result) {\n      const publicKeyData = {\n        schema: asn1.result.publicKey.valueBlock.valueHex\n      };\n      if (\"namedCurve\" in this) publicKeyData.namedCurve = this.namedCurve;\n      this.publicKey = new ECPublicKey(publicKeyData);\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    const outputArray = [new asn1js.Integer({\n      value: this.version\n    }), this.privateKey];\n\n    if (\"namedCurve\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.ObjectIdentifier({\n          value: this.namedCurve\n        })]\n      }));\n    }\n\n    if (\"publicKey\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.BitString({\n          valueHex: this.publicKey.toSchema().toBER(false)\n        })]\n      }));\n    }\n\n    return new asn1js.Sequence({\n      value: outputArray\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    if (\"namedCurve\" in this === false || ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)) throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n    let crvName = \"\";\n\n    switch (this.namedCurve) {\n      case \"1.2.840.10045.3.1.7\":\n        // P-256\n        crvName = \"P-256\";\n        break;\n\n      case \"1.3.132.0.34\":\n        // P-384\n        crvName = \"P-384\";\n        break;\n\n      case \"1.3.132.0.35\":\n        // P-521\n        crvName = \"P-521\";\n        break;\n\n      default:\n    }\n\n    const privateKeyJSON = {\n      crv: crvName,\n      d: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\n    };\n\n    if (\"publicKey\" in this) {\n      const publicKeyJSON = this.publicKey.toJSON();\n      privateKeyJSON.x = publicKeyJSON.x;\n      privateKeyJSON.y = publicKeyJSON.y;\n    }\n\n    return privateKeyJSON;\n  } //**********************************************************************************\n\n  /**\n   * Convert JSON value into current object\n   * @param {Object} json\n   */\n\n\n  fromJSON(json) {\n    let coodinateLength = 0;\n\n    if (\"crv\" in json) {\n      switch (json.crv.toUpperCase()) {\n        case \"P-256\":\n          this.namedCurve = \"1.2.840.10045.3.1.7\";\n          coodinateLength = 32;\n          break;\n\n        case \"P-384\":\n          this.namedCurve = \"1.3.132.0.34\";\n          coodinateLength = 48;\n          break;\n\n        case \"P-521\":\n          this.namedCurve = \"1.3.132.0.35\";\n          coodinateLength = 66;\n          break;\n\n        default:\n      }\n    } else throw new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n    if (\"d\" in json) {\n      const convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\n\n      if (convertBuffer.byteLength < coodinateLength) {\n        const buffer = new ArrayBuffer(coodinateLength);\n        const view = new Uint8Array(buffer);\n        const convertBufferView = new Uint8Array(convertBuffer);\n        view.set(convertBufferView, 1);\n        this.privateKey = new asn1js.OctetString({\n          valueHex: buffer\n        });\n      } else this.privateKey = new asn1js.OctetString({\n        valueHex: convertBuffer.slice(0, coodinateLength)\n      });\n    } else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n    if (\"x\" in json && \"y\" in json) this.publicKey = new ECPublicKey({\n      json\n    });\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/ECPrivateKey.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","clearProps","ECPublicKey","ECPrivateKey","constructor","parameters","version","defaultValues","privateKey","namedCurve","publicKey","fromSchema","schema","fromJSON","json","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","x","y","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","ObjectIdentifier","BitString","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","publicKeyData","valueHex","toSchema","outputArray","push","toBER","toJSON","crvName","privateKeyJSON","crv","d","publicKeyJSON","coodinateLength","toUpperCase","convertBuffer","byteLength","buffer","ArrayBuffer","view","Uint8Array","convertBufferView","set","slice"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport ECPublicKey from \"./ECPublicKey.js\";\n//**************************************************************************************\n/**\n * Class from RFC5915\n */\nexport default class ECPrivateKey\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ECPrivateKey class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc privateKey\n\t\t */\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\n\n\t\tif(\"namedCurve\" in parameters)\n\t\t\t/**\n\t\t\t * @type {string}\n\t\t\t * @desc namedCurve\n\t\t\t */\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\n\n\t\tif(\"publicKey\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ECPublicKey}\n\t\t\t * @desc publicKey\n\t\t\t */\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif(\"json\" in parameters)\n\t\t\tthis.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn new ECPublicKey();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ECPrivateKey ::= SEQUENCE {\n\t * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n\t * privateKey     OCTET STRING,\n\t * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n\t * publicKey  [1] BIT STRING OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [version]\n\t\t * @property {string} [privateKey]\n\t\t * @property {string} [namedCurve]\n\t\t * @property {string} [publicKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"privateKey\",\n\t\t\t\"namedCurve\",\n\t\t\t\"publicKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tECPrivateKey.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tprivateKey: \"privateKey\",\n\t\t\t\t\tnamedCurve: \"namedCurve\",\n\t\t\t\t\tpublicKey: \"publicKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.privateKey = asn1.result.privateKey;\n\n\t\tif(\"namedCurve\" in asn1.result)\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n\n\t\tif(\"publicKey\" in asn1.result)\n\t\t{\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n\t\t\tif(\"namedCurve\" in this)\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\n\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst outputArray = [\n\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\tthis.privateKey\n\t\t];\n\n\t\tif(\"namedCurve\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\tif(\"publicKey\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n\n\t\tlet crvName = \"\";\n\n\t\tswitch(this.namedCurve)\n\t\t{\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\n\t\t\t\tcrvName = \"P-256\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.34\": // P-384\n\t\t\t\tcrvName = \"P-384\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.35\": // P-521\n\t\t\t\tcrvName = \"P-521\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\tconst privateKeyJSON = {\n\t\t\tcrv: crvName,\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\n\t\t};\n\n\t\tif(\"publicKey\" in this)\n\t\t{\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\n\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\n\t\t}\n\n\t\treturn privateKeyJSON;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert JSON value into current object\n\t * @param {Object} json\n\t */\n\tfromJSON(json)\n\t{\n\t\tlet coodinateLength = 0;\n\n\t\tif(\"crv\" in json)\n\t\t{\n\t\t\tswitch(json.crv.toUpperCase())\n\t\t\t{\n\t\t\t\tcase \"P-256\":\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\n\t\t\t\t\tcoodinateLength = 32;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-384\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\n\t\t\t\t\tcoodinateLength = 48;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-521\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\n\t\t\t\t\tcoodinateLength = 66;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n\t\tif(\"d\" in json)\n\t\t{\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\n\t\t\t\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\n\t\t\t{\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\n\t\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\n\t\t\t\tview.set(convertBufferView, 1);\n\t\t\t\t\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\n\t\t}\n\t\telse\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n\t\tif((\"x\" in json) && (\"y\" in json))\n\t\t\tthis.publicKey = new ECPublicKey({ json });\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
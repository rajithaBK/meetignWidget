{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport KEKIdentifier from \"./KEKIdentifier.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar KEKRecipientInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KEKRecipientInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function KEKRecipientInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KEKRecipientInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {KEKIdentifier}\r\n     * @desc kekid\r\n     */\n\n    this.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedKey\r\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc preDefinedKEK KEK using to encrypt CEK\r\n     */\n\n    this.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(KEKRecipientInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"kekid\", \"keyEncryptionAlgorithm\", \"encryptedKey\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, KEKRecipientInfo.schema({\n        names: {\n          version: \"version\",\n          kekid: {\n            names: {\n              blockName: \"kekid\"\n            }\n          },\n          keyEncryptionAlgorithm: {\n            names: {\n              blockName: \"keyEncryptionAlgorithm\"\n            }\n          },\n          encryptedKey: \"encryptedKey\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.kekid = new KEKIdentifier({\n        schema: asn1.result.kekid\n      });\n      this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.keyEncryptionAlgorithm\n      });\n      this.encryptedKey = asn1.result.encryptedKey; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.Integer({\n          value: this.version\n        }), this.kekid.toSchema(), this.keyEncryptionAlgorithm.toSchema(), this.encryptedKey]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        version: this.version,\n        kekid: this.kekid.toJSON(),\n        keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n        encryptedKey: this.encryptedKey.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"kekid\":\n          return new KEKIdentifier();\n\n        case \"keyEncryptionAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"encryptedKey\":\n          return new asn1js.OctetString();\n\n        case \"preDefinedKEK\":\n          return new ArrayBuffer(0);\n\n        default:\n          throw new Error(\"Invalid member name for KEKRecipientInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"KEKRecipientInfo\":\n          return memberValue === KEKRecipientInfo.defaultValues(\"version\");\n\n        case \"kekid\":\n          return memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier) && \"date\" in memberValue === false && \"other\" in memberValue === false;\n\n        case \"keyEncryptionAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"encryptedKey\":\n          return memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\"));\n\n        case \"preDefinedKEK\":\n          return memberValue.byteLength === 0;\n\n        default:\n          throw new Error(\"Invalid member name for KEKRecipientInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * KEKRecipientInfo ::= SEQUENCE {\r\n     *    version CMSVersion,  -- always set to 4\r\n     *    kekid KEKIdentifier,\r\n     *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n     *    encryptedKey EncryptedKey }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [kekid]\r\n       * @property {string} [keyEncryptionAlgorithm]\r\n       * @property {string} [encryptedKey]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), KEKIdentifier.schema(names.kekid || {}), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({\n          name: names.encryptedKey || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return KEKRecipientInfo;\n}(); //**************************************************************************************\n\n\nexport { KEKRecipientInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/KEKRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","KEKIdentifier","AlgorithmIdentifier","KEKRecipientInfo","parameters","version","defaultValues","kekid","keyEncryptionAlgorithm","encryptedKey","preDefinedKEK","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","Sequence","value","Integer","toSchema","toJSON","memberName","OctetString","ArrayBuffer","memberValue","compareWithDefault","keyIdentifier","algorithmId","isEqual","byteLength","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {KEKIdentifier}\r\n\t\t * @desc kekid\r\n\t\t */\r\n\t\tthis.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc preDefinedKEK KEK using to encrypt CEK\r\n\t\t */\r\n\t\tthis.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn new KEKIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"KEKRecipientInfo\":\r\n\t\t\t\treturn (memberValue === KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n\t\t\t\t\t\t((\"date\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"other\" in memberValue) === false));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 4\r\n\t *    kekid KEKIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [kekid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tKEKIdentifier.schema(names.kekid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"kekid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkekid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"kekid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.kekid.toSchema(),\r\n\t\t\t\tthis.keyEncryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkekid: this.kekid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
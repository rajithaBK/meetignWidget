{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _now = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _getOwnPropertyDescriptor = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\"));\n\nvar _applyDecoratedDescriptor2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/applyDecoratedDescriptor\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _common = require(\"@webex/common\");\n\nvar _batcher = _interopRequireDefault(require(\"./batcher\"));\n\nvar _clientMetricsBatcher = _interopRequireDefault(require(\"./client-metrics-batcher\"));\n\nvar _callDiagnosticEventsBatcher = _interopRequireDefault(require(\"./call-diagnostic-events-batcher\"));\n\nvar _dec, _obj;\n\nvar Metrics = _webexCore.WebexPlugin.extend((_dec = (0, _common.deprecated)('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()'), (_obj = {\n  children: {\n    batcher: _batcher.default,\n    clientMetricsBatcher: _clientMetricsBatcher.default,\n    callDiagnosticEventsBatcher: _callDiagnosticEventsBatcher.default\n  },\n  namespace: 'Metrics',\n  sendUnstructured: function sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n  submit: function submit(key, value) {\n    return this.batcher.request((0, _assign.default)({\n      key: key\n    }, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics: function submitClientMetrics(eventName, props, preLoginId) {\n    var payload = {\n      metricName: eventName\n    };\n\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n\n    if (props.type) {\n      payload.type = props.type;\n    }\n\n    if (props.context) {\n      payload.context = props.context;\n    }\n\n    if (props.eventPayload) {\n      payload.eventPayload = props.eventPayload;\n    }\n\n    payload.timestamp = (0, _now.default)();\n\n    if (preLoginId) {\n      var _payload = {\n        metrics: [payload]\n      }; // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser: function aliasUser(preLoginId) {\n    return this.request({\n      method: 'POST',\n      api: 'metrics',\n      resource: 'clientmetrics',\n      headers: {\n        'x-prelogin-userid': preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n  postPreLoginMetric: function postPreLoginMetric(payload, preLoginId) {\n    var _this = this;\n\n    return this.webex.credentials.getClientToken().then(function (token) {\n      return _this.request({\n        method: 'POST',\n        api: 'metrics',\n        resource: 'clientmetrics-prelogin',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': preLoginId\n        },\n        body: payload\n      });\n    });\n  },\n  submitCallDiagnosticEvents: function submitCallDiagnosticEvents(payload) {\n    var event = {\n      type: 'diagnostic-event',\n      eventPayload: payload\n    };\n    return this.callDiagnosticEventsBatcher.request(event);\n  },\n  version: \"1.154.2\"\n}, (0, _applyDecoratedDescriptor2.default)(_obj, \"sendUnstructured\", [_dec], (0, _getOwnPropertyDescriptor.default)(_obj, \"sendUnstructured\"), _obj), _obj)));\n\nvar _default = Metrics;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Metrics","WebexPlugin","extend","children","batcher","Batcher","clientMetricsBatcher","ClientMetricsBatcher","callDiagnosticEventsBatcher","CallDiagnosticEventsBatcher","namespace","sendUnstructured","key","value","submit","request","submitClientMetrics","eventName","props","preLoginId","payload","metricName","tags","fields","type","context","eventPayload","timestamp","_payload","metrics","postPreLoginMetric","aliasUser","method","api","resource","headers","body","qs","alias","webex","credentials","getClientToken","then","token","_this","authorization","toString","submitCallDiagnosticEvents","event","version"],"sources":["metrics.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {deprecated} from '@webex/common';\n\nimport Batcher from './batcher';\nimport ClientMetricsBatcher from './client-metrics-batcher';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-events-batcher';\n\nconst Metrics = WebexPlugin.extend({\n  children: {\n    batcher: Batcher,\n    clientMetricsBatcher: ClientMetricsBatcher,\n    callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher\n  },\n\n  namespace: 'Metrics',\n\n  @deprecated('Metrics#sendUnstructured() is deprecated; please use Metrics#submit()')\n  sendUnstructured(key, value) {\n    return this.submit(key, value);\n  },\n\n  submit(key, value) {\n    return this.batcher.request(Object.assign({key}, value));\n  },\n\n  /**\n   * This corresponds to #sendSemiStructured() in the deprecated metrics handler\n   * @param {string} eventName\n   * @param {Object} props\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  submitClientMetrics(eventName, props, preLoginId) {\n    const payload = {metricName: eventName};\n\n    if (props.tags) {\n      payload.tags = props.tags;\n    }\n    if (props.fields) {\n      payload.fields = props.fields;\n    }\n    if (props.type) {\n      payload.type = props.type;\n    }\n    if (props.context) {\n      payload.context = props.context;\n    }\n\n    if (props.eventPayload) {\n      payload.eventPayload = props.eventPayload;\n    }\n\n    payload.timestamp = Date.now();\n\n    if (preLoginId) {\n      const _payload = {\n        metrics: [payload]\n      };\n\n      // Do not batch these because pre-login events occur during onboarding, so we will be partially blind\n      // to users' progress through the reg flow if we wait to persist pre-login metrics for people who drop off because\n      // their metrics will not post from a queue flush in time\n      return this.postPreLoginMetric(_payload, preLoginId);\n    }\n\n    return this.clientMetricsBatcher.request(payload);\n  },\n\n  /**\n   * Issue request to alias a user's pre-login ID with their CI UUID\n   * @param {string} preLoginId\n   * @returns {Object} HttpResponse object\n   */\n  aliasUser(preLoginId) {\n    return this.request({\n      method: 'POST',\n      api: 'metrics',\n      resource: 'clientmetrics',\n      headers: {\n        'x-prelogin-userid': preLoginId\n      },\n      body: {},\n      qs: {\n        alias: true\n      }\n    });\n  },\n\n  postPreLoginMetric(payload, preLoginId) {\n    return this.webex.credentials.getClientToken().then((token) =>\n      this.request({\n        method: 'POST',\n        api: 'metrics',\n        resource: 'clientmetrics-prelogin',\n        headers: {\n          authorization: token.toString(),\n          'x-prelogin-userid': preLoginId\n        },\n        body: payload\n      }));\n  },\n\n  submitCallDiagnosticEvents(payload) {\n    const event = {\n      type: 'diagnostic-event',\n      eventPayload: payload\n    };\n\n    return this.callDiagnosticEventsBatcher.request(event);\n  }\n});\n\nexport default Metrics;\n"]},"metadata":{},"sourceType":"script"}
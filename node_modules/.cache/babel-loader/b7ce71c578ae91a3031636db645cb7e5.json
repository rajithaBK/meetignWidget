{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.createReplyEditActivity = exports.createEditActivity = exports.createReplyActivity = exports.createRootActivity = exports.determineActivityType = exports.getIsActivityOrphaned = exports.sanitizeActivity = exports.isDeleteActivity = exports.isCreateActivity = exports.isEditActivity = exports.isReplyActivity = exports.isRootActivity = exports.getParentId = exports.sortActivitiesByPublishedDate = exports.isNewer = exports.getPublishedDate = exports.getActivityType = exports.ACTIVITY_TYPES = exports.INITIAL = exports.MID = exports.NEWER = exports.OLDER = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _sortBy2 = _interopRequireDefault(require(\"lodash/sortBy\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar OLDER = 'older';\nexports.OLDER = OLDER;\nvar NEWER = 'newer';\nexports.NEWER = NEWER;\nvar MID = 'mid';\nexports.MID = MID;\nvar INITIAL = 'initial';\nexports.INITIAL = INITIAL;\nvar ACTIVITY_TYPES = {\n  REPLY: 'REPLY',\n  EDIT: 'EDIT',\n  REACTION: 'REACTION',\n  REACTION_SELF: 'REACTION_SELF',\n  ROOT: 'ROOT',\n  CREATE: 'CREATE',\n  TOMBSTONE: 'TOMBSTONE',\n  DELETE: 'DELETE',\n  REPLY_EDIT: 'REPLY_EDIT'\n};\nexports.ACTIVITY_TYPES = ACTIVITY_TYPES;\nvar REPLY = 'reply';\nvar EDIT = 'edit';\nvar REACTION_SUMMARY = 'reactionSummary';\nvar REACTION_SELF_SUMMARY = 'reactionSelfSummary';\nvar CREATE = 'create';\nvar TOMBSTONE = 'tombstone';\nvar DELETE = 'delete';\nvar ADD = 'add';\n\nvar getActivityType = function getActivityType(activity) {\n  var _activity$parent, _activity$parent2;\n\n  if (((_activity$parent = activity.parent) === null || _activity$parent === void 0 ? void 0 : _activity$parent.type) === REPLY) {\n    return ACTIVITY_TYPES.REPLY;\n  }\n\n  if (((_activity$parent2 = activity.parent) === null || _activity$parent2 === void 0 ? void 0 : _activity$parent2.type) === EDIT) {\n    return ACTIVITY_TYPES.EDIT;\n  }\n\n  if (activity.verb === ADD || activity.type === REACTION_SUMMARY) {\n    return ACTIVITY_TYPES.REACTION;\n  }\n\n  if (activity.type === REACTION_SELF_SUMMARY) {\n    return ACTIVITY_TYPES.REACTION_SELF;\n  }\n\n  if (activity.verb === CREATE) {\n    return ACTIVITY_TYPES.CREATE;\n  }\n\n  if (activity.verb === TOMBSTONE) {\n    return ACTIVITY_TYPES.TOMBSTONE;\n  }\n\n  if (activity.verb === DELETE) {\n    return ACTIVITY_TYPES.DELETE;\n  }\n\n  return ACTIVITY_TYPES.ROOT;\n};\n\nexports.getActivityType = getActivityType;\n\nvar getPublishedDate = function getPublishedDate() {\n  var activity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Date(activity.published).getTime();\n};\n/**\n * @param {Object} activity1\n * @param {Object} activity2\n * @returns {boolean} true if first activity is newer than second\n */\n\n\nexports.getPublishedDate = getPublishedDate;\n\nvar isNewer = function isNewer(activity1, activity2) {\n  return getPublishedDate(activity1) > getPublishedDate(activity2);\n};\n\nexports.isNewer = isNewer;\n\nvar sortActivitiesByPublishedDate = function sortActivitiesByPublishedDate(activities) {\n  return (0, _sortBy2.default)(activities, function (activity) {\n    return getPublishedDate(activity);\n  });\n};\n\nexports.sortActivitiesByPublishedDate = sortActivitiesByPublishedDate;\n\nvar getParentId = function getParentId(activity) {\n  var _activity$parent3;\n\n  return activity === null || activity === void 0 ? void 0 : (_activity$parent3 = activity.parent) === null || _activity$parent3 === void 0 ? void 0 : _activity$parent3.id;\n};\n\nexports.getParentId = getParentId;\n\nvar isRootActivity = function isRootActivity(act) {\n  return getActivityType(act) === ACTIVITY_TYPES.ROOT;\n};\n\nexports.isRootActivity = isRootActivity;\n\nvar isReplyActivity = function isReplyActivity(act) {\n  return getActivityType(act) === ACTIVITY_TYPES.REPLY;\n};\n\nexports.isReplyActivity = isReplyActivity;\n\nvar isEditActivity = function isEditActivity(act) {\n  return getActivityType(act) === ACTIVITY_TYPES.EDIT;\n};\n\nexports.isEditActivity = isEditActivity;\n\nvar isCreateActivity = function isCreateActivity(act) {\n  return getActivityType(act) === ACTIVITY_TYPES.CREATE;\n};\n\nexports.isCreateActivity = isCreateActivity;\n\nvar isDeleteActivity = function isDeleteActivity(act) {\n  return getActivityType(act) === ACTIVITY_TYPES.DELETE;\n};\n\nexports.isDeleteActivity = isDeleteActivity;\n\nvar sanitizeActivity = function sanitizeActivity(activity) {\n  var final = _objectSpread({}, activity);\n\n  final.reaction = activity.reaction || {};\n  final.reactionSelf = activity.reactionSelf || {}; // replies will be spread in order beneath parent, no need to include on final objects\n\n  delete final.replies;\n  return final;\n};\n\nexports.sanitizeActivity = sanitizeActivity;\n\nvar getIsActivityOrphaned = function getIsActivityOrphaned(activity, activities) {\n  return activity.parent && activity.parent.id && !activities[activity.parent.id];\n};\n\nexports.getIsActivityOrphaned = getIsActivityOrphaned;\n\nvar getIsReplyEditActivity = function getIsReplyEditActivity(activity, activities) {\n  var parentId = activity.parent.id;\n  var parentActivity = activities[parentId];\n  return parentActivity && isReplyActivity(parentActivity);\n};\n\nvar determineActivityType = function determineActivityType(activity, activities) {\n  var initialType = getActivityType(activity); // edits to a reply, while they are replies themselves, appear in every way as edits\n  // the only way to dermine their status as an edited reply is to find the original reply\n\n  if (initialType === ACTIVITY_TYPES.EDIT) {\n    var isReplyEditActivity = getIsReplyEditActivity(activity, activities);\n    return isReplyEditActivity ? ACTIVITY_TYPES.REPLY_EDIT : initialType;\n  }\n\n  return initialType;\n};\n\nexports.determineActivityType = determineActivityType;\n\nvar createRootActivity = function createRootActivity(activity) {\n  return activity;\n};\n\nexports.createRootActivity = createRootActivity;\n\nvar createReplyActivity = function createReplyActivity(activity) {\n  var replyAct = _objectSpread(_objectSpread({}, activity), {}, {\n    replyParent: activity.parent\n  });\n\n  return replyAct;\n};\n\nexports.createReplyActivity = createReplyActivity;\n\nvar createEditActivity = function createEditActivity(editActivity, activities) {\n  var editActParentObj = editActivity.parent;\n  var parentId = editActParentObj.id;\n  var parentAct = activities[parentId];\n\n  var joinedEditAct = _objectSpread(_objectSpread({}, parentAct), {}, {\n    id: editActivity.id,\n    parent: editActParentObj,\n    editParent: editActParentObj,\n    object: editActivity.object,\n    published: editActivity.published\n  });\n\n  return joinedEditAct;\n}; // takes an edit activity whose parent is a reply activity\n\n\nexports.createEditActivity = createEditActivity;\n\nvar createReplyEditActivity = function createReplyEditActivity(editActivity, activities) {\n  var editActParentObj = editActivity.parent;\n  var parentId = editActParentObj.id;\n  var parentReplyAct = activities[parentId];\n\n  var joinedReplyEditActivity = _objectSpread(_objectSpread({}, parentReplyAct), {}, {\n    id: editActivity.id,\n    parent: editActParentObj,\n    editParent: editActParentObj,\n    replyParent: parentReplyAct.parent,\n    object: editActivity.object,\n    published: editActivity.published\n  });\n\n  return joinedReplyEditActivity;\n};\n\nexports.createReplyEditActivity = createReplyEditActivity;","map":{"version":3,"mappings":"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","names":["OLDER","NEWER","MID","INITIAL","ACTIVITY_TYPES","REPLY","EDIT","REACTION","REACTION_SELF","ROOT","CREATE","TOMBSTONE","DELETE","REPLY_EDIT","REACTION_SUMMARY","REACTION_SELF_SUMMARY","ADD","getActivityType","activity","parent","type","verb","getPublishedDate","Date","published","getTime","isNewer","activity1","activity2","sortActivitiesByPublishedDate","activities","getParentId","_activity$parent3","id","isRootActivity","act","isReplyActivity","isEditActivity","isCreateActivity","isDeleteActivity","sanitizeActivity","final","reaction","reactionSelf","replies","getIsActivityOrphaned","getIsReplyEditActivity","parentId","parentActivity","determineActivityType","initialType","isReplyEditActivity","createRootActivity","createReplyActivity","replyAct","replyParent","createEditActivity","editActivity","editActParentObj","parentAct","joinedEditAct","editParent","object","createReplyEditActivity","parentReplyAct","joinedReplyEditActivity"],"sources":["activities.js"],"sourcesContent":["import {sortBy} from 'lodash';\n\nexport const OLDER = 'older';\nexport const NEWER = 'newer';\nexport const MID = 'mid';\nexport const INITIAL = 'initial';\n\nexport const ACTIVITY_TYPES = {\n  REPLY: 'REPLY',\n  EDIT: 'EDIT',\n  REACTION: 'REACTION',\n  REACTION_SELF: 'REACTION_SELF',\n  ROOT: 'ROOT',\n  CREATE: 'CREATE',\n  TOMBSTONE: 'TOMBSTONE',\n  DELETE: 'DELETE',\n  REPLY_EDIT: 'REPLY_EDIT'\n};\n\nconst REPLY = 'reply';\nconst EDIT = 'edit';\nconst REACTION_SUMMARY = 'reactionSummary';\nconst REACTION_SELF_SUMMARY = 'reactionSelfSummary';\nconst CREATE = 'create';\nconst TOMBSTONE = 'tombstone';\nconst DELETE = 'delete';\nconst ADD = 'add';\n\nexport const getActivityType = (activity) => {\n  if (activity.parent?.type === REPLY) {\n    return ACTIVITY_TYPES.REPLY;\n  }\n  if (activity.parent?.type === EDIT) {\n    return ACTIVITY_TYPES.EDIT;\n  }\n  if (activity.verb === ADD || activity.type === REACTION_SUMMARY) {\n    return ACTIVITY_TYPES.REACTION;\n  }\n  if (activity.type === REACTION_SELF_SUMMARY) {\n    return ACTIVITY_TYPES.REACTION_SELF;\n  }\n  if (activity.verb === CREATE) {\n    return ACTIVITY_TYPES.CREATE;\n  }\n  if (activity.verb === TOMBSTONE) {\n    return ACTIVITY_TYPES.TOMBSTONE;\n  }\n  if (activity.verb === DELETE) {\n    return ACTIVITY_TYPES.DELETE;\n  }\n\n  return ACTIVITY_TYPES.ROOT;\n};\n\nexport const getPublishedDate = (activity = {}) => new Date(activity.published).getTime();\n\n/**\n * @param {Object} activity1\n * @param {Object} activity2\n * @returns {boolean} true if first activity is newer than second\n */\nexport const isNewer = (activity1, activity2) => getPublishedDate(activity1) > getPublishedDate(activity2);\n\nexport const sortActivitiesByPublishedDate = (activities) => sortBy(activities, (activity) => getPublishedDate(activity));\n\nexport const getParentId = (activity) => activity?.parent?.id;\n\nexport const isRootActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.ROOT;\nexport const isReplyActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.REPLY;\nexport const isEditActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.EDIT;\nexport const isCreateActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.CREATE;\nexport const isDeleteActivity = (act) => getActivityType(act) === ACTIVITY_TYPES.DELETE;\n\nexport const sanitizeActivity = (activity) => {\n  const final = {...activity};\n\n  final.reaction = activity.reaction || {};\n  final.reactionSelf = activity.reactionSelf || {};\n\n  // replies will be spread in order beneath parent, no need to include on final objects\n  delete final.replies;\n\n  return final;\n};\n\nexport const getIsActivityOrphaned = (activity, activities) => activity.parent && activity.parent.id && !activities[activity.parent.id];\n\nconst getIsReplyEditActivity = (activity, activities) => {\n  const parentId = activity.parent.id;\n  const parentActivity = activities[parentId];\n\n  return parentActivity && isReplyActivity(parentActivity);\n};\n\nexport const determineActivityType = (activity, activities) => {\n  const initialType = getActivityType(activity);\n\n  // edits to a reply, while they are replies themselves, appear in every way as edits\n  // the only way to dermine their status as an edited reply is to find the original reply\n  if (initialType === ACTIVITY_TYPES.EDIT) {\n    const isReplyEditActivity = getIsReplyEditActivity(activity, activities);\n\n    return isReplyEditActivity ? ACTIVITY_TYPES.REPLY_EDIT : initialType;\n  }\n\n  return initialType;\n};\n\nexport const createRootActivity = (activity) => activity;\n\nexport const createReplyActivity = (activity) => {\n  const replyAct = {\n    ...activity,\n    replyParent: activity.parent\n  };\n\n  return replyAct;\n};\n\nexport const createEditActivity = (editActivity, activities) => {\n  const editActParentObj = editActivity.parent;\n  const parentId = editActParentObj.id;\n  const parentAct = activities[parentId];\n\n  const joinedEditAct = {\n    ...parentAct,\n    id: editActivity.id,\n    parent: editActParentObj,\n    editParent: editActParentObj,\n    object: editActivity.object,\n    published: editActivity.published\n  };\n\n  return joinedEditAct;\n};\n\n// takes an edit activity whose parent is a reply activity\nexport const createReplyEditActivity = (editActivity, activities) => {\n  const editActParentObj = editActivity.parent;\n  const parentId = editActParentObj.id;\n  const parentReplyAct = activities[parentId];\n\n  const joinedReplyEditActivity = {\n    ...parentReplyAct,\n    id: editActivity.id,\n    parent: editActParentObj,\n    editParent: editActParentObj,\n    replyParent: parentReplyAct.parent,\n    object: editActivity.object,\n    published: editActivity.published\n  };\n\n  return joinedReplyEditActivity;\n};\n"]},"metadata":{},"sourceType":"script"}
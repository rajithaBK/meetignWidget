{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from RFC5652\n */\n\nexport default class OtherKeyAttribute {\n  //**********************************************************************************\n\n  /**\n   * Constructor for OtherKeyAttribute class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     * @desc keyAttrId\n     */\n    this.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\n    if (\"keyAttr\" in parameters)\n      /**\n       * @type {*}\n       * @desc keyAttr\n       */\n      this.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"keyAttrId\":\n        return \"\";\n\n      case \"keyAttr\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"keyAttrId\":\n        return memberValue === \"\";\n\n      case \"keyAttr\":\n        return Object.keys(memberValue).length === 0;\n\n      default:\n        throw new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * OtherKeyAttribute ::= SEQUENCE {\n   *    keyAttrId OBJECT IDENTIFIER,\n   *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [optional]\n     * @property {string} [keyAttrId]\n     * @property {string} [keyAttr]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      optional: names.optional || true,\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.keyAttrId || \"\"\n      }), new asn1js.Any({\n        optional: true,\n        name: names.keyAttr || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"keyAttrId\", \"keyAttr\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, OtherKeyAttribute.schema({\n      names: {\n        keyAttrId: \"keyAttrId\",\n        keyAttr: \"keyAttr\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n    if (\"keyAttr\" in asn1.result) this.keyAttr = asn1.result.keyAttr; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.keyAttrId\n    }));\n    if (\"keyAttr\" in this) outputArray.push(this.keyAttr); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const _object = {\n      keyAttrId: this.keyAttrId\n    };\n    if (\"keyAttr\" in this) _object.keyAttr = this.keyAttr.toJSON();\n    return _object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OtherKeyAttribute.js"],"names":["asn1js","getParametersValue","clearProps","OtherKeyAttribute","constructor","parameters","keyAttrId","defaultValues","keyAttr","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","Object","keys","length","names","Sequence","optional","name","blockName","value","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from RFC5652\n */\nexport default class OtherKeyAttribute\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for OtherKeyAttribute class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc keyAttrId\n\t\t */\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\n\n\t\tif(\"keyAttr\" in parameters)\n\t\t\t/**\n\t\t\t * @type {*}\n\t\t\t * @desc keyAttr\n\t\t\t */\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"keyAttrId\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"keyAttr\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"keyAttrId\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"keyAttr\":\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * OtherKeyAttribute ::= SEQUENCE {\n\t *    keyAttrId OBJECT IDENTIFIER,\n\t *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [optional]\n\t\t * @property {string} [keyAttrId]\n\t\t * @property {string} [keyAttr]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\toptional: (names.optional || true),\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\n\t\t\t\tnew asn1js.Any({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.keyAttr || \"\")\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"keyAttrId\",\n\t\t\t\"keyAttr\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tOtherKeyAttribute.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\n\t\t\t\t\tkeyAttr: \"keyAttr\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n\n\t\tif(\"keyAttr\" in asn1.result)\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\n\n\t\tif(\"keyAttr\" in this)\n\t\t\toutputArray.push(this.keyAttr);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst _object = {\n\t\t\tkeyAttrId: this.keyAttrId\n\t\t};\n\n\t\tif(\"keyAttr\" in this)\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
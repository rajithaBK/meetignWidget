{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\nimport ContentInfo from \"./ContentInfo.js\";\nimport SignedData from \"./SignedData.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nvar TimeStampResp = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TimeStampResp class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function TimeStampResp() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TimeStampResp);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {PKIStatusInfo}\r\n     * @desc status\r\n     */\n    this.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\n    if (\"timeStampToken\" in parameters)\n      /**\r\n       * @type {ContentInfo}\r\n       * @desc timeStampToken\r\n       */\n      this.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(TimeStampResp, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"TimeStampResp.status\", \"TimeStampResp.timeStampToken\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, TimeStampResp.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TimeStampResp\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.status = new PKIStatusInfo({\n        schema: asn1.result[\"TimeStampResp.status\"]\n      });\n      if (\"TimeStampResp.timeStampToken\" in asn1.result) this.timeStampToken = new ContentInfo({\n        schema: asn1.result[\"TimeStampResp.timeStampToken\"]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.status.toSchema());\n      if (\"timeStampToken\" in this) outputArray.push(this.timeStampToken.toSchema()); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        status: this.status\n      };\n      if (\"timeStampToken\" in this) _object.timeStampToken = this.timeStampToken.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Sign current TSP Response\r\n     * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n     * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey, hashAlgorithm) {\n      //region Check that \"timeStampToken\" exists\n      if (\"timeStampToken\" in this === false) return Promise.reject(\"timeStampToken is absent in TSP response\"); //endregion\n      //region Check that \"timeStampToken\" has a right internal format\n\n      if (this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\n        return Promise.reject(\"Wrong format of timeStampToken: \".concat(this.timeStampToken.contentType)); //endregion\n      //region Sign internal signed data value\n\n      var signed = new ContentInfo({\n        schema: this.timeStampToken.content\n      });\n      return signed.sign(privateKey, 0, hashAlgorithm); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Verify current TSP Response\r\n     * @param {Object} verificationParameters Input parameters for verification\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var verificationParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        signer: 0,\n        trustedCerts: [],\n        data: new ArrayBuffer(0)\n      };\n      //region Check that \"timeStampToken\" exists\n      if (\"timeStampToken\" in this === false) return Promise.reject(\"timeStampToken is absent in TSP response\"); //endregion\n      //region Check that \"timeStampToken\" has a right internal format\n\n      if (this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\n        return Promise.reject(\"Wrong format of timeStampToken: \".concat(this.timeStampToken.contentType)); //endregion\n      //region Verify internal signed data value\n\n      var signed = new SignedData({\n        schema: this.timeStampToken.content\n      });\n      return signed.verify(verificationParameters); //endregion\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"status\":\n          return new PKIStatusInfo();\n\n        case \"timeStampToken\":\n          return new ContentInfo();\n\n        default:\n          throw new Error(\"Invalid member name for TimeStampResp class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"status\":\n          return PKIStatusInfo.compareWithDefault(\"status\", memberValue.status) && \"statusStrings\" in memberValue === false && \"failInfo\" in memberValue === false;\n\n        case \"timeStampToken\":\n          return memberValue.contentType === \"\" && memberValue.content instanceof asn1js.Any;\n\n        default:\n          throw new Error(\"Invalid member name for TimeStampResp class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * TimeStampResp ::= SEQUENCE  {\r\n     *    status                  PKIStatusInfo,\r\n     *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [status]\r\n       * @property {string} [timeStampToken]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"TimeStampResp\",\n        value: [PKIStatusInfo.schema(names.status || {\n          names: {\n            blockName: \"TimeStampResp.status\"\n          }\n        }), ContentInfo.schema(names.timeStampToken || {\n          names: {\n            blockName: \"TimeStampResp.timeStampToken\",\n            optional: true\n          }\n        })]\n      });\n    }\n  }]);\n\n  return TimeStampResp;\n}(); //**************************************************************************************\n\n\nexport { TimeStampResp as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/TimeStampResp.js"],"names":["asn1js","getParametersValue","clearProps","PKIStatusInfo","ContentInfo","SignedData","TimeStampResp","parameters","status","defaultValues","timeStampToken","fromSchema","schema","asn1","compareSchema","verified","Error","result","outputArray","push","toSchema","Sequence","value","_object","toJSON","privateKey","hashAlgorithm","Promise","reject","contentType","signed","content","sign","verificationParameters","signer","trustedCerts","data","ArrayBuffer","verify","memberName","memberValue","compareWithDefault","Any","names","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @desc timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampResp ::= SEQUENCE  {\r\n\t *    status                  PKIStatusInfo,\r\n\t *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampResp.status\",\r\n\t\t\t\"TimeStampResp.timeStampToken\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampResp\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _constants = require(\"../constants\");\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @class MembersRequest\n */\n\n\nvar MembersRequest = /*#__PURE__*/function (_StatelessWebexPlugin) {\n  (0, _inherits2.default)(MembersRequest, _StatelessWebexPlugin);\n\n  var _super = _createSuper(MembersRequest);\n\n  function MembersRequest() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, MembersRequest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"namespace\", _constants.MEETINGS);\n    return _this;\n  }\n\n  (0, _createClass2.default)(MembersRequest, [{\n    key: \"addMembers\",\n    value:\n    /**\n     *\n     * @param {Object} options with format of {invitee: string, locusUrl: string}\n     * @returns {Promise}\n     * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl\n     * @memberof MembersRequest\n     */\n    function addMembers(options) {\n      if (!(!options || !options.invitee || !options.invitee.emailAddress || !options.invitee.email || !options.invitee.phoneNumber || !options.locusUrl)) {\n        throw new _parameter.default('invitee must be passed and the associated locus url for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.getAddMemberRequestParams(options);\n\n      return this.request(requestParams);\n    }\n    /**\n     *\n     * @param {Object} options\n     * @returns {Promise}\n     * @throws {Error} if the options are not valid and complete, must have memberIds AND locusUrl\n     * @memberof MembersRequest\n     */\n\n  }, {\n    key: \"admitMember\",\n    value: function admitMember(options) {\n      if (!options || !options.locusUrl || !options.memberIds) {\n        throw new _parameter.default('memberIds must be an array passed and the associated locus url for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.getAdmitMemberRequestParams(options);\n\n      return this.request(requestParams);\n    }\n  }, {\n    key: \"removeMember\",\n    value: function removeMember(options) {\n      if (!options || !options.locusUrl || !options.memberId) {\n        throw new _parameter.default('memberId must be defined, and the associated locus url for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.getRemoveMemberRequestParams(options);\n\n      return this.request(requestParams);\n    }\n  }, {\n    key: \"muteMember\",\n    value: function muteMember(options) {\n      if (!options || !options.locusUrl || !options.memberId) {\n        throw new _parameter.default('memberId must be defined, and the associated locus url for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.getMuteMemberRequestParams(options);\n\n      return this.request(requestParams);\n    }\n  }, {\n    key: \"transferHostToMember\",\n    value: function transferHostToMember(options) {\n      if (!options || !options.locusUrl || !options.memberId || !options.moderator) {\n        throw new _parameter.default('memberId must be defined, the associated locus url, and the moderator for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.getTransferHostToMemberRequestParams(options);\n\n      return this.request(requestParams);\n    }\n    /**\n     * Sends a request to the DTMF endpoint to send tones\n     * @param {Object} options\n     * @param {String} options.locusUrl\n     * @param {String} options.url device url SIP user\n     * @param {String} options.tones a string of one or more DTMF tones to send\n     * @param {String} options.memberId ID of PSTN user\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"sendDialPadKey\",\n    value: function sendDialPadKey(options) {\n      if (!options || !options.locusUrl || !options.memberId || !options.url || !options.tones && options.tones !== 0) {\n        throw new _parameter.default('memberId must be defined, the associated locus url, the device url and DTMF tones for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.generateSendDTMFRequestParams(options);\n\n      return this.request(requestParams);\n    }\n    /**\n     * @param {Object} options with format of {invitee: string, locusUrl: string}\n     * @returns {Promise}\n     * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl\n     * @memberof MembersRequest\n     */\n\n  }, {\n    key: \"cancelPhoneInvite\",\n    value: function cancelPhoneInvite(options) {\n      var _options$invitee;\n\n      if (!(options !== null && options !== void 0 && (_options$invitee = options.invitee) !== null && _options$invitee !== void 0 && _options$invitee.phoneNumber || options !== null && options !== void 0 && options.locusUrl)) {\n        throw new _parameter.default('invitee must be passed and the associated locus url for this meeting object must be defined.');\n      }\n\n      var requestParams = _util.default.generateCancelInviteRequestParams(options);\n\n      return this.request(requestParams);\n    }\n  }]);\n  return MembersRequest;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = MembersRequest;","map":{"version":3,"mappings":"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","names":["MembersRequest","MEETINGS","options","invitee","emailAddress","email","phoneNumber","locusUrl","ParameterError","requestParams","MembersUtil","getAddMemberRequestParams","request","memberIds","getAdmitMemberRequestParams","memberId","getRemoveMemberRequestParams","getMuteMemberRequestParams","moderator","getTransferHostToMemberRequestParams","url","tones","generateSendDTMFRequestParams","generateCancelInviteRequestParams","StatelessWebexPlugin"],"sources":["request.js"],"sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport MembersUtil from './util';\n\n\n/**\n * @class MembersRequest\n */\nexport default class MembersRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {invitee: string, locusUrl: string}\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl\n   * @memberof MembersRequest\n   */\n  addMembers(options) {\n    if (!(!options || !options.invitee || (!options.invitee.emailAddress || !options.invitee.email || !options.invitee.phoneNumber) || !options.locusUrl)) {\n      throw new ParameterError('invitee must be passed and the associated locus url for this meeting object must be defined.');\n    }\n    const requestParams = MembersUtil.getAddMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have memberIds AND locusUrl\n   * @memberof MembersRequest\n   */\n  admitMember(options) {\n    if (!options || !options.locusUrl || !options.memberIds) {\n      throw new ParameterError('memberIds must be an array passed and the associated locus url for this meeting object must be defined.');\n    }\n    const requestParams = MembersUtil.getAdmitMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  removeMember(options) {\n    if (!options || !options.locusUrl || !options.memberId) {\n      throw new ParameterError('memberId must be defined, and the associated locus url for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.getRemoveMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  muteMember(options) {\n    if (!options || !options.locusUrl || !options.memberId) {\n      throw new ParameterError('memberId must be defined, and the associated locus url for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.getMuteMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  transferHostToMember(options) {\n    if (!options || !options.locusUrl || !options.memberId || !options.moderator) {\n      throw new ParameterError('memberId must be defined, the associated locus url, and the moderator for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.getTransferHostToMemberRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  /**\n   * Sends a request to the DTMF endpoint to send tones\n   * @param {Object} options\n   * @param {String} options.locusUrl\n   * @param {String} options.url device url SIP user\n   * @param {String} options.tones a string of one or more DTMF tones to send\n   * @param {String} options.memberId ID of PSTN user\n   * @returns {Promise}\n   */\n  sendDialPadKey(options) {\n    if (!options || !options.locusUrl || !options.memberId || !options.url || !options.tones && options.tones !== 0) {\n      throw new ParameterError('memberId must be defined, the associated locus url, the device url and DTMF tones for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.generateSendDTMFRequestParams(options);\n\n    return this.request(requestParams);\n  }\n\n  /**\n   * @param {Object} options with format of {invitee: string, locusUrl: string}\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl\n   * @memberof MembersRequest\n   */\n  cancelPhoneInvite(options) {\n    if (!(options?.invitee?.phoneNumber || options?.locusUrl)) {\n      throw new ParameterError('invitee must be passed and the associated locus url for this meeting object must be defined.');\n    }\n\n    const requestParams = MembersUtil.generateCancelInviteRequestParams(options);\n\n    return this.request(requestParams);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Attribute from \"./Attribute.js\";\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\nimport PKCS8ShroudedKeyBag from \"./PKCS8ShroudedKeyBag.js\";\nimport CertBag from \"./CertBag.js\";\nimport CRLBag from \"./CRLBag.js\";\nimport SecretBag from \"./SecretBag.js\";\nimport SafeContents from \"./SafeContents.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar SafeBag = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SafeBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function SafeBag() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SafeBag);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc bagId\r\n     */\n    this.bagId = getParametersValue(parameters, \"bagId\", SafeBag.defaultValues(\"bagId\"));\n    /**\r\n     * @type {*}\r\n     * @desc bagValue\r\n     */\n\n    this.bagValue = getParametersValue(parameters, \"bagValue\", SafeBag.defaultValues(\"bagValue\"));\n    if (\"bagAttributes\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc bagAttributes\r\n       */\n      this.bagAttributes = getParametersValue(parameters, \"bagAttributes\", SafeBag.defaultValues(\"bagAttributes\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(SafeBag, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"bagId\", \"bagValue\", \"bagAttributes\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, SafeBag.schema({\n        names: {\n          bagId: \"bagId\",\n          bagValue: \"bagValue\",\n          bagAttributes: \"bagAttributes\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SafeBag\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.bagId = asn1.result.bagId.valueBlock.toString();\n\n      switch (this.bagId) {\n        case \"1.2.840.113549.1.12.10.1.1\":\n          // keyBag\n          this.bagValue = new PrivateKeyInfo({\n            schema: asn1.result.bagValue\n          });\n          break;\n\n        case \"1.2.840.113549.1.12.10.1.2\":\n          // pkcs8ShroudedKeyBag\n          this.bagValue = new PKCS8ShroudedKeyBag({\n            schema: asn1.result.bagValue\n          });\n          break;\n\n        case \"1.2.840.113549.1.12.10.1.3\":\n          // certBag\n          this.bagValue = new CertBag({\n            schema: asn1.result.bagValue\n          });\n          break;\n\n        case \"1.2.840.113549.1.12.10.1.4\":\n          // crlBag\n          this.bagValue = new CRLBag({\n            schema: asn1.result.bagValue\n          });\n          break;\n\n        case \"1.2.840.113549.1.12.10.1.5\":\n          // secretBag\n          this.bagValue = new SecretBag({\n            schema: asn1.result.bagValue\n          });\n          break;\n\n        case \"1.2.840.113549.1.12.10.1.6\":\n          // safeContentsBag\n          this.bagValue = new SafeContents({\n            schema: asn1.result.bagValue\n          });\n          break;\n\n        default:\n          throw new Error(\"Invalid \\\"bagId\\\" for SafeBag: \".concat(this.bagId));\n      }\n\n      if (\"bagAttributes\" in asn1.result) this.bagAttributes = Array.from(asn1.result.bagAttributes, function (element) {\n        return new Attribute({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      var outputArray = [new asn1js.ObjectIdentifier({\n        value: this.bagId\n      }), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.bagValue.toSchema()]\n      })];\n\n      if (\"bagAttributes\" in this) {\n        outputArray.push(new asn1js.Set({\n          value: Array.from(this.bagAttributes, function (element) {\n            return element.toSchema();\n          })\n        }));\n      }\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var output = {\n        bagId: this.bagId,\n        bagValue: this.bagValue.toJSON()\n      };\n      if (\"bagAttributes\" in this) output.bagAttributes = Array.from(this.bagAttributes, function (element) {\n        return element.toJSON();\n      });\n      return output;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"bagId\":\n          return \"\";\n\n        case \"bagValue\":\n          return new asn1js.Any();\n\n        case \"bagAttributes\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for SafeBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"bagId\":\n          return memberValue === \"\";\n\n        case \"bagValue\":\n          return memberValue instanceof asn1js.Any;\n\n        case \"bagAttributes\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for SafeBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * SafeBag ::= SEQUENCE {\r\n     *    bagId\t      \tBAG-TYPE.&id ({PKCS12BagSet}),\r\n     *    bagValue      [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),\r\n     *    bagAttributes SET OF PKCS12Attribute OPTIONAL\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [bagId]\r\n       * @property {string} [bagValue]\r\n       * @property {string} [bagAttributes]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.bagId || \"bagId\"\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Any({\n            name: names.bagValue || \"bagValue\"\n          })] // EXPLICIT ANY value\n\n        }), new asn1js.Set({\n          optional: true,\n          value: [new asn1js.Repeated({\n            name: names.bagAttributes || \"bagAttributes\",\n            value: Attribute.schema()\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return SafeBag;\n}(); //**************************************************************************************\n\n\nexport { SafeBag as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SafeBag.js"],"names":["asn1js","getParametersValue","clearProps","Attribute","PrivateKeyInfo","PKCS8ShroudedKeyBag","CertBag","CRLBag","SecretBag","SafeContents","SafeBag","parameters","bagId","defaultValues","bagValue","bagAttributes","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Array","from","element","outputArray","ObjectIdentifier","value","Constructed","idBlock","tagClass","tagNumber","toSchema","push","Set","Sequence","output","toJSON","memberName","Any","memberValue","length","name","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport PKCS8ShroudedKeyBag from \"./PKCS8ShroudedKeyBag.js\";\r\nimport CertBag from \"./CertBag.js\";\r\nimport CRLBag from \"./CRLBag.js\";\r\nimport SecretBag from \"./SecretBag.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SafeBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SafeBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc bagId\r\n\t\t */\r\n\t\tthis.bagId = getParametersValue(parameters, \"bagId\", SafeBag.defaultValues(\"bagId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc bagValue\r\n\t\t */\r\n\t\tthis.bagValue = getParametersValue(parameters, \"bagValue\", SafeBag.defaultValues(\"bagValue\"));\r\n\t\t\r\n\t\tif(\"bagAttributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc bagAttributes\r\n\t\t\t */\r\n\t\t\tthis.bagAttributes = getParametersValue(parameters, \"bagAttributes\", SafeBag.defaultValues(\"bagAttributes\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"bagId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"bagValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"bagAttributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"bagId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"bagValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"bagAttributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SafeBag ::= SEQUENCE {\r\n\t *    bagId\t      \tBAG-TYPE.&id ({PKCS12BagSet}),\r\n\t *    bagValue      [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),\r\n\t *    bagAttributes SET OF PKCS12Attribute OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [bagId]\r\n\t\t * @property {string} [bagValue]\r\n\t\t * @property {string} [bagAttributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.bagId || \"bagId\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.bagValue || \"bagValue\") })] // EXPLICIT ANY value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.bagAttributes || \"bagAttributes\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"bagId\",\r\n\t\t\t\"bagValue\",\r\n\t\t\t\"bagAttributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSafeBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbagId: \"bagId\",\r\n\t\t\t\t\tbagValue: \"bagValue\",\r\n\t\t\t\t\tbagAttributes: \"bagAttributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SafeBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.bagId = asn1.result.bagId.valueBlock.toString();\r\n\t\t\r\n\t\tswitch(this.bagId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.1\": // keyBag\r\n\t\t\t\tthis.bagValue = new PrivateKeyInfo({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.2\": // pkcs8ShroudedKeyBag\r\n\t\t\t\tthis.bagValue = new PKCS8ShroudedKeyBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.3\": // certBag\r\n\t\t\t\tthis.bagValue = new CertBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.4\": // crlBag\r\n\t\t\t\tthis.bagValue = new CRLBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.5\": // secretBag\r\n\t\t\t\tthis.bagValue = new SecretBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.6\": // safeContentsBag\r\n\t\t\t\tthis.bagValue = new SafeContents({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid \"bagId\" for SafeBag: ${this.bagId}`);\r\n\t\t}\r\n\t\t\r\n\t\tif(\"bagAttributes\" in asn1.result)\r\n\t\t\tthis.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.bagId }),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.bagValue.toSchema()]\r\n\t\t\t})\r\n\t\t];\r\n\t\t\r\n\t\tif(\"bagAttributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Set({\r\n\t\t\t\tvalue: Array.from(this.bagAttributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tbagId: this.bagId,\r\n\t\t\tbagValue: this.bagValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"bagAttributes\" in this)\r\n\t\t\toutput.bagAttributes = Array.from(this.bagAttributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
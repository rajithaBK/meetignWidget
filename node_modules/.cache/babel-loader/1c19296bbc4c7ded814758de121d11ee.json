{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertID from \"./CertID.js\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar Request = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Request class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function Request() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Request);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {CertID}\r\n     * @desc reqCert\r\n     */\n    this.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\n    if (\"singleRequestExtensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc singleRequestExtensions\r\n       */\n      this.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(Request, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"reqCert\", \"singleRequestExtensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Request.schema({\n        names: {\n          reqCert: {\n            names: {\n              blockName: \"reqCert\"\n            }\n          },\n          singleRequestExtensions: {\n            names: {\n              blockName: \"singleRequestExtensions\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Request\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.reqCert = new CertID({\n        schema: asn1.result.reqCert\n      });\n      if (\"singleRequestExtensions\" in asn1.result) this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.reqCert.toSchema());\n\n      if (\"singleRequestExtensions\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Sequence({\n            value: Array.from(this.singleRequestExtensions, function (element) {\n              return element.toSchema();\n            })\n          })]\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        reqCert: this.reqCert.toJSON()\n      };\n      if (\"singleRequestExtensions\" in this) _object.singleRequestExtensions = Array.from(this.singleRequestExtensions, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"reqCert\":\n          return new CertID();\n\n        case \"singleRequestExtensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for Request class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"reqCert\":\n          return memberValue.isEqual(Request.defaultValues(memberName));\n\n        case \"singleRequestExtensions\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for Request class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * Request         ::=     SEQUENCE {\r\n     *    reqCert                     CertID,\r\n     *    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [reqCert]\r\n       * @property {string} [extensions]\r\n       * @property {string} [singleRequestExtensions]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [CertID.schema(names.reqCert || {}), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [Extension.schema(names.extensions || {\n            names: {\n              blockName: names.singleRequestExtensions || \"\"\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return Request;\n}(); //**************************************************************************************\n\n\nexport { Request as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Request.js"],"names":["asn1js","getParametersValue","clearProps","CertID","Extension","Request","parameters","reqCert","defaultValues","singleRequestExtensions","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Array","from","valueBlock","value","element","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","memberName","memberValue","isEqual","length","name","extensions"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,gBAAtB,C,CACA;;AACA;AACA;AACA;;IACqBC,O;AAEpB;;AACA;AACD;AACA;AACA;AACA;AACC,qBACA;AAAA,QADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,OAAL,GAAeN,kBAAkB,CAACK,UAAD,EAAa,SAAb,EAAwBD,OAAO,CAACG,aAAR,CAAsB,SAAtB,CAAxB,CAAjC;AAEA,QAAG,6BAA6BF,UAAhC;AACC;AACH;AACA;AACA;AACG,WAAKG,uBAAL,GAA+BR,kBAAkB,CAACK,UAAD,EAAa,yBAAb,EAAwCD,OAAO,CAACG,aAAR,CAAsB,yBAAtB,CAAxC,CAAjD,CAbF,CAcC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EAlBF,CAmBC;AACA,G,CACD;;AACA;AACD;AACA;AACA;;;;;WA2EC;;AACA;AACD;AACA;AACA;AACC,wBAAWA,MAAX,EACA;AACC;AACAT,MAAAA,UAAU,CAACS,MAAD,EAAS,CAClB,SADkB,EAElB,yBAFkB,CAAT,CAAV,CAFD,CAMC;AAEA;;AACA,UAAMC,IAAI,GAAGZ,MAAM,CAACa,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZN,OAAO,CAACM,MAAR,CAAe;AACdG,QAAAA,KAAK,EAAE;AACNP,UAAAA,OAAO,EAAE;AACRO,YAAAA,KAAK,EAAE;AACNC,cAAAA,SAAS,EAAE;AADL;AADC,WADH;AAMNN,UAAAA,uBAAuB,EAAE;AACxBK,YAAAA,KAAK,EAAE;AACNC,cAAAA,SAAS,EAAE;AADL;AADiB;AANnB;AADO,OAAf,CAFY,CAAb;AAkBA,UAAGH,IAAI,CAACI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN,CA5BF,CA6BC;AAEA;;AACA,WAAKV,OAAL,GAAe,IAAIJ,MAAJ,CAAW;AAAEQ,QAAAA,MAAM,EAAEC,IAAI,CAACM,MAAL,CAAYX;AAAtB,OAAX,CAAf;AAEA,UAAG,6BAA6BK,IAAI,CAACM,MAArC,EACC,KAAKT,uBAAL,GAA+BU,KAAK,CAACC,IAAN,CAAWR,IAAI,CAACM,MAAL,CAAYT,uBAAZ,CAAoCY,UAApC,CAA+CC,KAA1D,EAAiE,UAAAC,OAAO;AAAA,eAAI,IAAInB,SAAJ,CAAc;AAAEO,UAAAA,MAAM,EAAEY;AAAV,SAAd,CAAJ;AAAA,OAAxE,CAA/B,CAnCF,CAoCC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,oBACA;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,MAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKlB,OAAL,CAAamB,QAAb,EAAjB;;AAEA,UAAG,6BAA6B,IAAhC,EACA;AACCF,QAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAIzB,MAAM,CAAC2B,WAAX,CAAuB;AACvCC,UAAAA,QAAQ,EAAE,IAD6B;AAEvCC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAF8B;AAMvCT,UAAAA,KAAK,EAAE,CACN,IAAItB,MAAM,CAACgC,QAAX,CAAoB;AACnBV,YAAAA,KAAK,EAAEH,KAAK,CAACC,IAAN,CAAW,KAAKX,uBAAhB,EAAyC,UAAAc,OAAO;AAAA,qBAAIA,OAAO,CAACG,QAAR,EAAJ;AAAA,aAAhD;AADY,WAApB,CADM;AANgC,SAAvB,CAAjB;AAYA,OApBF,CAqBC;AAEA;;;AACA,aAAQ,IAAI1B,MAAM,CAACgC,QAAX,CAAoB;AAC3BV,QAAAA,KAAK,EAAEE;AADoB,OAApB,CAAR,CAxBD,CA2BC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBACA;AACC,UAAMS,OAAO,GAAG;AACf1B,QAAAA,OAAO,EAAE,KAAKA,OAAL,CAAa2B,MAAb;AADM,OAAhB;AAIA,UAAG,6BAA6B,IAAhC,EACCD,OAAO,CAACxB,uBAAR,GAAkCU,KAAK,CAACC,IAAN,CAAW,KAAKX,uBAAhB,EAAyC,UAAAc,OAAO;AAAA,eAAIA,OAAO,CAACW,MAAR,EAAJ;AAAA,OAAhD,CAAlC;AAED,aAAOD,OAAP;AACA,K,CACD;;;;WAzKA,uBAAqBE,UAArB,EACA;AACC,cAAOA,UAAP;AAEC,aAAK,SAAL;AACC,iBAAO,IAAIhC,MAAJ,EAAP;;AACD,aAAK,yBAAL;AACC,iBAAO,EAAP;;AACD;AACC,gBAAM,IAAIc,KAAJ,kDAAoDkB,UAApD,EAAN;AAPF;AASA,K,CACD;;AACA;AACD;AACA;AACA;AACA;;;;WACC,4BAA0BA,UAA1B,EAAsCC,WAAtC,EACA;AACC,cAAOD,UAAP;AAEC,aAAK,SAAL;AACC,iBAAQC,WAAW,CAACC,OAAZ,CAAoBhC,OAAO,CAACG,aAAR,CAAsB2B,UAAtB,CAApB,CAAR;;AACD,aAAK,yBAAL;AACC,iBAAQC,WAAW,CAACE,MAAZ,KAAuB,CAA/B;;AACD;AACC,gBAAM,IAAIrB,KAAJ,kDAAoDkB,UAApD,EAAN;AAPF;AASA,K,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBACA;AAAA,UADc7B,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAMQ,KAAK,GAAGb,kBAAkB,CAACK,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,aAAQ,IAAIN,MAAM,CAACgC,QAAX,CAAoB;AAC3BO,QAAAA,IAAI,EAAGzB,KAAK,CAACC,SAAN,IAAmB,EADC;AAE3BO,QAAAA,KAAK,EAAE,CACNnB,MAAM,CAACQ,MAAP,CAAcG,KAAK,CAACP,OAAN,IAAiB,EAA/B,CADM,EAEN,IAAIP,MAAM,CAAC2B,WAAX,CAAuB;AACtBC,UAAAA,QAAQ,EAAE,IADY;AAEtBC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAFa;AAMtBT,UAAAA,KAAK,EAAE,CAAClB,SAAS,CAACO,MAAV,CAAiBG,KAAK,CAAC0B,UAAN,IAAoB;AAC5C1B,YAAAA,KAAK,EAAE;AACNC,cAAAA,SAAS,EAAGD,KAAK,CAACL,uBAAN,IAAiC;AADvC;AADqC,WAArC,CAAD;AANe,SAAvB,CAFM;AAFoB,OAApB,CAAR;AAkBA;;;;KAkGF;;;SA9MqBJ,O","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Request\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Request class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc reqCert\r\n\t\t */\r\n\t\tthis.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\r\n\r\n\t\tif(\"singleRequestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleRequestExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn (memberValue.isEqual(Request.defaultValues(memberName)));\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Request         ::=     SEQUENCE {\r\n\t *    reqCert                     CertID,\r\n\t *    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [reqCert]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [singleRequestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.reqCert || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extension.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.singleRequestExtensions || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"reqCert\",\r\n\t\t\t\"singleRequestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRequest.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\treqCert: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"reqCert\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsingleRequestExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"singleRequestExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Request\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n\r\n\t\tif(\"singleRequestExtensions\" in asn1.result)\r\n\t\t\tthis.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.reqCert.toSchema());\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.singleRequestExtensions, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\treqCert: this.reqCert.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t\t_object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
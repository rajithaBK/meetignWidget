{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar AlgorithmIdentifier = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AlgorithmIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n   */\n  function AlgorithmIdentifier() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AlgorithmIdentifier);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc ObjectIdentifier for algorithm (string representation)\r\n     */\n    this.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\n    if (\"algorithmParams\" in parameters)\n      /**\r\n       * @type {Object}\r\n       * @desc Any algorithm parameters\r\n       */\n      this.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(AlgorithmIdentifier, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"algorithm\", \"params\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n        names: {\n          algorithmIdentifier: \"algorithm\",\n          algorithmParams: \"params\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n      if (\"params\" in asn1.result) this.algorithmParams = asn1.result.params; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.algorithmId\n      }));\n      if (\"algorithmParams\" in this && this.algorithmParams instanceof asn1js.Any === false) outputArray.push(this.algorithmParams); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        algorithmId: this.algorithmId\n      };\n      if (\"algorithmParams\" in this && this.algorithmParams instanceof asn1js.Any === false) object.algorithmParams = this.algorithmParams.toJSON();\n      return object;\n    } //**********************************************************************************\n\n    /**\r\n     * Check that two \"AlgorithmIdentifiers\" are equal\r\n     * @param {AlgorithmIdentifier} algorithmIdentifier\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(algorithmIdentifier) {\n      //region Check input type\n      if (algorithmIdentifier instanceof AlgorithmIdentifier === false) return false; //endregion\n      //region Check \"algorithm_id\"\n\n      if (this.algorithmId !== algorithmIdentifier.algorithmId) return false; //endregion\n      //region Check \"algorithm_params\"\n\n      if (\"algorithmParams\" in this) {\n        if (\"algorithmParams\" in algorithmIdentifier) return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n        return false;\n      }\n\n      if (\"algorithmParams\" in algorithmIdentifier) return false; //endregion\n\n      return true;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"algorithmId\":\n          return \"\";\n\n        case \"algorithmParams\":\n          return new asn1js.Any();\n\n        default:\n          throw new Error(\"Invalid member name for AlgorithmIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"algorithmId\":\n          return memberValue === \"\";\n\n        case \"algorithmParams\":\n          return memberValue instanceof asn1js.Any;\n\n        default:\n          throw new Error(\"Invalid member name for AlgorithmIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * AlgorithmIdentifier  ::=  Sequence  {\r\n     *    algorithm               OBJECT IDENTIFIER,\r\n     *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n       * @property {string} algorithmParams Any algorithm parameters\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        optional: names.optional || false,\n        value: [new asn1js.ObjectIdentifier({\n          name: names.algorithmIdentifier || \"\"\n        }), new asn1js.Any({\n          name: names.algorithmParams || \"\",\n          optional: true\n        })]\n      });\n    }\n  }]);\n\n  return AlgorithmIdentifier;\n}(); //**************************************************************************************\n\n\nexport { AlgorithmIdentifier as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AlgorithmIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","parameters","algorithmId","defaultValues","algorithmParams","fromSchema","schema","asn1","compareSchema","names","algorithmIdentifier","verified","Error","result","algorithm","valueBlock","toString","params","outputArray","push","ObjectIdentifier","value","Any","Sequence","object","toJSON","JSON","stringify","memberName","memberValue","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @desc Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AlgorithmIdentifier  ::=  Sequence  {\r\n\t *    algorithm               OBJECT IDENTIFIER,\r\n\t *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"params\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
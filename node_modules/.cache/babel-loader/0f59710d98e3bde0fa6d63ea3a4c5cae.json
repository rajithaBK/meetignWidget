{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var ObjectDigestInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for ObjectDigestInfo class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function ObjectDigestInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ObjectDigestInfo);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {Enumerated}\n     * @desc digestedObjectType\n     */\n    this.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n    if (\"otherObjectTypeID\" in parameters)\n      /**\n       * @type {ObjectIdentifier}\n       * @desc otherObjectTypeID\n       */\n      this.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc digestAlgorithm\n     */\n\n    this.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n    /**\n     * @type {BitString}\n     * @desc objectDigest\n     */\n\n    this.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(ObjectDigestInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"digestedObjectType\", \"otherObjectTypeID\", \"digestAlgorithm\", \"objectDigest\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, ObjectDigestInfo.schema({\n        names: {\n          digestedObjectType: \"digestedObjectType\",\n          otherObjectTypeID: \"otherObjectTypeID\",\n          digestAlgorithm: {\n            names: {\n              blockName: \"digestAlgorithm\"\n            }\n          },\n          objectDigest: \"objectDigest\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.digestedObjectType = asn1.result.digestedObjectType;\n      if (\"otherObjectTypeID\" in asn1.result) this.otherObjectTypeID = asn1.result.otherObjectTypeID;\n      this.digestAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.digestAlgorithm\n      });\n      this.objectDigest = asn1.result.objectDigest; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var result = new asn1js.Sequence({\n        value: [this.digestedObjectType]\n      });\n      if (\"otherObjectTypeID\" in this) result.valueBlock.value.push(this.otherObjectTypeID);\n      result.valueBlock.value.push(this.digestAlgorithm.toSchema());\n      result.valueBlock.value.push(this.objectDigest);\n      return result;\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var result = {\n        digestedObjectType: this.digestedObjectType.toJSON()\n      };\n      if (\"otherObjectTypeID\" in this) result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n      result.digestAlgorithm = this.digestAlgorithm.toJSON();\n      result.objectDigest = this.objectDigest.toJSON();\n      return result;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"digestedObjectType\":\n          return new asn1js.Enumerated();\n\n        case \"otherObjectTypeID\":\n          return new asn1js.ObjectIdentifier();\n\n        case \"digestAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"objectDigest\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for ObjectDigestInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * ObjectDigestInfo ::= SEQUENCE {\n     *   digestedObjectType  ENUMERATED {\n     *     publicKey            (0),\n     *     publicKeyCert        (1),\n     *     otherObjectTypes     (2) },\n     *   -- otherObjectTypes MUST NOT\n     *   -- be used in this profile\n     *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n     *   digestAlgorithm     AlgorithmIdentifier,\n     *   objectDigest        BIT STRING\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [digestedObjectType]\n       * @property {string} [otherObjectTypeID]\n       * @property {string} [digestAlgorithm]\n       * @property {string} [objectDigest]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Enumerated({\n          name: names.digestedObjectType || \"\"\n        }), new asn1js.ObjectIdentifier({\n          optional: true,\n          name: names.otherObjectTypeID || \"\"\n        }), AlgorithmIdentifier.schema(names.digestAlgorithm || {}), new asn1js.BitString({\n          name: names.objectDigest || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return ObjectDigestInfo;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var V2Form = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for V2Form class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function V2Form() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, V2Form);\n\n    //region Internal properties of the object\n    if (\"issuerName\" in parameters)\n      /**\n       * @type {GeneralNames}\n       * @desc issuerName\n       */\n      this.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n    if (\"baseCertificateID\" in parameters)\n      /**\n       * @type {IssuerSerial}\n       * @desc baseCertificateID\n       */\n      this.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n    if (\"objectDigestInfo\" in parameters)\n      /**\n       * @type {ObjectDigestInfo}\n       * @desc objectDigestInfo\n       */\n      this.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(V2Form, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"issuerName\", \"baseCertificateID\", \"objectDigestInfo\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, V2Form.schema({\n        names: {\n          issuerName: \"issuerName\",\n          baseCertificateID: \"baseCertificateID\",\n          objectDigestInfo: \"objectDigestInfo\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for V2Form\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"issuerName\" in asn1.result) this.issuerName = new GeneralNames({\n        schema: asn1.result.issuerName\n      });\n\n      if (\"baseCertificateID\" in asn1.result) {\n        this.baseCertificateID = new IssuerSerial({\n          schema: new asn1js.Sequence({\n            value: asn1.result.baseCertificateID.valueBlock.value\n          })\n        });\n      }\n\n      if (\"objectDigestInfo\" in asn1.result) {\n        this.objectDigestInfo = new ObjectDigestInfo({\n          schema: new asn1js.Sequence({\n            value: asn1.result.objectDigestInfo.valueBlock.value\n          })\n        });\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var result = new asn1js.Sequence();\n      if (\"issuerName\" in this) result.valueBlock.value.push(this.issuerName.toSchema());\n\n      if (\"baseCertificateID\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0 // [0]\n\n          },\n          value: this.baseCertificateID.toSchema().valueBlock.value\n        }));\n      }\n\n      if (\"objectDigestInfo\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 1 // [1]\n\n          },\n          value: this.objectDigestInfo.toSchema().valueBlock.value\n        }));\n      } //region Construct and return new ASN.1 schema for this object\n\n\n      return result; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var result = {};\n      if (\"issuerName\" in this) result.issuerName = this.issuerName.toJSON();\n      if (\"baseCertificateID\" in this) result.baseCertificateID = this.baseCertificateID.toJSON();\n      if (\"objectDigestInfo\" in this) result.objectDigestInfo = this.objectDigestInfo.toJSON();\n      return result;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"issuerName\":\n          return new GeneralNames();\n\n        case \"baseCertificateID\":\n          return new IssuerSerial();\n\n        case \"objectDigestInfo\":\n          return new ObjectDigestInfo();\n\n        default:\n          throw new Error(\"Invalid member name for V2Form class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * V2Form ::= SEQUENCE {\n     *   issuerName            GeneralNames  OPTIONAL,\n     *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n     *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n     *     -- issuerName MUST be present in this profile\n     *     -- baseCertificateID and objectDigestInfo MUST NOT\n     *     -- be present in this profile\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [issuerName]\n       * @property {string} [baseCertificateID]\n       * @property {string} [objectDigestInfo]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [GeneralNames.schema({\n          names: {\n            blockName: names.issuerName\n          }\n        }, true), new asn1js.Constructed({\n          optional: true,\n          name: names.baseCertificateID || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0 // [0]\n\n          },\n          value: IssuerSerial.schema().valueBlock.value\n        }), new asn1js.Constructed({\n          optional: true,\n          name: names.objectDigestInfo || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 1 // [1]\n\n          },\n          value: ObjectDigestInfo.schema().valueBlock.value\n        })]\n      });\n    }\n  }]);\n\n  return V2Form;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var Holder = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for Holder class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function Holder() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Holder);\n\n    //region Internal properties of the object\n    if (\"baseCertificateID\" in parameters)\n      /**\n       * @type {IssuerSerial}\n       * @desc baseCertificateID\n       */\n      this.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n    if (\"entityName\" in parameters)\n      /**\n       * @type {GeneralNames}\n       * @desc entityName\n       */\n      this.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n    if (\"objectDigestInfo\" in parameters)\n      /**\n       * @type {ObjectDigestInfo}\n       * @desc objectDigestInfo\n       */\n      this.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(Holder, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"baseCertificateID\", \"entityName\", \"objectDigestInfo\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Holder.schema({\n        names: {\n          baseCertificateID: \"baseCertificateID\",\n          entityName: \"entityName\",\n          objectDigestInfo: \"objectDigestInfo\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Holder\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"baseCertificateID\" in asn1.result) {\n        this.baseCertificateID = new IssuerSerial({\n          schema: new asn1js.Sequence({\n            value: asn1.result.baseCertificateID.valueBlock.value\n          })\n        });\n      }\n\n      if (\"entityName\" in asn1.result) {\n        this.entityName = new GeneralNames({\n          schema: new asn1js.Sequence({\n            value: asn1.result.entityName.valueBlock.value\n          })\n        });\n      }\n\n      if (\"objectDigestInfo\" in asn1.result) {\n        this.objectDigestInfo = new ObjectDigestInfo({\n          schema: new asn1js.Sequence({\n            value: asn1.result.objectDigestInfo.valueBlock.value\n          })\n        });\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var result = new asn1js.Sequence();\n\n      if (\"baseCertificateID\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0 // [0]\n\n          },\n          value: this.baseCertificateID.toSchema().valueBlock.value\n        }));\n      }\n\n      if (\"entityName\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 1 // [1]\n\n          },\n          value: this.entityName.toSchema().valueBlock.value\n        }));\n      }\n\n      if (\"objectDigestInfo\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 2 // [2]\n\n          },\n          value: this.objectDigestInfo.toSchema().valueBlock.value\n        }));\n      }\n\n      return result;\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var result = {};\n      if (\"baseCertificateID\" in this) result.baseCertificateID = this.baseCertificateID.toJSON();\n      if (\"entityName\" in this) result.entityName = this.entityName.toJSON();\n      if (\"objectDigestInfo\" in this) result.objectDigestInfo = this.objectDigestInfo.toJSON();\n      return result;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"baseCertificateID\":\n          return new IssuerSerial();\n\n        case \"entityName\":\n          return new GeneralNames();\n\n        case \"objectDigestInfo\":\n          return new ObjectDigestInfo();\n\n        default:\n          throw new Error(\"Invalid member name for Holder class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * Holder ::= SEQUENCE {\n     *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n     *       -- the issuer and serial number of\n     *       -- the holder's Public Key Certificate\n     *   entityName          [1] GeneralNames OPTIONAL,\n     *       -- the name of the claimant or role\n     *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n     *       -- used to directly authenticate the holder,\n     *       -- for example, an executable\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [baseCertificateID]\n       * @property {string} [entityName]\n       * @property {string} [objectDigestInfo]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Constructed({\n          optional: true,\n          name: names.baseCertificateID || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0 // [0]\n\n          },\n          value: IssuerSerial.schema().valueBlock.value\n        }), new asn1js.Constructed({\n          optional: true,\n          name: names.entityName || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 1 // [2]\n\n          },\n          value: GeneralNames.schema().valueBlock.value\n        }), new asn1js.Constructed({\n          optional: true,\n          name: names.objectDigestInfo || \"\",\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 2 // [2]\n\n          },\n          value: ObjectDigestInfo.schema().valueBlock.value\n        })]\n      });\n    }\n  }]);\n\n  return Holder;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var AttributeCertificateInfoV2 = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttributeCertificateInfoV2 class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function AttributeCertificateInfoV2() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AttributeCertificateInfoV2);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {Number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n    /**\n     * @type {Holder}\n     * @desc holder\n     */\n\n    this.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n    /**\n     * @type {GeneralNames|V2Form}\n     * @desc issuer\n     */\n\n    this.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc signature\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n    /**\n     * @type {Integer}\n     * @desc serialNumber\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n    /**\n     * @type {AttCertValidityPeriod}\n     * @desc attrCertValidityPeriod\n     */\n\n    this.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n    /**\n     * @type {Array.<Attribute>}\n     * @desc attributes\n     */\n\n    this.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n    if (\"issuerUniqueID\" in parameters)\n      /**\n       * @type {BitString}\n       * @desc issuerUniqueID\n       */\n      this.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n    if (\"extensions\" in parameters)\n      /**\n       * @type {Extensions}\n       * @desc extensions\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(AttributeCertificateInfoV2, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"holder\", \"issuer\", \"signature\", \"serialNumber\", \"attrCertValidityPeriod\", \"attributes\", \"issuerUniqueID\", \"extensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\n        names: {\n          version: \"version\",\n          holder: {\n            names: {\n              blockName: \"holder\"\n            }\n          },\n          issuer: \"issuer\",\n          signature: {\n            names: {\n              blockName: \"signature\"\n            }\n          },\n          serialNumber: \"serialNumber\",\n          attrCertValidityPeriod: {\n            names: {\n              blockName: \"attrCertValidityPeriod\"\n            }\n          },\n          attributes: \"attributes\",\n          issuerUniqueID: \"issuerUniqueID\",\n          extensions: {\n            names: {\n              blockName: \"extensions\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.holder = new Holder({\n        schema: asn1.result.holder\n      });\n\n      switch (asn1.result.issuer.idBlock.tagClass) {\n        case 3:\n          // V2Form\n          this.issuer = new V2Form({\n            schema: new asn1js.Sequence({\n              value: asn1.result.issuer.valueBlock.value\n            })\n          });\n          break;\n\n        case 1: // GeneralNames (should not be used)\n\n        default:\n          throw new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n      }\n\n      this.signature = new AlgorithmIdentifier({\n        schema: asn1.result.signature\n      });\n      this.serialNumber = asn1.result.serialNumber;\n      this.attrCertValidityPeriod = new AttCertValidityPeriod({\n        schema: asn1.result.attrCertValidityPeriod\n      });\n      this.attributes = Array.from(asn1.result.attributes.valueBlock.value, function (element) {\n        return new Attribute({\n          schema: element\n        });\n      });\n      if (\"issuerUniqueID\" in asn1.result) this.issuerUniqueID = asn1.result.issuerUniqueID;\n      if (\"extensions\" in asn1.result) this.extensions = new Extensions({\n        schema: asn1.result.extensions\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var result = new asn1js.Sequence({\n        value: [new asn1js.Integer({\n          value: this.version\n        }), this.holder.toSchema(), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: this.issuer.toSchema().valueBlock.value\n        }), this.signature.toSchema(), this.serialNumber, this.attrCertValidityPeriod.toSchema(), new asn1js.Sequence({\n          value: Array.from(this.attributes, function (element) {\n            return element.toSchema();\n          })\n        })]\n      });\n      if (\"issuerUniqueID\" in this) result.valueBlock.value.push(this.issuerUniqueID);\n      if (\"extensions\" in this) result.valueBlock.value.push(this.extensions.toSchema());\n      return result;\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var result = {\n        version: this.version,\n        holder: this.holder.toJSON(),\n        issuer: this.issuer.toJSON(),\n        signature: this.signature.toJSON(),\n        serialNumber: this.serialNumber.toJSON(),\n        attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n        attributes: Array.from(this.attributes, function (element) {\n          return element.toJSON();\n        })\n      };\n      if (\"issuerUniqueID\" in this) result.issuerUniqueID = this.issuerUniqueID.toJSON();\n      if (\"extensions\" in this) result.extensions = this.extensions.toJSON();\n      return result;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 1;\n\n        case \"holder\":\n          return new Holder();\n\n        case \"issuer\":\n          return {};\n\n        case \"signature\":\n          return new AlgorithmIdentifier();\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        case \"attrCertValidityPeriod\":\n          return new AttCertValidityPeriod();\n\n        case \"attributes\":\n          return [];\n\n        case \"issuerUniqueID\":\n          return new asn1js.BitString();\n\n        case \"extensions\":\n          return new Extensions();\n\n        default:\n          throw new Error(\"Invalid member name for AttributeCertificateInfoV2 class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * AttributeCertificateInfoV2 ::= SEQUENCE {\n     *   version                 AttCertVersion, -- version is v2\n     *   holder                  Holder,\n     *   issuer                  AttCertIssuer,\n     *   signature               AlgorithmIdentifier,\n     *   serialNumber            CertificateSerialNumber,\n     *   attrCertValidityPeriod  AttCertValidityPeriod,\n     *   attributes              SEQUENCE OF Attribute,\n     *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n     *   extensions              Extensions OPTIONAL\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [issuer]\n       * @property {string} [serialNumber]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), Holder.schema(names.holder || {}), new asn1js.Choice({\n          value: [GeneralNames.schema({\n            names: {\n              blockName: names.issuer || \"\"\n            }\n          }), new asn1js.Constructed({\n            name: names.issuer || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: V2Form.schema().valueBlock.value\n          })]\n        }), AlgorithmIdentifier.schema(names.signature || {}), new asn1js.Integer({\n          name: names.serialNumber || \"\"\n        }), AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}), new asn1js.Sequence({\n          name: names.attributes || \"\",\n          value: [new asn1js.Repeated({\n            value: Attribute.schema()\n          })]\n        }), new asn1js.BitString({\n          optional: true,\n          name: names.issuerUniqueID || \"\"\n        }), Extensions.schema(names.extensions || {}, true)]\n      });\n    }\n  }]);\n\n  return AttributeCertificateInfoV2;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nvar AttributeCertificateV2 = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttributeCertificateV2 class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function AttributeCertificateV2() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AttributeCertificateV2);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {AttributeCertificateInfoV2}\n     * @desc acinfo\n     */\n    this.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc signatureAlgorithm\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n    /**\n     * @type {BitString}\n     * @desc signatureValue\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(AttributeCertificateV2, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"acinfo\", \"signatureAlgorithm\", \"signatureValue\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV2.schema({\n        names: {\n          acinfo: {\n            names: {\n              blockName: \"acinfo\"\n            }\n          },\n          signatureAlgorithm: {\n            names: {\n              blockName: \"signatureAlgorithm\"\n            }\n          },\n          signatureValue: \"signatureValue\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.acinfo = new AttributeCertificateInfoV2({\n        schema: asn1.result.acinfo\n      });\n      this.signatureAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.signatureAlgorithm\n      });\n      this.signatureValue = asn1.result.signatureValue; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      return new asn1js.Sequence({\n        value: [this.acinfo.toSchema(), this.signatureAlgorithm.toSchema(), this.signatureValue]\n      });\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        acinfo: this.acinfo.toJSON(),\n        signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n        signatureValue: this.signatureValue.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"acinfo\":\n          return new AttributeCertificateInfoV2();\n\n        case \"signatureAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signatureValue\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for AttributeCertificateV2 class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * AttributeCertificate ::= SEQUENCE {\n     *   acinfo               AttributeCertificateInfoV2,\n     *   signatureAlgorithm   AlgorithmIdentifier,\n     *   signatureValue       BIT STRING\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {Object} [acinfo]\n       * @property {Object} [signatureAlgorithm]\n       * @property {string} [signatureValue]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AttributeCertificateInfoV2.schema(names.acinfo || {}), AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js.BitString({\n          name: names.signatureValue || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return AttributeCertificateV2;\n}(); //**************************************************************************************\n\n\nexport { AttributeCertificateV2 as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AttributeCertificateV2.js"],"names":["asn1js","getParametersValue","clearProps","GeneralNames","AlgorithmIdentifier","Attribute","Extensions","AttCertValidityPeriod","IssuerSerial","ObjectDigestInfo","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","valueBlock","push","toSchema","toJSON","memberName","Enumerated","ObjectIdentifier","BitString","name","optional","V2Form","issuerName","baseCertificateID","objectDigestInfo","Constructed","idBlock","tagClass","tagNumber","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","Array","from","element","Integer","Choice","Repeated","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class ObjectDigestInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ObjectDigestInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Enumerated}\n\t\t * @desc digestedObjectType\n\t\t */\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n\t\t\n\t\tif(\"otherObjectTypeID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectIdentifier}\n\t\t\t * @desc otherObjectTypeID\n\t\t\t */\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n\t\t\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc digestAlgorithm\n\t\t */\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc objectDigest\n\t\t */\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"digestedObjectType\":\n\t\t\t\treturn new asn1js.Enumerated();\n\t\t\tcase \"otherObjectTypeID\":\n\t\t\t\treturn new asn1js.ObjectIdentifier();\n\t\t\tcase \"digestAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"objectDigest\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ObjectDigestInfo ::= SEQUENCE {\n\t *   digestedObjectType  ENUMERATED {\n\t *     publicKey            (0),\n\t *     publicKeyCert        (1),\n\t *     otherObjectTypes     (2) },\n\t *   -- otherObjectTypes MUST NOT\n\t *   -- be used in this profile\n\t *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n\t *   digestAlgorithm     AlgorithmIdentifier,\n\t *   objectDigest        BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [digestedObjectType]\n\t\t * @property {string} [otherObjectTypeID]\n\t\t * @property {string} [digestAlgorithm]\n\t\t * @property {string} [objectDigest]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\n\t\t\t\tnew asn1js.ObjectIdentifier({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"digestedObjectType\",\n\t\t\t\"otherObjectTypeID\",\n\t\t\t\"digestAlgorithm\",\n\t\t\t\"objectDigest\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tObjectDigestInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\n\t\t\t\t\tdigestAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tobjectDigest: \"objectDigest\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\n\t\t\n\t\tif(\"otherObjectTypeID\" in asn1.result)\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\n\t\t\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n\t\tthis.objectDigest = asn1.result.objectDigest;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [this.digestedObjectType]\n\t\t});\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.valueBlock.value.push(this.otherObjectTypeID);\n\t\t\n\t\tresult.valueBlock.value.push(this.digestAlgorithm.toSchema());\n\t\tresult.valueBlock.value.push(this.objectDigest);\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\n\t\t};\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n\t\t\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\n\t\tresult.objectDigest = this.objectDigest.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class V2Form\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for V2Form class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"issuerName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc issuerName\n\t\t\t */\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuerName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * V2Form ::= SEQUENCE {\n\t *   issuerName            GeneralNames  OPTIONAL,\n\t *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\t *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n\t *     -- issuerName MUST be present in this profile\n\t *     -- baseCertificateID and objectDigestInfo MUST NOT\n\t *     -- be present in this profile\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuerName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: names.issuerName\n\t\t\t\t\t}\n\t\t\t\t}, true),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuerName\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tV2Form.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuerName: \"issuerName\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"issuerName\" in asn1.result)\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.issuerName = this.issuerName.toJSON();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class Holder\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Holder class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"entityName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc entityName\n\t\t\t */\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"entityName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Holder ::= SEQUENCE {\n\t *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\t *       -- the issuer and serial number of\n\t *       -- the holder's Public Key Certificate\n\t *   entityName          [1] GeneralNames OPTIONAL,\n\t *       -- the name of the claimant or role\n\t *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n\t *       -- used to directly authenticate the holder,\n\t *       -- for example, an executable\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [entityName]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.entityName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"baseCertificateID\",\n\t\t\t\"entityName\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tHolder.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tentityName: \"entityName\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"entityName\" in asn1.result)\n\t\t{\n\t\t\tthis.entityName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t\tresult.entityName = this.entityName.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {Holder}\n\t\t * @desc holder\n\t\t */\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n\t\t/**\n\t\t * @type {GeneralNames|V2Form}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"holder\":\n\t\t\t\treturn new Holder();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfoV2 ::= SEQUENCE {\n\t *   version                 AttCertVersion, -- version is v2\n\t *   holder                  Holder,\n\t *   issuer                  AttCertIssuer,\n\t *   signature               AlgorithmIdentifier,\n\t *   serialNumber            CertificateSerialNumber,\n\t *   attrCertValidityPeriod  AttCertValidityPeriod,\n\t *   attributes              SEQUENCE OF Attribute,\n\t *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n\t *   extensions              Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tHolder.schema(names.holder || {}),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tGeneralNames.schema({\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"holder\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tholder: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"holder\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\n\t\t\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\n\t\t{\n\t\t\tcase 3: // V2Form\n\t\t\t\tthis.issuer = new V2Form({\n\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1: // GeneralNames (should not be used)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n\t\t}\n\t\t\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\t\tthis.holder.toSchema(),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tthis.signature.toSchema(),\n\t\t\t\tthis.serialNumber,\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version,\n\t\t\tholder: this.holder.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport default class AttributeCertificateV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV2}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV2();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV2,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureAlgorithm\",\n\t\t\t\"signatureValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
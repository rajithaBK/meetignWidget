{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _cloneDeep2 = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _common = require(\"@webex/common\");\n\nvar _webexCore = require(\"@webex/webex-core\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('memberships');\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\n\n\nvar Memberships = _webexCore.WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n    */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.webex, _common.SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.webex.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.webex.internal.mercury, _common.SDK_EVENT.INTERNAL.WEBEX_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      service: 'hydra',\n      resource: \"memberships/\".concat(id)\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.webex);\n    });\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus: function listWithReadStatus(options) {\n    var _this3 = this;\n\n    var deconstructedId = (0, _common.deconstructHydraId)(options.roomId);\n    var conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n    return (0, _common.ensureMyIdIsAvailable)(this.webex).then(function () {\n      return _this3.webex.internal.services.waitForCatalog('postauth').then(function () {\n        return _this3.webex.internal.conversation.get(conversation, {\n          participantAckFilter: 'all',\n          // show lastAck info for each participant\n          activitiesLimit: 0 // don't send the whole history of activity\n\n        }).then(function (resp) {\n          try {\n            // We keep track of the last read message by each user\n            var roomUUID = resp.id;\n            var roomId = (0, _common.buildHydraRoomId)(roomUUID, conversation.cluster);\n            var particpants = resp.participants.items;\n            var lastReadInfo = {\n              items: []\n            };\n            var roomType = (0, _common.getHydraRoomType)(resp.tags);\n            var myId = _this3.webex.internal.me.id;\n            var isRoomHidden = resp.tags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n            for (var i = 0; i < particpants.length; i += 1) {\n              var participant = particpants[i];\n              var participantInfo = {\n                id: (0, _common.buildHydraMembershipId)(participant.entryUUID, roomUUID, conversation.cluster),\n                roomId: roomId,\n                personId: (0, _common.buildHydraPersonId)(participant.entryUUID),\n                personEmail: participant.entryEmailAddress || participant.entryEmail,\n                personDisplayName: participant.displayName,\n                personOrgId: (0, _common.buildHydraOrgId)(participant.orgId, conversation.cluster),\n                isMonitor: false,\n                // deprecated, but included for completeness\n                roomType: roomType // created is not available in the conversations payload\n\n              };\n\n              if (isRoomHidden && participantInfo.personId === myId) {\n                participantInfo.isRoomHidden = isRoomHidden;\n              }\n\n              if ('roomProperties' in participant) {\n                if ('lastSeenActivityDate' in participant.roomProperties) {\n                  participantInfo.lastSeenId = (0, _common.buildHydraMessageId)(participant.roomProperties.lastSeenActivityUUID, conversation.cluster);\n                  participantInfo.lastSeenDate = participant.roomProperties.lastSeenActivityDate;\n                }\n\n                if ('isModerator' in participant.roomProperties) {\n                  participantInfo.isModerator = participant.roomProperties.isModerator;\n                }\n              }\n\n              lastReadInfo.items.push(participantInfo);\n            }\n\n            return _promise.default.resolve(lastReadInfo);\n          } catch (e) {\n            return _promise.default.reject(e);\n          }\n        });\n      });\n    });\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: \"memberships/\".concat(id)\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * // Change membership to make user a moderator\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   * @example\n   * // Hide a one on one space\n   * var assert = require('assert');\n   * var membership, myId;\n   * webex.people.get('me')\n   *   .then(function(person) {\n   *     myId = personId;\n   *     return webex.messages.create({\n   *       toPersonEmail: 'otherUser@acme.com',\n   *       text: 'This message will create a 1-1 space'\n   *     });\n   *   })\n   *   then(function(message) {\n   *     return webex.memberships.list({\n   *       roomId: message.roomId,\n   *       personId: myId\n   *     });\n   *   })\n   *   .then((memberships) => {\n   *     membership = memberships.items[0];\n   *     assert.equal(membership.isRoomHidden, false);\n   *     membership.isRoomHidden = true;\n   *     // This will generate a memberships:updated event\n   *     // that will only be seen by this user\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function(membership) {\n   *     assert.equal(membership.isRoomHidden, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update: function update(membership) {\n    var id = membership.id || membership;\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: \"memberships/\".concat(id),\n      body: membership\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen: function updateLastSeen(message) {\n    var _this4 = this;\n\n    var activity = {\n      id: (0, _common.deconstructHydraId)(message.id).id\n    };\n    var deconstructedId = (0, _common.deconstructHydraId)(message.roomId);\n    var conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n    return this.webex.internal.services.waitForCatalog('postauth').then(function () {\n      return _this4.webex.internal.conversation.acknowledge(conversation, activity).then(function (ack) {\n        return {\n          lastSeenId: (0, _common.buildHydraMessageId)(ack.object.id, conversation.cluster),\n          id: (0, _common.buildHydraMembershipId)(ack.actor.entryUUID, ack.target.id, conversation.cluster),\n          personId: (0, _common.buildHydraPersonId)(ack.actor.entryUUID, conversation.cluster),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: (0, _common.buildHydraOrgId)(ack.actor.orgId, conversation.cluster),\n          roomId: (0, _common.buildHydraRoomId)(ack.target.id, conversation.cluster),\n          roomType: (0, _common.getHydraRoomType)(ack.target.tags),\n          isRoomHidden: false,\n          // any activity unhides a space.\n          isMonitor: false,\n          // deprecated, returned for back compat\n          created: ack.published\n        };\n      });\n    });\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var _this5 = this;\n\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        var membershipCreatedEventDataArray = activity.object.participants.items.map(function (participant) {\n          var output = (0, _cloneDeep2.default)(activity);\n          output.target = (0, _cloneDeep2.default)(activity.object);\n          output.object = (0, _cloneDeep2.default)(participant);\n          return _this5.getMembershipEvent(output, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n        });\n        membershipCreatedEventDataArray.forEach(function (data) {\n          if (data) {\n            debug(\"membership \\\"created\\\" payload: \".concat((0, _stringify.default)(data)));\n\n            _this5.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        var membershipCreatedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(\"membership \\\"created\\\" payload:             \".concat((0, _stringify.default)(membershipCreatedEventData)));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        var membershipDeletedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(\"membership \\\"deleted\\\" payload:             \".concat((0, _stringify.default)(membershipDeletedEventData)));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        var membershipUpdatedEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(\"membership \\\"updated\\\" payload:             \".concat((0, _stringify.default)(membershipUpdatedEventData)));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n\n        break;\n\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        var membershipSeenEventData = this.getMembershipEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(\"membership \\\"updated\\\" payload:             \".concat((0, _stringify.default)(membershipSeenEventData)));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent: function getMembershipEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep2.default)(this.eventEnvelope);\n      var cluster = activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE ? (0, _common.getHydraClusterString)(this.webex, activity.target.url) : (0, _common.getHydraClusterString)(this.webex, activity.url);\n      var member;\n      var space;\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.buildHydraPersonId)(activity.actor.entryUUID, cluster);\n\n      if (activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = (0, _common.buildHydraRoomId)(activity.target.id, cluster);\n        sdkEvent.data.roomType = (0, _common.getHydraRoomType)(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      } else {\n        sdkEvent.data.roomId = (0, _common.buildHydraRoomId)(activity.object.id, cluster);\n        sdkEvent.data.roomType = _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT; // currently hidden attribute is only set on 1-1\n\n        sdkEvent.data.isRoomHidden = true;\n      }\n\n      if (activity.verb !== _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if (activity.object.roomProperties && activity.object.roomProperties.isModerator) {\n          sdkEvent.data.isModerator = true;\n        } else {\n          sdkEvent.data.isModerator = false;\n        }\n      } // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n\n      if (activity.verb === _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR; // The space with the read message is the \"target\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET; // And the \"object\" is the message that was last seen\n\n        sdkEvent.data.lastSeenId = (0, _common.buildHydraMessageId)(activity.object.id, cluster);\n      } else if (activity.verb === _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR; // But the space is now the \"object\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      } else {\n        // For most memberships events the person is the 'object\"\n        member = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT; // and the space is the \"target\"\n\n        space = _common.SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = (0, _common.buildHydraMembershipId)(activity[member].entryUUID, activity[space].id, cluster);\n      sdkEvent.data.personId = (0, _common.buildHydraPersonId)(activity[member].entryUUID, cluster);\n      sdkEvent.data.personEmail = activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = (0, _common.buildHydraOrgId)(activity[member].orgId, cluster);\n      return sdkEvent;\n    } catch (e) {\n      this.webex.logger.error(\"Unable to generate SDK event from mercury 'socket activity for memberships:\".concat(event, \" event: \").concat(e.message));\n      return null;\n    }\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = Memberships;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAaA;AAjBA;AACA;AACA;;;AAkBA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAPA,CAAiB,aAAjBA,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAGC,uBAAYC,MAAZD,CAAmB;AACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEEE,QA7CqC,oBA6C5B;AAAA,sBACP;;;AACA,WAAO,iCAAoB,KAAKC,KAAzB,EACLC,kBAAUC,QAAVD,CAAmBE,QAAnBF,CAA4BG,WADvB,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClBC,WAAI,CAACC,aAAL,GAAqBF,QAArB,CADkB,CAGlB;;AACA,aAAOC,KAAI,CAACP,KAAL,CAAWS,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,GAAsCN,IAAtC,CAA2C,YAAM;AACtDE,aAAI,CAACK,QAAL,CAAcL,KAAI,CAACP,KAAL,CAAWS,QAAX,CAAoBC,OAAlC,EACET,kBAAUY,QAAVZ,CAAmBa,cADrB,EAEE,UAACC,KAAD;AAAA,iBAAWR,KAAI,CAACS,eAAL,CAAqBD,KAArB,CAAX;AAFF;AADK,QAAP;AANG,MAAP;AA/CmC;;AA6DrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,QA1FqC,kBA0F9BC,UA1F8B,EA0FlB;AACjB,WAAO,KAAKC,OAAL,CAAa;AAClBC,YAAM,EAAE,MADU;AAElBC,aAAO,EAAE,OAFS;AAGlBC,cAAQ,E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","names":["debug","require","Memberships","WebexPlugin","extend","listen","webex","SDK_EVENT","EXTERNAL","RESOURCE","MEMBERSHIPS","then","envelope","_this","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","WEBEX_ACTIVITY","event","onWebexApiEvent","create","membership","request","method","service","resource","body","res","get","id","items","list","options","qs","Page","_this2","listWithReadStatus","deconstructedId","roomId","conversation","cluster","_this3","services","waitForCatalog","participantAckFilter","activitiesLimit","resp","roomUUID","particpants","participants","lastReadInfo","roomType","tags","myId","me","isRoomHidden","includes","ACTIVITY_TAG","HIDDEN","i","length","participant","participantInfo","entryUUID","personId","personEmail","entryEmailAddress","entryEmail","personDisplayName","displayName","personOrgId","orgId","isMonitor","roomProperties","lastSeenId","lastSeenActivityUUID","lastSeenDate","lastSeenActivityDate","isModerator","push","_promise","resolve","e","reject","remove","statusCode","undefined","update","updateLastSeen","message","activity","_this4","acknowledge","ack","object","actor","target","emailAddress","created","published","data","verb","ACTIVITY_VERB","CREATE","membershipCreatedEventDataArray","map","output","_this5","getMembershipEvent","EVENT_TYPE","CREATED","forEach","trigger","ADD","membershipCreatedEventData","LEAVE","membershipDeletedEventData","DELETED","ADD_MODERATOR","REMOVE_MODERATOR","HIDE","membershipUpdatedEventData","UPDATED","ACKNOWLEDGE","membershipSeenEventData","SEEN","sdkEvent","url","member","space","actorId","SPACE_TYPE","DIRECT","ACTIVITY_FIELD","ACTOR","TARGET","OBJECT","logger","error","version"],"sources":["memberships.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  ensureMyIdIsAvailable,\n  buildHydraMembershipId,\n  buildHydraMessageId,\n  buildHydraOrgId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraClusterString,\n  getHydraRoomType,\n  deconstructHydraId\n} from '@webex/common';\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('memberships');\n\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\nconst Memberships = WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus(options) {\n    const deconstructedId = deconstructHydraId(options.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureMyIdIsAvailable(this.webex)\n      .then(() => this.webex.internal.services.waitForCatalog('postauth')\n        .then(() => this.webex.internal.conversation.get(conversation,\n          {\n            participantAckFilter: 'all', // show lastAck info for each participant\n            activitiesLimit: 0 // don't send the whole history of activity\n          })\n          .then((resp) => {\n            try {\n              // We keep track of the last read message by each user\n              const roomUUID = resp.id;\n              const roomId = buildHydraRoomId(roomUUID, conversation.cluster);\n              const particpants = resp.participants.items;\n              const lastReadInfo = {items: []};\n              const roomType = getHydraRoomType(resp.tags);\n              const myId = this.webex.internal.me.id;\n              const isRoomHidden = resp.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n              for (let i = 0; i < particpants.length; i += 1) {\n                const participant = particpants[i];\n                const participantInfo = {\n                  id: buildHydraMembershipId(participant.entryUUID, roomUUID,\n                    conversation.cluster),\n                  roomId,\n                  personId: buildHydraPersonId(participant.entryUUID),\n                  personEmail: participant.entryEmailAddress ||\n                    participant.entryEmail,\n                  personDisplayName: participant.displayName,\n                  personOrgId: buildHydraOrgId(participant.orgId,\n                    conversation.cluster),\n                  isMonitor: false, // deprecated, but included for completeness\n                  roomType\n                  // created is not available in the conversations payload\n                };\n\n                if ((isRoomHidden) && (participantInfo.personId === myId)) {\n                  participantInfo.isRoomHidden = isRoomHidden;\n                }\n\n                if ('roomProperties' in participant) {\n                  if ('lastSeenActivityDate' in participant.roomProperties) {\n                    participantInfo.lastSeenId =\n                      buildHydraMessageId(participant.roomProperties.lastSeenActivityUUID,\n                        conversation.cluster);\n                    participantInfo.lastSeenDate =\n                      participant.roomProperties.lastSeenActivityDate;\n                  }\n                  if ('isModerator' in participant.roomProperties) {\n                    participantInfo.isModerator = participant.roomProperties.isModerator;\n                  }\n                }\n\n                lastReadInfo.items.push(participantInfo);\n              }\n\n              return Promise.resolve(lastReadInfo);\n            }\n            catch (e) {\n              return Promise.reject(e);\n            }\n          })));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * // Change membership to make user a moderator\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   * @example\n   * // Hide a one on one space\n   * var assert = require('assert');\n   * var membership, myId;\n   * webex.people.get('me')\n   *   .then(function(person) {\n   *     myId = personId;\n   *     return webex.messages.create({\n   *       toPersonEmail: 'otherUser@acme.com',\n   *       text: 'This message will create a 1-1 space'\n   *     });\n   *   })\n   *   then(function(message) {\n   *     return webex.memberships.list({\n   *       roomId: message.roomId,\n   *       personId: myId\n   *     });\n   *   })\n   *   .then((memberships) => {\n   *     membership = memberships.items[0];\n   *     assert.equal(membership.isRoomHidden, false);\n   *     membership.isRoomHidden = true;\n   *     // This will generate a memberships:updated event\n   *     // that will only be seen by this user\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function(membership) {\n   *     assert.equal(membership.isRoomHidden, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const deconstructedId = deconstructHydraId(message.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return this.webex.internal.services.waitForCatalog('postauth')\n      .then(() => this.webex.internal.conversation.acknowledge(conversation, activity)\n        .then((ack) => ({\n          lastSeenId: buildHydraMessageId(ack.object.id, conversation.cluster),\n          id: buildHydraMembershipId(ack.actor.entryUUID,\n            ack.target.id, conversation.cluster),\n          personId: buildHydraPersonId(ack.actor.entryUUID, conversation.cluster),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: buildHydraOrgId(ack.actor.orgId, conversation.cluster),\n          roomId: buildHydraRoomId(ack.target.id, conversation.cluster),\n          roomType: getHydraRoomType(ack.target.tags),\n          isRoomHidden: false, // any activity unhides a space.\n          isMonitor: false, // deprecated, returned for back compat\n          created: ack.published\n        })));\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        const membershipCreatedEventDataArray =\n          activity.object.participants.items.map((participant) => {\n            const output = cloneDeep(activity);\n\n            output.target = cloneDeep(activity.object);\n            output.object = cloneDeep(participant);\n\n            return this.getMembershipEvent(output,\n              SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n          });\n\n        membershipCreatedEventDataArray.forEach((data) => {\n          if (data) {\n            debug(`membership \"created\" payload: ${JSON.stringify(data)}`);\n            this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        const membershipCreatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(`membership \"created\" payload: \\\n            ${JSON.stringify(membershipCreatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        const membershipDeletedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(`membership \"deleted\" payload: \\\n            ${JSON.stringify(membershipDeletedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        const membershipUpdatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipUpdatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        const membershipSeenEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipSeenEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      const cluster = (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) ?\n        getHydraClusterString(this.webex, activity.target.url) :\n        getHydraClusterString(this.webex, activity.url);\n      let member;\n      let space;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID, cluster);\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.target.id, cluster);\n        sdkEvent.data.roomType = getHydraRoomType(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      }\n      else {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.object.id, cluster);\n        sdkEvent.data.roomType = SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n        // currently hidden attribute is only set on 1-1\n        sdkEvent.data.isRoomHidden = true;\n      }\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {\n          sdkEvent.data.isModerator = true;\n        }\n        else {\n          sdkEvent.data.isModerator = false;\n        }\n      }\n      // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n      if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // The space with the read message is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n        // And the \"object\" is the message that was last seen\n        sdkEvent.data.lastSeenId = buildHydraMessageId(activity.object.id, cluster);\n      }\n      else if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // But the space is now the \"object\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      }\n      else {\n        // For most memberships events the person is the 'object\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        // and the space is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = buildHydraMembershipId(activity[member].entryUUID,\n        activity[space].id, cluster);\n      sdkEvent.data.personId = buildHydraPersonId(activity[member].entryUUID, cluster);\n      sdkEvent.data.personEmail =\n        activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = buildHydraOrgId(activity[member].orgId, cluster);\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for memberships:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Memberships;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"./logger-proxy\"));\n/**\n * @class LogsRequest\n */\n\n\nvar LogsRequest = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {Object} options\n   * @param {Object} options.webex Webex SDK instance\n   * @param {ClientMetrics} metrics\n   */\n  function LogsRequest(options) {\n    (0, _classCallCheck2.default)(this, LogsRequest);\n    this.webex = options.webex;\n  }\n  /**\n   * Uploads logs to the support server\n   *\n   * @param {Object} [options={}]\n   * @param {String} [options.feedbackId=uuid.v4] ID used for tracking\n   * @param {String} [options.locusId]\n   * @param {String} [options.correlationId]\n   * @param {String} [options.callStart] Call Start Time\n   * @param {String} [options.meetingId] webex meeting ID\n   * @returns {Promise.<String>} Feedback ID\n   * @memberof LogsRequest\n   */\n\n\n  (0, _createClass2.default)(LogsRequest, [{\n    key: \"uploadLogs\",\n    value: function () {\n      var _uploadLogs = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var options,\n            id,\n            locusId,\n            correlationId,\n            meetingId,\n            callStart,\n            _args = arguments;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                id = options.feedbackId || _uuid.default.v4();\n                locusId = options.locusId, correlationId = options.correlationId, meetingId = options.meetingId, callStart = options.callStart;\n\n                _loggerProxy.default.logger.info(\"Logs:request#uploadLogs --> uploading user logs for feedbackId: \".concat(id));\n\n                _context.prev = 4;\n                _context.next = 7;\n                return this.webex.internal.support.submitLogs({\n                  feedbackId: id,\n                  locusId: locusId,\n                  correlationId: correlationId,\n                  meetingId: meetingId,\n                  callStart: callStart\n                });\n\n              case 7:\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](4);\n\n                _loggerProxy.default.logger.error('Logs:request#uploadLogs --> uploading user logs failed', _context.t0);\n\n                return _context.abrupt(\"return\", _promise.default.reject(_context.t0));\n\n              case 13:\n                return _context.abrupt(\"return\", id);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 9]]);\n      }));\n\n      function uploadLogs() {\n        return _uploadLogs.apply(this, arguments);\n      }\n\n      return uploadLogs;\n    }()\n  }]);\n  return LogsRequest;\n}();\n\nexports.default = LogsRequest;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAEA;AACA;AACA;;;IACqBA,W;AACnB;AACF;AACA;AACA;AACA;AACA;AACE,uBAAYC,OAAZ,EAAqB;AAAA;AACnB,SAAKC,KAAL,GAAaD,OAAO,CAACC,KAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;gGACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBD,uBAAjB,2DAA2B,EAAVA;AACTE,kBADR,GACaF,OAAO,CAACG,UAARH,IAAsBI,cAAKC,EAALD,EAA3BF;AAEJI,uBAHJ,GAIMN,OAJN,CAGIM,SAASC,aAHb,GAIMP,OAJN,CAGaO,aAATD,EAAwBE,SAH5B,GAIMR,OAJN,CAG4BQ,SAAxBF,EAAmCG,SAHvC,GAIMT,OAJN,CAGuCS,SAAnCH;;AAGFI,qCAAYC,MAAZD,CAAmBE,IAAnBF,2EAA2FR,EAA3F;;AANFW;AAAAA;AAAA,uBASU,KAAKZ,KAAL,CAAWa,QAAX,CAAoBC,OAApB,CAA4BC,UAA5B,CAAuC;AAC3Cb,4BAAU,EAAED,EAD+B;AAC3BI,yBAAO,EAAPA,OAD2B;AAClBC,+BAAa,EAAbA,aADkB;AACHC,2BAAS,EAATA,SADG;AACQC,2BAAS,EAATA;AADR,iBAAvC,CATV;;AAAA;AAAAI;AAAA;;AAAA;AAAAA;AAAAA;;AAcIH,qCAAYC,MAAZD,CAAmBO,KAAnBP,CAAyB,wDAAzBA;;AAdJ,iDAgBWQ,iBAAQC,MAAR,aAhBX;;AAAA;AAAA,iDAmBSjB,EAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["LogsRequest","options","webex","id","feedbackId","uuid","v4","locusId","correlationId","meetingId","callStart","LoggerProxy","logger","info","_context","internal","support","submitLogs","error","_promise","reject"],"sources":["request.js"],"sourcesContent":["import uuid from 'uuid';\n\nimport LoggerProxy from './logger-proxy';\n\n/**\n * @class LogsRequest\n */\nexport default class LogsRequest {\n  /**\n   *\n   * @param {Object} options\n   * @param {Object} options.webex Webex SDK instance\n   * @param {ClientMetrics} metrics\n   */\n  constructor(options) {\n    this.webex = options.webex;\n  }\n\n  /**\n   * Uploads logs to the support server\n   *\n   * @param {Object} [options={}]\n   * @param {String} [options.feedbackId=uuid.v4] ID used for tracking\n   * @param {String} [options.locusId]\n   * @param {String} [options.correlationId]\n   * @param {String} [options.callStart] Call Start Time\n   * @param {String} [options.meetingId] webex meeting ID\n   * @returns {Promise.<String>} Feedback ID\n   * @memberof LogsRequest\n   */\n  async uploadLogs(options = {}) {\n    const id = options.feedbackId || uuid.v4();\n    const {\n      locusId, correlationId, meetingId, callStart\n    } = options;\n\n    LoggerProxy.logger.info(`Logs:request#uploadLogs --> uploading user logs for feedbackId: ${id}`);\n\n    try {\n      await this.webex.internal.support.submitLogs({\n        feedbackId: id, locusId, correlationId, meetingId, callStart\n      });\n    }\n    catch (error) {\n      LoggerProxy.logger.error('Logs:request#uploadLogs --> uploading user logs failed', error);\n\n      return Promise.reject(error);\n    }\n\n    return id;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
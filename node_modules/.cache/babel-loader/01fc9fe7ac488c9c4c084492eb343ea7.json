{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar GeneralSubtree = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for GeneralSubtree class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function GeneralSubtree() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GeneralSubtree);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {GeneralName}\r\n     * @desc base\r\n     */\n    this.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\n    /**\r\n     * @type {number|Integer}\r\n     * @desc base\r\n     */\n\n    this.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\n    if (\"maximum\" in parameters)\n      /**\r\n       * @type {number|Integer}\r\n       * @desc minimum\r\n       */\n      this.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(GeneralSubtree, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"base\", \"minimum\", \"maximum\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({\n        names: {\n          base: {\n            names: {\n              blockName: \"base\"\n            }\n          },\n          minimum: \"minimum\",\n          maximum: \"maximum\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for GeneralSubtree\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.base = new GeneralName({\n        schema: asn1.result.base\n      });\n\n      if (\"minimum\" in asn1.result) {\n        if (asn1.result.minimum.valueBlock.isHexOnly) this.minimum = asn1.result.minimum;else this.minimum = asn1.result.minimum.valueBlock.valueDec;\n      }\n\n      if (\"maximum\" in asn1.result) {\n        if (asn1.result.maximum.valueBlock.isHexOnly) this.maximum = asn1.result.maximum;else this.maximum = asn1.result.maximum.valueBlock.valueDec;\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.base.toSchema());\n\n      if (this.minimum !== 0) {\n        var valueMinimum = 0;\n        if (this.minimum instanceof asn1js.Integer) valueMinimum = this.minimum;else valueMinimum = new asn1js.Integer({\n          value: this.minimum\n        });\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [valueMinimum]\n        }));\n      }\n\n      if (\"maximum\" in this) {\n        var valueMaximum = 0;\n        if (this.maximum instanceof asn1js.Integer) valueMaximum = this.maximum;else valueMaximum = new asn1js.Integer({\n          value: this.maximum\n        });\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [valueMaximum]\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        base: this.base.toJSON()\n      };\n\n      if (this.minimum !== 0) {\n        if (typeof this.minimum === \"number\") object.minimum = this.minimum;else object.minimum = this.minimum.toJSON();\n      }\n\n      if (\"maximum\" in this) {\n        if (typeof this.maximum === \"number\") object.maximum = this.maximum;else object.maximum = this.maximum.toJSON();\n      }\n\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"base\":\n          return new GeneralName();\n\n        case \"minimum\":\n          return 0;\n\n        case \"maximum\":\n          return 0;\n\n        default:\n          throw new Error(\"Invalid member name for GeneralSubtree class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * GeneralSubtree ::= SEQUENCE {\r\n     *    base                    GeneralName,\r\n     *    minimum         [0]     BaseDistance DEFAULT 0,\r\n     *    maximum         [1]     BaseDistance OPTIONAL }\r\n     *\r\n     * BaseDistance ::= INTEGER (0..MAX)\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [base]\r\n       * @property {string} [minimum]\r\n       * @property {string} [maximum]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [GeneralName.schema(names.base || {}), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Integer({\n            name: names.minimum || \"\"\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.Integer({\n            name: names.maximum || \"\"\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return GeneralSubtree;\n}(); //**************************************************************************************\n\n\nexport { GeneralSubtree as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/GeneralSubtree.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","GeneralSubtree","parameters","base","defaultValues","minimum","maximum","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","isHexOnly","valueDec","outputArray","push","toSchema","valueMinimum","Integer","value","Constructed","optional","idBlock","tagClass","tagNumber","valueMaximum","Sequence","object","toJSON","memberName","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralSubtree ::= SEQUENCE {\r\n\t *    base                    GeneralName,\r\n\t *    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t *    maximum         [1]     BaseDistance OPTIONAL }\r\n\t *\r\n\t * BaseDistance ::= INTEGER (0..MAX)\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"base\",\r\n\t\t\t\"minimum\",\r\n\t\t\t\"maximum\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
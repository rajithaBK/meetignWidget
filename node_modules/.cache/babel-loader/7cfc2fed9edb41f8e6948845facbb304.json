{"ast":null,"code":"'use strict';\n/*\n * Displays a helpful message and the source of\n * the format when it is invalid.\n */\n\nvar _createClass = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nvar InvalidFormatError = /*#__PURE__*/function (_Error) {\n  _inherits(InvalidFormatError, _Error);\n\n  var _super = _createSuper(InvalidFormatError);\n\n  function InvalidFormatError(formatFn) {\n    var _this;\n\n    _classCallCheck(this, InvalidFormatError);\n\n    _this = _super.call(this, \"Format functions must be synchronous taking a two arguments: (info, opts)\\nFound: \".concat(formatFn.toString().split('\\n')[0], \"\\n\"));\n    Error.captureStackTrace(_assertThisInitialized(_this), InvalidFormatError);\n    return _this;\n  }\n\n  return _createClass(InvalidFormatError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/*\n * function format (formatFn)\n * Returns a create function for the `formatFn`.\n */\n\n\nmodule.exports = function (formatFn) {\n  if (formatFn.length > 2) {\n    throw new InvalidFormatError(formatFn);\n  }\n  /*\n   * function Format (options)\n   * Base prototype which calls a `_format`\n   * function and pushes the result.\n   */\n\n\n  function Format() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = options;\n  }\n\n  Format.prototype.transform = formatFn; //\n  // Create a function which returns new instances of\n  // FormatWrap for simple syntax like:\n  //\n  // require('winston').formats.json();\n  //\n\n  function createFormatWrap(opts) {\n    return new Format(opts);\n  } //\n  // Expose the FormatWrap through the create function\n  // for testability.\n  //\n\n\n  createFormatWrap.Format = Format;\n  return createFormatWrap;\n};","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/logform/format.js"],"names":["InvalidFormatError","formatFn","toString","split","Error","captureStackTrace","module","exports","length","Format","options","prototype","transform","createFormatWrap","opts"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;IACMA,kB;;;;;AACJ,8BAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AACpB,0HACKA,QAAQ,CAACC,QAAT,GAAoBC,KAApB,CAA0B,IAA1B,EAAgC,CAAhC,CADL;AAGAC,IAAAA,KAAK,CAACC,iBAAN,gCAA8BL,kBAA9B;AAJoB;AAKrB;;;iCAN8BI,K;AASjC;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAAAN,QAAQ,EAAI;AAC3B,MAAIA,QAAQ,CAACO,MAAT,GAAkB,CAAtB,EAAyB;AACvB,UAAM,IAAIR,kBAAJ,CAAuBC,QAAvB,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASQ,MAAT,GAA8B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC5B,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDD,EAAAA,MAAM,CAACE,SAAP,CAAiBC,SAAjB,GAA6BX,QAA7B,CAd2B,CAgB3B;AACA;AACA;AACA;AACA;AACA;;AACA,WAASY,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,WAAO,IAAIL,MAAJ,CAAWK,IAAX,CAAP;AACD,GAxB0B,CA0B3B;AACA;AACA;AACA;;;AACAD,EAAAA,gBAAgB,CAACJ,MAAjB,GAA0BA,MAA1B;AACA,SAAOI,gBAAP;AACD,CAhCD","sourcesContent":["'use strict';\n\n/*\n * Displays a helpful message and the source of\n * the format when it is invalid.\n */\nclass InvalidFormatError extends Error {\n  constructor(formatFn) {\n    super(`Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ${formatFn.toString().split('\\n')[0]}\\n`);\n\n    Error.captureStackTrace(this, InvalidFormatError);\n  }\n}\n\n/*\n * function format (formatFn)\n * Returns a create function for the `formatFn`.\n */\nmodule.exports = formatFn => {\n  if (formatFn.length > 2) {\n    throw new InvalidFormatError(formatFn);\n  }\n\n  /*\n   * function Format (options)\n   * Base prototype which calls a `_format`\n   * function and pushes the result.\n   */\n  function Format(options = {}) {\n    this.options = options;\n  }\n\n  Format.prototype.transform = formatFn;\n\n  //\n  // Create a function which returns new instances of\n  // FormatWrap for simple syntax like:\n  //\n  // require('winston').formats.json();\n  //\n  function createFormatWrap(opts) {\n    return new Format(opts);\n  }\n\n  //\n  // Expose the FormatWrap through the create function\n  // for testability.\n  //\n  createFormatWrap.Format = Format;\n  return createFormatWrap;\n};\n"]},"metadata":{},"sourceType":"script"}
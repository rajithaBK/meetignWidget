{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar Time = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Time class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n   * @property {Date} [value] Value of the TIME class\r\n   */\n  function Time() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Time);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n     */\n    this.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\n    /**\r\n     * @type {Date}\r\n     * @desc Value of the TIME class\r\n     */\n\n    this.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(Time, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"utcTimeName\", \"generalTimeName\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Time.schema({\n        names: {\n          utcTimeName: \"utcTimeName\",\n          generalTimeName: \"generalTimeName\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Time\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"utcTimeName\" in asn1.result) {\n        this.type = 0;\n        this.value = asn1.result.utcTimeName.toDate();\n      }\n\n      if (\"generalTimeName\" in asn1.result) {\n        this.type = 1;\n        this.value = asn1.result.generalTimeName.toDate();\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      var result = {};\n      if (this.type === 0) result = new asn1js.UTCTime({\n        valueDate: this.value\n      });\n      if (this.type === 1) result = new asn1js.GeneralizedTime({\n        valueDate: this.value\n      });\n      return result; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: this.type,\n        value: this.value\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"type\":\n          return 0;\n\n        case \"value\":\n          return new Date(0, 0, 0);\n\n        default:\n          throw new Error(\"Invalid member name for Time class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * Time ::= CHOICE {\r\n        *   utcTime        UTCTime,\r\n        *   generalTime    GeneralizedTime }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @param {boolean} optional Flag that current schema should be optional\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n       * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Choice({\n        optional: optional,\n        value: [new asn1js.UTCTime({\n          name: names.utcTimeName || \"\"\n        }), new asn1js.GeneralizedTime({\n          name: names.generalTimeName || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return Time;\n}(); //**************************************************************************************\n\n\nexport { Time as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Time.js"],"names":["asn1js","getParametersValue","clearProps","Time","parameters","type","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","utcTimeName","generalTimeName","verified","Error","result","toDate","UTCTime","valueDate","GeneralizedTime","memberName","Date","optional","Choice","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Time\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Time class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t * @property {Date} [value] Value of the TIME class\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc Value of the TIME class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Time class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Time ::= CHOICE {\r\n     *   utcTime        UTCTime,\r\n     *   generalTime    GeneralizedTime }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\toptional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.UTCTime({ name: (names.utcTimeName || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.generalTimeName || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"utcTimeName\",\r\n\t\t\t\"generalTimeName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Time.schema({\r\n\t\t\tnames: {\r\n\t\t\t\tutcTimeName: \"utcTimeName\",\r\n\t\t\t\tgeneralTimeName: \"generalTimeName\"\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Time\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"utcTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.value = asn1.result.utcTimeName.toDate();\r\n\t\t}\r\n\t\tif(\"generalTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 1;\r\n\t\t\tthis.value = asn1.result.generalTimeName.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tlet result = {};\r\n\r\n\t\tif(this.type === 0)\r\n\t\t\tresult = new asn1js.UTCTime({ valueDate: this.value });\r\n\t\tif(this.type === 1)\r\n\t\t\tresult = new asn1js.GeneralizedTime({ valueDate: this.value });\r\n\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
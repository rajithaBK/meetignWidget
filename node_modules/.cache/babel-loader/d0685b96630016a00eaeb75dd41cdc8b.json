{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = ensureBuffer;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env: browser */\n\n/* global FileReader */\n\n/**\n * Ensures the provider buffer is, indeed, an ArrayBuffer; converts File and\n * Blob objects to ArrayBuffers.\n * @param {mixed} buffer\n * @returns {Promise<ArrayBuffer>}\n */\n\n\nfunction ensureBuffer(buffer) {\n  if (buffer instanceof ArrayBuffer) {\n    return _promise.default.resolve(buffer);\n  }\n\n  if (buffer.toArrayBuffer) {\n    return _promise.default.resolve(buffer.toArrayBuffer());\n  }\n\n  if (buffer.buffer) {\n    return _promise.default.resolve(buffer.buffer);\n  }\n\n  return new _promise.default(function (resolve, reject) {\n    var fr = new FileReader();\n\n    fr.onload = function onload() {\n      resolve(new Uint8Array(this.result));\n    };\n\n    fr.onerror = reject;\n    fr.readAsArrayBuffer(buffer);\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AAC3C,MAAIA,MAAM,YAAYC,WAAtB,EAAmC;AACjC,WAAOC,iBAAQC,OAAR,CAAgBH,MAAhB,CAAP;AACD;;AAED,MAAIA,MAAM,CAACI,aAAX,EAA0B;AACxB,WAAOF,iBAAQC,OAAR,CAAgBH,MAAM,CAACI,aAAPJ,EAAhB,CAAP;AACD;;AAED,MAAIA,MAAM,CAACA,MAAX,EAAmB;AACjB,WAAOE,iBAAQC,OAAR,CAAgBH,MAAM,CAACA,MAAvB,CAAP;AACD;;AAED,SAAO,qBAAY,UAACG,OAAD,EAAUE,MAAV,EAAqB;AACtC,QAAMC,EAAE,GAAG,IAAIC,UAAJ,EAAX;;AAEAD,MAAE,CAACE,MAAHF,GAAY,SAASE,MAAT,GAAkB;AAC5BL,aAAO,CAAC,IAAIM,UAAJ,CAAe,KAAKC,MAApB,CAAD,CAAPP;AADF;;AAIAG,MAAE,CAACK,OAAHL,GAAaD,MAAbC;AAEAA,MAAE,CAACM,iBAAHN,CAAqBN,MAArBM;AATK,IAAP;AAWD","names":["ensureBuffer","buffer","ArrayBuffer","_promise","resolve","toArrayBuffer","reject","fr","FileReader","onload","Uint8Array","result","onerror","readAsArrayBuffer"],"sources":["ensure-buffer.browser.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env: browser */\n/* global FileReader */\n\n/**\n * Ensures the provider buffer is, indeed, an ArrayBuffer; converts File and\n * Blob objects to ArrayBuffers.\n * @param {mixed} buffer\n * @returns {Promise<ArrayBuffer>}\n */\nexport default function ensureBuffer(buffer) {\n  if (buffer instanceof ArrayBuffer) {\n    return Promise.resolve(buffer);\n  }\n\n  if (buffer.toArrayBuffer) {\n    return Promise.resolve(buffer.toArrayBuffer());\n  }\n\n  if (buffer.buffer) {\n    return Promise.resolve(buffer.buffer);\n  }\n\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n\n    fr.onload = function onload() {\n      resolve(new Uint8Array(this.result));\n    };\n\n    fr.onerror = reject;\n\n    fr.readAsArrayBuffer(buffer);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}
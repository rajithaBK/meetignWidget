{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport ECPublicKey from \"./ECPublicKey.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5915\n */\n\nvar ECPrivateKey = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for ECPrivateKey class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function ECPrivateKey() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ECPrivateKey);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\n    /**\n     * @type {OctetString}\n     * @desc privateKey\n     */\n\n    this.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\n    if (\"namedCurve\" in parameters)\n      /**\n       * @type {string}\n       * @desc namedCurve\n       */\n      this.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\n    if (\"publicKey\" in parameters)\n      /**\n       * @type {ECPublicKey}\n       * @desc publicKey\n       */\n      this.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(ECPrivateKey, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"privateKey\", \"namedCurve\", \"publicKey\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({\n        names: {\n          version: \"version\",\n          privateKey: \"privateKey\",\n          namedCurve: \"namedCurve\",\n          publicKey: \"publicKey\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ECPrivateKey\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.privateKey = asn1.result.privateKey;\n      if (\"namedCurve\" in asn1.result) this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n\n      if (\"publicKey\" in asn1.result) {\n        var publicKeyData = {\n          schema: asn1.result.publicKey.valueBlock.valueHex\n        };\n        if (\"namedCurve\" in this) publicKeyData.namedCurve = this.namedCurve;\n        this.publicKey = new ECPublicKey(publicKeyData);\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var outputArray = [new asn1js.Integer({\n        value: this.version\n      }), this.privateKey];\n\n      if (\"namedCurve\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.ObjectIdentifier({\n            value: this.namedCurve\n          })]\n        }));\n      }\n\n      if (\"publicKey\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.BitString({\n            valueHex: this.publicKey.toSchema().toBER(false)\n          })]\n        }));\n      }\n\n      return new asn1js.Sequence({\n        value: outputArray\n      });\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (\"namedCurve\" in this === false || ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)) throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n      var crvName = \"\";\n\n      switch (this.namedCurve) {\n        case \"1.2.840.10045.3.1.7\":\n          // P-256\n          crvName = \"P-256\";\n          break;\n\n        case \"1.3.132.0.34\":\n          // P-384\n          crvName = \"P-384\";\n          break;\n\n        case \"1.3.132.0.35\":\n          // P-521\n          crvName = \"P-521\";\n          break;\n\n        default:\n      }\n\n      var privateKeyJSON = {\n        crv: crvName,\n        d: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\n      };\n\n      if (\"publicKey\" in this) {\n        var publicKeyJSON = this.publicKey.toJSON();\n        privateKeyJSON.x = publicKeyJSON.x;\n        privateKeyJSON.y = publicKeyJSON.y;\n      }\n\n      return privateKeyJSON;\n    } //**********************************************************************************\n\n    /**\n     * Convert JSON value into current object\n     * @param {Object} json\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var coodinateLength = 0;\n\n      if (\"crv\" in json) {\n        switch (json.crv.toUpperCase()) {\n          case \"P-256\":\n            this.namedCurve = \"1.2.840.10045.3.1.7\";\n            coodinateLength = 32;\n            break;\n\n          case \"P-384\":\n            this.namedCurve = \"1.3.132.0.34\";\n            coodinateLength = 48;\n            break;\n\n          case \"P-521\":\n            this.namedCurve = \"1.3.132.0.35\";\n            coodinateLength = 66;\n            break;\n\n          default:\n        }\n      } else throw new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n      if (\"d\" in json) {\n        var convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\n\n        if (convertBuffer.byteLength < coodinateLength) {\n          var buffer = new ArrayBuffer(coodinateLength);\n          var view = new Uint8Array(buffer);\n          var convertBufferView = new Uint8Array(convertBuffer);\n          view.set(convertBufferView, 1);\n          this.privateKey = new asn1js.OctetString({\n            valueHex: buffer\n          });\n        } else this.privateKey = new asn1js.OctetString({\n          valueHex: convertBuffer.slice(0, coodinateLength)\n        });\n      } else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n      if (\"x\" in json && \"y\" in json) this.publicKey = new ECPublicKey({\n        json: json\n      });\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 1;\n\n        case \"privateKey\":\n          return new asn1js.OctetString();\n\n        case \"namedCurve\":\n          return \"\";\n\n        case \"publicKey\":\n          return new ECPublicKey();\n\n        default:\n          throw new Error(\"Invalid member name for ECCPrivateKey class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === ECPrivateKey.defaultValues(memberName);\n\n        case \"privateKey\":\n          return memberValue.isEqual(ECPrivateKey.defaultValues(memberName));\n\n        case \"namedCurve\":\n          return memberValue === \"\";\n\n        case \"publicKey\":\n          return ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve) && ECPublicKey.compareWithDefault(\"x\", memberValue.x) && ECPublicKey.compareWithDefault(\"y\", memberValue.y);\n\n        default:\n          throw new Error(\"Invalid member name for ECCPrivateKey class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * ECPrivateKey ::= SEQUENCE {\n     * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n     * privateKey     OCTET STRING,\n     * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n     * publicKey  [1] BIT STRING OPTIONAL\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [version]\n       * @property {string} [privateKey]\n       * @property {string} [namedCurve]\n       * @property {string} [publicKey]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), new asn1js.OctetString({\n          name: names.privateKey || \"\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.ObjectIdentifier({\n            name: names.namedCurve || \"\"\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.BitString({\n            name: names.publicKey || \"\"\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return ECPrivateKey;\n}(); //**************************************************************************************\n\n\nexport { ECPrivateKey as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/ECPrivateKey.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","clearProps","ECPublicKey","ECPrivateKey","parameters","version","defaultValues","privateKey","namedCurve","publicKey","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","verified","Error","result","valueBlock","valueDec","toString","publicKeyData","valueHex","outputArray","Integer","value","push","Constructed","idBlock","tagClass","tagNumber","ObjectIdentifier","BitString","toSchema","toBER","Sequence","compareWithDefault","crvName","privateKeyJSON","crv","d","publicKeyJSON","toJSON","x","y","coodinateLength","toUpperCase","convertBuffer","byteLength","buffer","ArrayBuffer","view","Uint8Array","convertBufferView","set","OctetString","slice","memberName","memberValue","isEqual","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport ECPublicKey from \"./ECPublicKey.js\";\n//**************************************************************************************\n/**\n * Class from RFC5915\n */\nexport default class ECPrivateKey\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ECPrivateKey class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc privateKey\n\t\t */\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\n\n\t\tif(\"namedCurve\" in parameters)\n\t\t\t/**\n\t\t\t * @type {string}\n\t\t\t * @desc namedCurve\n\t\t\t */\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\n\n\t\tif(\"publicKey\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ECPublicKey}\n\t\t\t * @desc publicKey\n\t\t\t */\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif(\"json\" in parameters)\n\t\t\tthis.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn new ECPublicKey();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ECPrivateKey ::= SEQUENCE {\n\t * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n\t * privateKey     OCTET STRING,\n\t * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n\t * publicKey  [1] BIT STRING OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [version]\n\t\t * @property {string} [privateKey]\n\t\t * @property {string} [namedCurve]\n\t\t * @property {string} [publicKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"privateKey\",\n\t\t\t\"namedCurve\",\n\t\t\t\"publicKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tECPrivateKey.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tprivateKey: \"privateKey\",\n\t\t\t\t\tnamedCurve: \"namedCurve\",\n\t\t\t\t\tpublicKey: \"publicKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.privateKey = asn1.result.privateKey;\n\n\t\tif(\"namedCurve\" in asn1.result)\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n\n\t\tif(\"publicKey\" in asn1.result)\n\t\t{\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n\t\t\tif(\"namedCurve\" in this)\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\n\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst outputArray = [\n\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\tthis.privateKey\n\t\t];\n\n\t\tif(\"namedCurve\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\tif(\"publicKey\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n\n\t\tlet crvName = \"\";\n\n\t\tswitch(this.namedCurve)\n\t\t{\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\n\t\t\t\tcrvName = \"P-256\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.34\": // P-384\n\t\t\t\tcrvName = \"P-384\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.35\": // P-521\n\t\t\t\tcrvName = \"P-521\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\tconst privateKeyJSON = {\n\t\t\tcrv: crvName,\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\n\t\t};\n\n\t\tif(\"publicKey\" in this)\n\t\t{\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\n\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\n\t\t}\n\n\t\treturn privateKeyJSON;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert JSON value into current object\n\t * @param {Object} json\n\t */\n\tfromJSON(json)\n\t{\n\t\tlet coodinateLength = 0;\n\n\t\tif(\"crv\" in json)\n\t\t{\n\t\t\tswitch(json.crv.toUpperCase())\n\t\t\t{\n\t\t\t\tcase \"P-256\":\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\n\t\t\t\t\tcoodinateLength = 32;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-384\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\n\t\t\t\t\tcoodinateLength = 48;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-521\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\n\t\t\t\t\tcoodinateLength = 66;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n\t\tif(\"d\" in json)\n\t\t{\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\n\t\t\t\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\n\t\t\t{\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\n\t\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\n\t\t\t\tview.set(convertBufferView, 1);\n\t\t\t\t\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\n\t\t}\n\t\telse\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n\t\tif((\"x\" in json) && (\"y\" in json))\n\t\t\tthis.publicKey = new ECPublicKey({ json });\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.getVideoSenderMqa = exports.getVideoReceiverMqa = exports.getAudioSenderMqa = exports.getAudioReceiverMqa = void 0;\n\nvar _max2 = _interopRequireDefault(require(\"lodash/max\"));\n\nvar _mean2 = _interopRequireDefault(require(\"lodash/mean\"));\n\nvar _constants = require(\"../constants\");\n\nvar getAudioReceiverMqa = function getAudioReceiverMqa(_ref) {\n  var audioReceiver = _ref.audioReceiver,\n      statsResults = _ref.statsResults,\n      lastMqaDataSent = _ref.lastMqaDataSent;\n  var mediaType = _constants.STATS.AUDIO_CORRELATE;\n  var sendrecvType = _constants.STATS.RECEIVE_DIRECTION;\n  audioReceiver.common.common.direction = statsResults[mediaType].direction;\n  audioReceiver.common.transportType = statsResults.connectionType.remote.transport[0]; // add rtpPacket info inside common as also for call analyzer\n\n  audioReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0; // Hop by hop are numbers and not percentage so we compare on what we sent the last min\n  // collect the packets received for the last min\n\n  audioReceiver.streams[0].common.rtpPackets = audioReceiver.common.rtpPackets;\n  audioReceiver.common.mediaHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n  audioReceiver.streams[0].common.maxRtpJitter = (0, _max2.default)(statsResults[mediaType][sendrecvType].meanRtpJitter) * 1000 || 0;\n  audioReceiver.streams[0].common.meanRtpJitter = (0, _mean2.default)(statsResults[mediaType][sendrecvType].meanRtpJitter) * 1000 || 0;\n  audioReceiver.streams[0].common.rtpJitter = audioReceiver.streams[0].common.maxRtpJitter; // Fec packets do come in as part of the FEC only for audio\n\n  var fecRecovered = statsResults[mediaType][sendrecvType].fecPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].fecPacketsReceived - (statsResults[mediaType][sendrecvType].fecPacketsDiscarded - lastMqaDataSent[mediaType][sendrecvType].fecPacketsDiscarded);\n  audioReceiver.streams[0].common.rtpEndToEndLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost - fecRecovered || 0;\n  audioReceiver.streams[0].common.framesDropped = statsResults[mediaType][sendrecvType].totalSamplesDecoded - lastMqaDataSent[mediaType][sendrecvType].totalSamplesDecoded || 0;\n  audioReceiver.streams[0].common.renderedFrameRate = audioReceiver.streams[0].common.framesDropped * 100 / 60 || 0;\n  audioReceiver.streams[0].common.framesReceived = statsResults[mediaType][sendrecvType].totalSamplesReceived - lastMqaDataSent[mediaType][sendrecvType].totalSamplesReceived || 0;\n  audioReceiver.streams[0].common.concealedFrames = statsResults[mediaType][sendrecvType].concealedSamples - lastMqaDataSent[mediaType][sendrecvType].concealedSamples || 0;\n  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;\n  audioReceiver.common.rtpBitrate = audioReceiver.streams[0].common.receivedBitrate;\n};\n\nexports.getAudioReceiverMqa = getAudioReceiverMqa;\n\nvar getAudioSenderMqa = function getAudioSenderMqa(_ref2) {\n  var audioSender = _ref2.audioSender,\n      statsResults = _ref2.statsResults,\n      lastMqaDataSent = _ref2.lastMqaDataSent;\n  var mediaType = _constants.STATS.AUDIO_CORRELATE;\n  var sendrecvType = _constants.STATS.SEND_DIRECTION;\n  audioSender.common.common.direction = statsResults[mediaType].direction;\n  audioSender.common.transportType = statsResults.connectionType.local.transport[0];\n  audioSender.common.maxRemoteJitter = (0, _max2.default)(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  audioSender.common.meanRemoteJitter = (0, _mean2.default)(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  audioSender.streams[0].common.rtpPackets = audioSender.common.rtpPackets; // From candidate-pair\n\n  audioSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0; // Calculate based on how much packets lost of received compated to how to the client sent\n\n  var totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? totalpacketsLostForaMin * 100 / audioSender.common.rtpPackets : 0; // This is the packets sent with in last min || 0;\n\n  audioSender.common.maxRoundTripTime = (0, _max2.default)(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  audioSender.common.meanRoundTripTime = (0, _mean2.default)(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  audioSender.common.roundTripTime = audioSender.common.maxRoundTripTime; // Calculate the outgoing bitrate\n\n  var totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? totalBytesSentInaMin * 8 / 60 : 0;\n  audioSender.common.rtpBitrate = audioSender.streams[0].common.transmittedBitrate;\n  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n};\n\nexports.getAudioSenderMqa = getAudioSenderMqa;\n\nvar getVideoReceiverMqa = function getVideoReceiverMqa(_ref3) {\n  var videoReceiver = _ref3.videoReceiver,\n      statsResults = _ref3.statsResults,\n      lastMqaDataSent = _ref3.lastMqaDataSent,\n      _ref3$isShareStream = _ref3.isShareStream,\n      isShareStream = _ref3$isShareStream === void 0 ? false : _ref3$isShareStream;\n  var mediaType = isShareStream ? _constants.STATS.SHARE_CORRELATE : _constants.STATS.VIDEO_CORRELATE;\n  var sendrecvType = _constants.STATS.RECEIVE_DIRECTION;\n  videoReceiver.common.common.direction = statsResults[mediaType].direction;\n  videoReceiver.common.transportType = statsResults.connectionType.remote.transport[0]; // collect the packets received for the last min\n\n  videoReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  videoReceiver.streams[0].common.rtpPackets = videoReceiver.common.rtpPackets;\n  var totalPacketLoss = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0; // Hope by hop are numbers and not percentage so we compare on what we sent the last min\n  // this is including packet lost\n\n  videoReceiver.common.mediaHopByHopLost = totalPacketLoss;\n  videoReceiver.common.rtpHopByHopLost = totalPacketLoss; // End to end packetloss is after recovery\n\n  videoReceiver.streams[0].common.rtpEndToEndLost = totalPacketLoss; // calculate this values\n\n  videoReceiver.common.maxRemoteJitter = (0, _max2.default)(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoReceiver.common.meanRemoteJitter = (0, _mean2.default)(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoReceiver.streams[0].common.rtpJitter = videoReceiver.common.maxRemoteJitter; // videoReceiver.streams[0].common.rtpJitter = (statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay - lastMqaDataSent.resolutions[mediaType][sendrecvType].jitterBufferDelay) / (statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount - lastMqaDataSent.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount) * 1000 || 0;\n  // Calculate the outgoing bitrate\n\n  var totalBytesReceivedInaMin = statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived;\n  videoReceiver.streams[0].common.receivedBitrate = totalBytesReceivedInaMin ? totalBytesReceivedInaMin * 8 / 60 : 0;\n  videoReceiver.common.rtpBitrate = videoReceiver.streams[0].common.receivedBitrate; // From tracks //TODO: calculate a proper one\n\n  var totalFrameReceivedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;\n  var totalFrameDecodedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesDecoded - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDecoded;\n  videoReceiver.streams[0].common.receivedFrameRate = totalFrameReceivedInaMin ? totalFrameReceivedInaMin * 100 / 60 : 0;\n  videoReceiver.streams[0].common.renderedFrameRate = totalFrameDecodedInaMin ? totalFrameDecodedInaMin * 100 / 60 : 0;\n  videoReceiver.streams[0].common.framesDropped = statsResults.resolutions[mediaType][sendrecvType].framesDropped - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDropped;\n  videoReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoReceiver.streams[0].receivedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].height / 256;\n  videoReceiver.streams[0].receivedKeyFrames = statsResults[mediaType][sendrecvType].keyFramesDecoded - lastMqaDataSent[mediaType][sendrecvType].keyFramesDecoded || 0;\n  videoReceiver.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalPliCount - lastMqaDataSent[mediaType][sendrecvType].totalPliCount || 0;\n};\n\nexports.getVideoReceiverMqa = getVideoReceiverMqa;\n\nvar getVideoSenderMqa = function getVideoSenderMqa(_ref4) {\n  var videoSender = _ref4.videoSender,\n      statsResults = _ref4.statsResults,\n      lastMqaDataSent = _ref4.lastMqaDataSent,\n      _ref4$isShareStream = _ref4.isShareStream,\n      isShareStream = _ref4$isShareStream === void 0 ? false : _ref4$isShareStream;\n  var mediaType = isShareStream ? _constants.STATS.SHARE_CORRELATE : _constants.STATS.VIDEO_CORRELATE;\n  var sendrecvType = _constants.STATS.SEND_DIRECTION;\n  videoSender.common.common.direction = statsResults[mediaType].direction;\n  videoSender.common.transportType = statsResults.connectionType.local.transport[0];\n  videoSender.common.maxRemoteJitter = (0, _max2.default)(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoSender.common.meanRemoteJitter = (0, _mean2.default)(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  videoSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0; // Calculate based on how much packets lost of received compated to how to the client sent\n\n  var totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? totalpacketsLostForaMin * 100 / (videoSender.common.rtpPackets + totalpacketsLostForaMin) : 0; // This is the packets sent with in last min || 0;\n\n  videoSender.common.maxRoundTripTime = (0, _max2.default)(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  videoSender.common.meanRoundTripTime = (0, _mean2.default)(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  videoSender.common.roundTripTime = videoSender.common.maxRoundTripTime;\n  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0; // Calculate the outgoing bitrate\n\n  var totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? totalBytesSentInaMin * 8 / 60 : 0;\n  videoSender.common.rtpBitrate = videoSender.streams[0].common.transmittedBitrate;\n  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0; // From tracks //TODO: calculate a proper one\n\n  var totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - (lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent || 0);\n  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin * 100 / 60 : 0;\n  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoSender.streams[0].transmittedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].width / 254;\n};\n\nexports.getVideoSenderMqa = getVideoSenderMqa;","map":{"version":3,"mappings":"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","names":["getAudioReceiverMqa","audioReceiver","statsResults","lastMqaDataSent","mediaType","STATS","AUDIO_CORRELATE","sendrecvType","RECEIVE_DIRECTION","common","direction","transportType","connectionType","remote","transport","rtpPackets","totalPacketsReceived","streams","mediaHopByHopLost","totalPacketsLost","rtpHopByHopLost","maxRtpJitter","meanRtpJitter","rtpJitter","fecRecovered","fecPacketsReceived","fecPacketsDiscarded","rtpEndToEndLost","framesDropped","totalSamplesDecoded","renderedFrameRate","framesReceived","totalSamplesReceived","concealedFrames","concealedSamples","receivedBitrate","totalBytesReceived","rtpBitrate","getAudioSenderMqa","audioSender","SEND_DIRECTION","local","maxRemoteJitter","meanRemoteJitter","totalPacketsSent","availableBitrate","availableOutgoingBitrate","totalpacketsLostForaMin","totalPacketsLostOnReceiver","remoteLossRate","maxRoundTripTime","meanRoundTripTime","roundTripTime","totalBytesSentInaMin","totalBytesSent","transmittedBitrate","transmittedKeyFrames","totalKeyFramesEncoded","requestedKeyFrames","totalFirCount","getVideoReceiverMqa","videoReceiver","isShareStream","SHARE_CORRELATE","VIDEO_CORRELATE","totalPacketLoss","totalBytesReceivedInaMin","totalFrameReceivedInaMin","resolutions","totalFrameDecodedInaMin","framesDecoded","receivedFrameRate","receivedHeight","height","receivedWidth","width","receivedFrameSize","receivedKeyFrames","keyFramesDecoded","totalPliCount","getVideoSenderMqa","videoSender","totalFrameSentInaMin","framesSent","transmittedFrameRate","transmittedHeight","transmittedWidth","transmittedFrameSize"],"sources":["mqaUtil.js"],"sourcesContent":["\nimport {mean, max} from 'lodash';\n\nimport {STATS} from '../constants';\n\nexport const getAudioReceiverMqa = ({audioReceiver, statsResults, lastMqaDataSent}) => {\n  const mediaType = STATS.AUDIO_CORRELATE;\n  const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n  audioReceiver.common.common.direction = statsResults[mediaType].direction;\n  audioReceiver.common.transportType = statsResults.connectionType.remote.transport[0];\n  // add rtpPacket info inside common as also for call analyzer\n  audioReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  // Hop by hop are numbers and not percentage so we compare on what we sent the last min\n  // collect the packets received for the last min\n  audioReceiver.streams[0].common.rtpPackets = audioReceiver.common.rtpPackets;\n  audioReceiver.common.mediaHopByHopLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n  audioReceiver.common.rtpHopByHopLost = statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost || 0;\n\n  audioReceiver.streams[0].common.maxRtpJitter = max(statsResults[mediaType][sendrecvType].meanRtpJitter) * 1000 || 0;\n  audioReceiver.streams[0].common.meanRtpJitter = mean(statsResults[mediaType][sendrecvType].meanRtpJitter) * 1000 || 0;\n  audioReceiver.streams[0].common.rtpJitter = audioReceiver.streams[0].common.maxRtpJitter;\n\n  // Fec packets do come in as part of the FEC only for audio\n  const fecRecovered = (statsResults[mediaType][sendrecvType].fecPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].fecPacketsReceived) - (statsResults[mediaType][sendrecvType].fecPacketsDiscarded - lastMqaDataSent[mediaType][sendrecvType].fecPacketsDiscarded);\n\n  audioReceiver.streams[0].common.rtpEndToEndLost = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) - fecRecovered || 0;\n\n  audioReceiver.streams[0].common.framesDropped = statsResults[mediaType][sendrecvType].totalSamplesDecoded - lastMqaDataSent[mediaType][sendrecvType].totalSamplesDecoded || 0;\n  audioReceiver.streams[0].common.renderedFrameRate = audioReceiver.streams[0].common.framesDropped * 100 / 60 || 0;\n  audioReceiver.streams[0].common.framesReceived = statsResults[mediaType][sendrecvType].totalSamplesReceived - lastMqaDataSent[mediaType][sendrecvType].totalSamplesReceived || 0;\n  audioReceiver.streams[0].common.concealedFrames = statsResults[mediaType][sendrecvType].concealedSamples - lastMqaDataSent[mediaType][sendrecvType].concealedSamples || 0;\n  audioReceiver.streams[0].common.receivedBitrate = (statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived) * 8 / 60 || 0;\n\n  audioReceiver.common.rtpBitrate = audioReceiver.streams[0].common.receivedBitrate;\n};\n\n\nexport const getAudioSenderMqa = ({audioSender, statsResults, lastMqaDataSent}) => {\n  const mediaType = STATS.AUDIO_CORRELATE;\n  const sendrecvType = STATS.SEND_DIRECTION;\n\n  audioSender.common.common.direction = statsResults[mediaType].direction;\n  audioSender.common.transportType = statsResults.connectionType.local.transport[0];\n\n  audioSender.common.maxRemoteJitter = max(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  audioSender.common.meanRemoteJitter = mean(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n\n  audioSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  audioSender.streams[0].common.rtpPackets = audioSender.common.rtpPackets;\n  // From candidate-pair\n  audioSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  audioSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin * 100 / audioSender.common.rtpPackets) : 0; // This is the packets sent with in last min || 0;\n\n  audioSender.common.maxRoundTripTime = max(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  audioSender.common.meanRoundTripTime = mean(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  audioSender.common.roundTripTime = audioSender.common.maxRoundTripTime;\n\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  audioSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n  audioSender.common.rtpBitrate = audioSender.streams[0].common.transmittedBitrate;\n\n\n  audioSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  audioSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n};\n\n\nexport const getVideoReceiverMqa = ({\n  videoReceiver, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? STATS.SHARE_CORRELATE : STATS.VIDEO_CORRELATE;\n  const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n  videoReceiver.common.common.direction = statsResults[mediaType].direction;\n  videoReceiver.common.transportType = statsResults.connectionType.remote.transport[0];\n  // collect the packets received for the last min\n  videoReceiver.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsReceived - lastMqaDataSent[mediaType][sendrecvType].totalPacketsReceived || 0;\n  videoReceiver.streams[0].common.rtpPackets = videoReceiver.common.rtpPackets;\n\n  const totalPacketLoss = (statsResults[mediaType][sendrecvType].totalPacketsLost - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLost) || 0;\n\n  // Hope by hop are numbers and not percentage so we compare on what we sent the last min\n  // this is including packet lost\n  videoReceiver.common.mediaHopByHopLost = totalPacketLoss;\n  videoReceiver.common.rtpHopByHopLost = totalPacketLoss;\n\n  // End to end packetloss is after recovery\n  videoReceiver.streams[0].common.rtpEndToEndLost = totalPacketLoss;\n\n  // calculate this values\n\n  videoReceiver.common.maxRemoteJitter = max(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoReceiver.common.meanRemoteJitter = mean(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n\n  videoReceiver.streams[0].common.rtpJitter = videoReceiver.common.maxRemoteJitter;\n  // videoReceiver.streams[0].common.rtpJitter = (statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay - lastMqaDataSent.resolutions[mediaType][sendrecvType].jitterBufferDelay) / (statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount - lastMqaDataSent.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount) * 1000 || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesReceivedInaMin = statsResults[mediaType][sendrecvType].totalBytesReceived - lastMqaDataSent[mediaType][sendrecvType].totalBytesReceived;\n\n  videoReceiver.streams[0].common.receivedBitrate = totalBytesReceivedInaMin ? (totalBytesReceivedInaMin) * 8 / 60 : 0;\n  videoReceiver.common.rtpBitrate = videoReceiver.streams[0].common.receivedBitrate;\n\n  // From tracks //TODO: calculate a proper one\n  const totalFrameReceivedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesReceived - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesReceived;\n  const totalFrameDecodedInaMin = statsResults.resolutions[mediaType][sendrecvType].framesDecoded - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDecoded;\n\n  videoReceiver.streams[0].common.receivedFrameRate = totalFrameReceivedInaMin ? totalFrameReceivedInaMin * 100 / 60 : 0;\n  videoReceiver.streams[0].common.renderedFrameRate = totalFrameDecodedInaMin ? totalFrameDecodedInaMin * 100 / 60 : 0;\n\n  videoReceiver.streams[0].common.framesDropped = statsResults.resolutions[mediaType][sendrecvType].framesDropped - lastMqaDataSent.resolutions[mediaType][sendrecvType].framesDropped;\n  videoReceiver.streams[0].receivedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoReceiver.streams[0].receivedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoReceiver.streams[0].receivedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].height / 256;\n\n  videoReceiver.streams[0].receivedKeyFrames = statsResults[mediaType][sendrecvType].keyFramesDecoded - lastMqaDataSent[mediaType][sendrecvType].keyFramesDecoded || 0;\n  videoReceiver.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalPliCount - lastMqaDataSent[mediaType][sendrecvType].totalPliCount || 0;\n};\n\nexport const getVideoSenderMqa = ({\n  videoSender, statsResults, lastMqaDataSent, isShareStream = false\n}) => {\n  const mediaType = isShareStream ? STATS.SHARE_CORRELATE : STATS.VIDEO_CORRELATE;\n  const sendrecvType = STATS.SEND_DIRECTION;\n\n  videoSender.common.common.direction = statsResults[mediaType].direction;\n  videoSender.common.transportType = statsResults.connectionType.local.transport[0];\n\n  videoSender.common.maxRemoteJitter = max(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n  videoSender.common.meanRemoteJitter = mean(statsResults[mediaType][sendrecvType].meanRemoteJitter) * 1000 || 0;\n\n\n  videoSender.common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n  videoSender.common.availableBitrate = statsResults[mediaType][sendrecvType].availableOutgoingBitrate || 0;\n  // Calculate based on how much packets lost of received compated to how to the client sent\n\n  const totalpacketsLostForaMin = statsResults[mediaType][sendrecvType].totalPacketsLostOnReceiver - lastMqaDataSent[mediaType][sendrecvType].totalPacketsLostOnReceiver;\n\n  videoSender.common.remoteLossRate = totalpacketsLostForaMin > 0 ? (totalpacketsLostForaMin) * 100 / (videoSender.common.rtpPackets + totalpacketsLostForaMin) : 0; // This is the packets sent with in last min || 0;\n\n  videoSender.common.maxRoundTripTime = max(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  videoSender.common.meanRoundTripTime = mean(statsResults[mediaType][sendrecvType].meanRoundTripTime) * 1000 || 0;\n  videoSender.common.roundTripTime = videoSender.common.maxRoundTripTime;\n\n  videoSender.streams[0].common.rtpPackets = statsResults[mediaType][sendrecvType].totalPacketsSent - lastMqaDataSent[mediaType][sendrecvType].totalPacketsSent || 0;\n\n  // Calculate the outgoing bitrate\n  const totalBytesSentInaMin = statsResults[mediaType][sendrecvType].totalBytesSent - lastMqaDataSent[mediaType][sendrecvType].totalBytesSent;\n\n  videoSender.streams[0].common.transmittedBitrate = totalBytesSentInaMin ? (totalBytesSentInaMin) * 8 / 60 : 0;\n\n  videoSender.common.rtpBitrate = videoSender.streams[0].common.transmittedBitrate;\n\n\n  videoSender.streams[0].transmittedKeyFrames = statsResults[mediaType][sendrecvType].totalKeyFramesEncoded - lastMqaDataSent[mediaType][sendrecvType].totalKeyFramesEncoded || 0;\n  videoSender.streams[0].requestedKeyFrames = statsResults[mediaType][sendrecvType].totalFirCount - lastMqaDataSent[mediaType][sendrecvType].totalFirCount || 0;\n\n  // From tracks //TODO: calculate a proper one\n  const totalFrameSentInaMin = statsResults.resolutions[mediaType][sendrecvType].framesSent - (lastMqaDataSent.resolutions[mediaType][sendrecvType].framesSent || 0);\n\n  videoSender.streams[0].common.transmittedFrameRate = totalFrameSentInaMin ? totalFrameSentInaMin * 100 / 60 : 0;\n  videoSender.streams[0].transmittedHeight = statsResults.resolutions[mediaType][sendrecvType].height;\n  videoSender.streams[0].transmittedWidth = statsResults.resolutions[mediaType][sendrecvType].width;\n  videoSender.streams[0].transmittedFrameSize = statsResults.resolutions[mediaType][sendrecvType].height * statsResults.resolutions[mediaType][sendrecvType].width / 254;\n};\n"]},"metadata":{},"sourceType":"script"}
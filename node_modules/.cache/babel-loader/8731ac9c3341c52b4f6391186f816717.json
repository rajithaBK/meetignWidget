{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar SignerInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignerInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function SignerInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SignerInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {Object}\r\n     * @desc sid\r\n     */\n\n    this.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc digestAlgorithm\r\n     */\n\n    this.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\n    if (\"signedAttrs\" in parameters)\n      /**\r\n       * @type {SignedAndUnsignedAttributes}\r\n       * @desc signedAttrs\r\n       */\n      this.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc digestAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\n    if (\"unsignedAttrs\" in parameters)\n      /**\r\n       * @type {SignedAndUnsignedAttributes}\r\n       * @desc unsignedAttrs\r\n       */\n      this.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(SignerInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"SignerInfo.version\", \"SignerInfo.sid\", \"SignerInfo.digestAlgorithm\", \"SignerInfo.signedAttrs\", \"SignerInfo.signatureAlgorithm\", \"SignerInfo.signature\", \"SignerInfo.unsignedAttrs\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, SignerInfo.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SignerInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\n      var currentSid = asn1.result[\"SignerInfo.sid\"];\n      if (currentSid.idBlock.tagClass === 1) this.sid = new IssuerAndSerialNumber({\n        schema: currentSid\n      });else this.sid = currentSid;\n      this.digestAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result[\"SignerInfo.digestAlgorithm\"]\n      });\n      if (\"SignerInfo.signedAttrs\" in asn1.result) this.signedAttrs = new SignedAndUnsignedAttributes({\n        type: 0,\n        schema: asn1.result[\"SignerInfo.signedAttrs\"]\n      });\n      this.signatureAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result[\"SignerInfo.signatureAlgorithm\"]\n      });\n      this.signature = asn1.result[\"SignerInfo.signature\"];\n      if (\"SignerInfo.unsignedAttrs\" in asn1.result) this.unsignedAttrs = new SignedAndUnsignedAttributes({\n        type: 1,\n        schema: asn1.result[\"SignerInfo.unsignedAttrs\"]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      if (SignerInfo.compareWithDefault(\"sid\", this.sid)) throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\"); //region Create array for output sequence \n\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      if (this.sid instanceof IssuerAndSerialNumber) outputArray.push(this.sid.toSchema());else outputArray.push(this.sid);\n      outputArray.push(this.digestAlgorithm.toSchema());\n\n      if (\"signedAttrs\" in this) {\n        if (SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false) outputArray.push(this.signedAttrs.toSchema());\n      }\n\n      outputArray.push(this.signatureAlgorithm.toSchema());\n      outputArray.push(this.signature);\n\n      if (\"unsignedAttrs\" in this) {\n        if (SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false) outputArray.push(this.unsignedAttrs.toSchema());\n      } //endregion \n      //region Construct and return new ASN.1 schema for this object \n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion \n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (SignerInfo.compareWithDefault(\"sid\", this.sid)) throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n      var _object = {\n        version: this.version\n      };\n      if (!(this.sid instanceof asn1js.Any)) _object.sid = this.sid.toJSON();\n      _object.digestAlgorithm = this.digestAlgorithm.toJSON();\n      if (SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false) _object.signedAttrs = this.signedAttrs.toJSON();\n      _object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\n      _object.signature = this.signature.toJSON();\n      if (SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false) _object.unsignedAttrs = this.unsignedAttrs.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"sid\":\n          return new asn1js.Any();\n\n        case \"digestAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signedAttrs\":\n          return new SignedAndUnsignedAttributes({\n            type: 0\n          });\n\n        case \"signatureAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signature\":\n          return new asn1js.OctetString();\n\n        case \"unsignedAttrs\":\n          return new SignedAndUnsignedAttributes({\n            type: 1\n          });\n\n        default:\n          throw new Error(\"Invalid member name for SignerInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return SignerInfo.defaultValues(\"version\") === memberValue;\n\n        case \"sid\":\n          return memberValue instanceof asn1js.Any;\n\n        case \"digestAlgorithm\":\n          if (memberValue instanceof AlgorithmIdentifier === false) return false;\n          return memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\n\n        case \"signedAttrs\":\n          return SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue);\n\n        case \"signatureAlgorithm\":\n          if (memberValue instanceof AlgorithmIdentifier === false) return false;\n          return memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\n\n        case \"signature\":\n        case \"unsignedAttrs\":\n          return SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type) && SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes) && SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue);\n\n        default:\n          throw new Error(\"Invalid member name for SignerInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * SignerInfo ::= SEQUENCE {\r\n     *    version CMSVersion,\r\n     *    sid SignerIdentifier,\r\n     *    digestAlgorithm DigestAlgorithmIdentifier,\r\n     *    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n     *    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n     *    signature SignatureValue,\r\n     *    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n     *\r\n     * SignerIdentifier ::= CHOICE {\r\n     *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n     *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n     *\r\n     * SubjectKeyIdentifier ::= OCTET STRING\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [sid]\r\n       * @property {string} [digestAlgorithm]\r\n       * @property {string} [signedAttrs]\r\n       * @property {string} [signatureAlgorithm]\r\n       * @property {string} [signature]\r\n       * @property {string} [unsignedAttrs]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: \"SignerInfo\",\n        value: [new asn1js.Integer({\n          name: names.version || \"SignerInfo.version\"\n        }), new asn1js.Choice({\n          value: [IssuerAndSerialNumber.schema(names.sid || {\n            names: {\n              blockName: \"SignerInfo.sid\"\n            }\n          }), new asn1js.Choice({\n            value: [new asn1js.Constructed({\n              optional: true,\n              name: names.sid || \"SignerInfo.sid\",\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 0 // [0]\n\n              },\n              value: [new asn1js.OctetString()]\n            }), new asn1js.Primitive({\n              optional: true,\n              name: names.sid || \"SignerInfo.sid\",\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 0 // [0]\n\n              },\n              value: [new asn1js.OctetString()]\n            })]\n          })]\n        }), AlgorithmIdentifier.schema(names.digestAlgorithm || {\n          names: {\n            blockName: \"SignerInfo.digestAlgorithm\"\n          }\n        }), SignedAndUnsignedAttributes.schema(names.signedAttrs || {\n          names: {\n            blockName: \"SignerInfo.signedAttrs\",\n            tagNumber: 0\n          }\n        }), AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n          names: {\n            blockName: \"SignerInfo.signatureAlgorithm\"\n          }\n        }), new asn1js.OctetString({\n          name: names.signature || \"SignerInfo.signature\"\n        }), SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\n          names: {\n            blockName: \"SignerInfo.unsignedAttrs\",\n            tagNumber: 1\n          }\n        })]\n      });\n    }\n  }]);\n\n  return SignerInfo;\n}(); //**************************************************************************************\n\n\nexport { SignerInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SignerInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","SignedAndUnsignedAttributes","IssuerAndSerialNumber","SignerInfo","parameters","version","defaultValues","sid","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","unsignedAttrs","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","currentSid","idBlock","tagClass","type","compareWithDefault","outputArray","push","Integer","value","toSchema","Sequence","_object","Any","toJSON","memberName","OctetString","memberValue","isEqual","attributes","encodedValue","names","name","Choice","blockName","Constructed","optional","tagNumber","Primitive"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignerInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    sid SignerIdentifier,\r\n\t *    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t *    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t *    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t *    signature SignatureValue,\r\n\t *    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t *\r\n\t * SignerIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t *\r\n\t * SubjectKeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignerInfo.version\",\r\n\t\t\t\"SignerInfo.sid\",\r\n\t\t\t\"SignerInfo.digestAlgorithm\",\r\n\t\t\t\"SignerInfo.signedAttrs\",\r\n\t\t\t\"SignerInfo.signatureAlgorithm\",\r\n\t\t\t\"SignerInfo.signature\",\r\n\t\t\t\"SignerInfo.unsignedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignerInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
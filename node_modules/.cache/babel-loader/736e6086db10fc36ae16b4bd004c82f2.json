{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _querystring = _interopRequireDefault(require(\"querystring\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _common = require(\"@webex/common\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\n\n\nvar Space = _webexCore.WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Lists lyra spaces associated with user\n   *\n   * @returns {Promise<Array>} spaces\n   */\n  list: function list() {\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: '/spaces'\n    }).then(function (res) {\n      return res.body.items;\n    });\n  },\n\n  /**\n   * Retrieves a lyra space info\n   * @param {Types~LyraSpace} space\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @returns {Promise<LyraSpace>} response body\n   */\n  get: function get() {\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!spaceId) {\n      return _promise.default.reject(new Error('space.id is required'));\n    }\n\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: \"/spaces/\".concat(spaceId)\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Joins a lyra space, update every 10 minutes to keep alive for MANUAL\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {string} options.passType\n   * @param {string} options.data additional data such as proof for ultrasound\n   * @param {string} options.uri use a custom uri\n   * @returns {Promise}\n   */\n  join: function join(space, options) {\n    options = (0, _assign.default)({\n      passType: 'MANUAL'\n    }, options);\n    var body = {\n      pass: {\n        type: options.passType\n      },\n      deviceUrl: this.webex.internal.device.url\n    };\n\n    if (options.data) {\n      body.pass.data = options.data;\n    }\n\n    if (options.verificationInitiation) {\n      body.verificationInitiation = options.verificationInitiation;\n    } // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n\n\n    if (options.uri) {\n      return this.webex.request({\n        method: 'PUT',\n        uri: options.uri,\n        body: body\n      });\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: \"\".concat(space.url, \"/occupants/@me\"),\n      body: body\n    });\n  },\n\n  /**\n   * Leaves a lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {boolean} options.removeAllDevices remove all devices of current user also\n   * @returns {Promise}\n   */\n  leave: function leave(space) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // all devices are removed by default (when deviceUrl is not supplied)\n\n    var uri = \"\".concat(space.url, \"/occupants/@me\");\n\n    if (!options.removeAllDevices) {\n      var params = {\n        deviceUrl: _common.base64.toBase64Url(this.webex.internal.device.url)\n      };\n      uri += \"?\".concat(_querystring.default.stringify(params));\n    }\n\n    return this.webex.request({\n      method: 'DELETE',\n      api: 'lyra',\n      resource: uri\n    });\n  },\n\n  /**\n   * Verifies a space occupant (to be used by the lyra device)\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} occupantId id of user to verify\n   * @returns {Promise}\n   */\n  verifyOccupant: function verifyOccupant(space, occupantId) {\n    var body = {\n      pass: {\n        type: 'VERIFICATION'\n      }\n    };\n    return this.webex.request({\n      method: 'PUT',\n      uri: \"\".concat(space.url, \"/occupants/\").concat(occupantId),\n      body: body\n    });\n  },\n\n  /**\n   * Gets the state of bindings in this Lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  getCurrentBindings: function getCurrentBindings(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: \"\".concat(space.url, \"/bindings\")\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Binds a conversation to lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  bindConversation: function bindConversation() {\n    var _this = this;\n\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return _promise.default.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return _promise.default.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return _promise.default.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    if (!conversation.url) {\n      return _promise.default.reject(new Error('conversation.url is required'));\n    }\n\n    var body = {\n      kmsMessage: {\n        method: 'create',\n        uri: '/authorizations',\n        resourceUri: \"\".concat(conversation.kmsResourceObjectUrl),\n        userIds: [spaceId]\n      },\n      conversationUrl: conversation.url\n    };\n    var request = {\n      method: 'POST',\n      body: body\n    }; // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n\n    if (options.uri) {\n      request.uri = options.uri;\n    } else {\n      request.api = 'lyra';\n      request.resource = \"\".concat(space.url, \"/bindings\");\n    }\n\n    return this._bindConversation(spaceId).then(function () {\n      return _this.webex.request(request);\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Binds a conversation to lyra space by posting capabilities to Lyra.\n   *\n   * Lyra no longer automatically enables binding for a space containing a device with type \"SPARK_BOARD\".\n   * Webexboard now is running the CE code stack which supports posting of capabilities to Lyra.\n   * @param {String} spaceId space ID\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  _bindConversation: function _bindConversation(spaceId) {\n    // Skip until we can bind a conversation to lyra space by posting capabilities to Lyra.\n\n    /* eslint no-unreachable: 1 */\n    return _promise.default.resolve(); // PUT /lyra/api/v1/spaces/{spaceId}/devices/{encodedDeviceUrl}/capabilities\n\n    var encodedDeviceUrl = _common.base64.encode(this.webex.internal.device.url);\n\n    var resource = \"spaces/\".concat(spaceId, \"/devices/\").concat(encodedDeviceUrl, \"/capabilities\");\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: resource,\n      body: {\n        bindingCleanupAfterCall: true\n      }\n    });\n  },\n\n  /**\n   * Removes binding between a conversation and a lyra space using conversation\n   * url\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  unbindConversation: function unbindConversation() {\n    var _this2 = this;\n\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var conversation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return _promise.default.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return _promise.default.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.url) {\n      return _promise.default.reject(new Error('conversation.url is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return _promise.default.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    var parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: \"\".concat(conversation.kmsResourceObjectUrl, \"/authorizations?\").concat(_querystring.default.stringify({\n          authId: spaceId\n        }))\n      },\n      conversationUrl: _common.base64.toBase64Url(conversation.url)\n    };\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage).then(function (req) {\n      parameters.kmsMessage = req.wrapped; // if options.uri is available use it, since that would have the\n      // complete lyra service URL\n\n      if (options.uri) {\n        return _this2.webex.request({\n          method: 'DELETE',\n          uri: \"\".concat(options.uri, \"?\").concat(_querystring.default.stringify(parameters))\n        });\n      }\n\n      return _this2.webex.request({\n        method: 'DELETE',\n        api: 'lyra',\n        resource: \"\".concat(space.url, \"/bindings?\").concat(_querystring.default.stringify(parameters))\n      });\n    });\n  },\n\n  /**\n   * Delete a binding using binding id\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.identity.id\n   * @param {object} options\n   * @param {string} options.kmsResourceObjectUrl\n   * @param {string} options.bindingId\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  deleteBinding: function deleteBinding() {\n    var _this3 = this;\n\n    var space = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return _promise.default.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return _promise.default.reject(new Error('space.id is required'));\n    }\n\n    if (!options.kmsResourceObjectUrl) {\n      return _promise.default.reject(new Error('options.kmsResourceObjectUrl is required'));\n    }\n\n    if (!options.bindingId) {\n      return _promise.default.reject(new Error('options.bindingId is required'));\n    }\n\n    var parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: \"\".concat(options.kmsResourceObjectUrl, \"/authorizations?\").concat(_querystring.default.stringify({\n          authId: spaceId\n        }))\n      }\n    };\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage).then(function (req) {\n      parameters.kmsMessage = req.wrapped;\n      return _this3.webex.request({\n        method: 'DELETE',\n        uri: \"\".concat(space.url, \"/bindings/\").concat(options.bindingId, \"?\").concat(_querystring.default.stringify(parameters))\n      });\n    });\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = Space;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Space","WebexPlugin","extend","namespace","list","webex","request","method","api","resource","then","res","body","items","get","space","spaceId","id","identity","_promise","reject","Error","join","options","passType","pass","type","deviceUrl","internal","device","url","data","verificationInitiation","uri","leave","removeAllDevices","params","base64","toBase64Url","querystring","stringify","verifyOccupant","occupantId","getCurrentBindings","bindConversation","conversation","kmsResourceObjectUrl","kmsMessage","resourceUri","userIds","conversationUrl","_bindConversation","_this","resolve","encodedDeviceUrl","encode","bindingCleanupAfterCall","unbindConversation","parameters","authId","encryption","kms","prepareRequest","req","wrapped","_this2","deleteBinding","bindingId","_this3","version"],"sources":["space.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {base64} from '@webex/common';\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\nconst Space = WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Lists lyra spaces associated with user\n   *\n   * @returns {Promise<Array>} spaces\n   */\n  list() {\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: '/spaces'\n    })\n      .then((res) => res.body.items);\n  },\n\n  /**\n   * Retrieves a lyra space info\n   * @param {Types~LyraSpace} space\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @returns {Promise<LyraSpace>} response body\n   */\n  get(space = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: `/spaces/${spaceId}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Joins a lyra space, update every 10 minutes to keep alive for MANUAL\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {string} options.passType\n   * @param {string} options.data additional data such as proof for ultrasound\n   * @param {string} options.uri use a custom uri\n   * @returns {Promise}\n   */\n  join(space, options) {\n    options = Object.assign({\n      passType: 'MANUAL'\n    }, options);\n\n    const body = {\n      pass: {\n        type: options.passType\n      },\n      deviceUrl: this.webex.internal.device.url\n    };\n\n    if (options.data) {\n      body.pass.data = options.data;\n    }\n\n    if (options.verificationInitiation) {\n      body.verificationInitiation = options.verificationInitiation;\n    }\n\n    // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n    if (options.uri) {\n      return this.webex.request({\n        method: 'PUT',\n        uri: options.uri,\n        body\n      });\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: `${space.url}/occupants/@me`,\n      body\n    });\n  },\n\n  /**\n   * Leaves a lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {boolean} options.removeAllDevices remove all devices of current user also\n   * @returns {Promise}\n   */\n  leave(space, options = {}) {\n    // all devices are removed by default (when deviceUrl is not supplied)\n    let uri = `${space.url}/occupants/@me`;\n\n    if (!options.removeAllDevices) {\n      const params = {\n        deviceUrl: base64.toBase64Url(this.webex.internal.device.url)\n      };\n\n      uri += `?${querystring.stringify(params)}`;\n    }\n\n    return this.webex.request({\n      method: 'DELETE',\n      api: 'lyra',\n      resource: uri\n    });\n  },\n\n  /**\n   * Verifies a space occupant (to be used by the lyra device)\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} occupantId id of user to verify\n   * @returns {Promise}\n   */\n  verifyOccupant(space, occupantId) {\n    const body = {\n      pass: {\n        type: 'VERIFICATION'\n      }\n    };\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: `${space.url}/occupants/${occupantId}`,\n      body\n    });\n  },\n\n\n  /**\n   * Gets the state of bindings in this Lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  getCurrentBindings(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: `${space.url}/bindings`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Binds a conversation to lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  bindConversation(space = {}, conversation = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    if (!conversation.url) {\n      return Promise.reject(new Error('conversation.url is required'));\n    }\n\n    const body = {\n      kmsMessage: {\n        method: 'create',\n        uri: '/authorizations',\n        resourceUri: `${conversation.kmsResourceObjectUrl}`,\n        userIds: [spaceId]\n      },\n      conversationUrl: conversation.url\n    };\n\n    const request = {\n      method: 'POST',\n      body\n    };\n\n    // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n    if (options.uri) {\n      request.uri = options.uri;\n    }\n    else {\n      request.api = 'lyra';\n      request.resource = `${space.url}/bindings`;\n    }\n\n    return this._bindConversation(spaceId)\n      .then(() => this.webex.request(request))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Binds a conversation to lyra space by posting capabilities to Lyra.\n   *\n   * Lyra no longer automatically enables binding for a space containing a device with type \"SPARK_BOARD\".\n   * Webexboard now is running the CE code stack which supports posting of capabilities to Lyra.\n   * @param {String} spaceId space ID\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  _bindConversation(spaceId) {\n    // Skip until we can bind a conversation to lyra space by posting capabilities to Lyra.\n    /* eslint no-unreachable: 1 */\n    return Promise.resolve();\n\n    // PUT /lyra/api/v1/spaces/{spaceId}/devices/{encodedDeviceUrl}/capabilities\n    const encodedDeviceUrl = base64.encode(this.webex.internal.device.url);\n    const resource = `spaces/${spaceId}/devices/${encodedDeviceUrl}/capabilities`;\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource,\n      body: {\n        bindingCleanupAfterCall: true\n      }\n    });\n  },\n\n  /**\n   * Removes binding between a conversation and a lyra space using conversation\n   * url\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  unbindConversation(space = {}, conversation = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.url) {\n      return Promise.reject(new Error('conversation.url is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    const parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: `${conversation.kmsResourceObjectUrl}/authorizations?${querystring.stringify({authId: spaceId})}`\n      },\n      conversationUrl: base64.toBase64Url(conversation.url)\n    };\n\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage)\n      .then((req) => {\n        parameters.kmsMessage = req.wrapped;\n        // if options.uri is available use it, since that would have the\n        // complete lyra service URL\n        if (options.uri) {\n          return this.webex.request({\n            method: 'DELETE',\n            uri: `${options.uri}?${querystring.stringify(parameters)}`\n          });\n        }\n\n        return this.webex.request({\n          method: 'DELETE',\n          api: 'lyra',\n          resource: `${space.url}/bindings?${querystring.stringify(parameters)}`\n        });\n      });\n  },\n\n  /**\n   * Delete a binding using binding id\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.identity.id\n   * @param {object} options\n   * @param {string} options.kmsResourceObjectUrl\n   * @param {string} options.bindingId\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  deleteBinding(space = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!options.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('options.kmsResourceObjectUrl is required'));\n    }\n\n    if (!options.bindingId) {\n      return Promise.reject(new Error('options.bindingId is required'));\n    }\n\n    const parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: `${options.kmsResourceObjectUrl}/authorizations?${querystring.stringify({authId: spaceId})}`\n      }\n    };\n\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage)\n      .then((req) => {\n        parameters.kmsMessage = req.wrapped;\n\n        return this.webex.request({\n          method: 'DELETE',\n          uri: `${space.url}/bindings/${options.bindingId}?${querystring.stringify(parameters)}`\n        });\n      });\n  }\n});\n\nexport default Space;\n"]},"metadata":{},"sourceType":"script"}
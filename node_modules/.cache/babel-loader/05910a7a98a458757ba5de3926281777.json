{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\nimport AltName from \"./AltName.js\";\nimport BasicConstraints from \"./BasicConstraints.js\";\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport NameConstraints from \"./NameConstraints.js\";\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\nimport CertificatePolicies from \"./CertificatePolicies.js\";\nimport PolicyMappings from \"./PolicyMappings.js\";\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\nimport PolicyConstraints from \"./PolicyConstraints.js\";\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\nimport InfoAccess from \"./InfoAccess.js\";\nimport SignedCertificateTimestampList from \"./SignedCertificateTimestampList.js\";\nimport CertificateTemplate from \"./CertificateTemplate.js\";\nimport CAVersion from \"./CAVersion.js\";\nimport QCStatements from \"./QCStatements.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nexport default class Extension {\n  //**********************************************************************************\n\n  /**\n   * Constructor for Extension class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     * @desc extnID\n     */\n    this.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\n    /**\n     * @type {boolean}\n     * @desc critical\n     */\n\n    this.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\n    /**\n     * @type {OctetString}\n     * @desc extnValue\n     */\n\n    if (\"extnValue\" in parameters) this.extnValue = new asn1js.OctetString({\n      valueHex: parameters.extnValue\n    });else this.extnValue = Extension.defaultValues(\"extnValue\");\n    if (\"parsedValue\" in parameters)\n      /**\n       * @type {Object}\n       * @desc parsedValue\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"extnID\":\n        return \"\";\n\n      case \"critical\":\n        return false;\n\n      case \"extnValue\":\n        return new asn1js.OctetString();\n\n      case \"parsedValue\":\n        return {};\n\n      default:\n        throw new Error(`Invalid member name for Extension class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * Extension  ::=  SEQUENCE  {\n   *    extnID      OBJECT IDENTIFIER,\n   *    critical    BOOLEAN DEFAULT FALSE,\n   *    extnValue   OCTET STRING\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [extnID]\n     * @property {string} [critical]\n     * @property {string} [extnValue]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.extnID || \"\"\n      }), new asn1js.Boolean({\n        name: names.critical || \"\",\n        optional: true\n      }), new asn1js.OctetString({\n        name: names.extnValue || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"extnID\", \"critical\", \"extnValue\"]); //endregion\n    //region Check the schema is valid\n\n    let asn1 = asn1js.compareSchema(schema, schema, Extension.schema({\n      names: {\n        extnID: \"extnID\",\n        critical: \"critical\",\n        extnValue: \"extnValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Extension\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.extnID = asn1.result.extnID.valueBlock.toString();\n    if (\"critical\" in asn1.result) this.critical = asn1.result.critical.valueBlock.value;\n    this.extnValue = asn1.result.extnValue; //region Get \"parsedValue\" for well-known extensions\n\n    asn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\n    if (asn1.offset === -1) return;\n\n    switch (this.extnID) {\n      case \"2.5.29.9\":\n        // SubjectDirectoryAttributes\n        try {\n          this.parsedValue = new SubjectDirectoryAttributes({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new SubjectDirectoryAttributes();\n          this.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\n        }\n\n        break;\n\n      case \"2.5.29.14\":\n        // SubjectKeyIdentifier\n        this.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\n\n        break;\n\n      case \"2.5.29.15\":\n        // KeyUsage\n        this.parsedValue = asn1.result; // Should be just a simple BITSTRING\n\n        break;\n\n      case \"2.5.29.16\":\n        // PrivateKeyUsagePeriod\n        try {\n          this.parsedValue = new PrivateKeyUsagePeriod({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new PrivateKeyUsagePeriod();\n          this.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\n        }\n\n        break;\n\n      case \"2.5.29.17\": // SubjectAltName\n\n      case \"2.5.29.18\":\n        // IssuerAltName\n        try {\n          this.parsedValue = new AltName({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new AltName();\n          this.parsedValue.parsingError = \"Incorrectly formated AltName\";\n        }\n\n        break;\n\n      case \"2.5.29.19\":\n        // BasicConstraints\n        try {\n          this.parsedValue = new BasicConstraints({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new BasicConstraints();\n          this.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\n        }\n\n        break;\n\n      case \"2.5.29.20\": // CRLNumber\n\n      case \"2.5.29.27\":\n        // BaseCRLNumber (delta CRL indicator)\n        this.parsedValue = asn1.result; // Should be just a simple INTEGER\n\n        break;\n\n      case \"2.5.29.21\":\n        // CRLReason\n        this.parsedValue = asn1.result; // Should be just a simple ENUMERATED\n\n        break;\n\n      case \"2.5.29.24\":\n        // InvalidityDate\n        this.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\n\n        break;\n\n      case \"2.5.29.28\":\n        // IssuingDistributionPoint\n        try {\n          this.parsedValue = new IssuingDistributionPoint({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new IssuingDistributionPoint();\n          this.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\n        }\n\n        break;\n\n      case \"2.5.29.29\":\n        // CertificateIssuer\n        try {\n          this.parsedValue = new GeneralNames({\n            schema: asn1.result\n          }); // Should be just a simple\n        } catch (ex) {\n          this.parsedValue = new GeneralNames();\n          this.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\n        }\n\n        break;\n\n      case \"2.5.29.30\":\n        // NameConstraints\n        try {\n          this.parsedValue = new NameConstraints({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new NameConstraints();\n          this.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\n        }\n\n        break;\n\n      case \"2.5.29.31\": // CRLDistributionPoints\n\n      case \"2.5.29.46\":\n        // FreshestCRL\n        try {\n          this.parsedValue = new CRLDistributionPoints({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new CRLDistributionPoints();\n          this.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\n        }\n\n        break;\n\n      case \"2.5.29.32\": // CertificatePolicies\n\n      case \"1.3.6.1.4.1.311.21.10\":\n        // szOID_APPLICATION_CERT_POLICIES - Microsoft-specific OID\n        try {\n          this.parsedValue = new CertificatePolicies({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new CertificatePolicies();\n          this.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n        }\n\n        break;\n\n      case \"2.5.29.33\":\n        // PolicyMappings\n        try {\n          this.parsedValue = new PolicyMappings({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new PolicyMappings();\n          this.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n        }\n\n        break;\n\n      case \"2.5.29.35\":\n        // AuthorityKeyIdentifier\n        try {\n          this.parsedValue = new AuthorityKeyIdentifier({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new AuthorityKeyIdentifier();\n          this.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\n        }\n\n        break;\n\n      case \"2.5.29.36\":\n        // PolicyConstraints\n        try {\n          this.parsedValue = new PolicyConstraints({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new PolicyConstraints();\n          this.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\n        }\n\n        break;\n\n      case \"2.5.29.37\":\n        // ExtKeyUsage\n        try {\n          this.parsedValue = new ExtKeyUsage({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new ExtKeyUsage();\n          this.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\n        }\n\n        break;\n\n      case \"2.5.29.54\":\n        // InhibitAnyPolicy\n        this.parsedValue = asn1.result; // Should be just a simple INTEGER\n\n        break;\n\n      case \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\n\n      case \"1.3.6.1.5.5.7.1.11\":\n        // SubjectInfoAccess\n        try {\n          this.parsedValue = new InfoAccess({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new InfoAccess();\n          this.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\n        }\n\n        break;\n\n      case \"1.3.6.1.4.1.11129.2.4.2\":\n        // SignedCertificateTimestampList\n        try {\n          this.parsedValue = new SignedCertificateTimestampList({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new SignedCertificateTimestampList();\n          this.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\n        }\n\n        break;\n\n      case \"1.3.6.1.4.1.311.20.2\":\n        // szOID_ENROLL_CERTTYPE_EXTENSION - Microsoft-specific extension\n        this.parsedValue = asn1.result; // Used to be simple Unicode string\n\n        break;\n\n      case \"1.3.6.1.4.1.311.21.2\":\n        // szOID_CERTSRV_PREVIOUS_CERT_HASH - Microsoft-specific extension\n        this.parsedValue = asn1.result; // Used to be simple OctetString\n\n        break;\n\n      case \"1.3.6.1.4.1.311.21.7\":\n        // szOID_CERTIFICATE_TEMPLATE - Microsoft-specific extension\n        try {\n          this.parsedValue = new CertificateTemplate({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new CertificateTemplate();\n          this.parsedValue.parsingError = \"Incorrectly formated CertificateTemplate\";\n        }\n\n        break;\n\n      case \"1.3.6.1.4.1.311.21.1\":\n        // szOID_CERTSRV_CA_VERSION - Microsoft-specific extension\n        try {\n          this.parsedValue = new CAVersion({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new CAVersion();\n          this.parsedValue.parsingError = \"Incorrectly formated CAVersion\";\n        }\n\n        break;\n\n      case \"1.3.6.1.5.5.7.1.3\":\n        // QCStatements\n        try {\n          this.parsedValue = new QCStatements({\n            schema: asn1.result\n          });\n        } catch (ex) {\n          this.parsedValue = new QCStatements();\n          this.parsedValue.parsingError = \"Incorrectly formated QCStatements\";\n        }\n\n        break;\n\n      default:\n    } //endregion\n    //endregion\n\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.extnID\n    }));\n    if (this.critical !== Extension.defaultValues(\"critical\")) outputArray.push(new asn1js.Boolean({\n      value: this.critical\n    }));\n    outputArray.push(this.extnValue); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const object = {\n      extnID: this.extnID,\n      extnValue: this.extnValue.toJSON()\n    };\n    if (this.critical !== Extension.defaultValues(\"critical\")) object.critical = this.critical;\n\n    if (\"parsedValue\" in this) {\n      if (\"toJSON\" in this.parsedValue) object.parsedValue = this.parsedValue.toJSON();\n    }\n\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Extension.js"],"names":["asn1js","getParametersValue","clearProps","SubjectDirectoryAttributes","PrivateKeyUsagePeriod","AltName","BasicConstraints","IssuingDistributionPoint","GeneralNames","NameConstraints","CRLDistributionPoints","CertificatePolicies","PolicyMappings","AuthorityKeyIdentifier","PolicyConstraints","ExtKeyUsage","InfoAccess","SignedCertificateTimestampList","CertificateTemplate","CAVersion","QCStatements","Extension","constructor","parameters","extnID","defaultValues","critical","extnValue","OctetString","valueHex","parsedValue","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","ObjectIdentifier","Boolean","optional","asn1","compareSchema","verified","result","valueBlock","toString","fromBER","offset","ex","parsingError","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\nimport AltName from \"./AltName.js\";\nimport BasicConstraints from \"./BasicConstraints.js\";\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport NameConstraints from \"./NameConstraints.js\";\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\nimport CertificatePolicies from \"./CertificatePolicies.js\";\nimport PolicyMappings from \"./PolicyMappings.js\";\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\nimport PolicyConstraints from \"./PolicyConstraints.js\";\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\nimport InfoAccess from \"./InfoAccess.js\";\nimport SignedCertificateTimestampList from \"./SignedCertificateTimestampList.js\";\nimport CertificateTemplate from \"./CertificateTemplate.js\";\nimport CAVersion from \"./CAVersion.js\";\nimport QCStatements from \"./QCStatements.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class Extension\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Extension class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc extnID\n\t\t */\n\t\tthis.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc critical\n\t\t */\n\t\tthis.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc extnValue\n\t\t */\n\t\tif(\"extnValue\" in parameters)\n\t\t\tthis.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\n\t\telse\n\t\t\tthis.extnValue = Extension.defaultValues(\"extnValue\");\n\n\t\tif(\"parsedValue\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Object}\n\t\t\t * @desc parsedValue\n\t\t\t */\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"extnID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"critical\":\n\t\t\t\treturn false;\n\t\t\tcase \"extnValue\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"parsedValue\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Extension class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Extension  ::=  SEQUENCE  {\n\t *    extnID      OBJECT IDENTIFIER,\n\t *    critical    BOOLEAN DEFAULT FALSE,\n\t *    extnValue   OCTET STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [extnID]\n\t\t * @property {string} [critical]\n\t\t * @property {string} [extnValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.extnID || \"\") }),\n\t\t\t\tnew asn1js.Boolean({\n\t\t\t\t\tname: (names.critical || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t\tnew asn1js.OctetString({ name: (names.extnValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"extnID\",\n\t\t\t\"critical\",\n\t\t\t\"extnValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tExtension.schema({\n\t\t\t\tnames: {\n\t\t\t\t\textnID: \"extnID\",\n\t\t\t\t\tcritical: \"critical\",\n\t\t\t\t\textnValue: \"extnValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extension\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.extnID = asn1.result.extnID.valueBlock.toString();\n\t\tif(\"critical\" in asn1.result)\n\t\t\tthis.critical = asn1.result.critical.valueBlock.value;\n\t\tthis.extnValue = asn1.result.extnValue;\n\n\t\t//region Get \"parsedValue\" for well-known extensions\n\t\tasn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\n\t\tif(asn1.offset === (-1))\n\t\t\treturn;\n\n\t\tswitch(this.extnID)\n\t\t{\n\t\t\tcase \"2.5.29.9\": // SubjectDirectoryAttributes\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.14\": // SubjectKeyIdentifier\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.15\": // KeyUsage\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple BITSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.16\": // PrivateKeyUsagePeriod\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.17\": // SubjectAltName\n\t\t\tcase \"2.5.29.18\": // IssuerAltName\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AltName({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AltName();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AltName\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.19\": // BasicConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new BasicConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new BasicConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.20\": // CRLNumber\n\t\t\tcase \"2.5.29.27\": // BaseCRLNumber (delta CRL indicator)\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.21\": // CRLReason\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple ENUMERATED\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.24\": // InvalidityDate\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.28\": // IssuingDistributionPoint\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.29\": // CertificateIssuer\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new GeneralNames({ schema: asn1.result }); // Should be just a simple\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new GeneralNames();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.30\": // NameConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new NameConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new NameConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\n\t\t\tcase \"2.5.29.46\": // FreshestCRL\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.32\": // CertificatePolicies\n\t\t\tcase \"1.3.6.1.4.1.311.21.10\": // szOID_APPLICATION_CERT_POLICIES - Microsoft-specific OID\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.33\": // PolicyMappings\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyMappings({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyMappings();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.35\": // AuthorityKeyIdentifier\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.36\": // PolicyConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.37\": // ExtKeyUsage\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.54\": // InhibitAnyPolicy\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\n\t\t\tcase \"1.3.6.1.5.5.7.1.11\": // SubjectInfoAccess\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new InfoAccess({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new InfoAccess();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\": // SignedCertificateTimestampList\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.20.2\": // szOID_ENROLL_CERTTYPE_EXTENSION - Microsoft-specific extension\n\t\t\t\tthis.parsedValue = asn1.result; // Used to be simple Unicode string\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.2\": // szOID_CERTSRV_PREVIOUS_CERT_HASH - Microsoft-specific extension\n\t\t\t\tthis.parsedValue = asn1.result; // Used to be simple OctetString\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.7\": // szOID_CERTIFICATE_TEMPLATE - Microsoft-specific extension\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificateTemplate({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificateTemplate();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificateTemplate\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.1\": // szOID_CERTSRV_CA_VERSION - Microsoft-specific extension\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CAVersion({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CAVersion();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CAVersion\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.3\": // QCStatements\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new QCStatements({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new QCStatements();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated QCStatements\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\n\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.critical }));\n\n\t\toutputArray.push(this.extnValue);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\textnID: this.extnID,\n\t\t\textnValue: this.extnValue.toJSON()\n\t\t};\n\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\n\t\t\tobject.critical = this.critical;\n\n\t\tif(\"parsedValue\" in this)\n\t\t{\n\t\t\tif(\"toJSON\" in this.parsedValue)\n\t\t\t\tobject.parsedValue = this.parsedValue.toJSON();\n\t\t}\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/values\"));\n\nvar _merge2 = _interopRequireDefault(require(\"lodash/merge\"));\n\nvar DeviceCollection = {\n  devices: {},\n  get: function get(deviceId) {\n    return this.devices[deviceId];\n  },\n  set: function set(device) {\n    var deviceId = device.id || device.identity && device.identity.id; // check if the device is already existing, if so then merge else add\n\n    var existingDevice = this.devices[deviceId];\n\n    if (existingDevice) {\n      // already existing, merge for any new binding information\n      (0, _merge2.default)(existingDevice, device);\n    } else {\n      this.devices[deviceId] = device;\n    }\n  },\n  reset: function reset() {\n    this.devices = {};\n  },\n  getAll: function getAll() {\n    return (0, _values.default)(this.devices);\n  }\n};\nvar _default = DeviceCollection;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG;AACvBC,SAAO,EAAE,EADc;AAGvBC,KAHuB,eAGnBC,QAHmB,EAGT;AACZ,WAAO,KAAKF,OAAL,CAAaE,QAAb,CAAP;AAJqB;AAOvBC,KAPuB,eAOnBC,MAPmB,EAOX;AACV,QAAMF,QAAQ,GAAGE,MAAM,CAACC,EAAPD,IAAaA,MAAM,CAACE,QAAPF,IAAmBA,MAAM,CAACE,QAAPF,CAAgBC,EAAjE,CADU,CAEV;;AACA,QAAME,cAAc,GAAG,KAAKP,OAAL,CAAaE,QAAb,CAAvB;;AAEA,QAAIK,cAAJ,EAAoB;AAClB;AACA,2BAAMA,cAAN,EAAsBH,MAAtB;AAFF,WAIK;AACH,WAAKJ,OAAL,CAAaE,QAAb,IAAyBE,MAAzB;AACD;AAlBoB;AAqBvBI,OArBuB,mBAqBf;AACN,SAAKR,OAAL,GAAe,EAAf;AAtBqB;AAyBvBS,QAzBuB,oBAyBd;AACP,WAAO,qBAAc,KAAKT,OAAnB,CAAP;AACD;AA3BsB,CAAzB;eA+BeD","names":["DeviceCollection","devices","get","deviceId","set","device","id","identity","existingDevice","reset","getAll"],"sources":["collection.js"],"sourcesContent":["import {merge} from 'lodash';\n\nconst DeviceCollection = {\n  devices: {},\n\n  get(deviceId) {\n    return this.devices[deviceId];\n  },\n\n  set(device) {\n    const deviceId = device.id || device.identity && device.identity.id;\n    // check if the device is already existing, if so then merge else add\n    const existingDevice = this.devices[deviceId];\n\n    if (existingDevice) {\n      // already existing, merge for any new binding information\n      merge(existingDevice, device);\n    }\n    else {\n      this.devices[deviceId] = device;\n    }\n  },\n\n  reset() {\n    this.devices = {};\n  },\n\n  getAll() {\n    return Object.values(this.devices);\n  }\n\n};\n\nexport default DeviceCollection;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = make;\n\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/construct\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _weakMap = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/weak-map\"));\n\nvar _util = _interopRequireDefault(require(\"util\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\n\n\nfunction make() {\n  for (var _len = arguments.length, containers = new Array(_len), _key = 0; _key < _len; _key++) {\n    containers[_key] = arguments[_key];\n  }\n\n  var TopContainer = containers.shift();\n  var data = new _weakMap.default();\n  var sizes = new _weakMap.default();\n  var ChildContainer = containers.length > 1 ? make.apply(void 0, containers) : containers[0];\n  var name = \"(\".concat([TopContainer.name].concat(containers.map(function (container) {\n    return container.name;\n  })).join(', '), \")\");\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n\n  var Container = /*#__PURE__*/function () {\n    /**\n     * @constructs Container\n     */\n    function Container() {\n      (0, _classCallCheck2.default)(this, Container);\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      data.set(this, (0, _construct2.default)(TopContainer, args));\n      sizes.set(this, 0);\n    }\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n\n\n    (0, _createClass2.default)(Container, [{\n      key: \"size\",\n      get: function get() {\n        return sizes.get(this);\n      }\n      /**\n       * Identical to Container#set() but leads slightly more intuitive code when\n       * the container is based on a Set rather than a Map.\n       * @returns {Container}\n       */\n\n    }, {\n      key: \"add\",\n      value: function add() {\n        return this.set.apply(this, arguments);\n      }\n      /**\n       * Removes all items from the container\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        var ret = data.get(this).clear();\n        sizes.set(this, 0);\n        return ret;\n      }\n      /**\n       * Removes the specified item to the container\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {boolean}\n       */\n\n    }, {\n      key: \"delete\",\n      value: function _delete(key) {\n        var mine = data.get(this);\n\n        for (var _len3 = arguments.length, keys = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          keys[_key3 - 1] = arguments[_key3];\n        }\n\n        if (!keys.length) {\n          return mine.delete(key);\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          return false;\n        }\n\n        var ret = next.delete.apply(next, keys);\n\n        if (ret) {\n          sizes.set(this, sizes.get(this) - 1);\n        }\n\n        if (next.size === 0) {\n          mine.delete(key);\n        }\n\n        return ret;\n      }\n      /**\n       * Retrieves the specified item from the container\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {mixed}\n       */\n\n    }, {\n      key: \"get\",\n      value: function get(key) {\n        var mine = data.get(this);\n\n        if (!mine.get) {\n          return mine;\n        }\n\n        for (var _len4 = arguments.length, keys = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          keys[_key4 - 1] = arguments[_key4];\n        }\n\n        if (!keys.length) {\n          return mine.get(key);\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          return undefined;\n        }\n\n        if (!next.get) {\n          return next;\n        }\n\n        return next.get.apply(next, keys);\n      }\n      /**\n       * Indicates whether the container holds the specified item\n       * @param {mixed} key\n       * @param {Array<mixed>} keys\n       * @returns {Boolean}\n       */\n\n    }, {\n      key: \"has\",\n      value: function has() {\n        return typeof this.get.apply(this, arguments) !== 'undefined';\n      }\n      /**\n       * Stores the specified item in the container\n       * @param {mixed} key\n       * @param {Array<mixed>} args\n       * @param {mixed} value\n       * @returns {Container}\n       */\n\n    }, {\n      key: \"set\",\n      value: function set() {\n        var overwrite = false;\n\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        if (this.has.apply(this, args)) {\n          overwrite = true;\n        }\n\n        var mine = data.get(this);\n        var key = args.shift();\n\n        if (!mine.get) {\n          insert.apply(void 0, [mine, key].concat(args));\n          return this;\n        }\n\n        var next = mine.get(key);\n\n        if (!next) {\n          if (!ChildContainer) {\n            insert.apply(void 0, [mine, key].concat(args));\n            return this;\n          }\n\n          next = new ChildContainer();\n          insert(mine, key, next);\n        }\n\n        insert.apply(void 0, [next].concat(args));\n\n        if (!overwrite) {\n          sizes.set(this, sizes.get(this) + 1);\n        }\n\n        return this;\n      }\n      /**\n       * @private\n       * @returns {string}\n       */\n\n    }, {\n      key: \"inspect\",\n      value: function inspect() {\n        return \"Container\".concat(name, \" {\\n  \").concat(_util.default.inspect(data.get(this), {\n          depth: null\n        }), \"\\n}\");\n      }\n    }]);\n    return Container;\n  }();\n\n  return Container;\n}\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\n\n\nfunction insert(container) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  if (container.add) {\n    container.add.apply(container, args);\n    return;\n  }\n\n  if (container.set) {\n    container.set.apply(container, args);\n    return;\n  }\n\n  if (container.push) {\n    container.push.apply(container, args);\n    return;\n  }\n\n  throw new TypeError('Could not determine how to insert into the specified container');\n}","map":{"version":3,"mappings":"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","names":["make","containers","arguments","TopContainer","shift","data","sizes","ChildContainer","length","name","concat","map","container","join","Container","args","set","key","get","value","ret","clear","mine","keys","delete","next","size","undefined","overwrite","has","insert","util","inspect","depth","add","push","TypeError"],"sources":["template-container.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport util from 'util';\n\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\nfunction make(...containers) {\n  const TopContainer = containers.shift();\n\n  const data = new WeakMap();\n  const sizes = new WeakMap();\n\n  const ChildContainer = containers.length > 1 ? make(...containers) : containers[0];\n\n  const name = `(${[TopContainer.name].concat(containers.map((container) => container.name)).join(', ')})`;\n\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n  class Container {\n    /**\n     * @constructs Container\n     */\n    constructor(...args) {\n      data.set(this, new TopContainer(...args));\n      sizes.set(this, 0);\n    }\n\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n    get size() {\n      return sizes.get(this);\n    }\n\n    /**\n     * Identical to Container#set() but leads slightly more intuitive code when\n     * the container is based on a Set rather than a Map.\n     * @returns {Container}\n     */\n    add(...args) {\n      return this.set(...args);\n    }\n\n    /**\n     * Removes all items from the container\n     * @returns {undefined}\n     */\n    clear() {\n      const ret = data.get(this).clear();\n\n      sizes.set(this, 0);\n\n      return ret;\n    }\n\n    /**\n     * Removes the specified item to the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {boolean}\n     */\n    delete(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!keys.length) {\n        return mine.delete(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return false;\n      }\n\n      const ret = next.delete(...keys);\n\n      if (ret) {\n        sizes.set(this, sizes.get(this) - 1);\n      }\n\n      if (next.size === 0) {\n        mine.delete(key);\n      }\n\n      return ret;\n    }\n\n    /**\n     * Retrieves the specified item from the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {mixed}\n     */\n    get(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!mine.get) {\n        return mine;\n      }\n\n      if (!keys.length) {\n        return mine.get(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return undefined;\n      }\n\n      if (!next.get) {\n        return next;\n      }\n\n      return next.get(...keys);\n    }\n\n    /**\n     * Indicates whether the container holds the specified item\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {Boolean}\n     */\n    has(...args) {\n      return typeof this.get(...args) !== 'undefined';\n    }\n\n    /**\n     * Stores the specified item in the container\n     * @param {mixed} key\n     * @param {Array<mixed>} args\n     * @param {mixed} value\n     * @returns {Container}\n     */\n    set(...args) {\n      let overwrite = false;\n\n      if (this.has(...args)) {\n        overwrite = true;\n      }\n      const mine = data.get(this);\n\n      const key = args.shift();\n\n      if (!mine.get) {\n        insert(mine, key, ...args);\n\n        return this;\n      }\n\n      let next = mine.get(key);\n\n      if (!next) {\n        if (!ChildContainer) {\n          insert(mine, key, ...args);\n\n          return this;\n        }\n        next = new ChildContainer();\n        insert(mine, key, next);\n      }\n      insert(next, ...args);\n\n      if (!overwrite) {\n        sizes.set(this, sizes.get(this) + 1);\n      }\n\n      return this;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    inspect() {\n      return `Container${name} {\n  ${util.inspect(data.get(this), {depth: null})}\n}`;\n    }\n  }\n\n  return Container;\n}\n\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\nfunction insert(container, ...args) {\n  if (container.add) {\n    container.add(...args);\n\n    return;\n  }\n\n  if (container.set) {\n    container.set(...args);\n\n    return;\n  }\n\n  if (container.push) {\n    container.push(...args);\n\n    return;\n  }\n  throw new TypeError('Could not determine how to insert into the specified container');\n}\nexport {make as default};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Certificate from \"./Certificate.js\";\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar CertificateSet = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertificateSet class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function CertificateSet() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CertificateSet);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array}\r\n     * @desc certificates\r\n     */\n    this.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(CertificateSet, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"certificates\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, CertificateSet.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificateSet\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.certificates = Array.from(asn1.result.certificates || [], function (element) {\n        var initialTagNumber = element.idBlock.tagNumber;\n        if (element.idBlock.tagClass === 1) return new Certificate({\n          schema: element\n        }); //region Making \"Sequence\" from \"Constructed\" value\n\n        var elementSequence = new asn1js.Sequence({\n          value: element.valueBlock.value\n        }); //endregion\n\n        switch (initialTagNumber) {\n          case 1:\n            // WARN: It's possible that CMS contains AttributeCertificateV2 instead of AttributeCertificateV1\n            // Check the certificate version\n            if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\n              return new AttributeCertificateV2({\n                schema: elementSequence\n              });\n            } else {\n              return new AttributeCertificateV1({\n                schema: elementSequence\n              });\n            }\n\n          case 2:\n            return new AttributeCertificateV2({\n              schema: elementSequence\n            });\n\n          case 3:\n            return new OtherCertificateFormat({\n              schema: elementSequence\n            });\n\n          case 0:\n          default:\n        }\n\n        return element;\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Set({\n        value: Array.from(this.certificates, function (element) {\n          switch (true) {\n            case element instanceof Certificate:\n              return element.toSchema();\n\n            case element instanceof AttributeCertificateV1:\n              return new asn1js.Constructed({\n                idBlock: {\n                  tagClass: 3,\n                  tagNumber: 1 // [1]\n\n                },\n                value: element.toSchema().valueBlock.value\n              });\n\n            case element instanceof AttributeCertificateV2:\n              return new asn1js.Constructed({\n                idBlock: {\n                  tagClass: 3,\n                  tagNumber: 2 // [2]\n\n                },\n                value: element.toSchema().valueBlock.value\n              });\n\n            case element instanceof OtherCertificateFormat:\n              return new asn1js.Constructed({\n                idBlock: {\n                  tagClass: 3,\n                  tagNumber: 3 // [3]\n\n                },\n                value: element.toSchema().valueBlock.value\n              });\n\n            default:\n          }\n\n          return element;\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        certificates: Array.from(this.certificates, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"certificates\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for Attribute class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * CertificateSet ::= SET OF CertificateChoices\r\n     *\r\n     * CertificateChoices ::= CHOICE {\r\n     *    certificate Certificate,\r\n     *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n     *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n     *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n     *    other [3] IMPLICIT OtherCertificateFormat }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Set({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.certificates || \"certificates\",\n          value: new asn1js.Choice({\n            value: [Certificate.schema(), new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 0 // [0]\n\n              },\n              value: [new asn1js.Any()]\n            }), // JUST A STUB\n            new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 1 // [1]\n\n              },\n              value: [new asn1js.Sequence()]\n            }), new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 2 // [2]\n\n              },\n              value: AttributeCertificateV2.schema().valueBlock.value\n            }), new asn1js.Constructed({\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 3 // [3]\n\n              },\n              value: OtherCertificateFormat.schema().valueBlock.value\n            })]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return CertificateSet;\n}(); //**************************************************************************************\n\n\nexport { CertificateSet as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertificateSet.js"],"names":["asn1js","getParametersValue","clearProps","Certificate","AttributeCertificateV1","AttributeCertificateV2","OtherCertificateFormat","CertificateSet","parameters","certificates","defaultValues","fromSchema","schema","asn1","compareSchema","verified","Error","Array","from","result","element","initialTagNumber","idBlock","tagNumber","tagClass","elementSequence","Sequence","value","valueBlock","valueDec","Set","toSchema","Constructed","toJSON","memberName","names","name","blockName","Repeated","Choice","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateSet ::= SET OF CertificateChoices\r\n\t *\r\n\t * CertificateChoices ::= CHOICE {\r\n\t *    certificate Certificate,\r\n\t *    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t *    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t *    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t *    other [3] IMPLICIT OtherCertificateFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Sequence\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificates\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates || [], element =>\r\n\t\t{\r\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\r\n\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tconst elementSequence = new asn1js.Sequence({\r\n\t\t\t\tvalue: element.valueBlock.value\r\n\t\t\t});\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(initialTagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t// WARN: It's possible that CMS contains AttributeCertificateV2 instead of AttributeCertificateV1\r\n\t\t\t\t\t// Check the certificate version\r\n\t\t\t\t\tif (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\r\n\t\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn new AttributeCertificateV1({ schema: elementSequence });\r\n\t\t\t\t\t}\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: elementSequence });\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (element instanceof Certificate):\r\n\t\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _cloneDeep2 = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _eventsScope = _interopRequireDefault(require(\"../common/events/events-scope\"));\n\nvar _constants = require(\"../constants\");\n\nvar _config = _interopRequireDefault(require(\"../mediaQualityMetrics/config\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _global = _interopRequireDefault(require(\"./global\"));\n\nvar _mqaUtil = require(\"./mqaUtil\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof StatsAnalyzer\n  */\n\n/**\n * Stats Analyzer class that will emit events based on detected quality\n *\n * @export\n * @class StatsAnalyzer\n * @extends {EventsScope}\n */\n\n\nvar StatsAnalyzer = /*#__PURE__*/function (_EventsScope) {\n  (0, _inherits2.default)(StatsAnalyzer, _EventsScope);\n\n  var _super = _createSuper(StatsAnalyzer);\n  /**\n   * Creates a new instance of StatsAnalyzer\n   * @constructor\n   * @public\n   * @param {Object} config SDK Configuration Object\n   * @param {Object} networkQualityMonitor class for assessing network characteristics (jitter, packetLoss, latency)\n   * @param {Object} statsResults Default properties for stats\n   */\n\n\n  function StatsAnalyzer(config) {\n    var _this;\n\n    var networkQualityMonitor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var statsResults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _global.default;\n    (0, _classCallCheck2.default)(this, StatsAnalyzer);\n    _this = _super.call(this);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"parseCandidate\", function (result, type, isSender, isRemote) {\n      if (!result || !result.id) {\n        return;\n      }\n\n      var RemoteCandidateType = {};\n      var RemoteTransport = {};\n      var RemoteIpAddress = {};\n      var RemoteNetworkType = {};\n      if (!result.id) return;\n      var sendRecvType = isSender ? _constants.STATS.SEND_DIRECTION : _constants.STATS.RECEIVE_DIRECTION;\n      var ipType = isRemote ? _constants.STATS.REMOTE : _constants.STATS.LOCAL;\n\n      if (!RemoteCandidateType[result.id]) {\n        RemoteCandidateType[result.id] = [];\n      }\n\n      if (!RemoteTransport[result.id]) {\n        RemoteTransport[result.id] = [];\n      }\n\n      if (!RemoteIpAddress[result.id]) {\n        RemoteIpAddress[result.id] = [];\n      }\n\n      if (!RemoteNetworkType[result.id]) {\n        RemoteNetworkType[result.id] = [];\n      }\n\n      if (result.candidateType && RemoteCandidateType[result.id].indexOf(result.candidateType) === -1) {\n        RemoteCandidateType[result.id].push(result.candidateType);\n      }\n\n      if (result.protocol && RemoteTransport[result.id].indexOf(result.protocol) === -1) {\n        RemoteTransport[result.id].push(result.protocol.toUpperCase());\n      }\n\n      if (result.ip && RemoteIpAddress[result.id].indexOf(\"\".concat(result.ip, \":\").concat(result.portNumber)) === -1) {\n        RemoteIpAddress[result.id].push(\"\".concat(result.ip)); // TODO: Add ports\n      }\n\n      if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === -1) {\n        RemoteNetworkType[result.id].push(result.networkType);\n      }\n\n      _this.statsResults.internal.candidates[result.id] = {\n        candidateType: RemoteCandidateType[result.id],\n        ipAddress: RemoteIpAddress[result.id],\n        portNumber: result.port,\n        networkType: RemoteNetworkType[result.id],\n        priority: result.priority,\n        transport: RemoteTransport[result.id],\n        timestamp: result.time,\n        id: result.id,\n        type: result.type\n      };\n      _this.statsResults.connectionType[ipType].candidateType = RemoteCandidateType[result.id];\n      _this.statsResults.connectionType[ipType].ipAddress = RemoteIpAddress[result.id];\n      _this.statsResults.connectionType[ipType].networkType = RemoteNetworkType[result.id][0] === _constants.NETWORK_TYPE.VPN ? _constants.NETWORK_TYPE.UNKNOWN : RemoteNetworkType[result.id][0];\n      _this.statsResults.connectionType[ipType].transport = RemoteTransport[result.id];\n      _this.statsResults[type][sendRecvType].totalRoundTripTime = result.totalRoundTripTime;\n    });\n    _this.statsStarted = false;\n    _this.statsResults = statsResults;\n    _this.lastStatsResults = null;\n    _this.config = config;\n    _this.networkQualityMonitor = networkQualityMonitor;\n    _this.correlationId = config.correlationId;\n    _this.mqaSentCount = -1;\n    _this.lastMqaDataSent = {\n      resolutions: {\n        video: {\n          send: {},\n          recv: {}\n        },\n        audio: {\n          send: {},\n          recv: {}\n        },\n        share: {\n          send: {},\n          recv: {}\n        }\n      },\n      video: {\n        send: {},\n        recv: {}\n      },\n      audio: {\n        send: {},\n        recv: {}\n      },\n      share: {\n        send: {},\n        recv: {}\n      }\n    };\n    _this.localMQEStats = {\n      audio: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: []\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: []\n        }\n      },\n      video: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: []\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: []\n        }\n      }\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(StatsAnalyzer, [{\n    key: \"populateResults\",\n    value: function populateResults(lastMqa) {\n      // Audio\n      this.localMQEStats.audio.RX.packetsLost.push(lastMqa.audioReceive[0].common.mediaHopByHopLost);\n      this.localMQEStats.audio.RX.jitter.push(lastMqa.audioReceive[0].streams[0].common.rtpJitter);\n      this.localMQEStats.audio.RX.latency.push(lastMqa.audioReceive[0].common.roundTripTime);\n      this.localMQEStats.audio.RX.bitRate.push(lastMqa.audioReceive[0].streams[0].common.receivedBitrate);\n      this.localMQEStats.audio.TX.packetsLost.push(lastMqa.audioTransmit[0].common.remoteLossRate);\n      this.localMQEStats.audio.TX.jitter.push(lastMqa.audioTransmit[0].common.remoteJitter);\n      this.localMQEStats.audio.TX.latency.push(lastMqa.audioTransmit[0].common.roundTripTime);\n      this.localMQEStats.audio.TX.bitRate.push(lastMqa.audioTransmit[0].streams[0].common.transmittedBitrate); // Video\n\n      this.localMQEStats.video.RX.packetsLost.push(lastMqa.videoReceive[0].common.mediaHopByHopLost);\n      this.localMQEStats.video.RX.jitter.push(lastMqa.videoReceive[0].streams[0].common.rtpJitter);\n      this.localMQEStats.video.RX.latency.push(lastMqa.videoReceive[0].streams[0].common.roundTripTime);\n      this.localMQEStats.video.RX.bitRate.push(lastMqa.videoReceive[0].streams[0].common.receivedBitrate);\n      this.localMQEStats.video.RX.frameRate.push(lastMqa.videoReceive[0].streams[0].common.receivedFrameRate);\n      this.localMQEStats.video.RX.resolutionWidth.push(lastMqa.videoReceive[0].streams[0].receivedWidth);\n      this.localMQEStats.video.RX.resolutionHeight.push(lastMqa.videoReceive[0].streams[0].receivedHeight);\n      this.localMQEStats.video.RX.requestedKeyFrame.push();\n      this.localMQEStats.video.RX.receivedKeyFrame.push();\n      this.localMQEStats.video.TX.packetsLost.push(lastMqa.videoTransmit[0].common.remoteLossRate);\n      this.localMQEStats.video.TX.jitter.push(lastMqa.videoTransmit[0].common.remoteJitter);\n      this.localMQEStats.video.TX.latency.push(lastMqa.videoTransmit[0].common.roundTripTime);\n      this.localMQEStats.video.TX.bitRate.push(lastMqa.videoTransmit[0].streams[0].common.transmittedBitrate);\n      this.localMQEStats.video.TX.frameRate.push(lastMqa.videoTransmit[0].streams[0].common.transmittedFrameRate);\n      this.localMQEStats.video.TX.resolutionWidth.push(lastMqa.videoTransmit[0].streams[0].transmittedWidth);\n      this.localMQEStats.video.TX.resolutionHeight.push(lastMqa.videoTransmit[0].streams[0].transmittedHeight);\n      this.localMQEStats.video.TX.requestedKeyFrame.push(lastMqa.videoTransmit[0].streams[0].requestedKeyFrames);\n      this.localMQEStats.video.TX.receivedKeyFrame.push();\n    }\n  }, {\n    key: \"resetStatsResults\",\n    value: function resetStatsResults() {\n      this.statsResults.audio.send.meanRemoteJitter = [];\n      this.statsResults.video.send.meanRemoteJitter = [];\n      this.statsResults.share.send.meanRemoteJitter = [];\n      this.statsResults.audio.recv.meanRtpJitter = []; // TODO: currently no values are present\n\n      this.statsResults.video.recv.meanRtpJitter = [];\n      this.statsResults.share.recv.meanRtpJitter = []; // Reset the roundTripTime\n\n      this.statsResults.audio.send.meanRoundTripTime = [];\n      this.statsResults.video.send.meanRoundTripTime = [];\n      this.statsResults.share.send.meanRoundTripTime = [];\n    }\n    /**\n     * sets mediaStatus status for analyzing metrics\n     *\n     * @public\n     * @param {Object} status for the audio and video\n     * @memberof StatsAnalyzer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateMediaStatus\",\n    value: function updateMediaStatus(status) {\n      this.meetingMediaStatus = status;\n    }\n    /**\n     * captures MQA data from peerconnection\n     *\n     * @public\n     * @memberof StatsAnalyzer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sendMqaData\",\n    value: function sendMqaData() {\n      var _this$peerConnection, _this$peerConnection$, _this$peerConnection$2, _this$peerConnection$3, _this$peerConnection2, _this$peerConnection3, _this$peerConnection4, _this$peerConnection5;\n\n      var audioReceiver = _config.default.intervals[0].audioReceive[0];\n      var audioSender = _config.default.intervals[0].audioTransmit[0];\n      var videoReceiver = _config.default.intervals[0].videoReceive[0];\n      var videoSender = _config.default.intervals[0].videoTransmit[0];\n      var shareSender = _config.default.intervals[0].videoTransmit[1];\n      var shareReceiver = _config.default.intervals[0].videoReceive[1];\n      (0, _mqaUtil.getAudioSenderMqa)({\n        audioSender: audioSender,\n        statsResults: this.statsResults,\n        lastMqaDataSent: this.lastMqaDataSent\n      });\n      (0, _mqaUtil.getAudioReceiverMqa)({\n        audioReceiver: audioReceiver,\n        statsResults: this.statsResults,\n        lastMqaDataSent: this.lastMqaDataSent\n      });\n      (0, _mqaUtil.getVideoReceiverMqa)({\n        videoReceiver: videoReceiver,\n        statsResults: this.statsResults,\n        lastMqaDataSent: this.lastMqaDataSent\n      });\n      (0, _mqaUtil.getVideoSenderMqa)({\n        videoSender: videoSender,\n        statsResults: this.statsResults,\n        lastMqaDataSent: this.lastMqaDataSent\n      }); // Capture mqa for share scenario\n\n      (0, _mqaUtil.getVideoSenderMqa)({\n        videoSender: shareSender,\n        statsResults: this.statsResults,\n        lastMqaDataSent: this.lastMqaDataSent,\n        isShareStream: true\n      });\n      (0, _mqaUtil.getVideoReceiverMqa)({\n        videoReceiver: shareReceiver,\n        statsResults: this.statsResults,\n        lastMqaDataSent: this.lastMqaDataSent,\n        isShareStream: true\n      });\n      _config.default.intervals[0].intervalMetadata.peerReflexiveIP = this.statsResults.connectionType.local.ipAddress[0]; // Adding peripheral information\n\n      _config.default.intervals[0].intervalMetadata.peripherals = [];\n\n      _config.default.intervals[0].intervalMetadata.peripherals.push({\n        information: _constants._UNKNOWN_,\n        name: _constants.MEDIA_DEVICES.SPEAKER\n      });\n\n      _config.default.intervals[0].intervalMetadata.peripherals.push({\n        information: ((_this$peerConnection = this.peerConnection) === null || _this$peerConnection === void 0 ? void 0 : (_this$peerConnection$ = _this$peerConnection.audioTransceiver) === null || _this$peerConnection$ === void 0 ? void 0 : (_this$peerConnection$2 = _this$peerConnection$.sender) === null || _this$peerConnection$2 === void 0 ? void 0 : (_this$peerConnection$3 = _this$peerConnection$2.track) === null || _this$peerConnection$3 === void 0 ? void 0 : _this$peerConnection$3.label) || _constants._UNKNOWN_,\n        name: _constants.MEDIA_DEVICES.MICROPHONE\n      });\n\n      _config.default.intervals[0].intervalMetadata.peripherals.push({\n        information: ((_this$peerConnection2 = this.peerConnection) === null || _this$peerConnection2 === void 0 ? void 0 : (_this$peerConnection3 = _this$peerConnection2.videoTransceiver) === null || _this$peerConnection3 === void 0 ? void 0 : (_this$peerConnection4 = _this$peerConnection3.sender) === null || _this$peerConnection4 === void 0 ? void 0 : (_this$peerConnection5 = _this$peerConnection4.track) === null || _this$peerConnection5 === void 0 ? void 0 : _this$peerConnection5.label) || _constants._UNKNOWN_,\n        name: _constants.MEDIA_DEVICES.CAMERA\n      });\n\n      _config.default.networkType = this.statsResults.connectionType.local.networkType;\n      this.mqaSentCount = this.mqaSentCount + 1;\n      _config.default.intervals[0].intervalNumber = this.mqaSentCount; // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n\n      this.lastMqaDataSent = (0, _cloneDeep2.default)(this.statsResults);\n      this.populateResults(_config.default.intervals[0]);\n      this.resetStatsResults();\n      this.emit({\n        file: 'statsAnalyzer',\n        function: 'sendMqaData'\n      }, _constants.EVENT_TRIGGERS.MEDIA_QUALITY, {\n        data: _config.default.intervals[0],\n        networkType: _config.default.networkType\n      });\n    }\n    /**\n     * updated the peerconnection when changed\n     *\n     * @private\n     * @memberof updatePeerconnection\n     * @param {PeerConnection} peerConnection\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updatePeerconnection\",\n    value: function updatePeerconnection(peerConnection) {\n      this.peerConnection = peerConnection;\n    }\n    /**\n     * Starts the stats analyzer on interval\n     *\n     * @public\n     * @memberof StatsAnalyzer\n     * @param {PeerConnection} peerConnection\n     * @returns {void}\n     */\n\n  }, {\n    key: \"startAnalyzer\",\n    value: function startAnalyzer(peerConnection) {\n      var _this2 = this;\n\n      if (!this.statsStarted) {\n        this.statsStarted = true;\n        this.peerConnection = peerConnection;\n        this.getStatsAndParse();\n        this.statsInterval = setInterval(function () {\n          _this2.getStatsAndParse();\n        }, this.config.analyzerInterval); // Trigger initial fetch\n\n        this.sendMqaData();\n        this.mqaInterval = setInterval(function () {\n          _this2.sendMqaData();\n        }, _constants.MQA_INTEVAL);\n      }\n    }\n    /**\n     * Cleans up the analyzer when done\n     *\n     * @public\n     * @memberof StatsAnalyzer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"stopAnalyzer\",\n    value: function stopAnalyzer() {\n      if (this.statsInterval) {\n        this.getStatsAndParse();\n        clearInterval(this.statsInterval);\n        this.statsInterva = undefined;\n      }\n\n      if (this.mqaInterval) {\n        this.sendMqaData();\n        clearInterval(this.mqaInterval);\n        this.statsInterva = undefined;\n      }\n\n      this.peerConnection = null;\n    }\n    /**\n     * Parse a single result of get stats\n     *\n     * @private\n     * @param {*} getStatsResult\n     * @param {String} type\n     * @param {boolean} isSender\n     * @returns {void}\n     * @memberof StatsAnalyzer\n     */\n\n  }, {\n    key: \"parseGetStatsResult\",\n    value: function parseGetStatsResult(getStatsResult, type, isSender) {\n      if (!getStatsResult) {\n        return;\n      }\n\n      switch (getStatsResult.type) {\n        case 'outbound-rtp':\n          this.processOutboundRTPResult(getStatsResult, type);\n          break;\n\n        case 'inbound-rtp':\n          this.processInboundRTPResult(getStatsResult, type);\n          break;\n\n        case 'track':\n          this.processTrackResult(getStatsResult, type);\n          break;\n\n        case 'remote-inbound-rtp':\n        case 'remote-outbound-rtp':\n          this.compareSentAndReceived(getStatsResult, type, isSender);\n          break;\n\n        case 'remotecandidate':\n        case 'remote-candidate':\n          this.parseCandidate(getStatsResult, type, isSender, true);\n          break;\n\n        case 'local-candidate':\n          this.parseCandidate(getStatsResult, type, isSender, false);\n          break;\n\n        case 'media-source':\n          this.parseAudioSource(getStatsResult, type);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Filters the get stats results for types\n     * @private\n     * @param {Array} getStatsResults\n     * @param {String} type\n     * @param {boolean} isSender\n     * @returns {void}\n     */\n\n  }, {\n    key: \"filterAndParseGetStatsResults\",\n    value: function filterAndParseGetStatsResults(getStatsResults, type, isSender) {\n      var _this3 = this;\n\n      var types = _constants.DEFAULT_GET_STATS_FILTER.types;\n      getStatsResults.forEach(function (result) {\n        if (types.includes(result.type)) {\n          _this3.parseGetStatsResult(result, type, isSender);\n        }\n      });\n    }\n    /**\n     * parse the audio\n     * @param {String} result\n     * @param {boolean} type\n     * @returns {void}\n     */\n\n  }, {\n    key: \"parseAudioSource\",\n    value: function parseAudioSource(result, type) {\n      if (!result) {\n        return;\n      }\n\n      if (type === _constants.STATS.AUDIO_CORRELATE) {\n        this.statsResults[type].send.audioLevel = result.audioLevel;\n        this.statsResults[type].send.totalAudioEnergy = result.totalAudioEnergy;\n      }\n    }\n    /**\n     * compares current and previous stats to check if packets are not sent\n     *\n     * @private\n     * @memberof StatsAnalyzer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"compareLastStatsResult\",\n    value: function compareLastStatsResult() {\n      if (this.lastStatsResults !== null && this.meetingMediaStatus) {\n        // compare audio stats sent\n        var mediaType = _constants.STATS.AUDIO_CORRELATE;\n        var currentStats = null;\n        var previousStats = null;\n\n        if (this.meetingMediaStatus.expected.sendAudio) {\n          currentStats = this.statsResults[mediaType].send;\n          previousStats = this.lastStatsResults[mediaType].send;\n\n          if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" RTP packets sent\"));\n          } else {\n            if (currentStats.totalAudioEnergy === previousStats.totalAudioEnergy || currentStats.totalAudioEnergy === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" Energy present\"));\n            }\n\n            if (currentStats.audioLevel === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> \".concat(mediaType, \" level is 0 for the user\"));\n            }\n          }\n\n          if (previousStats.totalPacketsSent === 0 && currentStats.totalPacketsSent > 0) {\n            this.emit({\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            }, _constants.EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED, {\n              type: mediaType.AUDIO\n            });\n          }\n        }\n\n        if (this.meetingMediaStatus.expected.receiveAudio) {\n          // compare audio stats received\n          currentStats = this.statsResults[mediaType].recv;\n          previousStats = this.lastStatsResults[mediaType].recv;\n\n          if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsReceived === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" RTP packets received\"));\n          } else if (currentStats.totalSamplesReceived === previousStats.totalSamplesReceived || currentStats.totalSamplesReceived === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" samples received\"));\n          }\n        }\n\n        mediaType = _constants.STATS.VIDEO_CORRELATE;\n\n        if (this.meetingMediaStatus.expected.sendVideo) {\n          // compare video stats sent\n          currentStats = this.statsResults[mediaType].send;\n          previousStats = this.lastStatsResults[mediaType].send;\n\n          if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" RTP packets sent\"));\n          } else {\n            if (currentStats.framesEncoded === previousStats.framesEncoded || currentStats.framesEncoded === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" Frames Encoded\"));\n            }\n\n            if (this.statsResults.resolutions[mediaType].send.framesSent === this.lastStatsResults.resolutions[mediaType].send.framesSent || this.statsResults.resolutions[mediaType].send.framesSent === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" Frames sent\"));\n            }\n          }\n\n          if (previousStats.framesSent === 0 && currentStats.framesSent > 0) {\n            this.emit({\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            }, _constants.EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED, {\n              type: mediaType.VIDEO\n            });\n          }\n        }\n\n        if (this.meetingMediaStatus.expected.receiveVideo) {\n          // compare video stats reveived\n          currentStats = this.statsResults[mediaType].recv;\n          previousStats = this.lastStatsResults[mediaType].recv;\n\n          if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsReceived === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" RTP packets received\"));\n          } else {\n            if (this.statsResults.resolutions[mediaType].recv.framesReceived === this.lastStatsResults.resolutions[mediaType].recv.framesReceived || this.statsResults.resolutions[mediaType].recv.framesReceived === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" frames received\"));\n            }\n\n            if (this.statsResults.resolutions[mediaType].recv.framesDecoded === this.lastStatsResults.resolutions[mediaType].recv.framesDecoded || this.statsResults.resolutions[mediaType].send.framesDecoded === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" frames decoded\"));\n            }\n\n            if (this.statsResults.resolutions[mediaType].recv.framesDropped - this.lastStatsResults.resolutions[mediaType].recv.framesDropped > 10) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> \".concat(mediaType, \" frames are getting dropped\"));\n            }\n          }\n        }\n\n        mediaType = _constants.STATS.SHARE_CORRELATE;\n\n        if (this.meetingMediaStatus.expected.sendShare) {\n          // compare share stats sent\n          currentStats = this.statsResults[mediaType].send;\n          previousStats = this.lastStatsResults[mediaType].send;\n\n          if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" RTP packets sent\"));\n          } else {\n            if (currentStats.framesEncoded === previousStats.framesEncoded || currentStats.framesEncoded === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" frames getting encoded\"));\n            }\n\n            if (this.statsResults.resolutions[mediaType].send.framesSent === this.lastStatsResults.resolutions[mediaType].send.framesSent || this.statsResults.resolutions[mediaType].send.framesSent === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" frames sent\"));\n            }\n          }\n\n          if (previousStats.framesSent === 0 && currentStats.framesSent > 0) {\n            this.emit({\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            }, _constants.EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED, {\n              type: mediaType.VIDEO\n            });\n          } // TODO:need to check receive share value\n          // compare share stats reveived\n\n\n          currentStats = this.statsResults[mediaType].recv;\n          previousStats = this.lastStatsResults[mediaType].recv;\n\n          if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsSent === 0) {\n            _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" RTP packets received\"));\n          } else {\n            if (this.statsResults.resolutions[mediaType].recv.framesReceived === this.lastStatsResults.resolutions[mediaType].recv.framesReceived || this.statsResults.resolutions[mediaType].recv.framesReceived === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" frames received\"));\n            }\n\n            if (this.statsResults.resolutions[mediaType].recv.framesDecoded === this.lastStatsResults.resolutions[mediaType].recv.framesDecoded || this.statsResults.resolutions[mediaType].send.framesDecoded === 0) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> No \".concat(mediaType, \" frames decoded\"));\n            }\n\n            if (this.statsResults.resolutions[mediaType].recv.framesDropped - this.lastStatsResults.resolutions[mediaType].recv.framesDropped > 10) {\n              _loggerProxy.default.logger.info(\"StatsAnalyzer:index#compareLastStatsResult --> \".concat(mediaType, \" frames are getting dropped\"));\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Does a `getStats` on all the transceivers and parses the results\n     *\n     * @private\n     * @memberof StatsAnalyzer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"getStatsAndParse\",\n    value: function getStatsAndParse() {\n      var _this4 = this;\n\n      if (!this.peerConnection) {\n        return;\n      }\n\n      if (this.peerConnection && this.peerConnection.connectionState === _constants.CONNECTION_STATE.FAILED) {\n        _loggerProxy.default.logger.trace('StatsAnalyzer:index#getStatsAndParse --> PeerConnection is in failed state');\n\n        return;\n      }\n\n      _loggerProxy.default.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Collecting Stats');\n\n      this.peerConnection.videoTransceiver.sender.getStats().then(function (res) {\n        _this4.filterAndParseGetStatsResults(res, _constants.STATS.VIDEO_CORRELATE, true);\n      });\n      this.peerConnection.videoTransceiver.receiver.getStats().then(function (res) {\n        _this4.filterAndParseGetStatsResults(res, _constants.STATS.VIDEO_CORRELATE, false);\n      });\n      this.peerConnection.audioTransceiver.sender.getStats().then(function (res) {\n        _this4.filterAndParseGetStatsResults(res, _constants.STATS.AUDIO_CORRELATE, true);\n      });\n      this.peerConnection.audioTransceiver.receiver.getStats().then(function (res) {\n        _this4.filterAndParseGetStatsResults(res, _constants.STATS.AUDIO_CORRELATE, false);\n      }); // TODO: add checks for screen share\n\n      this.peerConnection.shareTransceiver.sender.getStats().then(function (res) {\n        _this4.filterAndParseGetStatsResults(res, _constants.STATS.SHARE_CORRELATE, true);\n      });\n      this.peerConnection.shareTransceiver.receiver.getStats().then(function (res) {\n        _this4.filterAndParseGetStatsResults(res, _constants.STATS.SHARE_CORRELATE, false);\n      }); // updates the current direction of media\n\n      this.statsResults[_constants.STATS.AUDIO_CORRELATE].direction = this.peerConnection.audioTransceiver.currentDirection;\n      this.statsResults[_constants.STATS.VIDEO_CORRELATE].direction = this.peerConnection.videoTransceiver.currentDirection;\n      this.statsResults[_constants.STATS.SHARE_CORRELATE].direction = this.peerConnection.shareTransceiver.currentDirection; // Process Stats results every 5 seconds\n\n      this.compareLastStatsResult(); // Save the last results to compare with the current\n      // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n\n      this.lastStatsResults = JSON.parse((0, _stringify.default)(this.statsResults));\n\n      _loggerProxy.default.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Finished Collecting Stats');\n    }\n    /**\n     * Processes OutboundRTP stats result and stores\n     * @private\n     * @param {*} result\n     * @param {*} type\n     * @returns {void}\n     */\n\n  }, {\n    key: \"processOutboundRTPResult\",\n    value: function processOutboundRTPResult(result, type) {\n      var mediaType = type || _constants.STATS.AUDIO_CORRELATE;\n      var sendrecvType = _constants.STATS.SEND_DIRECTION;\n\n      if (result.bytesSent) {\n        var kilobytes = 0;\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {\n          this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n        }\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {\n          this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n        }\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {\n          this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;\n        }\n\n        var bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n        kilobytes = bytes / 1024;\n        this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n        this.statsResults[mediaType].bytesSent = kilobytes;\n        this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;\n        this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;\n        this.statsResults.internal[mediaType].outboundRtpId = result.id;\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {\n          this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n        }\n\n        this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;\n        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent; // Data saved to send MQA metrics\n\n        this.statsResults[mediaType][sendrecvType].totalKeyFramesEncoded = result.keyFramesEncoded;\n        this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n        this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n        this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n        this.statsResults[mediaType][sendrecvType].totalFirCount = result.firCount;\n        this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n        this.statsResults[mediaType][sendrecvType].encoderImplementation = result.encoderImplementation;\n        this.statsResults[mediaType][sendrecvType].qualityLimitationReason = result.qualityLimitationReason;\n        this.statsResults[mediaType][sendrecvType].qualityLimitationResolutionChanges = result.qualityLimitationResolutionChanges;\n        this.statsResults[mediaType][sendrecvType].retransmittedPacketsSent = result.retransmittedPacketsSent;\n        this.statsResults[mediaType][sendrecvType].totalBytesSent = result.bytesSent;\n        this.statsResults[mediaType][sendrecvType].headerBytesSent = result.headerBytesSent;\n        this.statsResults[mediaType][sendrecvType].retransmittedBytesSent = result.retransmittedBytesSent;\n      }\n    }\n    /**\n     * Processes InboundRTP stats result and stores\n     * @private\n     * @param {*} result\n     * @param {*} type\n     * @returns {void}\n     */\n\n  }, {\n    key: \"processInboundRTPResult\",\n    value: function processInboundRTPResult(result, type) {\n      var mediaType = type || _constants.STATS.AUDIO_CORRELATE;\n      var sendrecvType = _constants.STATS.RECEIVE_DIRECTION;\n\n      if (result.bytesReceived) {\n        var kilobytes = 0;\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {\n          this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n        }\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {\n          this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;\n        }\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {\n          this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;\n        }\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived) {\n          this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n        }\n\n        if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {\n          this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n        }\n\n        var bytes = result.bytesReceived - this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived;\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n        kilobytes = bytes / 1024;\n        this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n        this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);\n        this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;\n\n        if (this.statsResults[mediaType][sendrecvType].currentPacketsLost < 0) {\n          this.statsResults[mediaType][sendrecvType].currentPacketsLost = 0;\n        }\n\n        this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived;\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n        if (this.statsResults[mediaType][sendrecvType].packetsReceived === 0) {\n          _loggerProxy.default.logger.info(\"StatsAnalyzer:index#processInboundRTPResult --> No packets received for \".concat(mediaType, \" \"), this.statsResults[mediaType][sendrecvType].packetsReceived);\n        } //  Check the over all packet Lost ratio\n\n\n        this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost > 0 ? this.statsResults[mediaType][sendrecvType].currentPacketsLost / (this.statsResults[mediaType][sendrecvType].packetsReceived + this.statsResults[mediaType][sendrecvType].currentPacketsLost) : 0;\n\n        if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {\n          _loggerProxy.default.logger.info('StatsAnalyzer:index#processInboundRTPResult --> Packets getting lost from the receiver ', this.statsResults[mediaType][sendrecvType].currentPacketLossRatio);\n        } // TODO: check the packet loss value is negative values here\n\n\n        if (result.packetsLost) {\n          this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost > 0 ? result.packetsLost : -result.packetsLost;\n        } else {\n          this.statsResults[mediaType][sendrecvType].totalPacketsLost = 0;\n        }\n\n        this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp; // From Thin\n\n        this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n        this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n        this.statsResults[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n        this.statsResults[mediaType][sendrecvType].keyFramesDecoded = result.keyFramesDecoded;\n        this.statsResults[mediaType][sendrecvType].decoderImplementation = result.decoderImplementation;\n        this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n        this.statsResults[mediaType][sendrecvType].fecPacketsDiscarded = result.fecPacketsDiscarded;\n        this.statsResults[mediaType][sendrecvType].fecPacketsReceived = result.fecPacketsReceived;\n        this.statsResults[mediaType][sendrecvType].totalBytesReceived = result.bytesReceived;\n        this.statsResults[mediaType][sendrecvType].headerBytesReceived = result.headerBytesReceived;\n        this.statsResults[mediaType][sendrecvType].meanRtpJitter.push(result.jitter); // Audio stats\n\n        this.statsResults[mediaType][sendrecvType].audioLevel = result.audioLevel;\n        this.statsResults[mediaType][sendrecvType].totalAudioEnergy = result.totalAudioEnergy;\n        this.statsResults[mediaType][sendrecvType].totalSamplesReceived = result.totalSamplesReceived || 0;\n        this.statsResults[mediaType][sendrecvType].totalSamplesDecoded = result.totalSamplesDecoded || 0;\n        this.statsResults[mediaType][sendrecvType].concealedSamples = result.concealedSamples || 0;\n      }\n    }\n    /**\n     * Processes remote and local candidate result and stores\n     * @private\n     * @param {*} result\n     * @param {*} type\n     * @param {boolean} isSender\n     * @param {boolean} isRemote\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"processTrackResult\",\n    value:\n    /**\n     * Process Track results\n     *\n     * @private\n     * @param {*} result\n     * @param {*} mediaType\n     * @returns {void}\n     * @memberof StatsAnalyzer\n     */\n    function processTrackResult(result, mediaType) {\n      if (!result || result.type !== 'track') {\n        return;\n      }\n\n      if (result.type !== 'track') return;\n      var sendrecvType = result.remoteSource === true ? _constants.STATS.RECEIVE_DIRECTION : _constants.STATS.SEND_DIRECTION;\n\n      if (result.frameWidth && result.frameHeight) {\n        this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;\n        this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;\n        this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;\n        this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;\n      }\n\n      if (sendrecvType === _constants.STATS.RECEIVE_DIRECTION) {\n        this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;\n        this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n        this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;\n      }\n\n      if (result.trackIdentifier && mediaType !== _constants.STATS.AUDIO_CORRELATE) {\n        this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;\n        var jitterBufferDelay = result && result.jitterBufferDelay;\n        var jitterBufferEmittedCount = result && result.jitterBufferEmittedCount;\n        this.statsResults.resolutions[mediaType][sendrecvType].avgJitterDelay = jitterBufferEmittedCount && +jitterBufferDelay / +jitterBufferEmittedCount; // Used to calculate the jitter\n\n        this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay = result.jitterBufferDelay;\n        this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount = result.jitterBufferEmittedCount;\n      }\n    }\n    /**\n     *\n     * @private\n     * @param {*} result\n     * @param {*} type\n     * @returns {void}\n     * @memberof StatsAnalyzer\n     */\n\n  }, {\n    key: \"compareSentAndReceived\",\n    value: function compareSentAndReceived(result, type) {\n      if (!type) {\n        return;\n      }\n\n      var mediaType = type;\n\n      if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) {\n        this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n      }\n\n      var currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;\n      this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n      this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;\n      this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n      this.statsResults[mediaType].send.meanRemoteJitter.push(result.jitter);\n      this.statsResults[mediaType].send.meanRoundTripTime.push(result.roundTripTime);\n      this.statsResults[mediaType].send.timestamp = result.timestamp;\n      this.statsResults[mediaType].send.ssrc = result.ssrc;\n      this.statsResults[mediaType].send.reportsReceived = result.reportsReceived; // Total packloss ratio on this video section of the call\n\n      this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver / this.statsResults[mediaType].send.totalPacketsSent : 0;\n      this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / (this.statsResults[mediaType].send.packetsSent + this.statsResults[mediaType].send.packetsLostOnReceiver) : 0;\n\n      if (this.statsResults[mediaType].send.maxPacketLossRatio < this.statsResults[mediaType].send.currentPacketLossRatio) {\n        this.statsResults[mediaType].send.maxPacketLossRatio = this.statsResults[mediaType].send.currentPacketLossRatio;\n      }\n\n      if (result.type === 'remote-inbound-rtp') {\n        this.networkQualityMonitor.determineUplinkNetworkQuality({\n          mediaType: mediaType,\n          remoteRtpResults: result,\n          statsAnalyzerCurrentStats: this.statsResults\n        });\n      }\n    }\n  }]);\n  return StatsAnalyzer;\n}(_eventsScope.default);\n\nexports.default = StatsAnalyzer;","map":{"version":3,"mappings":"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","names":["StatsAnalyzer","config","networkQualityMonitor","statsResults","defaultStats","_this","result","type","isSender","isRemote","id","RemoteCandidateType","RemoteTransport","RemoteIpAddress","RemoteNetworkType","sendRecvType","STATS","SEND_DIRECTION","RECEIVE_DIRECTION","ipType","REMOTE","LOCAL","candidateType","indexOf","push","protocol","toUpperCase","ip","portNumber","networkType","internal","candidates","ipAddress","port","priority","transport","timestamp","time","connectionType","NETWORK_TYPE","VPN","UNKNOWN","totalRoundTripTime","statsStarted","lastStatsResults","correlationId","mqaSentCount","lastMqaDataSent","resolutions","video","send","recv","audio","share","localMQEStats","RX","packetsLost","jitter","latency","bitRate","TX","frameRate","resolutionWidth","resolutionHeight","requestedKeyFrame","receivedKeyFrame","lastMqa","audioReceive","common","mediaHopByHopLost","streams","rtpJitter","roundTripTime","receivedBitrate","audioTransmit","remoteLossRate","remoteJitter","transmittedBitrate","videoReceive","receivedFrameRate","receivedWidth","receivedHeight","videoTransmit","transmittedFrameRate","transmittedWidth","transmittedHeight","requestedKeyFrames","meanRemoteJitter","meanRtpJitter","meanRoundTripTime","status","meetingMediaStatus","audioReceiver","mqaData","intervals","audioSender","videoReceiver","videoSender","shareSender","shareReceiver","isShareStream","intervalMetadata","peerReflexiveIP","local","peripherals","information","_UNKNOWN_","name","MEDIA_DEVICES","SPEAKER","peerConnection","audioTransceiver","sender","track","label","MICROPHONE","videoTransceiver","CAMERA","intervalNumber","populateResults","resetStatsResults","emit","file","function","EVENT_TRIGGERS","MEDIA_QUALITY","data","getStatsAndParse","statsInterval","setInterval","_this2","analyzerInterval","sendMqaData","mqaInterval","MQA_INTEVAL","clearInterval","statsInterva","undefined","getStatsResult","processOutboundRTPResult","processInboundRTPResult","processTrackResult","compareSentAndReceived","parseCandidate","parseAudioSource","getStatsResults","types","DEFAULT_GET_STATS_FILTER","forEach","includes","_this3","parseGetStatsResult","AUDIO_CORRELATE","audioLevel","totalAudioEnergy","mediaType","currentStats","previousStats","expected","sendAudio","totalPacketsSent","LoggerProxy","logger","info","MEETING_MEDIA_LOCAL_STARTED","AUDIO","receiveAudio","totalPacketsReceived","totalSamplesReceived","VIDEO_CORRELATE","sendVideo","framesEncoded","framesSent","VIDEO","receiveVideo","framesReceived","framesDecoded","framesDropped","SHARE_CORRELATE","sendShare","connectionState","CONNECTION_STATE","FAILED","trace","getStats","then","res","_this4","filterAndParseGetStatsResults","receiver","shareTransceiver","direction","currentDirection","compareLastStatsResult","JSON","parse","sendrecvType","bytesSent","kilobytes","prevBytesSent","keyFramesEncoded","bytes","availableBandwidth","toFixed","outboundRtpId","packetsSent","totalKeyFramesEncoded","totalNackCount","nackCount","totalPliCount","pliCount","totalFirCount","firCount","encoderImplementation","qualityLimitationReason","qualityLimitationResolutionChanges","retransmittedPacketsSent","totalBytesSent","headerBytesSent","retransmittedBytesSent","bytesReceived","prevBytesReceived","packetsReceived","lastPacketReceivedTimestamp","currentPacketsLost","currentPacketLossRatio","totalPacketsLost","keyFramesDecoded","decoderImplementation","fecPacketsDiscarded","fecPacketsReceived","totalBytesReceived","headerBytesReceived","totalSamplesDecoded","concealedSamples","remoteSource","frameWidth","frameHeight","width","height","hugeFramesSent","trackIdentifier","jitterBufferDelay","jitterBufferEmittedCount","avgJitterDelay","totalPacketsLostOnReceiver","currentPacketLoss","packetsLostOnReceiver","ssrc","reportsReceived","overAllPacketLossRatio","maxPacketLossRatio","determineUplinkNetworkQuality","remoteRtpResults","statsAnalyzerCurrentStats","EventsScope"],"sources":["index.js"],"sourcesContent":["import {cloneDeep} from 'lodash';\n\nimport EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS,\n  DEFAULT_GET_STATS_FILTER, CONNECTION_STATE, STATS, MQA_INTEVAL, NETWORK_TYPE, MEDIA_DEVICES, _UNKNOWN_} from '../constants';\nimport mqaData from '../mediaQualityMetrics/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport defaultStats from './global';\nimport {\n  getAudioSenderMqa,\n  getAudioReceiverMqa,\n  getVideoSenderMqa,\n  getVideoReceiverMqa\n} from './mqaUtil';\n\n\n/**\n  * Meeting High Packet Loss Event\n  * Emitted when ever there is high packet loss detected\n  * @event meeting:highPacketLoss\n  * @type {Object}\n  * @property {String} mediaType Type of media experiencing packet loss\n  * @property {Number} packetLossRatio current packet loss ratio\n  * @memberof StatsAnalyzer\n  */\n\n/**\n * Stats Analyzer class that will emit events based on detected quality\n *\n * @export\n * @class StatsAnalyzer\n * @extends {EventsScope}\n */\nexport default class StatsAnalyzer extends EventsScope {\n  /**\n   * Creates a new instance of StatsAnalyzer\n   * @constructor\n   * @public\n   * @param {Object} config SDK Configuration Object\n   * @param {Object} networkQualityMonitor class for assessing network characteristics (jitter, packetLoss, latency)\n   * @param {Object} statsResults Default properties for stats\n   */\n  constructor(config, networkQualityMonitor = {}, statsResults = defaultStats) {\n    super();\n    this.statsStarted = false;\n    this.statsResults = statsResults;\n    this.lastStatsResults = null;\n    this.config = config;\n    this.networkQualityMonitor = networkQualityMonitor;\n    this.correlationId = config.correlationId;\n    this.mqaSentCount = -1;\n    this.lastMqaDataSent = {\n      resolutions: {video: {send: {}, recv: {}}, audio: {send: {}, recv: {}}, share: {send: {}, recv: {}}},\n      video: {send: {}, recv: {}},\n      audio: {send: {}, recv: {}},\n      share: {send: {}, recv: {}}\n    };\n    this.localMQEStats = {\n      audio: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: []\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: []\n        }\n      },\n      video: {\n        RX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: []\n        },\n        TX: {\n          packetsLost: [],\n          jitter: [],\n          latency: [],\n          bitRate: [],\n          frameRate: [],\n          resolutionWidth: [],\n          resolutionHeight: [],\n          requestedKeyFrame: [],\n          receivedKeyFrame: []\n        }\n      }\n    };\n  }\n\n  populateResults(lastMqa) {\n    // Audio\n\n    this.localMQEStats.audio.RX.packetsLost.push(lastMqa.audioReceive[0].common.mediaHopByHopLost);\n    this.localMQEStats.audio.RX.jitter.push(lastMqa.audioReceive[0].streams[0].common.rtpJitter);\n    this.localMQEStats.audio.RX.latency.push(lastMqa.audioReceive[0].common.roundTripTime);\n    this.localMQEStats.audio.RX.bitRate.push(lastMqa.audioReceive[0].streams[0].common.receivedBitrate);\n\n    this.localMQEStats.audio.TX.packetsLost.push(lastMqa.audioTransmit[0].common.remoteLossRate);\n    this.localMQEStats.audio.TX.jitter.push(lastMqa.audioTransmit[0].common.remoteJitter);\n    this.localMQEStats.audio.TX.latency.push(lastMqa.audioTransmit[0].common.roundTripTime);\n    this.localMQEStats.audio.TX.bitRate.push(lastMqa.audioTransmit[0].streams[0].common.transmittedBitrate);\n\n    // Video\n\n    this.localMQEStats.video.RX.packetsLost.push(lastMqa.videoReceive[0].common.mediaHopByHopLost);\n    this.localMQEStats.video.RX.jitter.push(lastMqa.videoReceive[0].streams[0].common.rtpJitter);\n    this.localMQEStats.video.RX.latency.push(lastMqa.videoReceive[0].streams[0].common.roundTripTime);\n    this.localMQEStats.video.RX.bitRate.push(lastMqa.videoReceive[0].streams[0].common.receivedBitrate);\n    this.localMQEStats.video.RX.frameRate.push(lastMqa.videoReceive[0].streams[0].common.receivedFrameRate);\n    this.localMQEStats.video.RX.resolutionWidth.push(lastMqa.videoReceive[0].streams[0].receivedWidth);\n    this.localMQEStats.video.RX.resolutionHeight.push(lastMqa.videoReceive[0].streams[0].receivedHeight);\n    this.localMQEStats.video.RX.requestedKeyFrame.push();\n    this.localMQEStats.video.RX.receivedKeyFrame.push();\n\n    this.localMQEStats.video.TX.packetsLost.push(lastMqa.videoTransmit[0].common.remoteLossRate);\n    this.localMQEStats.video.TX.jitter.push(lastMqa.videoTransmit[0].common.remoteJitter);\n    this.localMQEStats.video.TX.latency.push(lastMqa.videoTransmit[0].common.roundTripTime);\n    this.localMQEStats.video.TX.bitRate.push(lastMqa.videoTransmit[0].streams[0].common.transmittedBitrate);\n    this.localMQEStats.video.TX.frameRate.push(lastMqa.videoTransmit[0].streams[0].common.transmittedFrameRate);\n    this.localMQEStats.video.TX.resolutionWidth.push(lastMqa.videoTransmit[0].streams[0].transmittedWidth);\n    this.localMQEStats.video.TX.resolutionHeight.push(lastMqa.videoTransmit[0].streams[0].transmittedHeight);\n    this.localMQEStats.video.TX.requestedKeyFrame.push(lastMqa.videoTransmit[0].streams[0].requestedKeyFrames);\n    this.localMQEStats.video.TX.receivedKeyFrame.push();\n  }\n\n\n  resetStatsResults() {\n    this.statsResults.audio.send.meanRemoteJitter = [];\n    this.statsResults.video.send.meanRemoteJitter = [];\n    this.statsResults.share.send.meanRemoteJitter = [];\n\n    this.statsResults.audio.recv.meanRtpJitter = [];\n\n    // TODO: currently no values are present\n    this.statsResults.video.recv.meanRtpJitter = [];\n    this.statsResults.share.recv.meanRtpJitter = [];\n\n    // Reset the roundTripTime\n    this.statsResults.audio.send.meanRoundTripTime = [];\n    this.statsResults.video.send.meanRoundTripTime = [];\n    this.statsResults.share.send.meanRoundTripTime = [];\n  }\n\n  /**\n   * sets mediaStatus status for analyzing metrics\n   *\n   * @public\n   * @param {Object} status for the audio and video\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  updateMediaStatus(status) {\n    this.meetingMediaStatus = status;\n  }\n\n  /**\n   * captures MQA data from peerconnection\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  sendMqaData() {\n    const audioReceiver = mqaData.intervals[0].audioReceive[0];\n    const audioSender = mqaData.intervals[0].audioTransmit[0];\n    const videoReceiver = mqaData.intervals[0].videoReceive[0];\n    const videoSender = mqaData.intervals[0].videoTransmit[0];\n    const shareSender = mqaData.intervals[0].videoTransmit[1];\n    const shareReceiver = mqaData.intervals[0].videoReceive[1];\n\n    getAudioSenderMqa({\n      audioSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getAudioReceiverMqa({\n      audioReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n    getVideoSenderMqa({\n      videoSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent\n    });\n\n    // Capture mqa for share scenario\n\n    getVideoSenderMqa({\n      videoSender: shareSender,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n    getVideoReceiverMqa({\n      videoReceiver: shareReceiver,\n      statsResults: this.statsResults,\n      lastMqaDataSent: this.lastMqaDataSent,\n      isShareStream: true\n    });\n\n    mqaData.intervals[0].intervalMetadata.peerReflexiveIP = this.statsResults.connectionType.local.ipAddress[0];\n\n    // Adding peripheral information\n    mqaData.intervals[0].intervalMetadata.peripherals = [];\n    mqaData.intervals[0].intervalMetadata.peripherals.push({information: _UNKNOWN_, name: MEDIA_DEVICES.SPEAKER});\n    mqaData.intervals[0].intervalMetadata.peripherals.push({information: this.peerConnection?.audioTransceiver?.sender?.track?.label || _UNKNOWN_, name: MEDIA_DEVICES.MICROPHONE});\n    mqaData.intervals[0].intervalMetadata.peripherals.push({information: this.peerConnection?.videoTransceiver?.sender?.track?.label || _UNKNOWN_, name: MEDIA_DEVICES.CAMERA});\n\n\n    mqaData.networkType = this.statsResults.connectionType.local.networkType;\n\n    this.mqaSentCount = this.mqaSentCount + 1;\n\n    mqaData.intervals[0].intervalNumber = this.mqaSentCount;\n\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastMqaDataSent = cloneDeep(this.statsResults);\n\n    this.populateResults(mqaData.intervals[0]);\n\n    this.resetStatsResults();\n\n    this.emit(\n      {\n        file: 'statsAnalyzer',\n        function: 'sendMqaData'\n      },\n      EVENT_TRIGGERS.MEDIA_QUALITY,\n      {\n        data: mqaData.intervals[0],\n        networkType: mqaData.networkType\n      }\n    );\n  }\n\n  /**\n   * updated the peerconnection when changed\n   *\n   * @private\n   * @memberof updatePeerconnection\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  updatePeerconnection(peerConnection) {\n    this.peerConnection = peerConnection;\n  }\n\n  /**\n   * Starts the stats analyzer on interval\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @param {PeerConnection} peerConnection\n   * @returns {void}\n   */\n  startAnalyzer(peerConnection) {\n    if (!this.statsStarted) {\n      this.statsStarted = true;\n      this.peerConnection = peerConnection;\n      this.getStatsAndParse();\n      this.statsInterval = setInterval(() => {\n        this.getStatsAndParse();\n      }, this.config.analyzerInterval);\n      // Trigger initial fetch\n      this.sendMqaData();\n      this.mqaInterval = setInterval(() => {\n        this.sendMqaData();\n      }, MQA_INTEVAL);\n    }\n  }\n\n  /**\n   * Cleans up the analyzer when done\n   *\n   * @public\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  stopAnalyzer() {\n    if (this.statsInterval) {\n      this.getStatsAndParse();\n      clearInterval(this.statsInterval);\n      this.statsInterva = undefined;\n    }\n\n    if (this.mqaInterval) {\n      this.sendMqaData();\n      clearInterval(this.mqaInterval);\n      this.statsInterva = undefined;\n    }\n    this.peerConnection = null;\n  }\n\n  /**\n   * Parse a single result of get stats\n   *\n   * @private\n   * @param {*} getStatsResult\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  parseGetStatsResult(getStatsResult, type, isSender) {\n    if (!getStatsResult) {\n      return;\n    }\n\n    switch (getStatsResult.type) {\n      case 'outbound-rtp':\n        this.processOutboundRTPResult(getStatsResult, type);\n        break;\n      case 'inbound-rtp':\n        this.processInboundRTPResult(getStatsResult, type);\n        break;\n      case 'track':\n        this.processTrackResult(getStatsResult, type);\n        break;\n      case 'remote-inbound-rtp':\n      case 'remote-outbound-rtp':\n        this.compareSentAndReceived(getStatsResult, type, isSender);\n        break;\n      case 'remotecandidate':\n      case 'remote-candidate':\n        this.parseCandidate(getStatsResult, type, isSender, true);\n        break;\n      case 'local-candidate':\n        this.parseCandidate(getStatsResult, type, isSender, false);\n        break;\n      case 'media-source':\n        this.parseAudioSource(getStatsResult, type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Filters the get stats results for types\n   * @private\n   * @param {Array} getStatsResults\n   * @param {String} type\n   * @param {boolean} isSender\n   * @returns {void}\n   */\n  filterAndParseGetStatsResults(getStatsResults, type, isSender) {\n    const {types} = DEFAULT_GET_STATS_FILTER;\n\n    getStatsResults.forEach((result) => {\n      if (types.includes(result.type)) {\n        this.parseGetStatsResult(result, type, isSender);\n      }\n    });\n  }\n\n  /**\n   * parse the audio\n   * @param {String} result\n   * @param {boolean} type\n   * @returns {void}\n   */\n  parseAudioSource(result, type) {\n    if (!result) {\n      return;\n    }\n\n    if (type === STATS.AUDIO_CORRELATE) {\n      this.statsResults[type].send.audioLevel = result.audioLevel;\n      this.statsResults[type].send.totalAudioEnergy = result.totalAudioEnergy;\n    }\n  }\n\n  /**\n   * compares current and previous stats to check if packets are not sent\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  compareLastStatsResult() {\n    if (this.lastStatsResults !== null && this.meetingMediaStatus) {\n      // compare audio stats sent\n      let mediaType = STATS.AUDIO_CORRELATE;\n      let currentStats = null;\n      let previousStats = null;\n\n      if (this.meetingMediaStatus.expected.sendAudio) {\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`);\n        }\n        else {\n          if (currentStats.totalAudioEnergy === previousStats.totalAudioEnergy || currentStats.totalAudioEnergy === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Energy present`);\n          }\n\n          if (currentStats.audioLevel === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} level is 0 for the user`);\n          }\n        }\n\n        if (previousStats.totalPacketsSent === 0 && currentStats.totalPacketsSent > 0) {\n          this.emit(\n            {\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            },\n            EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED,\n            {\n              type: mediaType.AUDIO\n            }\n          );\n        }\n      }\n\n      if (this.meetingMediaStatus.expected.receiveAudio) {\n      // compare audio stats received\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsReceived === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`);\n        }\n        else if (currentStats.totalSamplesReceived === previousStats.totalSamplesReceived ||\n          currentStats.totalSamplesReceived === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} samples received`);\n        }\n      }\n\n      mediaType = STATS.VIDEO_CORRELATE;\n      if (this.meetingMediaStatus.expected.sendVideo) {\n      // compare video stats sent\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`);\n        }\n        else {\n          if (currentStats.framesEncoded === previousStats.framesEncoded || currentStats.framesEncoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Frames Encoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].send.framesSent === this.lastStatsResults.resolutions[mediaType].send.framesSent || this.statsResults.resolutions[mediaType].send.framesSent === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} Frames sent`);\n          }\n        }\n\n        if (previousStats.framesSent === 0 && currentStats.framesSent > 0) {\n          this.emit(\n            {\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            },\n            EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED,\n            {\n              type: mediaType.VIDEO\n            }\n          );\n        }\n      }\n\n\n      if (this.meetingMediaStatus.expected.receiveVideo) {\n      // compare video stats reveived\n\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsReceived === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`);\n        }\n        else {\n          if (this.statsResults.resolutions[mediaType].recv.framesReceived === this.lastStatsResults.resolutions[mediaType].recv.framesReceived || this.statsResults.resolutions[mediaType].recv.framesReceived === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames received`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDecoded === this.lastStatsResults.resolutions[mediaType].recv.framesDecoded || this.statsResults.resolutions[mediaType].send.framesDecoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames decoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDropped - this.lastStatsResults.resolutions[mediaType].recv.framesDropped > 10) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} frames are getting dropped`);\n          }\n        }\n      }\n\n      mediaType = STATS.SHARE_CORRELATE;\n      if (this.meetingMediaStatus.expected.sendShare) {\n      // compare share stats sent\n\n        currentStats = this.statsResults[mediaType].send;\n        previousStats = this.lastStatsResults[mediaType].send;\n\n        if (currentStats.totalPacketsSent === previousStats.totalPacketsSent || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets sent`);\n        }\n        else {\n          if (currentStats.framesEncoded === previousStats.framesEncoded || currentStats.framesEncoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames getting encoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].send.framesSent === this.lastStatsResults.resolutions[mediaType].send.framesSent || this.statsResults.resolutions[mediaType].send.framesSent === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames sent`);\n          }\n        }\n\n        if (previousStats.framesSent === 0 && currentStats.framesSent > 0) {\n          this.emit(\n            {\n              file: 'statsAnalyzer/index',\n              function: 'compareLastStatsResult'\n            },\n            EVENT_TRIGGERS.MEETING_MEDIA_LOCAL_STARTED,\n            {\n              type: mediaType.VIDEO\n            }\n          );\n        }\n\n        // TODO:need to check receive share value\n        // compare share stats reveived\n        currentStats = this.statsResults[mediaType].recv;\n        previousStats = this.lastStatsResults[mediaType].recv;\n\n        if (currentStats.totalPacketsReceived === previousStats.totalPacketsReceived || currentStats.totalPacketsSent === 0) {\n          LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} RTP packets received`);\n        }\n        else {\n          if (this.statsResults.resolutions[mediaType].recv.framesReceived === this.lastStatsResults.resolutions[mediaType].recv.framesReceived || this.statsResults.resolutions[mediaType].recv.framesReceived === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames received`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDecoded === this.lastStatsResults.resolutions[mediaType].recv.framesDecoded || this.statsResults.resolutions[mediaType].send.framesDecoded === 0) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> No ${mediaType} frames decoded`);\n          }\n\n          if (this.statsResults.resolutions[mediaType].recv.framesDropped - this.lastStatsResults.resolutions[mediaType].recv.framesDropped > 10) {\n            LoggerProxy.logger.info(`StatsAnalyzer:index#compareLastStatsResult --> ${mediaType} frames are getting dropped`);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Does a `getStats` on all the transceivers and parses the results\n   *\n   * @private\n   * @memberof StatsAnalyzer\n   * @returns {void}\n   */\n  getStatsAndParse() {\n    if (!this.peerConnection) {\n      return;\n    }\n\n    if (this.peerConnection && this.peerConnection.connectionState === CONNECTION_STATE.FAILED) {\n      LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> PeerConnection is in failed state');\n\n      return;\n    }\n\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Collecting Stats');\n    this.peerConnection.videoTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, true);\n    });\n\n    this.peerConnection.videoTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE, false);\n    });\n\n    this.peerConnection.audioTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, true);\n    });\n\n    this.peerConnection.audioTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE, false);\n    });\n\n    // TODO: add checks for screen share\n    this.peerConnection.shareTransceiver.sender.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, true);\n    });\n\n    this.peerConnection.shareTransceiver.receiver.getStats().then((res) => {\n      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE, false);\n    });\n\n    // updates the current direction of media\n    this.statsResults[STATS.AUDIO_CORRELATE].direction = this.peerConnection.audioTransceiver.currentDirection;\n    this.statsResults[STATS.VIDEO_CORRELATE].direction = this.peerConnection.videoTransceiver.currentDirection;\n    this.statsResults[STATS.SHARE_CORRELATE].direction = this.peerConnection.shareTransceiver.currentDirection;\n\n    // Process Stats results every 5 seconds\n    this.compareLastStatsResult();\n\n    // Save the last results to compare with the current\n    // DO Deep copy, for some reason it takes the reference all the time rather then old value set\n    this.lastStatsResults = JSON.parse(JSON.stringify(this.statsResults));\n\n    LoggerProxy.logger.trace('StatsAnalyzer:index#getStatsAndParse --> Finished Collecting Stats');\n  }\n\n  /**\n   * Processes OutboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processOutboundRTPResult(result, type) {\n    const mediaType = type || STATS.AUDIO_CORRELATE;\n    const sendrecvType = STATS.SEND_DIRECTION;\n\n    if (result.bytesSent) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      }\n      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {\n        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;\n      }\n\n      const bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;\n\n      kilobytes = bytes / 1024;\n\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesSent = kilobytes;\n\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;\n      this.statsResults.internal[mediaType].outboundRtpId = result.id;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;\n      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;\n\n      // Data saved to send MQA metrics\n\n      this.statsResults[mediaType][sendrecvType].totalKeyFramesEncoded = result.keyFramesEncoded;\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;\n      this.statsResults[mediaType][sendrecvType].totalFirCount = result.firCount;\n      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded;\n      this.statsResults[mediaType][sendrecvType].encoderImplementation = result.encoderImplementation;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationReason = result.qualityLimitationReason;\n      this.statsResults[mediaType][sendrecvType].qualityLimitationResolutionChanges = result.qualityLimitationResolutionChanges;\n      this.statsResults[mediaType][sendrecvType].retransmittedPacketsSent = result.retransmittedPacketsSent;\n      this.statsResults[mediaType][sendrecvType].totalBytesSent = result.bytesSent;\n      this.statsResults[mediaType][sendrecvType].headerBytesSent = result.headerBytesSent;\n      this.statsResults[mediaType][sendrecvType].retransmittedBytesSent = result.retransmittedBytesSent;\n    }\n  }\n\n\n  /**\n   * Processes InboundRTP stats result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   */\n  processInboundRTPResult(result, type) {\n    const mediaType = type || STATS.AUDIO_CORRELATE;\n    const sendrecvType = STATS.RECEIVE_DIRECTION;\n\n    if (result.bytesReceived) {\n      let kilobytes = 0;\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {\n        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {\n        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived) {\n        this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n      }\n\n      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {\n        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n      }\n\n      const bytes = result.bytesReceived - (this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived);\n\n      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;\n\n      kilobytes = bytes / 1024;\n      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);\n      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);\n\n      this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;\n      this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketsLost < 0) {\n        this.statsResults[mediaType][sendrecvType].currentPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived;\n      this.statsResults.internal[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n      if (this.statsResults[mediaType][sendrecvType].packetsReceived === 0) {\n        LoggerProxy.logger.info(`StatsAnalyzer:index#processInboundRTPResult --> No packets received for ${mediaType} `, this.statsResults[mediaType][sendrecvType].packetsReceived);\n      }\n\n      //  Check the over all packet Lost ratio\n      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost > 0 ? this.statsResults[mediaType][sendrecvType].currentPacketsLost / (this.statsResults[mediaType][sendrecvType].packetsReceived + this.statsResults[mediaType][sendrecvType].currentPacketsLost) : 0;\n      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {\n        LoggerProxy.logger.info('StatsAnalyzer:index#processInboundRTPResult --> Packets getting lost from the receiver ', this.statsResults[mediaType][sendrecvType].currentPacketLossRatio);\n      }\n\n      // TODO: check the packet loss value is negative values here\n\n      if (result.packetsLost) {\n        this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost > 0 ? result.packetsLost : -result.packetsLost;\n      }\n      else {\n        this.statsResults[mediaType][sendrecvType].totalPacketsLost = 0;\n      }\n\n      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;\n\n      // From Thin\n      this.statsResults[mediaType][sendrecvType].totalNackCount = result.nackCount;\n      this.statsResults[mediaType][sendrecvType].totalPliCount = result.pliCount;\n      this.statsResults[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults[mediaType][sendrecvType].keyFramesDecoded = result.keyFramesDecoded;\n\n      this.statsResults[mediaType][sendrecvType].decoderImplementation = result.decoderImplementation;\n      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;\n\n\n      this.statsResults[mediaType][sendrecvType].fecPacketsDiscarded = result.fecPacketsDiscarded;\n      this.statsResults[mediaType][sendrecvType].fecPacketsReceived = result.fecPacketsReceived;\n      this.statsResults[mediaType][sendrecvType].totalBytesReceived = result.bytesReceived;\n      this.statsResults[mediaType][sendrecvType].headerBytesReceived = result.headerBytesReceived;\n\n      this.statsResults[mediaType][sendrecvType].meanRtpJitter.push(result.jitter);\n\n      // Audio stats\n\n      this.statsResults[mediaType][sendrecvType].audioLevel = result.audioLevel;\n      this.statsResults[mediaType][sendrecvType].totalAudioEnergy = result.totalAudioEnergy;\n      this.statsResults[mediaType][sendrecvType].totalSamplesReceived = result.totalSamplesReceived || 0;\n      this.statsResults[mediaType][sendrecvType].totalSamplesDecoded = result.totalSamplesDecoded || 0;\n      this.statsResults[mediaType][sendrecvType].concealedSamples = result.concealedSamples || 0;\n    }\n  }\n\n  /**\n   * Processes remote and local candidate result and stores\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @param {boolean} isSender\n   * @param {boolean} isRemote\n   *\n   * @returns {void}\n   */\n  parseCandidate = (result, type, isSender, isRemote) => {\n    if (!result || !result.id) {\n      return;\n    }\n    const RemoteCandidateType = {};\n    const RemoteTransport = {};\n    const RemoteIpAddress = {};\n    const RemoteNetworkType = {};\n\n    if (!result.id) return;\n\n    const sendRecvType = isSender ? STATS.SEND_DIRECTION : STATS.RECEIVE_DIRECTION;\n    const ipType = isRemote ? STATS.REMOTE : STATS.LOCAL;\n\n    if (!RemoteCandidateType[result.id]) {\n      RemoteCandidateType[result.id] = [];\n    }\n\n    if (!RemoteTransport[result.id]) {\n      RemoteTransport[result.id] = [];\n    }\n\n    if (!RemoteIpAddress[result.id]) {\n      RemoteIpAddress[result.id] = [];\n    }\n    if (!RemoteNetworkType[result.id]) {\n      RemoteNetworkType[result.id] = [];\n    }\n\n    if (result.candidateType && RemoteCandidateType[result.id].indexOf(result.candidateType) === -1) {\n      RemoteCandidateType[result.id].push(result.candidateType);\n    }\n\n    if (result.protocol && RemoteTransport[result.id].indexOf(result.protocol) === -1) {\n      RemoteTransport[result.id].push(result.protocol.toUpperCase());\n    }\n\n    if (result.ip && RemoteIpAddress[result.id].indexOf(`${result.ip}:${result.portNumber}`) === -1) {\n      RemoteIpAddress[result.id].push(`${result.ip}`); // TODO: Add ports\n    }\n\n    if (result.networkType && RemoteNetworkType[result.id].indexOf(result.networkType) === -1) {\n      RemoteNetworkType[result.id].push(result.networkType);\n    }\n\n    this.statsResults.internal.candidates[result.id] = {\n      candidateType: RemoteCandidateType[result.id],\n      ipAddress: RemoteIpAddress[result.id],\n      portNumber: result.port,\n      networkType: RemoteNetworkType[result.id],\n      priority: result.priority,\n      transport: RemoteTransport[result.id],\n      timestamp: result.time,\n      id: result.id,\n      type: result.type\n    };\n\n    this.statsResults.connectionType[ipType].candidateType = RemoteCandidateType[result.id];\n    this.statsResults.connectionType[ipType].ipAddress = RemoteIpAddress[result.id];\n\n    this.statsResults.connectionType[ipType].networkType = RemoteNetworkType[result.id][0] === NETWORK_TYPE.VPN ? NETWORK_TYPE.UNKNOWN : RemoteNetworkType[result.id][0];\n    this.statsResults.connectionType[ipType].transport = RemoteTransport[result.id];\n\n    this.statsResults[type][sendRecvType].totalRoundTripTime = result.totalRoundTripTime;\n  };\n\n  /**\n   * Process Track results\n   *\n   * @private\n   * @param {*} result\n   * @param {*} mediaType\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  processTrackResult(result, mediaType) {\n    if (!result || result.type !== 'track') {\n      return;\n    }\n    if (result.type !== 'track') return;\n\n    const sendrecvType = result.remoteSource === true ? STATS.RECEIVE_DIRECTION : STATS.SEND_DIRECTION;\n\n    if (result.frameWidth && result.frameHeight) {\n      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;\n      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;\n      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;\n    }\n\n    if (sendrecvType === STATS.RECEIVE_DIRECTION) {\n      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;\n      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;\n    }\n\n\n    if (result.trackIdentifier && mediaType !== STATS.AUDIO_CORRELATE) {\n      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;\n\n      const jitterBufferDelay = result && result.jitterBufferDelay;\n      const jitterBufferEmittedCount = result && result.jitterBufferEmittedCount;\n\n      this.statsResults.resolutions[mediaType][sendrecvType].avgJitterDelay = jitterBufferEmittedCount && (+jitterBufferDelay / +jitterBufferEmittedCount);\n\n      // Used to calculate the jitter\n      this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferDelay = result.jitterBufferDelay;\n      this.statsResults.resolutions[mediaType][sendrecvType].jitterBufferEmittedCount = result.jitterBufferEmittedCount;\n    }\n  }\n\n  /**\n   *\n   * @private\n   * @param {*} result\n   * @param {*} type\n   * @returns {void}\n   * @memberof StatsAnalyzer\n   */\n  compareSentAndReceived(result, type) {\n    if (!type) {\n      return;\n    }\n\n    const mediaType = type;\n\n    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) { this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost; }\n\n    const currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;\n\n    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;\n    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;\n\n    this.statsResults[mediaType].send.meanRemoteJitter.push(result.jitter);\n    this.statsResults[mediaType].send.meanRoundTripTime.push(result.roundTripTime);\n\n    this.statsResults[mediaType].send.timestamp = result.timestamp;\n    this.statsResults[mediaType].send.ssrc = result.ssrc;\n    this.statsResults[mediaType].send.reportsReceived = result.reportsReceived;\n\n    // Total packloss ratio on this video section of the call\n    this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver / this.statsResults[mediaType].send.totalPacketsSent : 0;\n    this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / (this.statsResults[mediaType].send.packetsSent + this.statsResults[mediaType].send.packetsLostOnReceiver) : 0;\n\n    if (this.statsResults[mediaType].send.maxPacketLossRatio < this.statsResults[mediaType].send.currentPacketLossRatio) {\n      this.statsResults[mediaType].send.maxPacketLossRatio = this.statsResults[mediaType].send.currentPacketLossRatio;\n    }\n\n    if (result.type === 'remote-inbound-rtp') {\n      this.networkQualityMonitor.determineUplinkNetworkQuality({\n        mediaType,\n        remoteRtpResults: result,\n        statsAnalyzerCurrentStats: this.statsResults\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
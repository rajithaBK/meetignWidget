{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor2 = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _apply = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/apply\"));\n\nvar _now = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _getOwnPropertyDescriptor = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _applyDecoratedDescriptor2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/applyDecoratedDescriptor\"));\n\nvar _common = require(\"@webex/common\");\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _commonTimers = require(\"@webex/common-timers\");\n\nvar _constants = require(\"./constants\");\n\nvar _featuresModel = _interopRequireDefault(require(\"./features/features-model\"));\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _obj;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor2(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor2(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Determine if the plugin should be initialized based on cached storage.\n *\n * @returns {boolean} - If the device is ephemeral.\n */\n\n\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nvar Device = _webexCore.WebexPlugin.extend((_dec = (0, _webexCore.waitForValue)('@'), _dec2 = (0, _webexCore.waitForValue)('@'), _dec3 = (0, _webexCore.waitForValue)('@'), _dec4 = (0, _common.deprecated)('device#markUrlFailedAndGetNew(): Use services#markFailedUrl()'), _dec5 = (0, _webexCore.persist)('@', decider), (_obj = {\n  // Ampersand property members.\n  namespace: 'Device',\n  // Allow for extra properties to prevent the plugin from failing due to\n  // **WDM** service DTO changes.\n  extraProperties: 'allow',\n  idAttribute: 'url',\n  children: {\n    /**\n     * The class object that contains all of the feature collections.\n     *\n     * @type {FeaturesModel}\n     */\n    features: _featuresModel.default\n  },\n\n  /**\n   * A collection of device properties mostly assigned by the retrieved DTO from\n   * the **WDM** service that are mapped against the ampersand properties.\n   *\n   * @type {Object}\n   */\n  props: {\n    /**\n     * This property determines whether or not giphy support is enabled.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    clientMessagingGiphy: 'string',\n\n    /**\n     * This property should store the company name.\n     *\n     * @type {string}\n     */\n    customerCompanyName: 'string',\n\n    /**\n     * This property should store the logo url.\n     *\n     * @type {string}\n     */\n    customerLogoUrl: 'string',\n\n    /**\n     * This property doesn't have any real values, but is sent during device\n     * refresh to prevent the **wdm** service from falling back to an iOS device\n     * type.\n     *\n     * @type {string}\n     */\n    deviceType: 'string',\n\n    /**\n     * This property should store the help url.\n     *\n     * @type {string}\n     */\n    helpUrl: 'string',\n\n    /**\n     * This property should store the intranet inactivity timer duration.\n     *\n     * @type {number}\n     */\n    intranetInactivityDuration: 'number',\n\n    /**\n     * This property stores the url required to validate if the device is able\n     * to actively reach the intranet network.\n     *\n     * @type {string}\n     */\n    intranetInactivityCheckUrl: 'string',\n\n    /**\n     * This property stores the inactivity timer duration, and could possibly\n     * deprecate the `intranetInactivityDuration` property.\n     *\n     * @type {number}\n     */\n    inNetworkInactivityDuration: 'number',\n\n    /**\n     * This property stores the ECM (external content management) enabled value\n     * for the whole organization.\n     *\n     * @type {boolean}\n     */\n    ecmEnabledForAllUsers: ['boolean', false, false],\n\n    /**\n     * This property stores an array of ECM (external content management)\n     * providers that are currently available.\n     *\n     * @returns {Array<string>}\n     */\n    ecmSupportedStorageProviders: ['array', false, function () {\n      return [];\n    }],\n\n    /**\n     * This property stores the modification time value retrieved from the\n     * **WDM** endpoint formatted as ISO 8601.\n     *\n     * @type {string}\n     */\n    modificationTime: 'string',\n\n    /**\n     * This property stores the navigation bar color.\n     *\n     * @type {string}\n     */\n    navigationBarColor: 'string',\n\n    /**\n     * This property stores the partner company's name when available.\n     *\n     * @type {string}\n     */\n    partnerCompanyName: 'string',\n\n    /**\n     * This property stores the partner company's logo when available.\n     *\n     * @type {string}\n     */\n    partnerLogoUrl: 'string',\n\n    /**\n     * This property stores the availability of people data from the **WDM**\n     * service.\n     *\n     * @type {boolean}\n     */\n    peopleInsightsEnabled: 'boolean',\n\n    /**\n     * This property stores the reporting site's description when available.\n     *\n     * @type {string}\n     */\n    reportingSiteDesc: 'string',\n\n    /**\n     * This property stores the reporting site's access url when available.\n     *\n     * @type {string}\n     */\n    reportingSiteUrl: 'string',\n\n    /**\n     * This property stores the encryption key url when available.\n     *\n     * @type {string}\n     */\n    searchEncryptionKeyUrl: 'string',\n\n    /**\n     * This property stores the availability of support-provided text from the\n     * **WDM** service.\n     *\n     * @type {boolean}\n     */\n    showSupportText: 'boolean',\n\n    /**\n     * This property stores the support provider's company name when available.\n     *\n     * @type {string}\n     */\n    supportProviderCompanyName: 'string',\n\n    /**\n     * This property stores the support provider's logo url when available.\n     *\n     * @type {string}\n     */\n    supportProviderLogoUrl: 'string',\n\n    /**\n     * This property stores the device's url retrieved from a registration\n     * request. This property gets set via the initial registration process by a\n     * `this.set()` method.\n     *\n     * @type {string}\n     */\n    url: 'string',\n\n    /**\n     * This property stores the device's userId uuid value, which can also be\n     * derived from the device's registerd user's userId retrieved from\n     * the **Hydra** service.\n     *\n     * @type {string}\n     */\n    userId: 'string',\n\n    /**\n     * This property stores whether or not file sharing is enabled\n     *\n     * @type {'BLOCK_BOTH' | 'BLOCK_UPLOAD'}\n     */\n    webFileShareControl: 'string',\n\n    /**\n     * This property stores the current web socket url used by the registered\n     * device.\n     *\n     * @type {string}\n     */\n    webSocketUrl: 'string',\n\n    /**\n     * This property stores the value indicating whether or not white board file\n     * sharing is enabled for the current device.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    whiteboardFileShareControl: 'string'\n  },\n\n  /**\n   * A list of derived properties that populate based when their parent data\n   * available via the device's properties.\n   *\n   * @type {Object}\n   */\n  derived: {\n    /**\n     * This property determines if the current device is registered.\n     *\n     * @type {boolean}\n     */\n    registered: {\n      deps: ['url'],\n\n      /**\n       * Checks if the device is registered by validating that the url exists.\n       * Amperstand does not allow this to method to be written as an arrow\n       * function.\n       *\n       * @returns {boolean}\n       */\n      fn: function fn() {\n        return !!this.url;\n      }\n    }\n  },\n\n  /**\n   * Stores timer data as well as other state details.\n   *\n   * @type {Object}\n   */\n  session: {\n    /**\n     * This property stores the logout timer object\n     *\n     * @type {any}\n     */\n    logoutTimer: 'any',\n\n    /**\n     * This property stores the date for the last activity the user made\n     * with the current device.\n     *\n     * @type {number}\n     */\n    lastUserActivityDate: 'number',\n\n    /**\n     * This property stores whether or not the reachability check has been\n     * performed to prevent the reachability check from performing its\n     * operation more than once after a successful check.\n     *\n     * @returns {boolean}\n     */\n    isReachabilityChecked: ['boolean', false, false],\n\n    /**\n     * This property stores whether or not the current device is in a meeting\n     * to prevent an unneeded timeout of a meeting due to inactivity.\n     *\n     * @type {boolean}\n     */\n    isInMeeting: 'boolean',\n\n    /**\n     * This property identifies if the device is currently in network to prevent\n     * the `resetLogoutTimer()` method from being called repeatedly once its\n     * known client is connected to the organization's internal network.\n     *\n     * @type {boolean}\n     */\n    isInNetwork: 'boolean'\n  },\n  // Event method members.\n\n  /**\n   * Trigger meeting started event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingStarted: function meetingStarted() {\n    this.webex.trigger('meeting started');\n  },\n\n  /**\n   * Trigger meeting ended event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingEnded: function meetingEnded() {\n    this.webex.trigger('meeting ended');\n  },\n  refresh: function refresh() {\n    var _this = this;\n\n    this.logger.info('device: refreshing'); // Validate that the device can be registered.\n\n    return this.canRegister().then(function () {\n      // Validate if the device is not registered and register instead.\n      if (!_this.registered) {\n        _this.logger.info('device: device not registered, registering');\n\n        return _this.register();\n      } // Merge body configurations, overriding defaults.\n\n\n      var body = _objectSpread(_objectSpread({}, _this.serialize()), _this.config.body ? _this.config.body : {}); // Remove unneeded properties from the body object.\n\n\n      delete body.features;\n      delete body.mediaCluster; // Append a ttl value if the device is marked as ephemeral.\n\n      if (_this.config.ephemeral) {\n        body.ttl = _this.config.ephemeralDeviceTTL;\n      } // Merge header configurations, overriding defaults.\n\n\n      var headers = _objectSpread(_objectSpread({}, _this.config.defaults.headers ? _this.config.defaults.headers : {}), _this.config.headers ? _this.config.headers : {});\n\n      return _this.request({\n        method: 'PUT',\n        uri: _this.url,\n        body: body,\n        headers: headers\n      }).then(function (response) {\n        return _this.processRegistrationSuccess(response);\n      }).catch(function (reason) {\n        // Handle a 404 error, which indicates that the device is no longer\n        // valid and needs to be registered as a new device.\n        if (reason.statusCode === 404) {\n          _this.logger.info('device: refresh failed, device is not valid');\n\n          _this.logger.info('device: attempting to register a new device');\n\n          _this.clear();\n\n          return _this.register();\n        }\n\n        return _promise.default.reject(reason);\n      });\n    });\n  },\n  register: function register() {\n    var _this2 = this;\n\n    this.logger.info('device: registering'); // Validate that the device can be registered.\n\n    return this.canRegister().then(function () {\n      // Validate if the device is already registered and refresh instead.\n      if (_this2.registered) {\n        _this2.logger.info('device: device already registered, refreshing');\n\n        return _this2.refresh();\n      } // Merge body configurations, overriding defaults.\n\n\n      var body = _objectSpread(_objectSpread({}, _this2.config.defaults.body ? _this2.config.defaults.body : {}), _this2.config.body ? _this2.config.body : {}); // Merge header configurations, overriding defaults.\n\n\n      var headers = _objectSpread(_objectSpread({}, _this2.config.defaults.headers ? _this2.config.defaults.headers : {}), _this2.config.headers ? _this2.config.headers : {}); // Append a ttl value if the device is marked as ephemeral\n\n\n      if (_this2.config.ephemeral) {\n        body.ttl = _this2.config.ephemeralDeviceTTL;\n      } // This will be replaced by a `create()` method.\n\n\n      return _this2.request({\n        method: 'POST',\n        service: 'wdm',\n        resource: 'devices',\n        body: body,\n        headers: headers\n      }).then(function (response) {\n        return _this2.processRegistrationSuccess(response);\n      });\n    });\n  },\n  unregister: function unregister() {\n    var _this3 = this;\n\n    this.logger.info('device: unregistering');\n\n    if (!this.registered) {\n      this.logger.warn('device: not registered');\n      return _promise.default.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    }).then(function () {\n      return _this3.clear();\n    });\n  },\n\n  /* eslint-enable require-jsdoc */\n  // Helper method members\n\n  /**\n   * Determine if registration methods can be performed. This method utilizes\n   * the `services` plugin to confirm if the appropriate service urls are\n   * available for device registration.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  canRegister: function canRegister() {\n    this.logger.info('device: validating if registration can occur'); // Destructure the services plugin for ease of reference.\n\n    var services = this.webex.internal.services; // Wait for the postauth catalog to populate.\n\n    return services.waitForCatalog('postauth', this.config.canRegisterWaitDuration).then(function () {\n      return (// Validate that the service exists after waiting for the catalog.\n        services.get('wdm') ? _promise.default.resolve() : _promise.default.reject(new Error(['device: cannot register,', '\\'wdm\\' service is not available from the postauth catalog'].join(' ')))\n      );\n    });\n  },\n\n  /**\n   * Check if the device can currently reach the inactivity check url.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  checkNetworkReachability: function checkNetworkReachability() {\n    var _this4 = this;\n\n    this.logger.info('device: checking network reachability'); // Validate if the device has been checked and reset the logout timer.\n\n    if (this.isReachabilityChecked) {\n      return _promise.default.resolve(this.resetLogoutTimer());\n    }\n\n    this.isReachabilityChecked = true; // Validate if the device has a intranet checking url.\n\n    if (!this.intranetInactivityCheckUrl) {\n      this.isInNetwork = false;\n      return _promise.default.resolve(this.resetLogoutTimer());\n    } // Clear unnecessary headers for reachability request.\n\n\n    var headers = {\n      'cisco-no-http-redirect': null,\n      'spark-user-agent': null,\n      trackingid: null\n    }; // Send the network reachability request.\n\n    return this.request({\n      headers: headers,\n      method: 'GET',\n      uri: this.intranetInactivityCheckUrl\n    }).then(function () {\n      _this4.isInNetwork = true;\n      return _promise.default.resolve(_this4.resetLogoutTimer());\n    }).catch(function () {\n      _this4.logger.info('device: did not reach ping endpoint');\n\n      _this4.logger.info('device: triggering off-network timer');\n\n      _this4.isInNetwork = false;\n      return _promise.default.resolve(_this4.resetLogoutTimer());\n    });\n  },\n\n  /**\n   * Clears the registration ttl value if available.\n   *\n   * @param {Object} options - Values to be cleared.\n   * @returns {void}\n   */\n  clear: function clear() {\n    this.logger.info('device: clearing registered device'); // Prototype the extended class in order to preserve the parent member.\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply.default)(_webexCore.WebexPlugin.prototype.clear, this, args);\n  },\n\n  /**\n   * Get the current websocket url with the appropriate priority host.\n   *\n   * @param {boolean} [wait=false] - Willing to wait on a valid url.\n   * @returns {Promise<string, Error>} - The priority-mapped web socket url.\n   */\n  getWebSocketUrl: function getWebSocketUrl() {\n    var _this5 = this;\n\n    var wait = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.logger.info('device: getting the current websocket url'); // Destructure the services plugin for ease of reference.\n\n    var services = this.webex.internal.services; // Validate if the method should wait for registration.\n\n    if (wait) {\n      return this.waitForRegistration().then(function () {\n        return services.convertUrlToPriorityHostUrl(_this5.webSocketUrl);\n      }).catch(function (error) {\n        _this5.logger.warn(error.message);\n\n        return _promise.default.reject(new Error('device: failed to get the current websocket url'));\n      });\n    } // Validate if the device is registered.\n\n\n    if (!this.registered) {\n      return _promise.default.reject(new Error('device: cannot get websocket url, device is not registered'));\n    } // Attempt to collect the priority-host-mapped web socket URL.\n\n\n    var wsUrl = services.convertUrlToPriorityHostUrl(this.webSocketUrl); // Validate that the url was collected.\n\n    if (wsUrl) {\n      return _promise.default.resolve(wsUrl);\n    }\n\n    return _promise.default.reject(new Error('device: failed to get the current websocket url'));\n  },\n\n  /**\n   * Process a successful device registration.\n   *\n   * @param {Object} response - response object from registration success.\n   * @returns {void}\n   */\n  processRegistrationSuccess: function processRegistrationSuccess(response) {\n    var _this6 = this;\n\n    this.logger.info('device: received registration payload'); // Clone the response body for service cleaning.\n\n    var body = _objectSpread({}, response.body); // Clean service data.\n\n\n    delete body.services;\n    delete body.serviceHostMap; // Assign the recieved DTO from **WDM** to this device.\n\n    this.set(body); // Validate if device is ephemeral and setup refresh timer.\n\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueuing device refresh');\n      var delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n      this.refreshTimer = (0, _commonTimers.safeSetTimeout)(function () {\n        return _this6.refresh();\n      }, delay);\n    } // Emit the registration:success event.\n\n\n    this.trigger(_constants.DEVICE_EVENT_REGISTRATION_SUCCESS, this);\n  },\n\n  /**\n   * Reset the current local logout timer for the registered device if\n   * registered.\n   *\n   * @returns {void}\n   */\n  resetLogoutTimer: function resetLogoutTimer() {\n    this.logger.info('device: resetting logout timer'); // Clear current logout timer.\n\n    clearTimeout(this.logoutTimer); // Remove last activity date event listener.\n\n    this.off('change:lastUserActivityDate'); // Remove the logout timer.\n\n    this.unset('logoutTimer'); // Validate if the device is currently in a meeting and is configured to\n    // required inactivity enforcement.\n\n    if (!this.isInMeeting && this.config.enableInactivityEnforcement && this.isReachabilityChecked) {\n      if (this.isInNetwork) {\n        this.setLogoutTimer(this.inNetworkInactivityDuration);\n      } else {\n        this.setLogoutTimer(this.intranetInactivityDuration);\n      }\n    }\n  },\n\n  /**\n   * Set the value of the logout timer for the current registered device.\n   *\n   * @param {number} duration - Value in seconds of the new logout timer.\n   * @returns {void}\n   */\n  setLogoutTimer: function setLogoutTimer(duration) {\n    var _this7 = this;\n\n    this.logger.info('device: setting logout timer');\n\n    if (!duration || duration <= 0) {\n      return;\n    } // Setup user activity date event listener.\n\n\n    this.on('change:lastUserActivityDate', function () {\n      _this7.resetLogoutTimer();\n    }); // Initialize a new timer.\n\n    this.logoutTimer = (0, _commonTimers.safeSetTimeout)(function () {\n      _this7.webex.logout();\n    }, duration * 1000);\n  },\n\n  /**\n   * Wait for the device to be registered.\n   *\n   * @param {number} [timeout=10] - The maximum duration to wait, in seconds.\n   * @returns {Promise<void, Error>}\n   */\n  waitForRegistration: function waitForRegistration() {\n    var _this8 = this;\n\n    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    this.logger.info('device: waiting for registration');\n    return new _promise.default(function (resolve, reject) {\n      if (_this8.registered) {\n        resolve();\n      }\n\n      var timeoutTimer = (0, _commonTimers.safeSetTimeout)(function () {\n        return reject(new Error('device: timeout occured while waiting for registration'));\n      }, timeout * 1000);\n\n      _this8.once(_constants.DEVICE_EVENT_REGISTRATION_SUCCESS, function () {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  },\n  markUrlFailedAndGetNew: function markUrlFailedAndGetNew(url) {\n    return _promise.default.resolve(this.webex.internal.services.markFailedUrl(url));\n  },\n  initialize: function initialize() {\n    var _this9 = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    } // Prototype the extended class in order to preserve the parent member.\n\n\n    (0, _apply.default)(_webexCore.WebexPlugin.prototype.initialize, this, args); // Initialize feature events and listeners.\n\n    _constants.FEATURE_COLLECTION_NAMES.forEach(function (collectionName) {\n      _this9.features.on(\"change:\".concat(collectionName), function (model, value, options) {\n        _this9.trigger('change', _this9, options);\n\n        _this9.trigger('change:features', _this9, _this9.features, options);\n      });\n    }); // Initialize network reachability checking event for url change.\n\n\n    this.on('change:intranetInactivityCheckUrl', function () {\n      _this9.checkNetworkReachability();\n    }); // Initialize network reachability checking event for duration change.\n\n    this.on('change:intranetInactivityDuration', function () {\n      _this9.checkNetworkReachability();\n    }); // Initialize network reachability checking event for duration change.\n\n    this.on('change:inNetworkInactivityDuration', function () {\n      _this9.checkNetworkReachability();\n    }); // Initialize listener for activity checking.\n\n    this.listenTo(this.webex, 'user-activity', function () {\n      _this9.lastUserActivityDate = (0, _now.default)();\n    }); // Initialize listener for meeting started event.\n\n    this.listenTo(this.webex, 'meeting started', function () {\n      _this9.isInMeeting = true;\n\n      _this9.resetLogoutTimer();\n    }); // Initialize listener for meeting ended event.\n\n    this.listenTo(this.webex, 'meeting ended', function () {\n      _this9.isInMeeting = false;\n\n      _this9.resetLogoutTimer();\n    });\n  }\n  /* eslint-enable require-jsdoc */\n  ,\n  version: \"1.154.2\"\n}, ((0, _applyDecoratedDescriptor2.default)(_obj, \"refresh\", [_common.oneFlight, _dec], (0, _getOwnPropertyDescriptor.default)(_obj, \"refresh\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"register\", [_common.oneFlight, _dec2], (0, _getOwnPropertyDescriptor.default)(_obj, \"register\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"unregister\", [_common.oneFlight, _dec3], (0, _getOwnPropertyDescriptor.default)(_obj, \"unregister\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"markUrlFailedAndGetNew\", [_dec4], (0, _getOwnPropertyDescriptor.default)(_obj, \"markUrlFailedAndGetNew\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"initialize\", [_dec5], (0, _getOwnPropertyDescriptor.default)(_obj, \"initialize\"), _obj)), _obj)));\n\nvar _default = Device;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASA,OAAT,GAAmB;AACjB,SAAO,CAAC,KAAKC,MAAL,CAAYC,SAApB;AACD;;AAED,IAAMC,MAAM,GAAGC,uBAAYC,MAAZD,SA2UZ,6BAAa,GAAb,CA3UY,UA8YZ,6BAAa,GAAb,CA9YY,UAicZ,6BAAa,GAAb,CAjcY,UAotBZ,wBAAW,+DAAX,CAptBY,UAmuBZ,wBAAQ,GAAR,EAAaJ,OAAb,CAnuBY,UAAmB;AAEhC;AAEAM,WAAS,EAAE,QAJqB;AAMhC;AACA;AACAC,iBAAe,EAAE,OARe;AAUhCC,aAAW,EAAE,KAVmB;AAYhCC,UAAQ,EAAE;AACR;AACJ;AACA;AACA;AACA;AACIC,YAAQ,EAAEC;AANF,GAZsB;;AAqBhC;AACF;AACA;AACA;AACA;AACA;AACEC,OAAK,EAAE;AACL;AACJ;AACA;AACA;AACA;AACIC,wBAAoB,EAAE,QANjB;;AAQL;AACJ;AACA;AACA;AACA;AACIC,uBAAmB,EAAE,QAbhB;;AAeL;AACJ;AACA;AACA;AACA;AACIC,mBAAe,EAAE,QApBZ;;AAsBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,cAAU,EAAE,QA7BP;;AA+BL;AACJ;AACA;AACA;AACA;AACIC,WAAO,EAAE,QApCJ;;AAsCL;AACJ;AACA;AACA;AACA;AACIC,8BAA0B,EAAE,QA3CvB;;AA6CL;AACJ;AACA;AACA;AACA;AACA;AACIC,8BAA0B,EAAE,QAnDvB;;AAqDL;AACJ;AACA;AACA;AACA;AACA;AACIC,+BAA2B,EAAE,QA3DxB;;AA6DL;AACJ;AACA;AACA;AACA;AACA;AACIC,yBAAqB,EAAE,CAAC,SAAD,EAAY,KAAZ,EAAmB,KAAnB,CAnElB;;AAqEL;AACJ;AACA;AACA;AACA;AACA;AACIC,gCAA4B,EAAE,CAAC,OAAD,EAAU,KAAV,EAAkB;AAAA,aAAM,EAAN;AAAlB,MA3EzB;;AA6EL;AACJ;AACA;AACA;AACA;AACA;AACIC,oBAAgB,EAAE,QAnFb;;AAqFL;AACJ;AACA;AACA;AACA;AACIC,sBAAkB,EAAE,QA1Ff;;AA4FL;AACJ;AACA;AACA;AACA;AACIC,sBAAkB,EAAE,QAjGf;;AAmGL;AACJ;AACA;AACA;AACA;AACIC,kBAAc,EAAE,QAxGX;;AA0GL;AACJ;AACA;AACA;AACA;AACA;AACIC,yBAAqB,EAAE,SAhHlB;;AAkHL;AACJ;AACA;AACA;AACA;AACIC,qBAAiB,EAAE,QAvHd;;AAyHL;AACJ;AACA;AACA;AACA;AACIC,oBAAgB,EAAE,QA9Hb;;AAgIL;AACJ;AACA;AACA;AACA;AACIC,0BAAsB,EAAE,QArInB;;AAuIL;AACJ;AACA;AACA;AACA;AACA;AACIC,mBAAe,EAAE,SA7IZ;;AA+IL;AACJ;AACA;AACA;AACA;AACIC,8BAA0B,EAAE,QApJvB;;AAsJL;AACJ;AACA;AACA;AACA;AACIC,0BAAsB,EAAE,QA3JnB;;AA6JL;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,OAAG,EAAE,QApKA;;AAsKL;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,UAAM,EAAE,QA7KH;;AA+KL;AACJ;AACA;AACA;AACA;AACIC,uBAAmB,EAAE,QApLhB;;AAsLL;AACJ;AACA;AACA;AACA;AACA;AACIC,gBAAY,EAAE,QA5LT;;AA8LL;AACJ;AACA;AACA;AACA;AACA;AACIC,8BAA0B,EAAE;AApMvB,GA3ByB;;AAkOhC;AACF;AACA;AACA;AACA;AACA;AACEC,SAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACIC,cAAU,EAAE;AACVC,UAAI,EAAE,CAAC,KAAD,CADI;;AAGV;AACN;AACA;AACA;AACA;AACA;AACA;AACMC,QAVU,gBAUL;AACH,eAAO,CAAC,CAAE,KAAKR,GAAf;AACD;AAZS;AANL,GAxOuB;;AA8PhC;AACF;AACA;AACA;AACA;AACES,SAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACIC,eAAW,EAAE,KANN;;AAQP;AACJ;AACA;AACA;AACA;AAC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","names":["decider","config","ephemeral","Device","WebexPlugin","extend","namespace","extraProperties","idAttribute","children","features","FeaturesModel","props","clientMessagingGiphy","customerCompanyName","customerLogoUrl","deviceType","helpUrl","intranetInactivityDuration","intranetInactivityCheckUrl","inNetworkInactivityDuration","ecmEnabledForAllUsers","ecmSupportedStorageProviders","modificationTime","navigationBarColor","partnerCompanyName","partnerLogoUrl","peopleInsightsEnabled","reportingSiteDesc","reportingSiteUrl","searchEncryptionKeyUrl","showSupportText","supportProviderCompanyName","supportProviderLogoUrl","url","userId","webFileShareControl","webSocketUrl","whiteboardFileShareControl","derived","registered","deps","fn","session","logoutTimer","lastUserActivityDate","isReachabilityChecked","isInMeeting","isInNetwork","meetingStarted","webex","trigger","meetingEnded","refresh","logger","info","canRegister","then","_this","register","body","serialize","mediaCluster","ttl","ephemeralDeviceTTL","headers","defaults","request","method","uri","response","processRegistrationSuccess","catch","reason","statusCode","clear","_promise","reject","_this2","service","resource","unregister","warn","resolve","_this3","services","internal","waitForCatalog","canRegisterWaitDuration","get","Error","join","checkNetworkReachability","resetLogoutTimer","trackingid","_this4","args","arguments","prototype","getWebSocketUrl","wait","waitForRegistration","convertUrlToPriorityHostUrl","_this5","error","message","wsUrl","serviceHostMap","set","delay","refreshTimer","_this6","DEVICE_EVENT_REGISTRATION_SUCCESS","clearTimeout","off","unset","enableInactivityEnforcement","setLogoutTimer","duration","on","_this7","logout","timeout","_this8","timeoutTimer","once","markUrlFailedAndGetNew","markFailedUrl","initialize","FEATURE_COLLECTION_NAMES","forEach","collectionName","_this9","model","value","options","listenTo","version","oneFlight"],"sources":["device.js"],"sourcesContent":["// Internal Dependencies\nimport {deprecated, oneFlight} from '@webex/common';\nimport {persist, waitForValue, WebexPlugin} from '@webex/webex-core';\nimport {safeSetTimeout} from '@webex/common-timers';\n\n// Local Dependencies\nimport {\n  FEATURE_COLLECTION_NAMES,\n  DEVICE_EVENT_REGISTRATION_SUCCESS\n} from './constants';\nimport FeaturesModel from './features/features-model';\n\n/**\n * Determine if the plugin should be initialized based on cached storage.\n *\n * @returns {boolean} - If the device is ephemeral.\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = WebexPlugin.extend({\n\n  // Ampersand property members.\n\n  namespace: 'Device',\n\n  // Allow for extra properties to prevent the plugin from failing due to\n  // **WDM** service DTO changes.\n  extraProperties: 'allow',\n\n  idAttribute: 'url',\n\n  children: {\n    /**\n     * The class object that contains all of the feature collections.\n     *\n     * @type {FeaturesModel}\n     */\n    features: FeaturesModel\n  },\n\n  /**\n   * A collection of device properties mostly assigned by the retrieved DTO from\n   * the **WDM** service that are mapped against the ampersand properties.\n   *\n   * @type {Object}\n   */\n  props: {\n    /**\n     * This property determines whether or not giphy support is enabled.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    clientMessagingGiphy: 'string',\n\n    /**\n     * This property should store the company name.\n     *\n     * @type {string}\n     */\n    customerCompanyName: 'string',\n\n    /**\n     * This property should store the logo url.\n     *\n     * @type {string}\n     */\n    customerLogoUrl: 'string',\n\n    /**\n     * This property doesn't have any real values, but is sent during device\n     * refresh to prevent the **wdm** service from falling back to an iOS device\n     * type.\n     *\n     * @type {string}\n     */\n    deviceType: 'string',\n\n    /**\n     * This property should store the help url.\n     *\n     * @type {string}\n     */\n    helpUrl: 'string',\n\n    /**\n     * This property should store the intranet inactivity timer duration.\n     *\n     * @type {number}\n     */\n    intranetInactivityDuration: 'number',\n\n    /**\n     * This property stores the url required to validate if the device is able\n     * to actively reach the intranet network.\n     *\n     * @type {string}\n     */\n    intranetInactivityCheckUrl: 'string',\n\n    /**\n     * This property stores the inactivity timer duration, and could possibly\n     * deprecate the `intranetInactivityDuration` property.\n     *\n     * @type {number}\n     */\n    inNetworkInactivityDuration: 'number',\n\n    /**\n     * This property stores the ECM (external content management) enabled value\n     * for the whole organization.\n     *\n     * @type {boolean}\n     */\n    ecmEnabledForAllUsers: ['boolean', false, false],\n\n    /**\n     * This property stores an array of ECM (external content management)\n     * providers that are currently available.\n     *\n     * @returns {Array<string>}\n     */\n    ecmSupportedStorageProviders: ['array', false, (() => [])],\n\n    /**\n     * This property stores the modification time value retrieved from the\n     * **WDM** endpoint formatted as ISO 8601.\n     *\n     * @type {string}\n     */\n    modificationTime: 'string',\n\n    /**\n     * This property stores the navigation bar color.\n     *\n     * @type {string}\n     */\n    navigationBarColor: 'string',\n\n    /**\n     * This property stores the partner company's name when available.\n     *\n     * @type {string}\n     */\n    partnerCompanyName: 'string',\n\n    /**\n     * This property stores the partner company's logo when available.\n     *\n     * @type {string}\n     */\n    partnerLogoUrl: 'string',\n\n    /**\n     * This property stores the availability of people data from the **WDM**\n     * service.\n     *\n     * @type {boolean}\n     */\n    peopleInsightsEnabled: 'boolean',\n\n    /**\n     * This property stores the reporting site's description when available.\n     *\n     * @type {string}\n     */\n    reportingSiteDesc: 'string',\n\n    /**\n     * This property stores the reporting site's access url when available.\n     *\n     * @type {string}\n     */\n    reportingSiteUrl: 'string',\n\n    /**\n     * This property stores the encryption key url when available.\n     *\n     * @type {string}\n     */\n    searchEncryptionKeyUrl: 'string',\n\n    /**\n     * This property stores the availability of support-provided text from the\n     * **WDM** service.\n     *\n     * @type {boolean}\n     */\n    showSupportText: 'boolean',\n\n    /**\n     * This property stores the support provider's company name when available.\n     *\n     * @type {string}\n     */\n    supportProviderCompanyName: 'string',\n\n    /**\n     * This property stores the support provider's logo url when available.\n     *\n     * @type {string}\n     */\n    supportProviderLogoUrl: 'string',\n\n    /**\n     * This property stores the device's url retrieved from a registration\n     * request. This property gets set via the initial registration process by a\n     * `this.set()` method.\n     *\n     * @type {string}\n     */\n    url: 'string',\n\n    /**\n     * This property stores the device's userId uuid value, which can also be\n     * derived from the device's registerd user's userId retrieved from\n     * the **Hydra** service.\n     *\n     * @type {string}\n     */\n    userId: 'string',\n\n    /**\n     * This property stores whether or not file sharing is enabled\n     *\n     * @type {'BLOCK_BOTH' | 'BLOCK_UPLOAD'}\n     */\n    webFileShareControl: 'string',\n\n    /**\n     * This property stores the current web socket url used by the registered\n     * device.\n     *\n     * @type {string}\n     */\n    webSocketUrl: 'string',\n\n    /**\n     * This property stores the value indicating whether or not white board file\n     * sharing is enabled for the current device.\n     *\n     * @type {'ALLOW' | 'BLOCK'}\n     */\n    whiteboardFileShareControl: 'string'\n  },\n\n  /**\n   * A list of derived properties that populate based when their parent data\n   * available via the device's properties.\n   *\n   * @type {Object}\n   */\n  derived: {\n    /**\n     * This property determines if the current device is registered.\n     *\n     * @type {boolean}\n     */\n    registered: {\n      deps: ['url'],\n\n      /**\n       * Checks if the device is registered by validating that the url exists.\n       * Amperstand does not allow this to method to be written as an arrow\n       * function.\n       *\n       * @returns {boolean}\n       */\n      fn() {\n        return !!(this.url);\n      }\n    }\n  },\n\n  /**\n   * Stores timer data as well as other state details.\n   *\n   * @type {Object}\n   */\n  session: {\n    /**\n     * This property stores the logout timer object\n     *\n     * @type {any}\n     */\n    logoutTimer: 'any',\n\n    /**\n     * This property stores the date for the last activity the user made\n     * with the current device.\n     *\n     * @type {number}\n     */\n    lastUserActivityDate: 'number',\n\n    /**\n     * This property stores whether or not the reachability check has been\n     * performed to prevent the reachability check from performing its\n     * operation more than once after a successful check.\n     *\n     * @returns {boolean}\n     */\n    isReachabilityChecked: ['boolean', false, false],\n\n    /**\n     * This property stores whether or not the current device is in a meeting\n     * to prevent an unneeded timeout of a meeting due to inactivity.\n     *\n     * @type {boolean}\n     */\n    isInMeeting: 'boolean',\n\n    /**\n     * This property identifies if the device is currently in network to prevent\n     * the `resetLogoutTimer()` method from being called repeatedly once its\n     * known client is connected to the organization's internal network.\n     *\n     * @type {boolean}\n     */\n    isInNetwork: 'boolean'\n  },\n\n  // Event method members.\n\n  /**\n   * Trigger meeting started event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingStarted() {\n    this.webex.trigger('meeting started');\n  },\n\n  /**\n   * Trigger meeting ended event for webex instance. Used by web-client team.\n   *\n   * @returns {void}\n   */\n  meetingEnded() {\n    this.webex.trigger('meeting ended');\n  },\n\n  // Registration method members\n\n  /* eslint-disable require-jsdoc */\n  /**\n   * Refresh the current registered device if able.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  refresh() {\n    this.logger.info('device: refreshing');\n\n    // Validate that the device can be registered.\n    return this.canRegister()\n      .then(() => {\n        // Validate if the device is not registered and register instead.\n        if (!this.registered) {\n          this.logger.info('device: device not registered, registering');\n\n          return this.register();\n        }\n\n        // Merge body configurations, overriding defaults.\n        const body = {\n          ...(this.serialize()),\n          ...(this.config.body ? this.config.body : {})\n        };\n\n        // Remove unneeded properties from the body object.\n        delete body.features;\n        delete body.mediaCluster;\n\n        // Append a ttl value if the device is marked as ephemeral.\n        if (this.config.ephemeral) {\n          body.ttl = this.config.ephemeralDeviceTTL;\n        }\n\n        // Merge header configurations, overriding defaults.\n        const headers = {\n          ...(this.config.defaults.headers ? this.config.defaults.headers : {}),\n          ...(this.config.headers ? this.config.headers : {})\n        };\n\n        return this.request({\n          method: 'PUT',\n          uri: this.url,\n          body,\n          headers\n        })\n          .then((response) => this.processRegistrationSuccess(response))\n          .catch((reason) => {\n            // Handle a 404 error, which indicates that the device is no longer\n            // valid and needs to be registered as a new device.\n            if (reason.statusCode === 404) {\n              this.logger.info('device: refresh failed, device is not valid');\n              this.logger.info('device: attempting to register a new device');\n\n              this.clear();\n\n              return this.register();\n            }\n\n            return Promise.reject(reason);\n          });\n      });\n  },\n\n  /**\n   * Register or refresh a device depending on the current device state. Device\n   * registration utilizes the services plugin to send the request to the\n   * **WDM** service.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  register() {\n    this.logger.info('device: registering');\n\n    // Validate that the device can be registered.\n    return this.canRegister()\n      .then(() => {\n        // Validate if the device is already registered and refresh instead.\n        if (this.registered) {\n          this.logger.info('device: device already registered, refreshing');\n\n          return this.refresh();\n        }\n\n        // Merge body configurations, overriding defaults.\n        const body = {\n          ...(this.config.defaults.body ? this.config.defaults.body : {}),\n          ...(this.config.body ? this.config.body : {})\n        };\n\n        // Merge header configurations, overriding defaults.\n        const headers = {\n          ...(this.config.defaults.headers ? this.config.defaults.headers : {}),\n          ...(this.config.headers ? this.config.headers : {})\n        };\n\n        // Append a ttl value if the device is marked as ephemeral\n        if (this.config.ephemeral) {\n          body.ttl = this.config.ephemeralDeviceTTL;\n        }\n\n        // This will be replaced by a `create()` method.\n        return this.request({\n          method: 'POST',\n          service: 'wdm',\n          resource: 'devices',\n          body,\n          headers\n        })\n          .then((response) => this.processRegistrationSuccess(response));\n      });\n  },\n\n  /**\n   * Unregister the current registered device if available. Unregistering a\n   * device utilizes the services plugin to send the request to the **WDM**\n   * service.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  @oneFlight\n  @waitForValue('@')\n  unregister() {\n    this.logger.info('device: unregistering');\n\n    if (!this.registered) {\n      this.logger.warn('device: not registered');\n\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    })\n      .then(() => this.clear());\n  },\n  /* eslint-enable require-jsdoc */\n\n  // Helper method members\n\n  /**\n   * Determine if registration methods can be performed. This method utilizes\n   * the `services` plugin to confirm if the appropriate service urls are\n   * available for device registration.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  canRegister() {\n    this.logger.info('device: validating if registration can occur');\n\n    // Destructure the services plugin for ease of reference.\n    const {services} = this.webex.internal;\n\n    // Wait for the postauth catalog to populate.\n    return services.waitForCatalog(\n      'postauth',\n      this.config.canRegisterWaitDuration\n    )\n      .then(() => (\n        // Validate that the service exists after waiting for the catalog.\n        services.get('wdm') ?\n          Promise.resolve() :\n          Promise.reject(new Error([\n            'device: cannot register,',\n            '\\'wdm\\' service is not available from the postauth catalog'\n          ].join(' ')))\n      ));\n  },\n\n  /**\n   * Check if the device can currently reach the inactivity check url.\n   *\n   * @returns {Promise<void, Error>}\n   */\n  checkNetworkReachability() {\n    this.logger.info('device: checking network reachability');\n\n    // Validate if the device has been checked and reset the logout timer.\n    if (this.isReachabilityChecked) {\n      return Promise.resolve(this.resetLogoutTimer());\n    }\n\n    this.isReachabilityChecked = true;\n\n    // Validate if the device has a intranet checking url.\n    if (!this.intranetInactivityCheckUrl) {\n      this.isInNetwork = false;\n\n      return Promise.resolve(this.resetLogoutTimer());\n    }\n\n    // Clear unnecessary headers for reachability request.\n    const headers = {\n      'cisco-no-http-redirect': null,\n      'spark-user-agent': null,\n      trackingid: null\n    };\n\n    // Send the network reachability request.\n    return this.request({\n      headers,\n      method: 'GET',\n      uri: this.intranetInactivityCheckUrl\n    })\n      .then(() => {\n        this.isInNetwork = true;\n\n        return Promise.resolve(this.resetLogoutTimer());\n      })\n      .catch(() => {\n        this.logger.info('device: did not reach ping endpoint');\n        this.logger.info('device: triggering off-network timer');\n\n        this.isInNetwork = false;\n\n        return Promise.resolve(this.resetLogoutTimer());\n      });\n  },\n\n  /**\n   * Clears the registration ttl value if available.\n   *\n   * @param {Object} options - Values to be cleared.\n   * @returns {void}\n   */\n  clear(...args) {\n    this.logger.info('device: clearing registered device');\n\n    // Prototype the extended class in order to preserve the parent member.\n    Reflect.apply(WebexPlugin.prototype.clear, this, args);\n  },\n\n  /**\n   * Get the current websocket url with the appropriate priority host.\n   *\n   * @param {boolean} [wait=false] - Willing to wait on a valid url.\n   * @returns {Promise<string, Error>} - The priority-mapped web socket url.\n   */\n  getWebSocketUrl(wait = false) {\n    this.logger.info('device: getting the current websocket url');\n\n    // Destructure the services plugin for ease of reference.\n    const {services} = this.webex.internal;\n\n    // Validate if the method should wait for registration.\n    if (wait) {\n      return this.waitForRegistration()\n        .then(() => services.convertUrlToPriorityHostUrl(this.webSocketUrl))\n        .catch((error) => {\n          this.logger.warn(error.message);\n\n          return Promise.reject(new Error(\n            'device: failed to get the current websocket url'\n          ));\n        });\n    }\n\n    // Validate if the device is registered.\n    if (!this.registered) {\n      return Promise.reject(new Error(\n        'device: cannot get websocket url, device is not registered'\n      ));\n    }\n\n    // Attempt to collect the priority-host-mapped web socket URL.\n    const wsUrl = services.convertUrlToPriorityHostUrl(this.webSocketUrl);\n\n    // Validate that the url was collected.\n    if (wsUrl) {\n      return Promise.resolve(wsUrl);\n    }\n\n    return Promise.reject(new Error(\n      'device: failed to get the current websocket url'\n    ));\n  },\n\n  /**\n   * Process a successful device registration.\n   *\n   * @param {Object} response - response object from registration success.\n   * @returns {void}\n   */\n  processRegistrationSuccess(response) {\n    this.logger.info('device: received registration payload');\n\n    // Clone the response body for service cleaning.\n    const body = {...response.body};\n\n    // Clean service data.\n    delete body.services;\n    delete body.serviceHostMap;\n\n    // Assign the recieved DTO from **WDM** to this device.\n    this.set(body);\n\n    // Validate if device is ephemeral and setup refresh timer.\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueuing device refresh');\n\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n\n    // Emit the registration:success event.\n    this.trigger(DEVICE_EVENT_REGISTRATION_SUCCESS, this);\n  },\n\n  /**\n   * Reset the current local logout timer for the registered device if\n   * registered.\n   *\n   * @returns {void}\n   */\n  resetLogoutTimer() {\n    this.logger.info('device: resetting logout timer');\n\n    // Clear current logout timer.\n    clearTimeout(this.logoutTimer);\n\n    // Remove last activity date event listener.\n    this.off('change:lastUserActivityDate');\n\n    // Remove the logout timer.\n    this.unset('logoutTimer');\n\n    // Validate if the device is currently in a meeting and is configured to\n    // required inactivity enforcement.\n    if (!this.isInMeeting && this.config.enableInactivityEnforcement &&\n      this.isReachabilityChecked) {\n      if (this.isInNetwork) {\n        this.setLogoutTimer(this.inNetworkInactivityDuration);\n      }\n      else {\n        this.setLogoutTimer(this.intranetInactivityDuration);\n      }\n    }\n  },\n\n  /**\n   * Set the value of the logout timer for the current registered device.\n   *\n   * @param {number} duration - Value in seconds of the new logout timer.\n   * @returns {void}\n   */\n  setLogoutTimer(duration) {\n    this.logger.info('device: setting logout timer');\n\n    if (!duration || duration <= 0) {\n      return;\n    }\n\n    // Setup user activity date event listener.\n    this.on('change:lastUserActivityDate', () => { this.resetLogoutTimer(); });\n\n    // Initialize a new timer.\n    this.logoutTimer = safeSetTimeout(() => {\n      this.webex.logout();\n    }, duration * 1000);\n  },\n\n  /**\n   * Wait for the device to be registered.\n   *\n   * @param {number} [timeout=10] - The maximum duration to wait, in seconds.\n   * @returns {Promise<void, Error>}\n   */\n  waitForRegistration(timeout = 10) {\n    this.logger.info('device: waiting for registration');\n\n    return new Promise((resolve, reject) => {\n      if (this.registered) {\n        resolve();\n      }\n\n      const timeoutTimer = safeSetTimeout(() => reject(\n        new Error('device: timeout occured while waiting for registration')\n      ), timeout * 1000);\n\n      this.once(DEVICE_EVENT_REGISTRATION_SUCCESS, () => {\n        clearTimeout(timeoutTimer);\n        resolve();\n      });\n    });\n  },\n\n  // Deprecated methods.\n\n  /**\n   * Mark a url as failed and get the next priority host url.\n   *\n   * @param {string} url - The url to mark as failed.\n   * @returns {Promise<string>} - The next priority url.\n   */\n  @deprecated('device#markUrlFailedAndGetNew(): Use services#markFailedUrl()')\n  markUrlFailedAndGetNew(url) {\n    return Promise.resolve(this.webex.internal.services.markFailedUrl(url));\n  },\n\n  // Ampersand method members\n\n  /* eslint-disable require-jsdoc */\n  /**\n   * Initializer method for the device plugin.\n   *\n   * @override\n   * @param {Array<any>} args - An array of items to be mapped as properties.\n   * @returns {void}\n   */\n  @persist('@', decider)\n  initialize(...args) {\n    // Prototype the extended class in order to preserve the parent member.\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n\n    // Initialize feature events and listeners.\n    FEATURE_COLLECTION_NAMES.forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger('change', this, options);\n        this.trigger('change:features', this, this.features, options);\n      });\n    });\n\n    // Initialize network reachability checking event for url change.\n    this.on('change:intranetInactivityCheckUrl', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize network reachability checking event for duration change.\n    this.on('change:intranetInactivityDuration', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize network reachability checking event for duration change.\n    this.on('change:inNetworkInactivityDuration', () => {\n      this.checkNetworkReachability();\n    });\n\n    // Initialize listener for activity checking.\n    this.listenTo(this.webex, 'user-activity', () => {\n      this.lastUserActivityDate = Date.now();\n    });\n\n    // Initialize listener for meeting started event.\n    this.listenTo(this.webex, 'meeting started', () => {\n      this.isInMeeting = true;\n      this.resetLogoutTimer();\n    });\n\n    // Initialize listener for meeting ended event.\n    this.listenTo(this.webex, 'meeting ended', () => {\n      this.isInMeeting = false;\n      this.resetLogoutTimer();\n    });\n  }\n  /* eslint-enable require-jsdoc */\n});\n\nexport default Device;\n"]},"metadata":{},"sourceType":"script"}
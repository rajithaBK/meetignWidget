{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nvar PKIStatusInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PKIStatusInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PKIStatusInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PKIStatusInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc status\r\n     */\n    this.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\n    if (\"statusStrings\" in parameters)\n      /**\r\n       * @type {Array.<Utf8String>}\r\n       * @desc statusStrings\r\n       */\n      this.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\n    if (\"failInfo\" in parameters)\n      /**\r\n       * @type {BitString}\r\n       * @desc failInfo\r\n       */\n      this.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PKIStatusInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"status\", \"statusStrings\", \"failInfo\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PKIStatusInfo.schema({\n        names: {\n          status: \"status\",\n          statusStrings: \"statusStrings\",\n          failInfo: \"failInfo\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PKIStatusInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      var _status = asn1.result.status;\n      if (_status.valueBlock.isHexOnly === true || _status.valueBlock.valueDec < 0 || _status.valueBlock.valueDec > 5) throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\n      this.status = _status.valueBlock.valueDec;\n      if (\"statusStrings\" in asn1.result) this.statusStrings = asn1.result.statusStrings;\n      if (\"failInfo\" in asn1.result) this.failInfo = asn1.result.failInfo; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array of output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.status\n      }));\n\n      if (\"statusStrings\" in this) {\n        outputArray.push(new asn1js.Sequence({\n          optional: true,\n          value: this.statusStrings\n        }));\n      }\n\n      if (\"failInfo\" in this) outputArray.push(this.failInfo); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        status: this.status\n      };\n      if (\"statusStrings\" in this) _object.statusStrings = Array.from(this.statusStrings, function (element) {\n        return element.toJSON();\n      });\n      if (\"failInfo\" in this) _object.failInfo = this.failInfo.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"status\":\n          return 2;\n\n        case \"statusStrings\":\n          return [];\n\n        case \"failInfo\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for PKIStatusInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"status\":\n          return memberValue === PKIStatusInfo.defaultValues(memberName);\n\n        case \"statusStrings\":\n          return memberValue.length === 0;\n\n        case \"failInfo\":\n          return memberValue.isEqual(PKIStatusInfo.defaultValues(memberName));\n\n        default:\n          throw new Error(\"Invalid member name for PKIStatusInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PKIStatusInfo ::= SEQUENCE {\r\n     *    status        PKIStatus,\r\n     *    statusString  PKIFreeText     OPTIONAL,\r\n     *    failInfo      PKIFailureInfo  OPTIONAL  }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [status]\r\n       * @property {string} [statusStrings]\r\n       * @property {string} [failInfo]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.status || \"\"\n        }), new asn1js.Sequence({\n          optional: true,\n          value: [new asn1js.Repeated({\n            name: names.statusStrings || \"\",\n            value: new asn1js.Utf8String()\n          })]\n        }), new asn1js.BitString({\n          name: names.failInfo || \"\",\n          optional: true\n        })]\n      });\n    }\n  }]);\n\n  return PKIStatusInfo;\n}(); //**************************************************************************************\n\n\nexport { PKIStatusInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PKIStatusInfo.js"],"names":["asn1js","getParametersValue","clearProps","PKIStatusInfo","parameters","status","defaultValues","statusStrings","failInfo","fromSchema","schema","asn1","compareSchema","names","verified","Error","_status","result","valueBlock","isHexOnly","valueDec","outputArray","push","Integer","value","Sequence","optional","_object","Array","from","element","toJSON","memberName","BitString","memberValue","length","isEqual","name","blockName","Repeated","Utf8String"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class PKIStatusInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKIStatusInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\r\n\r\n\t\tif(\"statusStrings\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Utf8String>}\r\n\t\t\t * @desc statusStrings\r\n\t\t\t */\r\n\t\t\tthis.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\r\n\r\n\t\tif(\"failInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc failInfo\r\n\t\t\t */\r\n\t\t\tthis.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn 2;\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKIStatusInfo ::= SEQUENCE {\r\n\t *    status        PKIStatus,\r\n\t *    statusString  PKIFreeText     OPTIONAL,\r\n\t *    failInfo      PKIFailureInfo  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [statusStrings]\r\n\t\t * @property {string} [failInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.status || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.statusStrings || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Utf8String()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\tname: (names.failInfo || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"status\",\r\n\t\t\t\"statusStrings\",\r\n\t\t\t\"failInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKIStatusInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tstatus: \"status\",\r\n\t\t\t\t\tstatusStrings: \"statusStrings\",\r\n\t\t\t\t\tfailInfo: \"failInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKIStatusInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst _status = asn1.result.status;\r\n\r\n\t\tif((_status.valueBlock.isHexOnly === true) ||\r\n\t\t\t(_status.valueBlock.valueDec < 0) ||\r\n\t\t\t(_status.valueBlock.valueDec > 5))\r\n\t\t\tthrow new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n\r\n\t\tthis.status = _status.valueBlock.valueDec;\r\n\r\n\t\tif(\"statusStrings\" in asn1.result)\r\n\t\t\tthis.statusStrings = asn1.result.statusStrings;\r\n\t\tif(\"failInfo\" in asn1.result)\r\n\t\t\tthis.failInfo = asn1.result.failInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.status }));\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: this.statusStrings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\toutputArray.push(this.failInfo);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t\t_object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\t_object.failInfo = this.failInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
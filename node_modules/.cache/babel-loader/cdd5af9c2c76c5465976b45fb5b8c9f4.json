{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\nvar HostUtils = {};\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\n\nHostUtils.parse = function (host) {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host)\n    };\n  }\n\n  return null;\n};\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\n\n\nHostUtils.getHosts = function (oldHost, newHost) {\n  var previous = oldHost && HostUtils.parse(oldHost);\n  var current = newHost && HostUtils.parse(newHost);\n  return {\n    previous: previous,\n    current: current,\n    updates: {\n      isNewHost: previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true\n    }\n  };\n};\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\n\n\nHostUtils.isDifferentHosts = function (previousId, currentId) {\n  return previousId !== currentId;\n};\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\n\n\nHostUtils.getId = function (host) {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nvar _default = HostUtils;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA,IAAMA,SAAS,GAAG,EAAlB;AAEA;AACA;AACA;AACA;AACA;;AACAA,SAAS,CAACC,KAAVD,GAAkB,UAACE,IAAD,EAAU;AAC1B,MAAIA,IAAJ,EAAU;AACR,WAAO;AACLC,YAAM,EAAEH,SAAS,CAACI,KAAVJ,CAAgBE,IAAhBF;AADH,KAAP;AAGD;;AAED,SAAO,IAAP;AAPF;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,SAAS,CAACK,QAAVL,GAAqB,UAACM,OAAD,EAAUC,OAAV,EAAsB;AACzC,MAAMC,QAAQ,GAAGF,OAAO,IAAIN,SAAS,CAACC,KAAVD,CAAgBM,OAAhBN,CAA5B;AACA,MAAMS,OAAO,GAAGF,OAAO,IAAIP,SAAS,CAACC,KAAVD,CAAgBO,OAAhBP,CAA3B;AAEA,SAAO;AACLQ,YAAQ,EAARA,QADK;AAELC,WAAO,EAAPA,OAFK;AAGLC,WAAO,EAAE;AACPC,eAAS,EAAEH,QAAQ,IAAIC,OAAZD,GAAsBR,SAAS,CAACY,gBAAVZ,CAA2BQ,QAAQ,CAACL,MAApCH,EAA4CS,OAAO,CAACN,MAApDH,CAAtBQ,GAAoF;AADxF;AAHJ,GAAP;AAJF;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACAR,SAAS,CAACY,gBAAVZ,GAA6B,UAACa,UAAD,EAAaC,SAAb;AAAA,SAA2BD,UAAU,KAAKC,SAA1C;AAA7B;AAEA;AACA;AACA;AACA;AACA;;;AACAd,SAAS,CAACI,KAAVJ,GAAkB,UAACE,IAAD,EAAU;AAC1B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SAAOA,IAAI,CAACa,EAAZ;AALF;;eAQef","names":["HostUtils","parse","host","hostId","getId","getHosts","oldHost","newHost","previous","current","updates","isNewHost","isDifferentHosts","previousId","currentId","id"],"sources":["hostUtils.js"],"sourcesContent":["const HostUtils = {};\n\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\nHostUtils.parse = (host) => {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host)\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\nHostUtils.getHosts = (oldHost, newHost) => {\n  const previous = oldHost && HostUtils.parse(oldHost);\n  const current = newHost && HostUtils.parse(newHost);\n\n  return {\n    previous,\n    current,\n    updates: {\n      isNewHost: previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true\n    }\n  };\n};\n\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\nHostUtils.isDifferentHosts = (previousId, currentId) => previousId !== currentId;\n\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\nHostUtils.getId = (host) => {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nexport default HostUtils;\n"]},"metadata":{},"sourceType":"script"}
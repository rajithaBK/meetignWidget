{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromStream = exports.fromBuffer = exports.EndOfStreamError = exports.fromFile = void 0;\n\nconst fs = require(\"./FsPromise\");\n\nconst core = require(\"./core\");\n\nvar FileTokenizer_1 = require(\"./FileTokenizer\");\n\nObject.defineProperty(exports, \"fromFile\", {\n  enumerable: true,\n  get: function () {\n    return FileTokenizer_1.fromFile;\n  }\n});\n\nvar core_1 = require(\"./core\");\n\nObject.defineProperty(exports, \"EndOfStreamError\", {\n  enumerable: true,\n  get: function () {\n    return core_1.EndOfStreamError;\n  }\n});\nObject.defineProperty(exports, \"fromBuffer\", {\n  enumerable: true,\n  get: function () {\n    return core_1.fromBuffer;\n  }\n});\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */\n\nasync function fromStream(stream, fileInfo) {\n  fileInfo = fileInfo ? fileInfo : {};\n\n  if (stream.path) {\n    const stat = await fs.stat(stream.path);\n    fileInfo.path = stream.path;\n    fileInfo.size = stat.size;\n  }\n\n  return core.fromStream(stream, fileInfo);\n}\n\nexports.fromStream = fromStream;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/strtok3/lib/index.js"],"names":["Object","defineProperty","exports","value","fromStream","fromBuffer","EndOfStreamError","fromFile","fs","require","core","FileTokenizer_1","enumerable","get","core_1","stream","fileInfo","path","stat","size"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACK,QAAR,GAAmB,KAAK,CAA7F;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA7B;;AACAT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,UAA/B,EAA2C;AAAEU,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOF,eAAe,CAACJ,QAAvB;AAAkC;AAAzE,CAA3C;;AACA,IAAIO,MAAM,GAAGL,OAAO,CAAC,QAAD,CAApB;;AACAT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,kBAA/B,EAAmD;AAAEU,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOC,MAAM,CAACR,gBAAd;AAAiC;AAAxE,CAAnD;AACAN,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEU,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAOC,MAAM,CAACT,UAAd;AAA2B;AAAlE,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeD,UAAf,CAA0BW,MAA1B,EAAkCC,QAAlC,EAA4C;AACxCA,EAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAH,GAAc,EAAjC;;AACA,MAAID,MAAM,CAACE,IAAX,EAAiB;AACb,UAAMC,IAAI,GAAG,MAAMV,EAAE,CAACU,IAAH,CAAQH,MAAM,CAACE,IAAf,CAAnB;AACAD,IAAAA,QAAQ,CAACC,IAAT,GAAgBF,MAAM,CAACE,IAAvB;AACAD,IAAAA,QAAQ,CAACG,IAAT,GAAgBD,IAAI,CAACC,IAArB;AACH;;AACD,SAAOT,IAAI,CAACN,UAAL,CAAgBW,MAAhB,EAAwBC,QAAxB,CAAP;AACH;;AACDd,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromStream = exports.fromBuffer = exports.EndOfStreamError = exports.fromFile = void 0;\r\nconst fs = require(\"./FsPromise\");\r\nconst core = require(\"./core\");\r\nvar FileTokenizer_1 = require(\"./FileTokenizer\");\r\nObject.defineProperty(exports, \"fromFile\", { enumerable: true, get: function () { return FileTokenizer_1.fromFile; } });\r\nvar core_1 = require(\"./core\");\r\nObject.defineProperty(exports, \"EndOfStreamError\", { enumerable: true, get: function () { return core_1.EndOfStreamError; } });\r\nObject.defineProperty(exports, \"fromBuffer\", { enumerable: true, get: function () { return core_1.fromBuffer; } });\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */\r\nasync function fromStream(stream, fileInfo) {\r\n    fileInfo = fileInfo ? fileInfo : {};\r\n    if (stream.path) {\r\n        const stat = await fs.stat(stream.path);\r\n        fileInfo.path = stream.path;\r\n        fileInfo.size = stat.size;\r\n    }\r\n    return core.fromStream(stream, fileInfo);\r\n}\r\nexports.fromStream = fromStream;\r\n"]},"metadata":{},"sourceType":"script"}
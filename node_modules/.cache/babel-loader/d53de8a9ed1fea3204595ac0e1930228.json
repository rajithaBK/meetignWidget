{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n_Object$defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _calendar.default;\n  }\n});\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _has2 = _interopRequireDefault(require(\"lodash/has\"));\n\nrequire(\"@webex/internal-plugin-device\");\n\nrequire(\"@webex/internal-plugin-encryption\");\n\nrequire(\"@webex/internal-plugin-conversation\");\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _calendar = _interopRequireDefault(require(\"./calendar\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n\n(0, _webexCore.registerInternalPlugin)('calendar', _calendar.default, {\n  config: _config.default,\n  payloadTransformer: {\n    predicates: [{\n      name: 'transformMeetingNotes',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise.default.resolve((0, _has2.default)(response, 'body.encryptedNotes'));\n      },\n      extract: function extract(response) {\n        return _promise.default.resolve(response.body);\n      }\n    }, {\n      name: 'transformMeetingParticipants',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise.default.resolve((0, _has2.default)(response, 'body.encryptedParticipants'));\n      },\n      extract: function extract(response) {\n        return _promise.default.resolve(response.body);\n      }\n    }, {\n      name: 'transformMeetingArray',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise.default.resolve((0, _has2.default)(response, 'body.items[0].seriesId'));\n      },\n      extract: function extract(response) {\n        return _promise.default.resolve(response.body.items);\n      }\n    }, {\n      name: 'transformMeeting',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise.default.resolve((0, _has2.default)(response, 'body.seriesId'));\n      },\n      extract: function extract(response) {\n        return _promise.default.resolve(response.body);\n      }\n    }, {\n      name: 'transformMeeting',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise.default.resolve((0, _has2.default)(response, 'calendarMeetingExternal'));\n      },\n      extract: function extract(response) {\n        return _promise.default.resolve(response.calendarMeetingExternal);\n      }\n    }],\n    transforms: [{\n      name: 'transformMeetingArray',\n      fn: function fn(ctx, array) {\n        return _promise.default.all(array.map(function (item) {\n          return ctx.transform('transformMeeting', item);\n        }));\n      }\n    }, {\n      name: 'transformMeeting',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise.default.resolve();\n        }\n\n        if (!object.encryptionKeyUrl) {\n          return _promise.default.resolve();\n        } // Decrypt participant properties if meeting object contains participants\n\n\n        var decryptedParticipants = object.encryptedParticipants ? object.encryptedParticipants.map(function (participant) {\n          return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)]);\n        }) : []; // Decrypt meetingJoinInfo properties if meeting object contains meetingJoinInfo\n\n        var decryptedMeetingJoinInfo = object.meetingJoinInfo ? _promise.default.all([ctx.transform('decryptTextProp', 'meetingJoinURI', object.encryptionKeyUrl, object.meetingJoinInfo), ctx.transform('decryptTextProp', 'meetingJoinURL', object.encryptionKeyUrl, object.meetingJoinInfo)]) : [];\n        var decryptedOrganizer = object.encryptedOrganizer ? _promise.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, object.encryptedOrganizer), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, object.encryptedOrganizer)]) : [];\n        return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'encryptedLocation', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object), ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object)].concat(decryptedOrganizer, decryptedParticipants, decryptedMeetingJoinInfo));\n      }\n    }, {\n      name: 'transformMeetingNotes',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise.default.resolve();\n        }\n\n        if (!object.encryptionKeyUrl) {\n          return _promise.default.resolve();\n        }\n\n        return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object)]);\n      }\n    }, {\n      name: 'transformMeetingParticipants',\n      direction: 'inbound',\n      fn: function fn(ctx, object) {\n        if (!object) {\n          return _promise.default.resolve();\n        }\n\n        if (!object.encryptionKeyUrl || !object.encryptedParticipants) {\n          return _promise.default.resolve();\n        } // Decrypt participant properties\n\n\n        var decryptedParticipants = object.encryptedParticipants.map(function (participant) {\n          return _promise.default.all([ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant), ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)]);\n        });\n        return _promise.default.all(decryptedParticipants);\n      }\n    }]\n  }\n});","map":{"version":3,"mappings":"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","names":["require","Calendar","config","payloadTransformer","predicates","name","direction","test","ctx","response","_promise","resolve","extract","body","items","calendarMeetingExternal","transforms","fn","array","all","map","item","transform","object","encryptionKeyUrl","decryptedParticipants","encryptedParticipants","participant","decryptedMeetingJoinInfo","meetingJoinInfo","decryptedOrganizer","encryptedOrganizer","concat"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@webex/internal-plugin-device';\nimport '@webex/internal-plugin-encryption';\nimport '@webex/internal-plugin-conversation';\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Calendar from './calendar';\nimport config from './config';\n\nregisterInternalPlugin('calendar', Calendar, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.encryptedNotes'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.encryptedParticipants'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeetingArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.items[0].seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body.items);\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'calendarMeetingExternal'));\n        },\n        extract(response) {\n          return Promise.resolve(response.calendarMeetingExternal);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'transformMeetingArray',\n        fn(ctx, array) {\n          return Promise.all(array.map((item) => ctx.transform('transformMeeting', item)));\n        }\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties if meeting object contains participants\n          const decryptedParticipants = object.encryptedParticipants ? object.encryptedParticipants.map((participant) => Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)\n          ])) : [];\n\n          // Decrypt meetingJoinInfo properties if meeting object contains meetingJoinInfo\n          const decryptedMeetingJoinInfo = object.meetingJoinInfo ? Promise.all([\n            ctx.transform('decryptTextProp', 'meetingJoinURI', object.encryptionKeyUrl, object.meetingJoinInfo),\n            ctx.transform('decryptTextProp', 'meetingJoinURL', object.encryptionKeyUrl, object.meetingJoinInfo)\n          ]) : [];\n\n          const decryptedOrganizer = object.encryptedOrganizer ? Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, object.encryptedOrganizer),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, object.encryptedOrganizer)\n          ]) : [];\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'encryptedLocation', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object),\n            ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object)\n          ].concat(decryptedOrganizer, decryptedParticipants, decryptedMeetingJoinInfo));\n        }\n      },\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object)\n          ]);\n        }\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl || !object.encryptedParticipants) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties\n          const decryptedParticipants = object.encryptedParticipants.map((participant) => Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedEmailAddress', object.encryptionKeyUrl, participant),\n            ctx.transform('decryptTextProp', 'encryptedName', object.encryptionKeyUrl, participant)\n          ]));\n\n          return Promise.all(decryptedParticipants);\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './calendar';\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar OtherRevocationInfoFormat = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OtherRevocationInfoFormat class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function OtherRevocationInfoFormat() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OtherRevocationInfoFormat);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc otherRevInfoFormat\r\n     */\n    this.otherRevInfoFormat = getParametersValue(parameters, \"otherRevInfoFormat\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfoFormat\"));\n    /**\r\n     * @type {Any}\r\n     * @desc otherRevInfo\r\n     */\n\n    this.otherRevInfo = getParametersValue(parameters, \"otherRevInfo\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(OtherRevocationInfoFormat, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"otherRevInfoFormat\", \"otherRevInfo\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherRevocationInfoFormat\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\n      this.otherRevInfo = asn1.result.otherRevInfo; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.otherRevInfoFormat\n        }), this.otherRevInfo]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        otherRevInfoFormat: this.otherRevInfoFormat\n      };\n      if (!(this.otherRevInfo instanceof asn1js.Any)) object.otherRevInfo = this.otherRevInfo.toJSON();\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"otherRevInfoFormat\":\n          return \"\";\n\n        case \"otherRevInfo\":\n          return new asn1js.Any();\n\n        default:\n          throw new Error(\"Invalid member name for OtherRevocationInfoFormat class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * OtherCertificateFormat ::= SEQUENCE {\r\n     *    otherRevInfoFormat OBJECT IDENTIFIER,\r\n     *    otherRevInfo ANY DEFINED BY otherCertFormat }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [otherRevInfoFormat]\r\n       * @property {string} [otherRevInfo]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.otherRevInfoFormat || \"otherRevInfoFormat\"\n        }), new asn1js.Any({\n          name: names.otherRevInfo || \"otherRevInfo\"\n        })]\n      });\n    }\n  }]);\n\n  return OtherRevocationInfoFormat;\n}(); //**************************************************************************************\n\n\nexport { OtherRevocationInfoFormat as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OtherRevocationInfoFormat.js"],"names":["asn1js","getParametersValue","clearProps","OtherRevocationInfoFormat","parameters","otherRevInfoFormat","defaultValues","otherRevInfo","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","object","Any","toJSON","memberName","names","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherRevocationInfoFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherRevocationInfoFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc otherRevInfoFormat\r\n\t\t */\r\n\t\tthis.otherRevInfoFormat = getParametersValue(parameters, \"otherRevInfoFormat\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfoFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc otherRevInfo\r\n\t\t */\r\n\t\tthis.otherRevInfo = getParametersValue(parameters, \"otherRevInfo\", OtherRevocationInfoFormat.defaultValues(\"otherRevInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherRevInfoFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherRevInfo\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRevocationInfoFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherCertificateFormat ::= SEQUENCE {\r\n\t *    otherRevInfoFormat OBJECT IDENTIFIER,\r\n\t *    otherRevInfo ANY DEFINED BY otherCertFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherRevInfoFormat]\r\n\t\t * @property {string} [otherRevInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherRevInfoFormat || \"otherRevInfoFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherRevInfo || \"otherRevInfo\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"otherRevInfoFormat\",\r\n\t\t\t\"otherRevInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherRevocationInfoFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherRevocationInfoFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\r\n\t\tthis.otherRevInfo = asn1.result.otherRevInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }),\r\n\t\t\t\tthis.otherRevInfo\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherRevInfoFormat: this.otherRevInfoFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherRevInfo instanceof asn1js.Any))\r\n\t\t\tobject.otherRevInfo = this.otherRevInfo.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\nimport SingleResponse from \"./SingleResponse.js\";\nimport Extension from \"./Extension.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar ResponseData = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ResponseData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function ResponseData() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ResponseData);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc tbs\r\n     */\n    this.tbs = getParametersValue(parameters, \"tbs\", ResponseData.defaultValues(\"tbs\"));\n    /**\r\n     * @type {Object}\r\n     * @desc responderID\r\n     */\n\n    this.responderID = getParametersValue(parameters, \"responderID\", ResponseData.defaultValues(\"responderID\"));\n    /**\r\n     * @type {Date}\r\n     * @desc producedAt\r\n     */\n\n    this.producedAt = getParametersValue(parameters, \"producedAt\", ResponseData.defaultValues(\"producedAt\"));\n    /**\r\n     * @type {Array.<SingleResponse>}\r\n     * @desc responses\r\n     */\n\n    this.responses = getParametersValue(parameters, \"responses\", ResponseData.defaultValues(\"responses\"));\n    if (\"responseExtensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc responseExtensions\r\n       */\n      this.responseExtensions = getParametersValue(parameters, \"responseExtensions\", ResponseData.defaultValues(\"responseExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(ResponseData, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"ResponseData\", \"ResponseData.version\", \"ResponseData.responderID\", \"ResponseData.producedAt\", \"ResponseData.responses\", \"ResponseData.responseExtensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, ResponseData.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ResponseData\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.tbs = asn1.result.ResponseData.valueBeforeDecode;\n      if (\"ResponseData.version\" in asn1.result) this.version = asn1.result[\"ResponseData.version\"].valueBlock.valueDec;\n      if (asn1.result[\"ResponseData.responderID\"].idBlock.tagNumber === 1) this.responderID = new RelativeDistinguishedNames({\n        schema: asn1.result[\"ResponseData.responderID\"].valueBlock.value[0]\n      });else this.responderID = asn1.result[\"ResponseData.responderID\"].valueBlock.value[0]; // OCTETSTRING\n\n      this.producedAt = asn1.result[\"ResponseData.producedAt\"].toDate();\n      this.responses = Array.from(asn1.result[\"ResponseData.responses\"], function (element) {\n        return new SingleResponse({\n          schema: element\n        });\n      });\n      if (\"ResponseData.responseExtensions\" in asn1.result) this.responseExtensions = Array.from(asn1.result[\"ResponseData.responseExtensions\"].valueBlock.value, function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      //region Decode stored TBS value \n      var tbsSchema;\n\n      if (encodeFlag === false) {\n        if (this.tbs.length === 0) // No stored certificate TBS part\n          return ResponseData.schema();\n        tbsSchema = asn1js.fromBER(this.tbs).result;\n      } //endregion \n      //region Create TBS schema via assembling from TBS parts\n      else {\n        var outputArray = [];\n\n        if (\"version\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Integer({\n              value: this.version\n            })]\n          }));\n        }\n\n        if (this.responderID instanceof RelativeDistinguishedNames) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [this.responderID.toSchema()]\n          }));\n        } else {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 2 // [2]\n\n            },\n            value: [this.responderID]\n          }));\n        }\n\n        outputArray.push(new asn1js.GeneralizedTime({\n          valueDate: this.producedAt\n        }));\n        outputArray.push(new asn1js.Sequence({\n          value: Array.from(this.responses, function (element) {\n            return element.toSchema();\n          })\n        }));\n\n        if (\"responseExtensions\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [new asn1js.Sequence({\n              value: Array.from(this.responseExtensions, function (element) {\n                return element.toSchema();\n              })\n            })]\n          }));\n        }\n\n        tbsSchema = new asn1js.Sequence({\n          value: outputArray\n        });\n      } //endregion \n      //region Construct and return new ASN.1 schema for this object \n\n\n      return tbsSchema; //endregion \n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {};\n      if (\"version\" in this) _object.version = this.version;\n      if (\"responderID\" in this) _object.responderID = this.responderID;\n      if (\"producedAt\" in this) _object.producedAt = this.producedAt;\n      if (\"responses\" in this) _object.responses = Array.from(this.responses, function (element) {\n        return element.toJSON();\n      });\n      if (\"responseExtensions\" in this) _object.responseExtensions = Array.from(this.responseExtensions, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"tbs\":\n          return new ArrayBuffer(0);\n\n        case \"responderID\":\n          return {};\n\n        case \"producedAt\":\n          return new Date(0, 0, 0);\n\n        case \"responses\":\n        case \"responseExtensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for ResponseData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"tbs\":\n          return memberValue.byteLength === 0;\n\n        case \"responderID\":\n          return Object.keys(memberValue).length === 0;\n\n        case \"producedAt\":\n          return memberValue === ResponseData.defaultValues(memberName);\n\n        case \"responses\":\n        case \"responseExtensions\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for ResponseData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * ResponseData ::= SEQUENCE {\r\n     *    version              [0] EXPLICIT Version DEFAULT v1,\r\n     *    responderID              ResponderID,\r\n     *    producedAt               GeneralizedTime,\r\n     *    responses                SEQUENCE OF SingleResponse,\r\n     *    responseExtensions   [1] EXPLICIT Extensions OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [ResponseDataByName]\r\n       * @property {string} [ResponseDataByKey]\r\n       * @property {string} [producedAt]\r\n       * @property {string} [response]\r\n       * @property {string} [extensions]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"ResponseData\",\n        value: [new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Integer({\n            name: names.version || \"ResponseData.version\"\n          })]\n        }), new asn1js.Choice({\n          value: [new asn1js.Constructed({\n            name: names.responderID || \"ResponseData.responderID\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\n              names: {\n                blockName: \"ResponseData.byName\"\n              }\n            })]\n          }), new asn1js.Constructed({\n            name: names.responderID || \"ResponseData.responderID\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 2 // [2]\n\n            },\n            value: [new asn1js.OctetString({\n              name: names.ResponseDataByKey || \"ResponseData.byKey\"\n            })]\n          })]\n        }), new asn1js.GeneralizedTime({\n          name: names.producedAt || \"ResponseData.producedAt\"\n        }), new asn1js.Sequence({\n          value: [new asn1js.Repeated({\n            name: \"ResponseData.responses\",\n            value: SingleResponse.schema(names.response || {})\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [Extensions.schema(names.extensions || {\n            names: {\n              blockName: \"ResponseData.responseExtensions\"\n            }\n          })]\n        }) // EXPLICIT SEQUENCE value\n        ]\n      });\n    }\n  }]);\n\n  return ResponseData;\n}(); //**************************************************************************************\n\n\nexport { ResponseData as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/ResponseData.js"],"names":["asn1js","getParametersValue","clearProps","RelativeDistinguishedNames","SingleResponse","Extension","Extensions","ResponseData","parameters","tbs","defaultValues","responderID","producedAt","responses","responseExtensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","version","valueBlock","valueDec","idBlock","tagNumber","value","toDate","Array","from","element","encodeFlag","tbsSchema","length","fromBER","outputArray","push","Constructed","tagClass","Integer","toSchema","GeneralizedTime","valueDate","Sequence","_object","toJSON","memberName","ArrayBuffer","Date","memberValue","byteLength","Object","keys","names","name","blockName","optional","Choice","ResponseDataByName","OctetString","ResponseDataByKey","Repeated","response","extensions"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport SingleResponse from \"./SingleResponse.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class ResponseData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ResponseData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", ResponseData.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc responderID\r\n\t\t */\r\n\t\tthis.responderID = getParametersValue(parameters, \"responderID\", ResponseData.defaultValues(\"responderID\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc producedAt\r\n\t\t */\r\n\t\tthis.producedAt = getParametersValue(parameters, \"producedAt\", ResponseData.defaultValues(\"producedAt\"));\r\n\t\t/**\r\n\t\t * @type {Array.<SingleResponse>}\r\n\t\t * @desc responses\r\n\t\t */\r\n\t\tthis.responses = getParametersValue(parameters, \"responses\", ResponseData.defaultValues(\"responses\"));\r\n\r\n\t\tif(\"responseExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc responseExtensions\r\n\t\t\t */\r\n\t\t\tthis.responseExtensions = getParametersValue(parameters, \"responseExtensions\", ResponseData.defaultValues(\"responseExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"responderID\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"producedAt\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"responses\":\r\n\t\t\tcase \"responseExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"responderID\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"producedAt\":\r\n\t\t\t\treturn (memberValue === ResponseData.defaultValues(memberName));\r\n\t\t\tcase \"responses\":\r\n\t\t\tcase \"responseExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ResponseData ::= SEQUENCE {\r\n\t *    version              [0] EXPLICIT Version DEFAULT v1,\r\n\t *    responderID              ResponderID,\r\n\t *    producedAt               GeneralizedTime,\r\n\t *    responses                SEQUENCE OF SingleResponse,\r\n\t *    responseExtensions   [1] EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [ResponseDataByName]\r\n\t\t * @property {string} [ResponseDataByKey]\r\n\t\t * @property {string} [producedAt]\r\n\t\t * @property {string} [response]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ResponseData\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.version || \"ResponseData.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.responderID || \"ResponseData.responderID\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"ResponseData.byName\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.responderID || \"ResponseData.responderID\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [new asn1js.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.producedAt || \"ResponseData.producedAt\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: \"ResponseData.responses\",\r\n\t\t\t\t\t\t\tvalue: SingleResponse.schema(names.response || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"ResponseData.responseExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"ResponseData\",\r\n\t\t\t\"ResponseData.version\",\r\n\t\t\t\"ResponseData.responderID\",\r\n\t\t\t\"ResponseData.producedAt\",\r\n\t\t\t\"ResponseData.responses\",\r\n\t\t\t\"ResponseData.responseExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tResponseData.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ResponseData\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.ResponseData.valueBeforeDecode;\r\n\r\n\t\tif(\"ResponseData.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"ResponseData.version\"].valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result[\"ResponseData.responderID\"].idBlock.tagNumber === 1)\r\n\t\t\tthis.responderID = new RelativeDistinguishedNames({ schema: asn1.result[\"ResponseData.responderID\"].valueBlock.value[0] });\r\n\t\telse\r\n\t\t\tthis.responderID = asn1.result[\"ResponseData.responderID\"].valueBlock.value[0]; // OCTETSTRING\r\n\r\n\t\tthis.producedAt = asn1.result[\"ResponseData.producedAt\"].toDate();\r\n\t\tthis.responses = Array.from(asn1.result[\"ResponseData.responses\"], element => new SingleResponse({ schema: element }));\r\n\r\n\t\tif(\"ResponseData.responseExtensions\" in asn1.result)\r\n\t\t\tthis.responseExtensions = Array.from(asn1.result[\"ResponseData.responseExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value \r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn ResponseData.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion \r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\t\t\t\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this.responderID instanceof RelativeDistinguishedNames)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.responderID.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.responderID]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.producedAt }));\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.responses, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\tif(\"responseExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.responseExtensions, element => element.toSchema())\r\n\t\t\t\t\t})]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn tbsSchema;\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"responderID\" in this)\r\n\t\t\t_object.responderID = this.responderID;\r\n\r\n\t\tif(\"producedAt\" in this)\r\n\t\t\t_object.producedAt = this.producedAt;\r\n\r\n\t\tif(\"responses\" in this)\r\n\t\t\t_object.responses = Array.from(this.responses, element => element.toJSON());\r\n\r\n\t\tif(\"responseExtensions\" in this)\r\n\t\t\t_object.responseExtensions = Array.from(this.responseExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _httpCore = require(\"@webex/http-core\");\n\nvar _kmsErrors = require(\"./kms-errors\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Interceptor (only to be used in test mode) intended to replay requests that\n * fail as a result of the test-user incompatibiliy in KMS.\n * @class\n */\n\n\nvar KmsDryErrorInterceptor = /*#__PURE__*/function (_Interceptor) {\n  (0, _inherits2.default)(KmsDryErrorInterceptor, _Interceptor);\n\n  var _super = _createSuper(KmsDryErrorInterceptor);\n\n  function KmsDryErrorInterceptor() {\n    (0, _classCallCheck2.default)(this, KmsDryErrorInterceptor);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(KmsDryErrorInterceptor, [{\n    key: \"onResponseError\",\n    value:\n    /**\n     * @param {Object} options\n     * @param {Exception} reason\n     * @returns {Promise}\n     */\n    function onResponseError(options, reason) {\n      if (reason instanceof _kmsErrors.DryError && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n        this.webex.logger.error('DRY Request Failed due to kms/test-user flakiness');\n        this.webex.logger.error(reason);\n        return this.replay(options, reason);\n      }\n\n      return _promise.default.reject(reason);\n    }\n    /**\n     * Replays the request\n     * @param {Object} options\n     * @param {DryError} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"replay\",\n    value: function replay(options, reason) {\n      if (options.replayCount) {\n        options.replayCount += 1;\n      } else {\n        options.replayCount = 1;\n      }\n\n      if (options.replayCount > this.webex.config.maxAuthenticationReplays) {\n        this.webex.logger.error(\"kms: failed after \".concat(this.webex.config.maxAuthenticationReplays, \" replay attempts\"));\n        return _promise.default.reject(reason);\n      }\n\n      this.webex.logger.info(\"kms: replaying request \".concat(options.replayCount, \" time\"));\n      return this.webex.request(options);\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @returns {KmsDryErrorInterceptor}\n     */\n    function create() {\n      return new KmsDryErrorInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return KmsDryErrorInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = KmsDryErrorInterceptor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;;;IACqBA,sB;;;;;;;;;;;;;AAQnB;AACF;AACA;AACA;AACA;AACE,6BAAgBC,OAAhB,EAAyBC,MAAzB,EAAiC;AAC/B,UAAIA,MAAM,YAAYC,mBAAlBD,IAA8BA,MAAM,CAACE,OAAPF,CAAeG,KAAfH,CAAqB,sEAArBA,CAAlC,EAAgI;AAC9H,aAAKI,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,CAAwB,mDAAxB;AACA,aAAKF,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,CAAwBN,MAAxB;AAEA,eAAO,KAAKO,MAAL,CAAYR,OAAZ,EAAqBC,MAArB,CAAP;AACD;;AAED,aAAOQ,iBAAQC,MAAR,CAAeT,MAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,gBAAOD,OAAP,EAAgBC,MAAhB,EAAwB;AACtB,UAAID,OAAO,CAACW,WAAZ,EAAyB;AACvBX,eAAO,CAACW,WAARX,IAAuB,CAAvBA;AADF,aAGK;AACHA,eAAO,CAACW,WAARX,GAAsB,CAAtBA;AACD;;AAED,UAAIA,OAAO,CAACW,WAARX,GAAsB,KAAKK,KAAL,CAAWO,MAAX,CAAkBC,wBAA5C,EAAsE;AACpE,aAAKR,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,6BAA6C,KAAKF,KAAL,CAAWO,MAAX,CAAkBC,wBAA/D;AAEA,eAAOJ,iBAAQC,MAAR,CAAeT,MAAf,CAAP;AACD;;AAED,WAAKI,KAAL,CAAWC,MAAX,CAAkBQ,IAAlB,kCAAiDd,OAAO,CAACW,WAAzD;AAEA,aAAO,KAAKN,KAAL,CAAWU,OAAX,CAAmBf,OAAnB,CAAP;AACD;;;;AA9CD;AACF;AACA;AACE,sBAAgB;AACd,aAAO,IAAID,sBAAJ,CAA2B;AAACM,aAAK,EAAE;AAAR,OAA3B,CAAP;AACD;;;EANiDW,qB","names":["KmsDryErrorInterceptor","options","reason","DryError","message","match","webex","logger","error","replay","_promise","reject","replayCount","config","maxAuthenticationReplays","info","request","Interceptor"],"sources":["kms-dry-error-interceptor.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\n\nimport {DryError} from './kms-errors';\n/**\n * Interceptor (only to be used in test mode) intended to replay requests that\n * fail as a result of the test-user incompatibiliy in KMS.\n * @class\n */\nexport default class KmsDryErrorInterceptor extends Interceptor {\n  /**\n   * @returns {KmsDryErrorInterceptor}\n   */\n  static create() {\n    return new KmsDryErrorInterceptor({webex: this});\n  }\n\n  /**\n   * @param {Object} options\n   * @param {Exception} reason\n   * @returns {Promise}\n   */\n  onResponseError(options, reason) {\n    if (reason instanceof DryError && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n      this.webex.logger.error('DRY Request Failed due to kms/test-user flakiness');\n      this.webex.logger.error(reason);\n\n      return this.replay(options, reason);\n    }\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Replays the request\n   * @param {Object} options\n   * @param {DryError} reason\n   * @returns {Object}\n   */\n  replay(options, reason) {\n    if (options.replayCount) {\n      options.replayCount += 1;\n    }\n    else {\n      options.replayCount = 1;\n    }\n\n    if (options.replayCount > this.webex.config.maxAuthenticationReplays) {\n      this.webex.logger.error(`kms: failed after ${this.webex.config.maxAuthenticationReplays} replay attempts`);\n\n      return Promise.reject(reason);\n    }\n\n    this.webex.logger.info(`kms: replaying request ${options.replayCount} time`);\n\n    return this.webex.request(options);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
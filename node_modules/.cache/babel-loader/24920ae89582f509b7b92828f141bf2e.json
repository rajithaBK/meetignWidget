{"ast":null,"code":"\"use strict\";\n\nvar _Array$from = require(\"@babel/runtime-corejs2/core-js/array/from\");\n\nvar _Symbol = require(\"@babel/runtime-corejs2/core-js/symbol\");\n\nvar _Symbol$iterator = require(\"@babel/runtime-corejs2/core-js/symbol/iterator\");\n\nvar _Array$isArray = require(\"@babel/runtime-corejs2/core-js/array/is-array\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _now = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/values\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _uuid = require(\"uuid\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && o[_Symbol$iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\n * @description Meeting Webex assistance transcription feature.\n * @exports\n * @class Transcription\n */\n\n\nvar Transcription = /*#__PURE__*/function () {\n  /**\n   * @param {string} webSocketUrl\n   * @param {sessionID} sessionId\n   * @param {object} members\n   * @constructor\n   * @memberof Transcription\n   */\n  function Transcription(webSocketUrl, sessionId, members) {\n    (0, _classCallCheck2.default)(this, Transcription);\n    this.webSocketUrl = webSocketUrl;\n    this.sessionID = sessionId;\n    this.members = members;\n    this.memberCSIs = {};\n    var params = '?outboundWireFormat=text&bufferStates=true&aliasHttpStatus=true';\n    this.webSocket = new WebSocket(\"\".concat(this.webSocketUrl).concat(params));\n  }\n  /**\n   * open the Low Latency Mercury connection\n   * An event parameter will be send to the callback.\n   *\n   * @param {string} token\n   * @param {string} sessionID\n   * @returns {void}\n   */\n\n\n  (0, _createClass2.default)(Transcription, [{\n    key: \"connect\",\n    value: function connect(token) {\n      var _this = this;\n\n      this.webSocket.onopen = function () {\n        _this.webSocket.send((0, _stringify.default)({\n          id: (0, _uuid.v4)(),\n          type: 'authorization',\n          data: {\n            token: \"Bearer \".concat(token)\n          },\n          trackingId: \"webex-js-sdk_\".concat(_this.sessionID).concat(_now.default.toString())\n        }));\n      };\n    }\n    /**\n     * Sets callback to invoke when the web socket connection is closed.\n     *\n     * @param {function} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"onCloseSocket\",\n    value: function onCloseSocket(callback) {\n      if (callback) {\n        this.webSocket.onclose = function (event) {\n          callback(event);\n        };\n      }\n    }\n    /**\n     * Sets callback to invoke when a web socket connection error occurs.\n     * An event parameter will be send to the callback.\n     *\n     * @param {function} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"onErrorSocket\",\n    value: function onErrorSocket(callback) {\n      if (callback) {\n        this.webSocket.onerror = function (event) {\n          callback(event);\n        };\n      }\n    }\n    /**\n     * Get current speaker from the given csis payload and update the global csis map\n     *\n     * @private\n     * @param {object} csis\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getSpeaker\",\n    value: function getSpeaker(csis) {\n      var _this2 = this;\n\n      var _iterator = _createForOfIteratorHelper(csis),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var csi = _step.value;\n          var member = this.memberCSIs[csi];\n\n          if (member) {\n            return member;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return (0, _values.default)(this.members.membersCollection.members).find(function (member) {\n        var memberCSIs = member.participant.status.csis;\n        var selfIsSpeaking = false;\n\n        var _iterator2 = _createForOfIteratorHelper(csis),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var csi = _step2.value;\n\n            if (memberCSIs.includes(csi)) {\n              _this2.memberCSIs[csi] = member;\n              selfIsSpeaking = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return selfIsSpeaking;\n      });\n    }\n    /**\n     * Sends transcription data to given callback as it arrives.\n     *\n     * @param {function} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this3 = this;\n\n      var data, csis, speaker, transcription;\n\n      this.webSocket.onmessage = function (event) {\n        var _data$data, _data$data$voiceaPayl, _data$data2, _data$data2$voiceaPay;\n\n        data = JSON.parse(event.data);\n        csis = ((_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$voiceaPayl = _data$data.voiceaPayload) === null || _data$data$voiceaPayl === void 0 ? void 0 : _data$data$voiceaPayl.csis) || [];\n        speaker = _this3.getSpeaker(csis);\n        transcription = ((_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$voiceaPay = _data$data2.voiceaPayload) === null || _data$data2$voiceaPay === void 0 ? void 0 : _data$data2$voiceaPay.data) || '';\n\n        _this3.webSocket.send((0, _stringify.default)({\n          messageID: data.id,\n          type: 'ack'\n        }));\n\n        if (transcription) {\n          var _data$data3, _data$data3$voiceaPay, _speaker, _data, _data$data4, _data$data4$voiceaPay;\n\n          callback({\n            id: (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : (_data$data3$voiceaPay = _data$data3.voiceaPayload) === null || _data$data3$voiceaPay === void 0 ? void 0 : _data$data3$voiceaPay.transcript_id,\n            personID: (_speaker = speaker) === null || _speaker === void 0 ? void 0 : _speaker.id,\n            transcription: transcription,\n            timestamp: data.timestamp,\n            type: (_data = data) === null || _data === void 0 ? void 0 : (_data$data4 = _data.data) === null || _data$data4 === void 0 ? void 0 : (_data$data4$voiceaPay = _data$data4.voiceaPayload) === null || _data$data4$voiceaPay === void 0 ? void 0 : _data$data4$voiceaPay.type\n          });\n        }\n      };\n    }\n    /**\n     * Close the LLM web socket connection\n     * @returns {void}\n     */\n\n  }, {\n    key: \"closeSocket\",\n    value: function closeSocket() {\n      this.webSocket.close();\n    }\n  }]);\n  return Transcription;\n}();\n\nexports.default = Transcription;","map":{"version":3,"mappings":"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","names":["Transcription","webSocketUrl","sessionId","members","sessionID","memberCSIs","params","webSocket","WebSocket","token","onopen","_this","send","id","type","data","trackingId","_now","toString","callback","onclose","event","onerror","csis","csi","member","_iterator","membersCollection","find","participant","status","selfIsSpeaking","includes","_this2","_iterator2","speaker","transcription","onmessage","JSON","parse","voiceaPayload","_this3","getSpeaker","messageID","_data$data3","_data$data3$voiceaPay","transcript_id","personID","_speaker","timestamp","_data","_data$data4","_data$data4$voiceaPay","close"],"sources":["index.js"],"sourcesContent":["import {v4 as uuidv4} from 'uuid';\n\n/**\n * @description Meeting Webex assistance transcription feature.\n * @exports\n * @class Transcription\n */\nexport default class Transcription {\n  /**\n   * @param {string} webSocketUrl\n   * @param {sessionID} sessionId\n   * @param {object} members\n   * @constructor\n   * @memberof Transcription\n   */\n  constructor(webSocketUrl, sessionId, members) {\n    this.webSocketUrl = webSocketUrl;\n    this.sessionID = sessionId;\n    this.members = members;\n    this.memberCSIs = {};\n\n    const params = '?outboundWireFormat=text&bufferStates=true&aliasHttpStatus=true';\n\n    this.webSocket = new WebSocket(`${this.webSocketUrl}${params}`);\n  }\n\n  /**\n   * open the Low Latency Mercury connection\n   * An event parameter will be send to the callback.\n   *\n   * @param {string} token\n   * @param {string} sessionID\n   * @returns {void}\n   */\n  connect(token) {\n    this.webSocket.onopen = () => {\n      this.webSocket.send(JSON.stringify({\n        id: uuidv4(),\n        type: 'authorization',\n        data: {token: `Bearer ${token}`},\n        trackingId: `webex-js-sdk_${this.sessionID}${Date.now.toString()}`\n      }));\n    };\n  }\n\n  /**\n   * Sets callback to invoke when the web socket connection is closed.\n   *\n   * @param {function} callback\n   * @returns {void}\n   */\n  onCloseSocket(callback) {\n    if (callback) {\n      this.webSocket.onclose = (event) => {\n        callback(event);\n      };\n    }\n  }\n\n  /**\n   * Sets callback to invoke when a web socket connection error occurs.\n   * An event parameter will be send to the callback.\n   *\n   * @param {function} callback\n   * @returns {void}\n   */\n  onErrorSocket(callback) {\n    if (callback) {\n      this.webSocket.onerror = (event) => {\n        callback(event);\n      };\n    }\n  }\n\n  /**\n   * Get current speaker from the given csis payload and update the global csis map\n   *\n   * @private\n   * @param {object} csis\n   * @returns {object}\n   */\n  getSpeaker(csis) {\n    for (const csi of csis) {\n      const member = this.memberCSIs[csi];\n\n      if (member) {\n        return member;\n      }\n    }\n\n    return Object.values(this.members.membersCollection.members)\n      .find((member) => {\n        const memberCSIs = member.participant.status.csis;\n        let selfIsSpeaking = false;\n\n        for (const csi of csis) {\n          if (memberCSIs.includes(csi)) {\n            this.memberCSIs[csi] = member;\n            selfIsSpeaking = true;\n            break;\n          }\n        }\n\n        return selfIsSpeaking;\n      });\n  }\n\n  /**\n   * Sends transcription data to given callback as it arrives.\n   *\n   * @param {function} callback\n   * @returns {void}\n   */\n  subscribe(callback) {\n    let data, csis, speaker, transcription;\n\n    this.webSocket.onmessage = (event) => {\n      data = JSON.parse(event.data);\n      csis = data.data?.voiceaPayload?.csis || [];\n      speaker = this.getSpeaker(csis);\n      transcription = data.data?.voiceaPayload?.data || '';\n\n      this.webSocket.send(JSON.stringify({messageID: data.id, type: 'ack'}));\n\n      if (transcription) {\n        callback(\n          {\n            id: data.data?.voiceaPayload?.transcript_id,\n            personID: speaker?.id,\n            transcription,\n            timestamp: data.timestamp,\n            type: data?.data?.voiceaPayload?.type\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Close the LLM web socket connection\n   * @returns {void}\n   */\n  closeSocket() {\n    this.webSocket.close();\n  }\n}\n\n"]},"metadata":{},"sourceType":"script"}
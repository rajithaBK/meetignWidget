{"ast":null,"code":"import _toConsumableArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\rkanthet\\\\Documents\\\\test_window_object\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\nimport Certificate from \"./Certificate.js\";\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\nimport SignerInfo from \"./SignerInfo.js\";\nimport CertificateSet from \"./CertificateSet.js\";\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\nimport TSTInfo from \"./TSTInfo.js\";\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar SignedData = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignedData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function SignedData() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SignedData);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\n    /**\r\n     * @type {Array.<AlgorithmIdentifier>}\r\n     * @desc digestAlgorithms\r\n     */\n\n    this.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\n    /**\r\n     * @type {EncapsulatedContentInfo}\r\n     * @desc encapContentInfo\r\n     */\n\n    this.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\n    if (\"certificates\" in parameters)\n      /**\r\n       * @type {Array.<Certificate|OtherCertificateFormat>}\r\n       * @desc certificates\r\n       */\n      this.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\n    if (\"crls\" in parameters)\n      /**\r\n       * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n       * @desc crls\r\n       */\n      this.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\n    if (\"ocsps\" in parameters)\n      /**\r\n       * @type {Array.<BasicOCSPResponse>}\r\n       * @desc crls\r\n       */\n      this.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\n    /**\r\n     * @type {Array.<SignerInfo>}\r\n     * @desc signerInfos\r\n     */\n\n    this.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(SignedData, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"SignedData.version\", \"SignedData.digestAlgorithms\", \"SignedData.encapContentInfo\", \"SignedData.certificates\", \"SignedData.crls\", \"SignedData.signerInfos\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, SignedData.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SignedData\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\n      if (\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\n        this.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], function (algorithm) {\n          return new AlgorithmIdentifier({\n            schema: algorithm\n          });\n        });\n      this.encapContentInfo = new EncapsulatedContentInfo({\n        schema: asn1.result[\"SignedData.encapContentInfo\"]\n      });\n\n      if (\"SignedData.certificates\" in asn1.result) {\n        var certificateSet = new CertificateSet({\n          schema: new asn1js.Set({\n            value: asn1.result[\"SignedData.certificates\"].valueBlock.value\n          })\n        });\n        this.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\n      }\n\n      if (\"SignedData.crls\" in asn1.result) {\n        this.crls = Array.from(asn1.result[\"SignedData.crls\"], function (crl) {\n          if (crl.idBlock.tagClass === 1) return new CertificateRevocationList({\n            schema: crl\n          }); //region Create SEQUENCE from [1]\n\n          crl.idBlock.tagClass = 1; // UNIVERSAL\n\n          crl.idBlock.tagNumber = 16; // SEQUENCE\n          //endregion\n\n          return new OtherRevocationInfoFormat({\n            schema: crl\n          });\n        });\n      }\n\n      if (\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\n        this.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], function (signerInfoSchema) {\n          return new SignerInfo({\n            schema: signerInfoSchema\n          });\n        }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      //region Create array for output sequence\n      var outputArray = []; // IF ((certificates is present) AND\n      // \t(any certificates with a type of other are present)) OR\n      // \t((crls is present) AND\n      // \t(any crls with a type of other are present))\n      // THEN version MUST be 5\n      // ELSE\n      // \tIF (certificates is present) AND\n      // \t\t\t(any version 2 attribute certificates are present)\n      // \tTHEN version MUST be 4\n      // \tELSE\n      // \t\t\tIF ((certificates is present) AND\n      // \t\t\t\t(any version 1 attribute certificates are present)) OR\n      // \t\t\t\t(any SignerInfo structures are version 3) OR\n      // \t\t\t\t(encapContentInfo eContentType is other than id-data)\n      // \t\t\tTHEN version MUST be 3\n      // \t\t\tELSE version MUST be 1\n\n      if (this.certificates && this.certificates.length && this.certificates.some(function (o) {\n        return o instanceof OtherCertificateFormat;\n      }) || this.crls && this.crls.length && this.crls.some(function (o) {\n        return o instanceof OtherRevocationInfoFormat;\n      })) {\n        this.version = 5;\n      } else if (this.certificates && this.certificates.length && this.certificates.some(function (o) {\n        return o instanceof AttributeCertificateV2;\n      })) {\n        this.version = 4;\n      } else if (this.certificates && this.certificates.length && this.certificates.some(function (o) {\n        return o instanceof AttributeCertificateV1;\n      }) || this.signerInfos.some(function (o) {\n        return o.version === 3;\n      }) || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\n        this.version = 3;\n      } else {\n        this.version = 1;\n      }\n\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      })); //region Create array of digest algorithms\n\n      outputArray.push(new asn1js.Set({\n        value: Array.from(this.digestAlgorithms, function (algorithm) {\n          return algorithm.toSchema(encodeFlag);\n        })\n      })); //endregion\n\n      outputArray.push(this.encapContentInfo.toSchema());\n\n      if (\"certificates\" in this) {\n        var certificateSet = new CertificateSet({\n          certificates: this.certificates\n        });\n        var certificateSetSchema = certificateSet.toSchema();\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0\n          },\n          value: certificateSetSchema.valueBlock.value\n        }));\n      }\n\n      if (\"crls\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: Array.from(this.crls, function (crl) {\n            if (crl instanceof OtherRevocationInfoFormat) {\n              var crlSchema = crl.toSchema(encodeFlag);\n              crlSchema.idBlock.tagClass = 3;\n              crlSchema.idBlock.tagNumber = 1;\n              return crlSchema;\n            }\n\n            return crl.toSchema(encodeFlag);\n          })\n        }));\n      } //region Create array of signer infos\n\n\n      outputArray.push(new asn1js.Set({\n        value: Array.from(this.signerInfos, function (signerInfo) {\n          return signerInfo.toSchema(encodeFlag);\n        })\n      })); //endregion\n      //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        version: this.version,\n        digestAlgorithms: Array.from(this.digestAlgorithms, function (algorithm) {\n          return algorithm.toJSON();\n        }),\n        encapContentInfo: this.encapContentInfo.toJSON()\n      };\n      if (\"certificates\" in this) _object.certificates = Array.from(this.certificates, function (certificate) {\n        return certificate.toJSON();\n      });\n      if (\"crls\" in this) _object.crls = Array.from(this.crls, function (crl) {\n        return crl.toJSON();\n      });\n      _object.signerInfos = Array.from(this.signerInfos, function (signerInfo) {\n        return signerInfo.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Verify current SignedData value\r\n     * @param {Object} [param={}]\r\n     * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n     * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n     * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n     * @param {Date} [param.checkDate=new Date()]\r\n     * @param {Boolean} [param.checkChain=false]\r\n     * @param {Boolean} [param.extendedMode=false]\r\n     * @param {?Function} [findOrigin=null]\r\n     * @param {?Function} [findIssuer=null]\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var _this = this;\n\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$signer = _ref.signer,\n          signer = _ref$signer === void 0 ? -1 : _ref$signer,\n          _ref$data = _ref.data,\n          data = _ref$data === void 0 ? new ArrayBuffer(0) : _ref$data,\n          _ref$trustedCerts = _ref.trustedCerts,\n          trustedCerts = _ref$trustedCerts === void 0 ? [] : _ref$trustedCerts,\n          _ref$checkDate = _ref.checkDate,\n          checkDate = _ref$checkDate === void 0 ? new Date() : _ref$checkDate,\n          _ref$checkChain = _ref.checkChain,\n          checkChain = _ref$checkChain === void 0 ? false : _ref$checkChain,\n          _ref$extendedMode = _ref.extendedMode,\n          extendedMode = _ref$extendedMode === void 0 ? false : _ref$extendedMode,\n          _ref$passedWhenNotRev = _ref.passedWhenNotRevValues,\n          passedWhenNotRevValues = _ref$passedWhenNotRev === void 0 ? false : _ref$passedWhenNotRev,\n          _ref$findOrigin = _ref.findOrigin,\n          findOrigin = _ref$findOrigin === void 0 ? null : _ref$findOrigin,\n          _ref$findIssuer = _ref.findIssuer,\n          findIssuer = _ref$findIssuer === void 0 ? null : _ref$findIssuer;\n\n      //region Global variables\n      var sequence = Promise.resolve();\n      var messageDigestValue = new ArrayBuffer(0);\n      var shaAlgorithm = \"\";\n      var signerCertificate = {};\n      var timestampSerial = null;\n      var certificatePath = [];\n      var engine = getEngine(); //endregion\n      //region Get a \"crypto\" extension\n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n      //region Get a signer number\n\n      if (signer === -1) {\n        if (extendedMode) {\n          return Promise.reject({\n            date: checkDate,\n            code: 1,\n            message: \"Unable to get signer index from input parameters\",\n            signatureVerified: null,\n            signerCertificate: null,\n            signerCertificateVerified: null\n          });\n        }\n\n        return Promise.reject(\"Unable to get signer index from input parameters\");\n      } //endregion\n      //region Check that certificates field was included in signed data\n\n\n      if (\"certificates\" in this === false) {\n        if (extendedMode) {\n          return Promise.reject({\n            date: checkDate,\n            code: 2,\n            message: \"No certificates attached to this signed data\",\n            signatureVerified: null,\n            signerCertificate: null,\n            signerCertificateVerified: null\n          });\n        }\n\n        return Promise.reject(\"No certificates attached to this signed data\");\n      } //endregion\n      //region Find a certificate for specified signer\n\n\n      if (this.signerInfos[signer].sid instanceof IssuerAndSerialNumber) {\n        sequence = sequence.then(function () {\n          var _iterator = _createForOfIteratorHelper(_this.certificates),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var certificate = _step.value;\n              if (certificate instanceof Certificate === false) continue;\n\n              if (certificate.issuer.isEqual(_this.signerInfos[signer].sid.issuer) && certificate.serialNumber.isEqual(_this.signerInfos[signer].sid.serialNumber)) {\n                signerCertificate = certificate;\n                return Promise.resolve();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 3,\n              message: \"Unable to find signer certificate\",\n              signatureVerified: null,\n              signerCertificate: null,\n              signerCertificateVerified: null\n            });\n          }\n\n          return Promise.reject(\"Unable to find signer certificate\");\n        });\n      } else // Find by SubjectKeyIdentifier\n        {\n          sequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var sid, keyId, _iterator2, _step2, certificate, digest;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    sid = _this.signerInfos[signer].sid;\n                    keyId = sid.idBlock.isConstructed ? sid.valueBlock.value[0].valueBlock.valueHex // EXPLICIT OCTET STRING\n                    : sid.valueBlock.valueHex; // IMPLICIT OCTET STRING\n\n                    _iterator2 = _createForOfIteratorHelper(_this.certificates);\n                    _context.prev = 4;\n\n                    _iterator2.s();\n\n                  case 6:\n                    if ((_step2 = _iterator2.n()).done) {\n                      _context.next = 18;\n                      break;\n                    }\n\n                    certificate = _step2.value;\n\n                    if (certificate instanceof Certificate) {\n                      _context.next = 10;\n                      break;\n                    }\n\n                    return _context.abrupt(\"continue\", 16);\n\n                  case 10:\n                    _context.next = 12;\n                    return crypto.digest({\n                      name: \"sha-1\"\n                    }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\n\n                  case 12:\n                    digest = _context.sent;\n\n                    if (!isEqualBuffer(digest, keyId)) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    signerCertificate = certificate;\n                    return _context.abrupt(\"break\", 18);\n\n                  case 16:\n                    _context.next = 6;\n                    break;\n\n                  case 18:\n                    _context.next = 23;\n                    break;\n\n                  case 20:\n                    _context.prev = 20;\n                    _context.t0 = _context[\"catch\"](4);\n\n                    _iterator2.e(_context.t0);\n\n                  case 23:\n                    _context.prev = 23;\n\n                    _iterator2.f();\n\n                    return _context.finish(23);\n\n                  case 26:\n                    if (signerCertificate) {\n                      _context.next = 28;\n                      break;\n                    }\n\n                    throw new Error(\"Signing certificate not found\");\n\n                  case 28:\n                    _context.next = 35;\n                    break;\n\n                  case 30:\n                    _context.prev = 30;\n                    _context.t1 = _context[\"catch\"](0);\n\n                    if (!extendedMode) {\n                      _context.next = 34;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", Promise.reject({\n                      date: checkDate,\n                      code: 3,\n                      message: \"Unable to find signer certificate\",\n                      signatureVerified: null,\n                      signerCertificate: null,\n                      signerCertificateVerified: null\n                    }));\n\n                  case 34:\n                    throw \"Unable to find signer certificate\";\n\n                  case 35:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 30], [4, 20, 23, 26]]);\n          }))();\n        } //endregion\n      //region Verify internal digest in case of \"tSTInfo\" content type\n\n\n      sequence = sequence.then(function () {\n        if (_this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\") {\n          //region Check \"eContent\" precense\n          if (\"eContent\" in _this.encapContentInfo === false) return false; //endregion\n          //region Initialize TST_INFO value\n\n          var asn1 = asn1js.fromBER(_this.encapContentInfo.eContent.valueBlock.valueHex);\n          var tstInfo;\n\n          try {\n            tstInfo = new TSTInfo({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            return false;\n          } //endregion\n          //region Change \"checkDate\" and append \"timestampSerial\"\n\n\n          checkDate = tstInfo.genTime;\n          timestampSerial = tstInfo.serialNumber.valueBlock.valueHex; //endregion\n          //region Check that we do have detached data content\n\n          if (data.byteLength === 0) {\n            if (extendedMode) {\n              return Promise.reject({\n                date: checkDate,\n                code: 4,\n                message: \"Missed detached data input array\",\n                signatureVerified: null,\n                signerCertificate: signerCertificate,\n                signerCertificateVerified: null\n              });\n            }\n\n            return Promise.reject(\"Missed detached data input array\");\n          } //endregion\n\n\n          return tstInfo.verify({\n            data: data\n          });\n        }\n\n        return true;\n      }); //endregion\n      //region Make additional verification for signer's certificate\n\n      function checkCA(cert) {\n        /// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\n        //region Do not include signer's certificate\n        if (cert.issuer.isEqual(signerCertificate.issuer) === true && cert.serialNumber.isEqual(signerCertificate.serialNumber) === true) return null; //endregion\n\n        var isCA = false;\n\n        if (\"extensions\" in cert) {\n          var _iterator3 = _createForOfIteratorHelper(cert.extensions),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var extension = _step3.value;\n\n              if (extension.extnID === \"2.5.29.19\") // BasicConstraints\n                {\n                  if (\"cA\" in extension.parsedValue) {\n                    if (extension.parsedValue.cA === true) isCA = true;\n                  }\n                }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n\n        if (isCA) return cert;\n        return null;\n      }\n\n      if (checkChain) {\n        sequence = sequence.then(function (result) {\n          var _certificateChainEngi;\n\n          //region Verify result of previous operation\n          if (result === false) return false; //endregion\n\n          var promiseResults = Array.from(_this.certificates.filter(function (certificate) {\n            return certificate instanceof Certificate;\n          }), function (certificate) {\n            return checkCA(certificate);\n          });\n          var certificateChainValidationEngineParameters = {\n            checkDate: checkDate,\n            certs: Array.from(promiseResults.filter(function (_result) {\n              return _result !== null;\n            })),\n            trustedCerts: trustedCerts\n          };\n          if (findIssuer !== null) certificateChainValidationEngineParameters.findIssuer = findIssuer;\n          if (findOrigin !== null) certificateChainValidationEngineParameters.findOrigin = findOrigin;\n          var certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\n          certificateChainEngine.certs.push(signerCertificate);\n\n          if (\"crls\" in _this) {\n            var _iterator4 = _createForOfIteratorHelper(_this.crls),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var crl = _step4.value;\n                if (\"thisUpdate\" in crl) certificateChainEngine.crls.push(crl);else // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\n                  {\n                    if (crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\n                      certificateChainEngine.ocsps.push(new BasicOCSPResponse({\n                        schema: crl.otherRevInfo\n                      }));\n                  }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n\n          if (\"ocsps\" in _this) (_certificateChainEngi = certificateChainEngine.ocsps).push.apply(_certificateChainEngi, _toConsumableArray(_this.ocsps));\n          return certificateChainEngine.verify({\n            passedWhenNotRevValues: passedWhenNotRevValues\n          }).then(function (verificationResult) {\n            if (\"certificatePath\" in verificationResult) certificatePath = verificationResult.certificatePath;\n            if (verificationResult.result === true) return Promise.resolve(true);\n\n            if (extendedMode) {\n              return Promise.reject({\n                date: checkDate,\n                code: 5,\n                message: \"Validation of signer's certificate failed: \".concat(verificationResult.resultMessage),\n                signatureVerified: null,\n                signerCertificate: signerCertificate,\n                signerCertificateVerified: false\n              });\n            }\n\n            return Promise.reject(\"Validation of signer's certificate failed\");\n          }, function (error) {\n            if (extendedMode) {\n              return Promise.reject({\n                date: checkDate,\n                code: 5,\n                message: \"Validation of signer's certificate failed with error: \".concat(error instanceof Object ? error.resultMessage : error),\n                signatureVerified: null,\n                signerCertificate: signerCertificate,\n                signerCertificateVerified: false\n              });\n            }\n\n            return Promise.reject(\"Validation of signer's certificate failed with error: \".concat(error instanceof Object ? error.resultMessage : error));\n          });\n        });\n      } //endregion\n      //region Find signer's hashing algorithm\n\n\n      sequence = sequence.then(function (result) {\n        //region Verify result of previous operation\n        if (result === false) return false; //endregion\n\n        var signerInfoHashAlgorithm = getAlgorithmByOID(_this.signerInfos[signer].digestAlgorithm.algorithmId);\n\n        if (\"name\" in signerInfoHashAlgorithm === false) {\n          if (extendedMode) {\n            return Promise.reject({\n              date: checkDate,\n              code: 7,\n              message: \"Unsupported signature algorithm: \".concat(_this.signerInfos[signer].digestAlgorithm.algorithmId),\n              signatureVerified: null,\n              signerCertificate: signerCertificate,\n              signerCertificateVerified: true\n            });\n          }\n\n          return Promise.reject(\"Unsupported signature algorithm: \".concat(_this.signerInfos[signer].digestAlgorithm.algorithmId));\n        }\n\n        shaAlgorithm = signerInfoHashAlgorithm.name;\n        return true;\n      }); //endregion\n      //region Create correct data block for verification\n\n      sequence = sequence.then(function (result) {\n        //region Verify result of previous operation\n        if (result === false) return false; //endregion\n\n        if (\"eContent\" in _this.encapContentInfo) // Attached data\n          {\n            if (_this.encapContentInfo.eContent.idBlock.tagClass === 1 && _this.encapContentInfo.eContent.idBlock.tagNumber === 4) {\n              if (_this.encapContentInfo.eContent.idBlock.isConstructed === false) data = _this.encapContentInfo.eContent.valueBlock.valueHex;else {\n                var _iterator5 = _createForOfIteratorHelper(_this.encapContentInfo.eContent.valueBlock.value),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var contentValue = _step5.value;\n                    data = utilConcatBuf(data, contentValue.valueBlock.valueHex);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              }\n            } else data = _this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\n          } else // Detached data\n          {\n            if (data.byteLength === 0) // Check that \"data\" already provided by function parameter\n              {\n                if (extendedMode) {\n                  return Promise.reject({\n                    date: checkDate,\n                    code: 8,\n                    message: \"Missed detached data input array\",\n                    signatureVerified: null,\n                    signerCertificate: signerCertificate,\n                    signerCertificateVerified: true\n                  });\n                }\n\n                return Promise.reject(\"Missed detached data input array\");\n              }\n          }\n\n        if (\"signedAttrs\" in _this.signerInfos[signer]) {\n          //region Check mandatory attributes\n          var foundContentType = false;\n          var foundMessageDigest = false;\n\n          var _iterator6 = _createForOfIteratorHelper(_this.signerInfos[signer].signedAttrs.attributes),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var attribute = _step6.value;\n              //region Check that \"content-type\" attribute exists\n              if (attribute.type === \"1.2.840.113549.1.9.3\") foundContentType = true; //endregion\n              //region Check that \"message-digest\" attribute exists\n\n              if (attribute.type === \"1.2.840.113549.1.9.4\") {\n                foundMessageDigest = true;\n                messageDigestValue = attribute.values[0].valueBlock.valueHex;\n              } //endregion\n              //region Speed-up searching\n\n\n              if (foundContentType && foundMessageDigest) break; //endregion\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          if (foundContentType === false) {\n            if (extendedMode) {\n              return Promise.reject({\n                date: checkDate,\n                code: 9,\n                message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                signatureVerified: null,\n                signerCertificate: signerCertificate,\n                signerCertificateVerified: true\n              });\n            }\n\n            return Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\n          }\n\n          if (foundMessageDigest === false) {\n            if (extendedMode) {\n              return Promise.reject({\n                date: checkDate,\n                code: 10,\n                message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                signatureVerified: null,\n                signerCertificate: signerCertificate,\n                signerCertificateVerified: true\n              });\n            }\n\n            return Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\n          } //endregion\n\n        }\n\n        return true;\n      }); //endregion\n      //region Verify \"message-digest\" attribute in case of \"signedAttrs\"\n\n      sequence = sequence.then(function (result) {\n        //region Verify result of previous operation\n        if (result === false) return false; //endregion\n\n        if (\"signedAttrs\" in _this.signerInfos[signer]) return crypto.digest(shaAlgorithm, new Uint8Array(data));\n        return true;\n      }).then(\n      /**\r\n       * @param {ArrayBuffer} result\r\n       */\n      function (result) {\n        //region Verify result of previous operation\n        if (result === false) return false; //endregion\n\n        if (\"signedAttrs\" in _this.signerInfos[signer]) {\n          if (isEqualBuffer(result, messageDigestValue)) {\n            data = _this.signerInfos[signer].signedAttrs.encodedValue;\n            return true;\n          }\n\n          return false;\n        }\n\n        return true;\n      }); //endregion\n\n      sequence = sequence.then(function (result) {\n        //region Verify result of previous operation\n        if (result === false) return false; //endregion\n\n        return engine.subtle.verifyWithPublicKey(data, _this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\n      }); //region Make a final result\n\n      sequence = sequence.then(function (result) {\n        if (extendedMode) {\n          return {\n            date: checkDate,\n            code: 14,\n            message: \"\",\n            signatureVerified: result,\n            signerCertificate: signerCertificate,\n            timestampSerial: timestampSerial,\n            signerCertificateVerified: true,\n            certificatePath: certificatePath\n          };\n        }\n\n        return result;\n      }, function (error) {\n        if (extendedMode) {\n          if (\"code\" in error) return Promise.reject(error);\n          return Promise.reject({\n            date: checkDate,\n            code: 15,\n            message: \"Error during verification: \".concat(error.message),\n            signatureVerified: null,\n            signerCertificate: signerCertificate,\n            timestampSerial: timestampSerial,\n            signerCertificateVerified: true\n          });\n        }\n\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Signing current SignedData\r\n     * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n     * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n     * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n     * @param {ArrayBuffer} [data] Detached data\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey, signerIndex) {\n      var _this2 = this;\n\n      var hashAlgorithm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"SHA-1\";\n      var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ArrayBuffer(0);\n      //region Initial checking\n      if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve();\n      var parameters;\n      var engine = getEngine(); //endregion\n      //region Simple check for supported algorithm\n\n      var hashAlgorithmOID = getOIDByAlgorithm({\n        name: hashAlgorithm\n      });\n      if (hashAlgorithmOID === \"\") return Promise.reject(\"Unsupported hash algorithm: \".concat(hashAlgorithm)); //endregion\n      //region Append information about hash algorithm\n\n      if (this.digestAlgorithms.filter(function (algorithm) {\n        return algorithm.algorithmId === hashAlgorithmOID;\n      }).length === 0) {\n        this.digestAlgorithms.push(new AlgorithmIdentifier({\n          algorithmId: hashAlgorithmOID,\n          algorithmParams: new asn1js.Null()\n        }));\n      }\n\n      this.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\n        algorithmId: hashAlgorithmOID,\n        algorithmParams: new asn1js.Null()\n      }); //endregion\n      //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n      sequence = sequence.then(function () {\n        return engine.subtle.getSignatureParameters(privateKey, hashAlgorithm);\n      });\n      sequence = sequence.then(function (result) {\n        parameters = result.parameters;\n        _this2.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\n      }); //endregion\n      //region Create TBS data for signing\n\n      sequence = sequence.then(function () {\n        if (\"signedAttrs\" in _this2.signerInfos[signerIndex]) {\n          if (_this2.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0) data = _this2.signerInfos[signerIndex].signedAttrs.encodedValue;else {\n            data = _this2.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false); //region Change type from \"[0]\" to \"SET\" acordingly to standard\n\n            var view = new Uint8Array(data);\n            view[0] = 0x31; //endregion\n          }\n        } else {\n          if (\"eContent\" in _this2.encapContentInfo) // Attached data\n            {\n              if (_this2.encapContentInfo.eContent.idBlock.tagClass === 1 && _this2.encapContentInfo.eContent.idBlock.tagNumber === 4) {\n                if (_this2.encapContentInfo.eContent.idBlock.isConstructed === false) data = _this2.encapContentInfo.eContent.valueBlock.valueHex;else {\n                  var _iterator7 = _createForOfIteratorHelper(_this2.encapContentInfo.eContent.valueBlock.value),\n                      _step7;\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var content = _step7.value;\n                      data = utilConcatBuf(data, content.valueBlock.valueHex);\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                }\n              } else data = _this2.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\n            } else // Detached data\n            {\n              if (data.byteLength === 0) // Check that \"data\" already provided by function parameter\n                return Promise.reject(\"Missed detached data input array\");\n            }\n        }\n\n        return Promise.resolve();\n      }); //endregion\n      //region Signing TBS data on provided private key\n\n      sequence = sequence.then(function () {\n        return engine.subtle.signWithPrivateKey(data, privateKey, parameters);\n      });\n      sequence = sequence.then(function (result) {\n        _this2.signerInfos[signerIndex].signature = new asn1js.OctetString({\n          valueHex: result\n        });\n        return result;\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"digestAlgorithms\":\n          return [];\n\n        case \"encapContentInfo\":\n          return new EncapsulatedContentInfo();\n\n        case \"certificates\":\n          return [];\n\n        case \"crls\":\n          return [];\n\n        case \"ocsps\":\n          return [];\n\n        case \"signerInfos\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for SignedData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === SignedData.defaultValues(\"version\");\n\n        case \"encapContentInfo\":\n          return new EncapsulatedContentInfo();\n\n        case \"digestAlgorithms\":\n        case \"certificates\":\n        case \"crls\":\n        case \"ocsps\":\n        case \"signerInfos\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for SignedData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * SignedData ::= SEQUENCE {\r\n     *    version CMSVersion,\r\n     *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n     *    encapContentInfo EncapsulatedContentInfo,\r\n     *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n     *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n     *    signerInfos SignerInfos }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [optional]\r\n       * @property {string} [digestAlgorithms]\r\n       * @property {string} [encapContentInfo]\r\n       * @property {string} [certificates]\r\n       * @property {string} [crls]\r\n       * @property {string} [signerInfos]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      if (\"optional\" in names === false) names.optional = false;\n      return new asn1js.Sequence({\n        name: names.blockName || \"SignedData\",\n        optional: names.optional,\n        value: [new asn1js.Integer({\n          name: names.version || \"SignedData.version\"\n        }), new asn1js.Set({\n          value: [new asn1js.Repeated({\n            name: names.digestAlgorithms || \"SignedData.digestAlgorithms\",\n            value: AlgorithmIdentifier.schema()\n          })]\n        }), EncapsulatedContentInfo.schema(names.encapContentInfo || {\n          names: {\n            blockName: \"SignedData.encapContentInfo\"\n          }\n        }), new asn1js.Constructed({\n          name: names.certificates || \"SignedData.certificates\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: CertificateSet.schema().valueBlock.value\n        }), // IMPLICIT CertificateSet\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: RevocationInfoChoices.schema(names.crls || {\n            names: {\n              crls: \"SignedData.crls\"\n            }\n          }).valueBlock.value\n        }), // IMPLICIT RevocationInfoChoices\n        new asn1js.Set({\n          value: [new asn1js.Repeated({\n            name: names.signerInfos || \"SignedData.signerInfos\",\n            value: SignerInfo.schema()\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return SignedData;\n}();\n\nexport { SignedData as default };\nSignedData.ID_DATA = \"1.2.840.113549.1.7.1\"; //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SignedData.js"],"names":["asn1js","getParametersValue","utilConcatBuf","isEqualBuffer","clearProps","getCrypto","getEngine","getOIDByAlgorithm","getAlgorithmByOID","AlgorithmIdentifier","EncapsulatedContentInfo","Certificate","CertificateRevocationList","OtherRevocationInfoFormat","SignerInfo","CertificateSet","RevocationInfoChoices","IssuerAndSerialNumber","TSTInfo","CertificateChainValidationEngine","BasicOCSPResponse","OtherCertificateFormat","AttributeCertificateV1","AttributeCertificateV2","SignedData","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","ocsps","signerInfos","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","Array","from","algorithm","certificateSet","Set","value","slice","crl","idBlock","tagClass","tagNumber","signerInfoSchema","encodeFlag","outputArray","length","some","o","eContentType","ID_DATA","push","Integer","toSchema","certificateSetSchema","Constructed","crlSchema","signerInfo","Sequence","_object","toJSON","certificate","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","extendedMode","passedWhenNotRevValues","findOrigin","findIssuer","sequence","Promise","resolve","messageDigestValue","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","engine","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","then","issuer","isEqual","serialNumber","keyId","isConstructed","valueHex","digest","name","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","fromBER","eContent","tstInfo","ex","genTime","byteLength","verify","checkCA","cert","isCA","extensions","extension","extnID","parsedValue","cA","promiseResults","filter","certificateChainValidationEngineParameters","certs","_result","certificateChainEngine","otherRevInfoFormat","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","signedAttrs","attributes","attribute","type","values","encodedValue","subtle","verifyWithPublicKey","signature","signatureAlgorithm","privateKey","signerIndex","hashAlgorithm","hashAlgorithmOID","algorithmParams","Null","getSignatureParameters","toBER","view","content","signWithPrivateKey","OctetString","memberName","memberValue","names","optional","blockName","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport TSTInfo from \"./TSTInfo.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @desc digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @desc encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @desc certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\tif(\"ocsps\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @desc signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"ocsps\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t *    encapContentInfo EncapsulatedContentInfo,\r\n\t *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t *    signerInfos SignerInfos }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certificates || \"SignedData.certificates\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignedData.version\",\r\n\t\t\t\"SignedData.digestAlgorithms\",\r\n\t\t\t\"SignedData.encapContentInfo\",\r\n\t\t\t\"SignedData.certificates\",\r\n\t\t\t\"SignedData.crls\",\r\n\t\t\t\"SignedData.signerInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result[\"SignedData.certificates\"].valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tthis.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\t// IF ((certificates is present) AND\r\n\t\t// \t(any certificates with a type of other are present)) OR\r\n\t\t// \t((crls is present) AND\r\n\t\t// \t(any crls with a type of other are present))\r\n\t\t// THEN version MUST be 5\r\n\t\t// ELSE\r\n\t\t// \tIF (certificates is present) AND\r\n\t\t// \t\t\t(any version 2 attribute certificates are present)\r\n\t\t// \tTHEN version MUST be 4\r\n\t\t// \tELSE\r\n\t\t// \t\t\tIF ((certificates is present) AND\r\n\t\t// \t\t\t\t(any version 1 attribute certificates are present)) OR\r\n\t\t// \t\t\t\t(any SignerInfo structures are version 3) OR\r\n\t\t// \t\t\t\t(encapContentInfo eContentType is other than id-data)\r\n\t\t// \t\t\tTHEN version MUST be 3\r\n\t\t// \t\t\tELSE version MUST be 1\r\n\t\tif ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\r\n\t\t\t|| (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\r\n\t\t\tthis.version = 5;\r\n\t\t} else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\r\n\t\t\tthis.version = 4;\r\n\t\t} else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\r\n\t\t\t|| this.signerInfos.some(o => o.version === 3)\r\n\t\t\t|| this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\r\n\t\t\tthis.version = 3;\r\n\t\t} else {\r\n\t\t\tthis.version = 1;\r\n\t\t}\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({ certificates: this.certificates });\r\n\t\t\tconst certificateSetSchema = certificateSet.toSchema();\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t},\r\n\t\t\t\tvalue: certificateSetSchema.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param {Object} [param={}]\r\n\t * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n\t * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n\t * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n\t * @param {Date} [param.checkDate=new Date()]\r\n\t * @param {Boolean} [param.checkChain=false]\r\n\t * @param {Boolean} [param.extendedMode=false]\r\n\t * @param {?Function} [findOrigin=null]\r\n\t * @param {?Function} [findIssuer=null]\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\textendedMode = false,\r\n\t\tpassedWhenNotRevValues = false,\r\n\t\tfindOrigin = null,\r\n\t\tfindIssuer = null\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = (async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst sid = this.signerInfos[signer].sid;\r\n\t\t\t\t\tconst keyId = sid.idBlock.isConstructed\r\n\t\t\t\t\t\t? sid.valueBlock.value[0].valueBlock.valueHex // EXPLICIT OCTET STRING\r\n\t\t\t\t\t\t: sid.valueBlock.valueHex; // IMPLICIT OCTET STRING\r\n\r\n\t\t\t\t\tfor (const certificate of this.certificates) {\r\n\t\t\t\t\t\tif (!(certificate instanceof Certificate)) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tconst digest = await crypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t\t\t\t\t\tif(isEqualBuffer(digest, keyId))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!signerCertificate) {\r\n\t\t\t\t\t\tthrow new Error(\"Signing certificate not found\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow \"Unable to find signer certificate\";\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainValidationEngineParameters = {\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif(findIssuer !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findIssuer = findIssuer;\r\n\t\t\t\t\r\n\t\t\t\tif(findOrigin !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findOrigin = findOrigin;\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"thisUpdate\" in crl)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify({ passedWhenNotRevValues }).then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\r\n\t\t});\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n\r\nSignedData.ID_DATA = \"1.2.840.113549.1.7.1\";\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
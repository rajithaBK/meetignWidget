{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\nimport RecipientKeyIdentifier from \"./RecipientKeyIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar KeyAgreeRecipientIdentifier = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KeyAgreeRecipientIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function KeyAgreeRecipientIdentifier() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KeyAgreeRecipientIdentifier);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc variant\r\n     */\n    this.variant = getParametersValue(parameters, \"variant\", KeyAgreeRecipientIdentifier.defaultValues(\"variant\"));\n    /**\r\n     * @type {*}\r\n     * @desc values\r\n     */\n\n    this.value = getParametersValue(parameters, \"value\", KeyAgreeRecipientIdentifier.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(KeyAgreeRecipientIdentifier, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"blockName\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({\n        names: {\n          blockName: \"blockName\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientIdentifier\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (asn1.result.blockName.idBlock.tagClass === 1) {\n        this.variant = 1;\n        this.value = new IssuerAndSerialNumber({\n          schema: asn1.result.blockName\n        });\n      } else {\n        this.variant = 2;\n        this.value = new RecipientKeyIdentifier({\n          schema: new asn1js.Sequence({\n            value: asn1.result.blockName.valueBlock.value\n          })\n        });\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      switch (this.variant) {\n        case 1:\n          return this.value.toSchema();\n\n        case 2:\n          return new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: this.value.toSchema().valueBlock.value\n          });\n\n        default:\n          return new asn1js.Any();\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        variant: this.variant\n      };\n      if (this.variant === 1 || this.variant === 2) _object.value = this.value.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"variant\":\n          return -1;\n\n        case \"value\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for KeyAgreeRecipientIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"variant\":\n          return memberValue === -1;\n\n        case \"value\":\n          return Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for KeyAgreeRecipientIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * KeyAgreeRecipientIdentifier ::= CHOICE {\r\n     *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n     *    rKeyId [0] IMPLICIT RecipientKeyIdentifier }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [issuerAndSerialNumber]\r\n       * @property {string} [rKeyId]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Choice({\n        value: [IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\n          names: {\n            blockName: names.blockName || \"\"\n          }\n        }), new asn1js.Constructed({\n          name: names.blockName || \"\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: RecipientKeyIdentifier.schema(names.rKeyId || {\n            names: {\n              blockName: names.blockName || \"\"\n            }\n          }).valueBlock.value\n        })]\n      });\n    }\n  }]);\n\n  return KeyAgreeRecipientIdentifier;\n}(); //**************************************************************************************\n\n\nexport { KeyAgreeRecipientIdentifier as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/KeyAgreeRecipientIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","IssuerAndSerialNumber","RecipientKeyIdentifier","KeyAgreeRecipientIdentifier","parameters","variant","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","idBlock","tagClass","Sequence","valueBlock","toSchema","Constructed","tagNumber","Any","_object","toJSON","memberName","memberValue","Object","keys","length","Choice","issuerAndSerialNumber","name","rKeyId"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientKeyIdentifier from \"./RecipientKeyIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyAgreeRecipientIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyAgreeRecipientIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc variant\r\n\t\t */\r\n\t\tthis.variant = getParametersValue(parameters, \"variant\", KeyAgreeRecipientIdentifier.defaultValues(\"variant\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", KeyAgreeRecipientIdentifier.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyAgreeRecipientIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    rKeyId [0] IMPLICIT RecipientKeyIdentifier }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerAndSerialNumber]\r\n\t\t * @property {string} [rKeyId]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\tvalue: [\r\n\t\t\t\tIssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.blockName || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RecipientKeyIdentifier.schema(names.rKeyId || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.blockName || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"blockName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyAgreeRecipientIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"blockName\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(asn1.result.blockName.idBlock.tagClass === 1)\r\n\t\t{\r\n\t\t\tthis.variant = 1;\r\n\t\t\tthis.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.variant = 2;\r\n\r\n\t\t\tthis.value = new RecipientKeyIdentifier({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.blockName.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tswitch(this.variant)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this.value.toSchema();\r\n\t\t\tcase 2:\r\n\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.value.toSchema().valueBlock.value\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tvariant: this.variant\r\n\t\t};\r\n\r\n\t\tif((this.variant === 1) || (this.variant === 2))\r\n\t\t\t_object.value = this.value.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
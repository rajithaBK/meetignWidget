{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nexport default class IssuingDistributionPoint {\n  //**********************************************************************************\n\n  /**\n   * Constructor for IssuingDistributionPoint class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n    if (\"distributionPoint\" in parameters)\n      /**\n       * @type {Array.<GeneralName>|RelativeDistinguishedNames}\n       * @desc distributionPoint\n       */\n      this.distributionPoint = getParametersValue(parameters, \"distributionPoint\", IssuingDistributionPoint.defaultValues(\"distributionPoint\"));\n    /**\n     * @type {boolean}\n     * @desc onlyContainsUserCerts\n     */\n\n    this.onlyContainsUserCerts = getParametersValue(parameters, \"onlyContainsUserCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"));\n    /**\n     * @type {boolean}\n     * @desc onlyContainsCACerts\n     */\n\n    this.onlyContainsCACerts = getParametersValue(parameters, \"onlyContainsCACerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"));\n    if (\"onlySomeReasons\" in parameters)\n      /**\n       * @type {number}\n       * @desc onlySomeReasons\n       */\n      this.onlySomeReasons = getParametersValue(parameters, \"onlySomeReasons\", IssuingDistributionPoint.defaultValues(\"onlySomeReasons\"));\n    /**\n     * @type {boolean}\n     * @desc indirectCRL\n     */\n\n    this.indirectCRL = getParametersValue(parameters, \"indirectCRL\", IssuingDistributionPoint.defaultValues(\"indirectCRL\"));\n    /**\n     * @type {boolean}\n     * @desc onlyContainsAttributeCerts\n     */\n\n    this.onlyContainsAttributeCerts = getParametersValue(parameters, \"onlyContainsAttributeCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"distributionPoint\":\n        return [];\n\n      case \"onlyContainsUserCerts\":\n        return false;\n\n      case \"onlyContainsCACerts\":\n        return false;\n\n      case \"onlySomeReasons\":\n        return 0;\n\n      case \"indirectCRL\":\n        return false;\n\n      case \"onlyContainsAttributeCerts\":\n        return false;\n\n      default:\n        throw new Error(`Invalid member name for IssuingDistributionPoint class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * IssuingDistributionPoint ::= SEQUENCE {\n   *    distributionPoint          [0] DistributionPointName OPTIONAL,\n   *    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n   *    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n   *    onlySomeReasons            [3] ReasonFlags OPTIONAL,\n   *    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n   *    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\n   *\n   * ReasonFlags ::= BIT STRING {\n   *    unused                  (0),\n   *    keyCompromise           (1),\n   *    cACompromise            (2),\n   *    affiliationChanged      (3),\n   *    superseded              (4),\n   *    cessationOfOperation    (5),\n   *    certificateHold         (6),\n   *    privilegeWithdrawn      (7),\n   *    aACompromise            (8) }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [distributionPoint]\n     * @property {string} [distributionPointNames]\n     * @property {string} [onlyContainsUserCerts]\n     * @property {string} [onlyContainsCACerts]\n     * @property {string} [onlySomeReasons]\n     * @property {string} [indirectCRL]\n     * @property {string} [onlyContainsAttributeCerts]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Choice({\n          value: [new asn1js.Constructed({\n            name: names.distributionPoint || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Repeated({\n              name: names.distributionPointNames || \"\",\n              value: GeneralName.schema()\n            })]\n          }), new asn1js.Constructed({\n            name: names.distributionPoint || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: RelativeDistinguishedNames.schema().valueBlock.value\n          })]\n        })]\n      }), new asn1js.Primitive({\n        name: names.onlyContainsUserCerts || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        }\n      }), // IMPLICIT boolean value\n      new asn1js.Primitive({\n        name: names.onlyContainsCACerts || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        }\n      }), // IMPLICIT boolean value\n      new asn1js.Primitive({\n        name: names.onlySomeReasons || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 3 // [3]\n\n        }\n      }), // IMPLICIT bitstring value\n      new asn1js.Primitive({\n        name: names.indirectCRL || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 4 // [4]\n\n        }\n      }), // IMPLICIT boolean value\n      new asn1js.Primitive({\n        name: names.onlyContainsAttributeCerts || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 5 // [5]\n\n        }\n      }) // IMPLICIT boolean value\n      ]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"distributionPoint\", \"distributionPointNames\", \"onlyContainsUserCerts\", \"onlyContainsCACerts\", \"onlySomeReasons\", \"indirectCRL\", \"onlyContainsAttributeCerts\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n      names: {\n        distributionPoint: \"distributionPoint\",\n        distributionPointNames: \"distributionPointNames\",\n        onlyContainsUserCerts: \"onlyContainsUserCerts\",\n        onlyContainsCACerts: \"onlyContainsCACerts\",\n        onlySomeReasons: \"onlySomeReasons\",\n        indirectCRL: \"indirectCRL\",\n        onlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"distributionPoint\" in asn1.result) {\n      switch (true) {\n        case asn1.result.distributionPoint.idBlock.tagNumber === 0:\n          // GENERAL_NAMES variant\n          this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({\n            schema: element\n          }));\n          break;\n\n        case asn1.result.distributionPoint.idBlock.tagNumber === 1:\n          // RDN variant\n          {\n            this.distributionPoint = new RelativeDistinguishedNames({\n              schema: new asn1js.Sequence({\n                value: asn1.result.distributionPoint.valueBlock.value\n              })\n            });\n          }\n          break;\n\n        default:\n          throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n      }\n    }\n\n    if (\"onlyContainsUserCerts\" in asn1.result) {\n      const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n      this.onlyContainsUserCerts = view[0] !== 0x00;\n    }\n\n    if (\"onlyContainsCACerts\" in asn1.result) {\n      const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n      this.onlyContainsCACerts = view[0] !== 0x00;\n    }\n\n    if (\"onlySomeReasons\" in asn1.result) {\n      const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n      this.onlySomeReasons = view[0];\n    }\n\n    if (\"indirectCRL\" in asn1.result) {\n      const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n      this.indirectCRL = view[0] !== 0x00;\n    }\n\n    if (\"onlyContainsAttributeCerts\" in asn1.result) {\n      const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n      this.onlyContainsAttributeCerts = view[0] !== 0x00;\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"distributionPoint\" in this) {\n      let value;\n\n      if (this.distributionPoint instanceof Array) {\n        value = new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: Array.from(this.distributionPoint, element => element.toSchema())\n        });\n      } else {\n        value = this.distributionPoint.toSchema();\n        value.idBlock.tagClass = 3; // CONTEXT - SPECIFIC\n\n        value.idBlock.tagNumber = 1; // [1]\n      }\n\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [value]\n      }));\n    }\n\n    if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\")) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        valueHex: new Uint8Array([0xFF]).buffer\n      }));\n    }\n\n    if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\")) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 2 // [2]\n\n        },\n        valueHex: new Uint8Array([0xFF]).buffer\n      }));\n    }\n\n    if (\"onlySomeReasons\" in this) {\n      const buffer = new ArrayBuffer(1);\n      const view = new Uint8Array(buffer);\n      view[0] = this.onlySomeReasons;\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 3 // [3]\n\n        },\n        valueHex: buffer\n      }));\n    }\n\n    if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\")) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 4 // [4]\n\n        },\n        valueHex: new Uint8Array([0xFF]).buffer\n      }));\n    }\n\n    if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")) {\n      outputArray.push(new asn1js.Primitive({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 5 // [5]\n\n        },\n        valueHex: new Uint8Array([0xFF]).buffer\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const object = {};\n\n    if (\"distributionPoint\" in this) {\n      if (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());else object.distributionPoint = this.distributionPoint.toJSON();\n    }\n\n    if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\")) object.onlyContainsUserCerts = this.onlyContainsUserCerts;\n    if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\")) object.onlyContainsCACerts = this.onlyContainsCACerts;\n    if (\"onlySomeReasons\" in this) object.onlySomeReasons = this.onlySomeReasons;\n    if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\")) object.indirectCRL = this.indirectCRL;\n    if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")) object.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/IssuingDistributionPoint.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","RelativeDistinguishedNames","IssuingDistributionPoint","constructor","parameters","distributionPoint","defaultValues","onlyContainsUserCerts","onlyContainsCACerts","onlySomeReasons","indirectCRL","onlyContainsAttributeCerts","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Choice","Repeated","distributionPointNames","valueBlock","Primitive","asn1","compareSchema","verified","result","Array","from","element","view","Uint8Array","valueHex","toSchema","outputArray","push","buffer","ArrayBuffer","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class IssuingDistributionPoint\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for IssuingDistributionPoint class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"distributionPoint\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralName>|RelativeDistinguishedNames}\n\t\t\t * @desc distributionPoint\n\t\t\t */\n\t\t\tthis.distributionPoint = getParametersValue(parameters, \"distributionPoint\", IssuingDistributionPoint.defaultValues(\"distributionPoint\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsUserCerts\n\t\t */\n\t\tthis.onlyContainsUserCerts = getParametersValue(parameters, \"onlyContainsUserCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsCACerts\n\t\t */\n\t\tthis.onlyContainsCACerts = getParametersValue(parameters, \"onlyContainsCACerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"));\n\n\t\tif(\"onlySomeReasons\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc onlySomeReasons\n\t\t\t */\n\t\t\tthis.onlySomeReasons = getParametersValue(parameters, \"onlySomeReasons\", IssuingDistributionPoint.defaultValues(\"onlySomeReasons\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc indirectCRL\n\t\t */\n\t\tthis.indirectCRL = getParametersValue(parameters, \"indirectCRL\", IssuingDistributionPoint.defaultValues(\"indirectCRL\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsAttributeCerts\n\t\t */\n\t\tthis.onlyContainsAttributeCerts = getParametersValue(parameters, \"onlyContainsAttributeCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"distributionPoint\":\n\t\t\t\treturn [];\n\t\t\tcase \"onlyContainsUserCerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsCACerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlySomeReasons\":\n\t\t\t\treturn 0;\n\t\t\tcase \"indirectCRL\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsAttributeCerts\":\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuingDistributionPoint class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * IssuingDistributionPoint ::= SEQUENCE {\n\t *    distributionPoint          [0] DistributionPointName OPTIONAL,\n\t *    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n\t *    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n\t *    onlySomeReasons            [3] ReasonFlags OPTIONAL,\n\t *    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n\t *    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\n\t *\n\t * ReasonFlags ::= BIT STRING {\n\t *    unused                  (0),\n\t *    keyCompromise           (1),\n\t *    cACompromise            (2),\n\t *    affiliationChanged      (3),\n\t *    superseded              (4),\n\t *    cessationOfOperation    (5),\n\t *    certificateHold         (6),\n\t *    privilegeWithdrawn      (7),\n\t *    aACompromise            (8) }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [distributionPoint]\n\t\t * @property {string} [distributionPointNames]\n\t\t * @property {string} [onlyContainsUserCerts]\n\t\t * @property {string} [onlyContainsCACerts]\n\t\t * @property {string} [onlySomeReasons]\n\t\t * @property {string} [indirectCRL]\n\t\t * @property {string} [onlyContainsAttributeCerts]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\t\t\t\t\tname: (names.distributionPointNames || \"\"),\n\t\t\t\t\t\t\t\t\t\t\tvalue: GeneralName.schema()\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: RelativeDistinguishedNames.schema().valueBlock.value\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsUserCerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsCACerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlySomeReasons || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT bitstring value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.indirectCRL || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsAttributeCerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t\t}\n\t\t\t\t}) // IMPLICIT boolean value\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"distributionPoint\",\n\t\t\t\"distributionPointNames\",\n\t\t\t\"onlyContainsUserCerts\",\n\t\t\t\"onlyContainsCACerts\",\n\t\t\t\"onlySomeReasons\",\n\t\t\t\"indirectCRL\",\n\t\t\t\"onlyContainsAttributeCerts\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tIssuingDistributionPoint.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdistributionPoint: \"distributionPoint\",\n\t\t\t\t\tdistributionPointNames: \"distributionPointNames\",\n\t\t\t\t\tonlyContainsUserCerts: \"onlyContainsUserCerts\",\n\t\t\t\t\tonlyContainsCACerts: \"onlyContainsCACerts\",\n\t\t\t\t\tonlySomeReasons: \"onlySomeReasons\",\n\t\t\t\t\tindirectCRL: \"indirectCRL\",\n\t\t\t\t\tonlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"distributionPoint\" in asn1.result)\n\t\t{\n\t\t\tswitch(true)\n\t\t\t{\n\t\t\t\tcase (asn1.result.distributionPoint.idBlock.tagNumber === 0): // GENERAL_NAMES variant\n\t\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n\t\t\t\t\tbreak;\n\t\t\t\tcase (asn1.result.distributionPoint.idBlock.tagNumber === 1): // RDN variant\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.distributionPoint = new RelativeDistinguishedNames({\n\t\t\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(\"onlyContainsUserCerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsUserCerts = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlyContainsCACerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsCACerts = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlySomeReasons\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n\t\t\tthis.onlySomeReasons = view[0];\n\t\t}\n\t\t\n\t\tif(\"indirectCRL\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n\t\t\tthis.indirectCRL = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlyContainsAttributeCerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsAttributeCerts = (view[0] !== 0x00);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\t\t\n\t\tif(\"distributionPoint\" in this)\n\t\t{\n\t\t\tlet value;\n\t\t\t\n\t\t\tif(this.distributionPoint instanceof Array)\n\t\t\t{\n\t\t\t\tvalue = new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = this.distributionPoint.toSchema();\n\t\t\t\t\n\t\t\t\tvalue.idBlock.tagClass = 3; // CONTEXT - SPECIFIC\n\t\t\t\tvalue.idBlock.tagNumber = 1; // [1]\n\t\t\t}\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [value]\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"onlySomeReasons\" in this)\n\t\t{\n\t\t\tconst buffer = new ArrayBuffer(1);\n\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\n\t\t\tview[0] = this.onlySomeReasons;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tvalueHex: buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {};\n\t\t\n\t\tif(\"distributionPoint\" in this)\n\t\t{\n\t\t\tif(this.distributionPoint instanceof Array)\n\t\t\t\tobject.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());\n\t\t\telse\n\t\t\t\tobject.distributionPoint = this.distributionPoint.toJSON();\n\t\t}\n\t\t\n\t\tif(this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"))\n\t\t\tobject.onlyContainsUserCerts = this.onlyContainsUserCerts;\n\t\t\n\t\tif(this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"))\n\t\t\tobject.onlyContainsCACerts = this.onlyContainsCACerts;\n\t\t\n\t\tif(\"onlySomeReasons\" in this)\n\t\t\tobject.onlySomeReasons = this.onlySomeReasons;\n\t\t\n\t\tif(this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\"))\n\t\t\tobject.indirectCRL = this.indirectCRL;\n\t\t\n\t\tif(this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"))\n\t\t\tobject.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n\t\t\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
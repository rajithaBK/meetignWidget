{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from \"[MS-WCCE]: Windows Client Certificate Enrollment Protocol\"\n */\n\nvar CertificateTemplate = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for CertificateTemplate class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function CertificateTemplate() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CertificateTemplate);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     * @desc templateID\n     */\n    this.templateID = getParametersValue(parameters, \"templateID\", CertificateTemplate.defaultValues(\"templateID\"));\n    if (\"templateMajorVersion\" in parameters)\n      /**\n       * @type {number}\n       * @desc templateMajorVersion\n       */\n      this.templateMajorVersion = getParametersValue(parameters, \"templateMajorVersion\", CertificateTemplate.defaultValues(\"templateMajorVersion\"));\n    if (\"templateMinorVersion\" in parameters)\n      /**\n       * @type {number}\n       * @desc templateMinorVersion\n       */\n      this.templateMinorVersion = getParametersValue(parameters, \"templateMinorVersion\", CertificateTemplate.defaultValues(\"templateMinorVersion\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(CertificateTemplate, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"templateID\", \"templateMajorVersion\", \"templateMinorVersion\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, CertificateTemplate.schema({\n        names: {\n          templateID: \"templateID\",\n          templateMajorVersion: \"templateMajorVersion\",\n          templateMinorVersion: \"templateMinorVersion\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificateTemplate\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.templateID = asn1.result.templateID.valueBlock.toString();\n      if (\"templateMajorVersion\" in asn1.result) this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n      if (\"templateMinorVersion\" in asn1.result) this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.templateID\n      }));\n      if (\"templateMajorVersion\" in this) outputArray.push(new asn1js.Integer({\n        value: this.templateMajorVersion\n      }));\n      if (\"templateMinorVersion\" in this) outputArray.push(new asn1js.Integer({\n        value: this.templateMinorVersion\n      })); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        extnID: this.templateID\n      };\n      if (\"templateMajorVersion\" in this) object.templateMajorVersion = this.templateMajorVersion;\n      if (\"templateMinorVersion\" in this) object.templateMinorVersion = this.templateMinorVersion;\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"templateID\":\n          return \"\";\n\n        case \"templateMajorVersion\":\n        case \"templateMinorVersion\":\n          return 0;\n\n        default:\n          throw new Error(\"Invalid member name for CertificateTemplate class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * CertificateTemplateOID ::= SEQUENCE {\n        *    templateID              OBJECT IDENTIFIER,\n        *    templateMajorVersion    INTEGER (0..4294967295) OPTIONAL,\n        *    templateMinorVersion    INTEGER (0..4294967295) OPTIONAL\n        * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [templateID]\n       * @property {string} [templateMajorVersion]\n       * @property {string} [templateMinorVersion]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.templateID || \"\"\n        }), new asn1js.Integer({\n          name: names.templateMajorVersion || \"\",\n          optional: true\n        }), new asn1js.Integer({\n          name: names.templateMinorVersion || \"\",\n          optional: true\n        })]\n      });\n    }\n  }]);\n\n  return CertificateTemplate;\n}(); //**************************************************************************************\n\n\nexport { CertificateTemplate as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertificateTemplate.js"],"names":["asn1js","getParametersValue","clearProps","CertificateTemplate","parameters","templateID","defaultValues","templateMajorVersion","templateMinorVersion","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","valueDec","outputArray","push","ObjectIdentifier","value","Integer","Sequence","object","extnID","memberName","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from \"[MS-WCCE]: Windows Client Certificate Enrollment Protocol\"\n */\nexport default class CertificateTemplate\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CertificateTemplate class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc templateID\n\t\t */\n\t\tthis.templateID = getParametersValue(parameters, \"templateID\", CertificateTemplate.defaultValues(\"templateID\"));\n\n\t\tif(\"templateMajorVersion\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc templateMajorVersion\n\t\t\t */\n\t\t\tthis.templateMajorVersion = getParametersValue(parameters, \"templateMajorVersion\", CertificateTemplate.defaultValues(\"templateMajorVersion\"));\n\n\t\tif(\"templateMinorVersion\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc templateMinorVersion\n\t\t\t */\n\t\t\tthis.templateMinorVersion = getParametersValue(parameters, \"templateMinorVersion\", CertificateTemplate.defaultValues(\"templateMinorVersion\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"templateID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"templateMajorVersion\":\n\t\t\tcase \"templateMinorVersion\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CertificateTemplate class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CertificateTemplateOID ::= SEQUENCE {\n     *    templateID              OBJECT IDENTIFIER,\n     *    templateMajorVersion    INTEGER (0..4294967295) OPTIONAL,\n     *    templateMinorVersion    INTEGER (0..4294967295) OPTIONAL\n     * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [templateID]\n\t\t * @property {string} [templateMajorVersion]\n\t\t * @property {string} [templateMinorVersion]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.templateID || \"\") }),\n\t\t\t\tnew asn1js.Integer({\n\t\t\t\t\tname: (names.templateMajorVersion || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Integer({\n\t\t\t\t\tname: (names.templateMinorVersion || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"templateID\",\n\t\t\t\"templateMajorVersion\",\n\t\t\t\"templateMinorVersion\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tCertificateTemplate.schema({\n\t\t\t\tnames: {\n\t\t\t\t\ttemplateID: \"templateID\",\n\t\t\t\t\ttemplateMajorVersion: \"templateMajorVersion\",\n\t\t\t\t\ttemplateMinorVersion: \"templateMinorVersion\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateTemplate\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.templateID = asn1.result.templateID.valueBlock.toString();\n\n\t\tif(\"templateMajorVersion\" in asn1.result)\n\t\t\tthis.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n\n\t\tif(\"templateMinorVersion\" in asn1.result)\n\t\t\tthis.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.templateID }));\n\n\t\tif(\"templateMajorVersion\" in this)\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.templateMajorVersion }));\n\n\t\tif(\"templateMinorVersion\" in this)\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.templateMinorVersion }));\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\textnID: this.templateID\n\t\t};\n\n\t\tif(\"templateMajorVersion\" in this)\n\t\t\tobject.templateMajorVersion = this.templateMajorVersion;\n\n\t\tif(\"templateMinorVersion\" in this)\n\t\t\tobject.templateMinorVersion = this.templateMinorVersion;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _omit2 = _interopRequireDefault(require(\"lodash/omit\"));\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _has2 = _interopRequireDefault(require(\"lodash/has\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _util = _interopRequireDefault(require(\"util\"));\n\nvar _httpCore = require(\"@webex/http-core\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @class\n */\n\n\nvar RequestLoggerInterceptor = /*#__PURE__*/function (_Interceptor) {\n  (0, _inherits2.default)(RequestLoggerInterceptor, _Interceptor);\n\n  var _super = _createSuper(RequestLoggerInterceptor);\n\n  function RequestLoggerInterceptor() {\n    (0, _classCallCheck2.default)(this, RequestLoggerInterceptor);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(RequestLoggerInterceptor, [{\n    key: \"onRequest\",\n    value:\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    function onRequest(options) {\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n      logger.info('/**********************************************************************\\\\ ');\n      logger.info('Request:', options.method || 'GET', options.uri);\n      logger.info('WEBEX_TRACKINGID: ', (0, _get2.default)(options, 'headers.trackingid'));\n      /* istanbul ignore next */\n\n      if ((0, _has2.default)(options, 'headers.x-trans-id')) {\n        logger.info('X-Trans-ID: ', (0, _get2.default)(options, 'headers.x-trans-id'));\n      }\n\n      var now = new Date();\n\n      if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n        logger.info('timestamp (start): ', now.getTime(), now.toISOString());\n\n        try {\n          // Determine if body is a buffer without relying on Buffer to avoid\n          // node/browser conflicts.\n          if (options.body && options.body.length && !(0, _isArray2.default)(options.body) && !(0, _isString2.default)(options.body)) {\n            logger.info('Request Options:', _util.default.inspect((0, _omit2.default)(options, 'body'), {\n              depth: null\n            }));\n          } else {\n            logger.info('Request Options:', _util.default.inspect(options, {\n              depth: null\n            }));\n          }\n        } catch (e) {\n          logger.warn('Could not stringify request options:', e);\n        }\n      }\n\n      return _promise.default.resolve(options);\n    }\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"onRequestError\",\n    value: function onRequestError(options, reason) {\n      // We need to do the normal onRequest logging, but then log how the request\n      // failed since the response logger won't be called.\n      this.onRequest(options);\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n      logger.error('Request Failed: ', reason.stack);\n      logger.info('\\\\**********************************************************************/');\n      return _promise.default.reject(reason);\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @returns {RequestLoggerInterceptor}\n     */\n    function create() {\n      return new RequestLoggerInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return RequestLoggerInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = RequestLoggerInterceptor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;IACqBA,wB;;;;;;;;;;;;;AAQnB;AACF;AACA;AACA;AACA;AACE,uBAAUC,OAAV,EAAmB;AACjB,UAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;AAEAD,YAAM,CAACE,IAAPF,CAAY,4EAAZA;AACAA,YAAM,CAACE,IAAPF,CAAY,UAAZA,EAAwBD,OAAO,CAACI,MAARJ,IAAkB,KAA1CC,EAAiDD,OAAO,CAACK,GAAzDJ;AACAA,YAAM,CAACE,IAAPF,CAAY,oBAAZA,EAAkC,mBAAID,OAAJ,EAAa,oBAAb,CAAlCC;AACA;;AACA,UAAI,mBAAID,OAAJ,EAAa,oBAAb,CAAJ,EAAwC;AACtCC,cAAM,CAACE,IAAPF,CAAY,cAAZA,EAA4B,mBAAID,OAAJ,EAAa,oBAAb,CAA5BC;AACD;;AACD,UAAMK,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,UAAIC,OAAO,CAACC,GAARD,CAAYE,8BAAhB,EAAgD;AAC9CT,cAAM,CAACE,IAAPF,CAAY,qBAAZA,EAAmCK,GAAG,CAACK,OAAJL,EAAnCL,EAAkDK,GAAG,CAACM,WAAJN,EAAlDL;;AACA,YAAI;AACF;AACA;AACA,cAAID,OAAO,CAACa,IAARb,IAAgBA,OAAO,CAACa,IAARb,CAAac,MAA7Bd,IAAuC,CAAC,uBAAQA,OAAO,CAACa,IAAhB,CAAxCb,IAAiE,CAAC,wBAASA,OAAO,CAACa,IAAjB,CAAtE,EAA8F;AAC5FZ,kBAAM,CAACE,IAAPF,CAAY,kBAAZA,EAAgCc,cAAKC,OAALD,CAAa,oBAAKf,OAAL,EAAc,MAAd,CAAbe,EAAoC;AAACE,mBAAK,EAAE;AAAR,aAApCF,CAAhCd;AADF,iBAGK;AACHA,kBAAM,CAACE,IAAPF,CAAY,kBAAZA,EAAgCc,cAAKC,OAALD,CAAaf,OAAbe,EAAsB;AAACE,mBAAK,EAAE;AAAR,aAAtBF,CAAhCd;AACD;AARH,UAUA,OAAOiB,CAAP,EAAU;AACRjB,gBAAM,CAACkB,IAAPlB,CAAY,sCAAZA,EAAoDiB,CAApDjB;AACD;AACF;;AAED,aAAOmB,iBAAQC,OAAR,CAAgBrB,OAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,OAAf,EAAwBsB,MAAxB,EAAgC;AAC9B;AACA;AACA,WAAKC,SAAL,CAAevB,OAAf;AACA,UAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;AAEAD,YAAM,CAACuB,KAAPvB,CAAa,kBAAbA,EAAiCqB,MAAM,CAACG,KAAxCxB;AACAA,YAAM,CAACE,IAAPF,CAAY,2EAAZA;AAEA,aAAOmB,iBAAQM,MAAR,CAAeJ,MAAf,CAAP;AACD;;;;AA5DD;AACF;AACA;AACE,sBAAgB;AACd,aAAO,IAAIvB,wBAAJ,CAA6B;AAAC4B,aAAK,EAAE;AAAR,OAA7B,CAAP;AACD;;;EANmDC,qB","names":["RequestLoggerInterceptor","options","logger","console","info","method","uri","now","Date","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","getTime","toISOString","body","length","util","inspect","depth","e","warn","_promise","resolve","reason","onRequest","error","stack","reject","webex","Interceptor"],"sources":["request-logger.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport util from 'util';\n\nimport {get, has, isArray, isString, omit} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\n/**\n * @class\n */\nexport default class RequestLoggerInterceptor extends Interceptor {\n  /**\n   * @returns {RequestLoggerInterceptor}\n   */\n  static create() {\n    return new RequestLoggerInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, 'webex.logger', console);\n\n    logger.info('/**********************************************************************\\\\ ');\n    logger.info('Request:', options.method || 'GET', options.uri);\n    logger.info('WEBEX_TRACKINGID: ', get(options, 'headers.trackingid'));\n    /* istanbul ignore next */\n    if (has(options, 'headers.x-trans-id')) {\n      logger.info('X-Trans-ID: ', get(options, 'headers.x-trans-id'));\n    }\n    const now = new Date();\n\n    if (process.env.ENABLE_VERBOSE_NETWORK_LOGGING) {\n      logger.info('timestamp (start): ', now.getTime(), now.toISOString());\n      try {\n        // Determine if body is a buffer without relying on Buffer to avoid\n        // node/browser conflicts.\n        if (options.body && options.body.length && !isArray(options.body) && !isString(options.body)) {\n          logger.info('Request Options:', util.inspect(omit(options, 'body'), {depth: null}));\n        }\n        else {\n          logger.info('Request Options:', util.inspect(options, {depth: null}));\n        }\n      }\n      catch (e) {\n        logger.warn('Could not stringify request options:', e);\n      }\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    this.onRequest(options);\n    const logger = get(this, 'webex.logger', console);\n\n    logger.error('Request Failed: ', reason.stack);\n    logger.info('\\\\**********************************************************************/');\n\n    return Promise.reject(reason);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
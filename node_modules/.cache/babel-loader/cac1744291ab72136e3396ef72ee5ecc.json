{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\rkanthet\\\\Documents\\\\test_window_object\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromStream = exports.fromBuffer = exports.EndOfStreamError = exports.fromFile = void 0;\n\nvar fs = require(\"./FsPromise\");\n\nvar core = require(\"./core\");\n\nvar FileTokenizer_1 = require(\"./FileTokenizer\");\n\nObject.defineProperty(exports, \"fromFile\", {\n  enumerable: true,\n  get: function get() {\n    return FileTokenizer_1.fromFile;\n  }\n});\n\nvar core_1 = require(\"./core\");\n\nObject.defineProperty(exports, \"EndOfStreamError\", {\n  enumerable: true,\n  get: function get() {\n    return core_1.EndOfStreamError;\n  }\n});\nObject.defineProperty(exports, \"fromBuffer\", {\n  enumerable: true,\n  get: function get() {\n    return core_1.fromBuffer;\n  }\n});\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */\n\nfunction fromStream(_x, _x2) {\n  return _fromStream.apply(this, arguments);\n}\n\nfunction _fromStream() {\n  _fromStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, fileInfo) {\n    var stat;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fileInfo = fileInfo ? fileInfo : {};\n\n            if (!stream.path) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return fs.stat(stream.path);\n\n          case 4:\n            stat = _context.sent;\n            fileInfo.path = stream.path;\n            fileInfo.size = stat.size;\n\n          case 7:\n            return _context.abrupt(\"return\", core.fromStream(stream, fileInfo));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fromStream.apply(this, arguments);\n}\n\nexports.fromStream = fromStream;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/strtok3/lib/index.js"],"names":["Object","defineProperty","exports","value","fromStream","fromBuffer","EndOfStreamError","fromFile","fs","require","core","FileTokenizer_1","enumerable","get","core_1","stream","fileInfo","path","stat","size"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACK,QAAR,GAAmB,KAAK,CAA7F;;AACA,IAAMC,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA7B;;AACAT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,UAA/B,EAA2C;AAAEU,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,eAAY;AAAE,WAAOF,eAAe,CAACJ,QAAvB;AAAkC;AAAzE,CAA3C;;AACA,IAAIO,MAAM,GAAGL,OAAO,CAAC,QAAD,CAApB;;AACAT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,kBAA/B,EAAmD;AAAEU,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,eAAY;AAAE,WAAOC,MAAM,CAACR,gBAAd;AAAiC;AAAxE,CAAnD;AACAN,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEU,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,eAAY;AAAE,WAAOC,MAAM,CAACT,UAAd;AAA2B;AAAlE,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACeD,U;;;;;yEAAf,iBAA0BW,MAA1B,EAAkCC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,YAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAH,GAAc,EAAjC;;AADJ,iBAEQD,MAAM,CAACE,IAFf;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAG2BT,EAAE,CAACU,IAAH,CAAQH,MAAM,CAACE,IAAf,CAH3B;;AAAA;AAGcC,YAAAA,IAHd;AAIQF,YAAAA,QAAQ,CAACC,IAAT,GAAgBF,MAAM,CAACE,IAAvB;AACAD,YAAAA,QAAQ,CAACG,IAAT,GAAgBD,IAAI,CAACC,IAArB;;AALR;AAAA,6CAOWT,IAAI,CAACN,UAAL,CAAgBW,MAAhB,EAAwBC,QAAxB,CAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASAd,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromStream = exports.fromBuffer = exports.EndOfStreamError = exports.fromFile = void 0;\r\nconst fs = require(\"./FsPromise\");\r\nconst core = require(\"./core\");\r\nvar FileTokenizer_1 = require(\"./FileTokenizer\");\r\nObject.defineProperty(exports, \"fromFile\", { enumerable: true, get: function () { return FileTokenizer_1.fromFile; } });\r\nvar core_1 = require(\"./core\");\r\nObject.defineProperty(exports, \"EndOfStreamError\", { enumerable: true, get: function () { return core_1.EndOfStreamError; } });\r\nObject.defineProperty(exports, \"fromBuffer\", { enumerable: true, get: function () { return core_1.fromBuffer; } });\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property.\r\n * @param stream - Node.js Stream.Readable\r\n * @param fileInfo - Pass additional file information to the tokenizer\r\n * @returns Tokenizer\r\n */\r\nasync function fromStream(stream, fileInfo) {\r\n    fileInfo = fileInfo ? fileInfo : {};\r\n    if (stream.path) {\r\n        const stat = await fs.stat(stream.path);\r\n        fileInfo.path = stream.path;\r\n        fileInfo.size = stat.size;\r\n    }\r\n    return core.fromStream(stream, fileInfo);\r\n}\r\nexports.fromStream = fromStream;\r\n"]},"metadata":{},"sourceType":"script"}
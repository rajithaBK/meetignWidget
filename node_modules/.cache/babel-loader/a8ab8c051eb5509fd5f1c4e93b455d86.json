{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.createEventEnvelope = createEventEnvelope;\nexports.ensureMyIdIsAvailable = ensureMyIdIsAvailable;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _common = require(\"@webex/common\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Creates a 'webhook' envelope to wrap Webex events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\n\n\nfunction createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex).then(function () {\n    return _promise.default.resolve({\n      createdBy: webex.internal.me.id,\n      orgId: webex.internal.me.orgId,\n      resource: resource,\n      // id -- webhook id concept does not correlate to SDK socket event\n      // name -- webhook name concept does not correlate to SDK socket event\n      // targetUrl -- targetUrl concept does not correlate to SDK socket event\n      // secret -- secret concept does not correlate to SDK socket event\n      ownedBy: _common.SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n      status: _common.SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n      created: new Date().toISOString(),\n      data: {}\n    });\n  }).catch(function (e) {\n    _promise.default.reject(new Error(\"Unable to get person info for \".concat(resource, \" event envelope: \").concat(e.message)));\n  });\n}\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\n\n\nfunction ensureMyIdIsAvailable(_x) {\n  return _ensureMyIdIsAvailable.apply(this, arguments);\n}\n\nfunction _ensureMyIdIsAvailable() {\n  _ensureMyIdIsAvailable = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(webex) {\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!('me' in webex.internal)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _promise.default.resolve());\n\n          case 2:\n            return _context.abrupt(\"return\", webex.people.get('me').then(function (person) {\n              webex.internal.me = person;\n              return _promise.default.resolve();\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _ensureMyIdIsAvailable.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAIA;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AACnD,SAAOC,qBAAqB,CAACF,KAAD,CAArBE,CACJC,IADID,CACC;AAAA,WAAME,iBAAQC,OAAR,CAAgB;AAC1BC,eAAS,EAAEN,KAAK,CAACO,QAANP,CAAeQ,EAAfR,CAAkBS,EADH;AAE1BC,WAAK,EAAEV,KAAK,CAACO,QAANP,CAAeQ,EAAfR,CAAkBU,KAFC;AAG1BT,cAAQ,EAARA,QAH0B;AAI1B;AACA;AACA;AACA;AACAU,aAAO,EAAEC,kBAAUC,QAAVD,CAAmBE,KAAnBF,CAAyBG,OARR;AAS1BC,YAAM,EAAEJ,kBAAUC,QAAVD,CAAmBK,MAAnBL,CAA0BM,MATR;AAU1BC,aAAO,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAViB;AAW1BC,UAAI,EAAE;AAXoB,KAAhB,CAAN;AADD,KAaDC,KAbCrB,CAaK,UAACsB,CAAD,EAAO;AACfpB,qBAAQqB,MAAR,CAAe,IAAIC,KAAJ,yCAA2CzB,QAA3C,8BACHuB,CAAC,CAACG,OADC,EAAf;AAdG,IAAP;AAiBD;AAED;AACA;AACA;AACA;AACA;;;SACsBzB,sB;;;;;mGAAf,iBAAqCF,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,QAAQA,KAAK,CAACO,QAFd;AAAAqB;AAAA;AAAA;;AAAA,6CAGIxB,iBAAQC,OAAR,EAHJ;;AAAA;AAAA,6CAMEL,KAAK,CAAC6B,MAAN7B,CAAa8B,GAAb9B,CAAiB,IAAjBA,EACJG,IADIH,CACC,UAAC+B,MAAD,EAAY;AAChB/B,mBAAK,CAACO,QAANP,CAAeQ,EAAfR,GAAoB+B,MAApB/B;AAEA,qBAAOI,iBAAQC,OAAR,EAAP;AAJG,cANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["createEventEnvelope","webex","resource","ensureMyIdIsAvailable","then","_promise","resolve","createdBy","internal","me","id","orgId","ownedBy","SDK_EVENT","EXTERNAL","OWNER","CREATOR","status","STATUS","ACTIVE","created","Date","toISOString","data","catch","e","reject","Error","message","_context","people","get","person"],"sources":["event-envelope.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SDK_EVENT} from '@webex/common';\n\n/**\n * Creates a 'webhook' envelope to wrap Webex events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\nexport function createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex)\n    .then(() => Promise.resolve({\n      createdBy: webex.internal.me.id,\n      orgId: webex.internal.me.orgId,\n      resource,\n      // id -- webhook id concept does not correlate to SDK socket event\n      // name -- webhook name concept does not correlate to SDK socket event\n      // targetUrl -- targetUrl concept does not correlate to SDK socket event\n      // secret -- secret concept does not correlate to SDK socket event\n      ownedBy: SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n      status: SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n      created: new Date().toISOString(),\n      data: {}\n    })).catch((e) => {\n      Promise.reject(new Error(`Unable to get person info for ${resource} \\\nevent envelope: ${e.message}`));\n    });\n}\n\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\nexport async function ensureMyIdIsAvailable(webex) {\n  // If we don't have it, save info about our user\n  if (('me' in webex.internal)) {\n    return Promise.resolve();\n  }\n\n  return webex.people.get('me')\n    .then((person) => {\n      webex.internal.me = person;\n\n      return Promise.resolve();\n    });\n}\n"]},"metadata":{},"sourceType":"script"}
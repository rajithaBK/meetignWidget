{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nvar RSAPublicKey = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RSAPublicKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Integer} [modulus]\r\n   * @property {Integer} [publicExponent]\r\n   */\n  function RSAPublicKey() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RSAPublicKey);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Integer}\r\n     * @desc Modulus part of RSA public key\r\n     */\n    this.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc Public exponent of RSA public key\r\n     */\n\n    this.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(RSAPublicKey, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"modulus\", \"publicExponent\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({\n        names: {\n          modulus: \"modulus\",\n          publicExponent: \"publicExponent\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSAPublicKey\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.modulus = asn1.result.modulus.convertFromDER(256);\n      this.publicExponent = asn1.result.publicExponent; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.modulus.convertToDER(), this.publicExponent]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        n: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\n        e: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\n      };\n    } //**********************************************************************************\n\n    /**\r\n     * Convert JSON value into current object\r\n     * @param {Object} json\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (\"n\" in json) {\n        var array = stringToArrayBuffer(fromBase64(json.n, true));\n        this.modulus = new asn1js.Integer({\n          valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength)))\n        });\n      } else throw new Error(\"Absent mandatory parameter \\\"n\\\"\");\n\n      if (\"e\" in json) this.publicExponent = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3)\n      });else throw new Error(\"Absent mandatory parameter \\\"e\\\"\");\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"modulus\":\n          return new asn1js.Integer();\n\n        case \"publicExponent\":\n          return new asn1js.Integer();\n\n        default:\n          throw new Error(\"Invalid member name for RSAPublicKey class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * RSAPublicKey ::= Sequence {\r\n     *    modulus           Integer,  -- n\r\n     *    publicExponent    Integer   -- e\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n       * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.modulus || \"\"\n        }), new asn1js.Integer({\n          name: names.publicExponent || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return RSAPublicKey;\n}(); //**************************************************************************************\n\n\nexport { RSAPublicKey as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RSAPublicKey.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","nearestPowerOf2","clearProps","RSAPublicKey","parameters","modulus","defaultValues","publicExponent","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","verified","Error","result","convertFromDER","Sequence","value","convertToDER","n","valueBlock","valueHex","e","array","Integer","slice","Math","pow","byteLength","memberName","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPublicKey ::= Sequence {\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer   -- e\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t{\r\n\t\t\tconst array = stringToArrayBuffer(fromBase64(json.n, true));\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength))) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
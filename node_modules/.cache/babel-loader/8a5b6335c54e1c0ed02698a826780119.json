{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport class ObjectDigestInfo {\n  //**********************************************************************************\n\n  /**\n   * Constructor for ObjectDigestInfo class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {Enumerated}\n     * @desc digestedObjectType\n     */\n    this.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n    if (\"otherObjectTypeID\" in parameters)\n      /**\n       * @type {ObjectIdentifier}\n       * @desc otherObjectTypeID\n       */\n      this.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc digestAlgorithm\n     */\n\n    this.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n    /**\n     * @type {BitString}\n     * @desc objectDigest\n     */\n\n    this.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"digestedObjectType\":\n        return new asn1js.Enumerated();\n\n      case \"otherObjectTypeID\":\n        return new asn1js.ObjectIdentifier();\n\n      case \"digestAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"objectDigest\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * ObjectDigestInfo ::= SEQUENCE {\n   *   digestedObjectType  ENUMERATED {\n   *     publicKey            (0),\n   *     publicKeyCert        (1),\n   *     otherObjectTypes     (2) },\n   *   -- otherObjectTypes MUST NOT\n   *   -- be used in this profile\n   *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n   *   digestAlgorithm     AlgorithmIdentifier,\n   *   objectDigest        BIT STRING\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [digestedObjectType]\n     * @property {string} [otherObjectTypeID]\n     * @property {string} [digestAlgorithm]\n     * @property {string} [objectDigest]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Enumerated({\n        name: names.digestedObjectType || \"\"\n      }), new asn1js.ObjectIdentifier({\n        optional: true,\n        name: names.otherObjectTypeID || \"\"\n      }), AlgorithmIdentifier.schema(names.digestAlgorithm || {}), new asn1js.BitString({\n        name: names.objectDigest || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"digestedObjectType\", \"otherObjectTypeID\", \"digestAlgorithm\", \"objectDigest\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, ObjectDigestInfo.schema({\n      names: {\n        digestedObjectType: \"digestedObjectType\",\n        otherObjectTypeID: \"otherObjectTypeID\",\n        digestAlgorithm: {\n          names: {\n            blockName: \"digestAlgorithm\"\n          }\n        },\n        objectDigest: \"objectDigest\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.digestedObjectType = asn1.result.digestedObjectType;\n    if (\"otherObjectTypeID\" in asn1.result) this.otherObjectTypeID = asn1.result.otherObjectTypeID;\n    this.digestAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.digestAlgorithm\n    });\n    this.objectDigest = asn1.result.objectDigest; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    const result = new asn1js.Sequence({\n      value: [this.digestedObjectType]\n    });\n    if (\"otherObjectTypeID\" in this) result.valueBlock.value.push(this.otherObjectTypeID);\n    result.valueBlock.value.push(this.digestAlgorithm.toSchema());\n    result.valueBlock.value.push(this.objectDigest);\n    return result;\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const result = {\n      digestedObjectType: this.digestedObjectType.toJSON()\n    };\n    if (\"otherObjectTypeID\" in this) result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n    result.digestAlgorithm = this.digestAlgorithm.toJSON();\n    result.objectDigest = this.objectDigest.toJSON();\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport class V2Form {\n  //**********************************************************************************\n\n  /**\n   * Constructor for V2Form class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n    if (\"issuerName\" in parameters)\n      /**\n       * @type {GeneralNames}\n       * @desc issuerName\n       */\n      this.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n    if (\"baseCertificateID\" in parameters)\n      /**\n       * @type {IssuerSerial}\n       * @desc baseCertificateID\n       */\n      this.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n    if (\"objectDigestInfo\" in parameters)\n      /**\n       * @type {ObjectDigestInfo}\n       * @desc objectDigestInfo\n       */\n      this.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"issuerName\":\n        return new GeneralNames();\n\n      case \"baseCertificateID\":\n        return new IssuerSerial();\n\n      case \"objectDigestInfo\":\n        return new ObjectDigestInfo();\n\n      default:\n        throw new Error(`Invalid member name for V2Form class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * V2Form ::= SEQUENCE {\n   *   issuerName            GeneralNames  OPTIONAL,\n   *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n   *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n   *     -- issuerName MUST be present in this profile\n   *     -- baseCertificateID and objectDigestInfo MUST NOT\n   *     -- be present in this profile\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [issuerName]\n     * @property {string} [baseCertificateID]\n     * @property {string} [objectDigestInfo]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [GeneralNames.schema({\n        names: {\n          blockName: names.issuerName\n        }\n      }, true), new asn1js.Constructed({\n        optional: true,\n        name: names.baseCertificateID || \"\",\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 0 // [0]\n\n        },\n        value: IssuerSerial.schema().valueBlock.value\n      }), new asn1js.Constructed({\n        optional: true,\n        name: names.objectDigestInfo || \"\",\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 1 // [1]\n\n        },\n        value: ObjectDigestInfo.schema().valueBlock.value\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"issuerName\", \"baseCertificateID\", \"objectDigestInfo\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, V2Form.schema({\n      names: {\n        issuerName: \"issuerName\",\n        baseCertificateID: \"baseCertificateID\",\n        objectDigestInfo: \"objectDigestInfo\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for V2Form\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"issuerName\" in asn1.result) this.issuerName = new GeneralNames({\n      schema: asn1.result.issuerName\n    });\n\n    if (\"baseCertificateID\" in asn1.result) {\n      this.baseCertificateID = new IssuerSerial({\n        schema: new asn1js.Sequence({\n          value: asn1.result.baseCertificateID.valueBlock.value\n        })\n      });\n    }\n\n    if (\"objectDigestInfo\" in asn1.result) {\n      this.objectDigestInfo = new ObjectDigestInfo({\n        schema: new asn1js.Sequence({\n          value: asn1.result.objectDigestInfo.valueBlock.value\n        })\n      });\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    const result = new asn1js.Sequence();\n    if (\"issuerName\" in this) result.valueBlock.value.push(this.issuerName.toSchema());\n\n    if (\"baseCertificateID\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 0 // [0]\n\n        },\n        value: this.baseCertificateID.toSchema().valueBlock.value\n      }));\n    }\n\n    if (\"objectDigestInfo\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 1 // [1]\n\n        },\n        value: this.objectDigestInfo.toSchema().valueBlock.value\n      }));\n    } //region Construct and return new ASN.1 schema for this object\n\n\n    return result; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const result = {};\n    if (\"issuerName\" in this) result.issuerName = this.issuerName.toJSON();\n    if (\"baseCertificateID\" in this) result.baseCertificateID = this.baseCertificateID.toJSON();\n    if (\"objectDigestInfo\" in this) result.objectDigestInfo = this.objectDigestInfo.toJSON();\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport class Holder {\n  //**********************************************************************************\n\n  /**\n   * Constructor for Holder class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n    if (\"baseCertificateID\" in parameters)\n      /**\n       * @type {IssuerSerial}\n       * @desc baseCertificateID\n       */\n      this.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n    if (\"entityName\" in parameters)\n      /**\n       * @type {GeneralNames}\n       * @desc entityName\n       */\n      this.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n    if (\"objectDigestInfo\" in parameters)\n      /**\n       * @type {ObjectDigestInfo}\n       * @desc objectDigestInfo\n       */\n      this.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"baseCertificateID\":\n        return new IssuerSerial();\n\n      case \"entityName\":\n        return new GeneralNames();\n\n      case \"objectDigestInfo\":\n        return new ObjectDigestInfo();\n\n      default:\n        throw new Error(`Invalid member name for Holder class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * Holder ::= SEQUENCE {\n   *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n   *       -- the issuer and serial number of\n   *       -- the holder's Public Key Certificate\n   *   entityName          [1] GeneralNames OPTIONAL,\n   *       -- the name of the claimant or role\n   *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n   *       -- used to directly authenticate the holder,\n   *       -- for example, an executable\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [baseCertificateID]\n     * @property {string} [entityName]\n     * @property {string} [objectDigestInfo]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        optional: true,\n        name: names.baseCertificateID || \"\",\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 0 // [0]\n\n        },\n        value: IssuerSerial.schema().valueBlock.value\n      }), new asn1js.Constructed({\n        optional: true,\n        name: names.entityName || \"\",\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 1 // [2]\n\n        },\n        value: GeneralNames.schema().valueBlock.value\n      }), new asn1js.Constructed({\n        optional: true,\n        name: names.objectDigestInfo || \"\",\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 2 // [2]\n\n        },\n        value: ObjectDigestInfo.schema().valueBlock.value\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"baseCertificateID\", \"entityName\", \"objectDigestInfo\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, Holder.schema({\n      names: {\n        baseCertificateID: \"baseCertificateID\",\n        entityName: \"entityName\",\n        objectDigestInfo: \"objectDigestInfo\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Holder\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"baseCertificateID\" in asn1.result) {\n      this.baseCertificateID = new IssuerSerial({\n        schema: new asn1js.Sequence({\n          value: asn1.result.baseCertificateID.valueBlock.value\n        })\n      });\n    }\n\n    if (\"entityName\" in asn1.result) {\n      this.entityName = new GeneralNames({\n        schema: new asn1js.Sequence({\n          value: asn1.result.entityName.valueBlock.value\n        })\n      });\n    }\n\n    if (\"objectDigestInfo\" in asn1.result) {\n      this.objectDigestInfo = new ObjectDigestInfo({\n        schema: new asn1js.Sequence({\n          value: asn1.result.objectDigestInfo.valueBlock.value\n        })\n      });\n    } //endregion\n\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    const result = new asn1js.Sequence();\n\n    if (\"baseCertificateID\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 0 // [0]\n\n        },\n        value: this.baseCertificateID.toSchema().valueBlock.value\n      }));\n    }\n\n    if (\"entityName\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 1 // [1]\n\n        },\n        value: this.entityName.toSchema().valueBlock.value\n      }));\n    }\n\n    if (\"objectDigestInfo\" in this) {\n      result.valueBlock.value.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          tagNumber: 2 // [2]\n\n        },\n        value: this.objectDigestInfo.toSchema().valueBlock.value\n      }));\n    }\n\n    return result;\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const result = {};\n    if (\"baseCertificateID\" in this) result.baseCertificateID = this.baseCertificateID.toJSON();\n    if (\"entityName\" in this) result.entityName = this.entityName.toJSON();\n    if (\"objectDigestInfo\" in this) result.objectDigestInfo = this.objectDigestInfo.toJSON();\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport class AttributeCertificateInfoV2 {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttributeCertificateInfoV2 class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {Number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n    /**\n     * @type {Holder}\n     * @desc holder\n     */\n\n    this.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n    /**\n     * @type {GeneralNames|V2Form}\n     * @desc issuer\n     */\n\n    this.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc signature\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n    /**\n     * @type {Integer}\n     * @desc serialNumber\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n    /**\n     * @type {AttCertValidityPeriod}\n     * @desc attrCertValidityPeriod\n     */\n\n    this.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n    /**\n     * @type {Array.<Attribute>}\n     * @desc attributes\n     */\n\n    this.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n    if (\"issuerUniqueID\" in parameters)\n      /**\n       * @type {BitString}\n       * @desc issuerUniqueID\n       */\n      this.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n    if (\"extensions\" in parameters)\n      /**\n       * @type {Extensions}\n       * @desc extensions\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"version\":\n        return 1;\n\n      case \"holder\":\n        return new Holder();\n\n      case \"issuer\":\n        return {};\n\n      case \"signature\":\n        return new AlgorithmIdentifier();\n\n      case \"serialNumber\":\n        return new asn1js.Integer();\n\n      case \"attrCertValidityPeriod\":\n        return new AttCertValidityPeriod();\n\n      case \"attributes\":\n        return [];\n\n      case \"issuerUniqueID\":\n        return new asn1js.BitString();\n\n      case \"extensions\":\n        return new Extensions();\n\n      default:\n        throw new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * AttributeCertificateInfoV2 ::= SEQUENCE {\n   *   version                 AttCertVersion, -- version is v2\n   *   holder                  Holder,\n   *   issuer                  AttCertIssuer,\n   *   signature               AlgorithmIdentifier,\n   *   serialNumber            CertificateSerialNumber,\n   *   attrCertValidityPeriod  AttCertValidityPeriod,\n   *   attributes              SEQUENCE OF Attribute,\n   *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n   *   extensions              Extensions OPTIONAL\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [issuer]\n     * @property {string} [serialNumber]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Integer({\n        name: names.version || \"\"\n      }), Holder.schema(names.holder || {}), new asn1js.Choice({\n        value: [GeneralNames.schema({\n          names: {\n            blockName: names.issuer || \"\"\n          }\n        }), new asn1js.Constructed({\n          name: names.issuer || \"\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: V2Form.schema().valueBlock.value\n        })]\n      }), AlgorithmIdentifier.schema(names.signature || {}), new asn1js.Integer({\n        name: names.serialNumber || \"\"\n      }), AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}), new asn1js.Sequence({\n        name: names.attributes || \"\",\n        value: [new asn1js.Repeated({\n          value: Attribute.schema()\n        })]\n      }), new asn1js.BitString({\n        optional: true,\n        name: names.issuerUniqueID || \"\"\n      }), Extensions.schema(names.extensions || {}, true)]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"version\", \"holder\", \"issuer\", \"signature\", \"serialNumber\", \"attrCertValidityPeriod\", \"attributes\", \"issuerUniqueID\", \"extensions\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\n      names: {\n        version: \"version\",\n        holder: {\n          names: {\n            blockName: \"holder\"\n          }\n        },\n        issuer: \"issuer\",\n        signature: {\n          names: {\n            blockName: \"signature\"\n          }\n        },\n        serialNumber: \"serialNumber\",\n        attrCertValidityPeriod: {\n          names: {\n            blockName: \"attrCertValidityPeriod\"\n          }\n        },\n        attributes: \"attributes\",\n        issuerUniqueID: \"issuerUniqueID\",\n        extensions: {\n          names: {\n            blockName: \"extensions\"\n          }\n        }\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.version = asn1.result.version.valueBlock.valueDec;\n    this.holder = new Holder({\n      schema: asn1.result.holder\n    });\n\n    switch (asn1.result.issuer.idBlock.tagClass) {\n      case 3:\n        // V2Form\n        this.issuer = new V2Form({\n          schema: new asn1js.Sequence({\n            value: asn1.result.issuer.valueBlock.value\n          })\n        });\n        break;\n\n      case 1: // GeneralNames (should not be used)\n\n      default:\n        throw new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n    }\n\n    this.signature = new AlgorithmIdentifier({\n      schema: asn1.result.signature\n    });\n    this.serialNumber = asn1.result.serialNumber;\n    this.attrCertValidityPeriod = new AttCertValidityPeriod({\n      schema: asn1.result.attrCertValidityPeriod\n    });\n    this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({\n      schema: element\n    }));\n    if (\"issuerUniqueID\" in asn1.result) this.issuerUniqueID = asn1.result.issuerUniqueID;\n    if (\"extensions\" in asn1.result) this.extensions = new Extensions({\n      schema: asn1.result.extensions\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    const result = new asn1js.Sequence({\n      value: [new asn1js.Integer({\n        value: this.version\n      }), this.holder.toSchema(), new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: this.issuer.toSchema().valueBlock.value\n      }), this.signature.toSchema(), this.serialNumber, this.attrCertValidityPeriod.toSchema(), new asn1js.Sequence({\n        value: Array.from(this.attributes, element => element.toSchema())\n      })]\n    });\n    if (\"issuerUniqueID\" in this) result.valueBlock.value.push(this.issuerUniqueID);\n    if (\"extensions\" in this) result.valueBlock.value.push(this.extensions.toSchema());\n    return result;\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const result = {\n      version: this.version,\n      holder: this.holder.toJSON(),\n      issuer: this.issuer.toJSON(),\n      signature: this.signature.toJSON(),\n      serialNumber: this.serialNumber.toJSON(),\n      attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n      attributes: Array.from(this.attributes, element => element.toJSON())\n    };\n    if (\"issuerUniqueID\" in this) result.issuerUniqueID = this.issuerUniqueID.toJSON();\n    if (\"extensions\" in this) result.extensions = this.extensions.toJSON();\n    return result;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport default class AttributeCertificateV2 {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttributeCertificateV2 class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {AttributeCertificateInfoV2}\n     * @desc acinfo\n     */\n    this.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc signatureAlgorithm\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n    /**\n     * @type {BitString}\n     * @desc signatureValue\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"acinfo\":\n        return new AttributeCertificateInfoV2();\n\n      case \"signatureAlgorithm\":\n        return new AlgorithmIdentifier();\n\n      case \"signatureValue\":\n        return new asn1js.BitString();\n\n      default:\n        throw new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * AttributeCertificate ::= SEQUENCE {\n   *   acinfo               AttributeCertificateInfoV2,\n   *   signatureAlgorithm   AlgorithmIdentifier,\n   *   signatureValue       BIT STRING\n   * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {Object} [acinfo]\n     * @property {Object} [signatureAlgorithm]\n     * @property {string} [signatureValue]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [AttributeCertificateInfoV2.schema(names.acinfo || {}), AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js.BitString({\n        name: names.signatureValue || \"\"\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"acinfo\", \"signatureAlgorithm\", \"signatureValue\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV2.schema({\n      names: {\n        acinfo: {\n          names: {\n            blockName: \"acinfo\"\n          }\n        },\n        signatureAlgorithm: {\n          names: {\n            blockName: \"signatureAlgorithm\"\n          }\n        },\n        signatureValue: \"signatureValue\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.acinfo = new AttributeCertificateInfoV2({\n      schema: asn1.result.acinfo\n    });\n    this.signatureAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.signatureAlgorithm\n    });\n    this.signatureValue = asn1.result.signatureValue; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    return new asn1js.Sequence({\n      value: [this.acinfo.toSchema(), this.signatureAlgorithm.toSchema(), this.signatureValue]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    return {\n      acinfo: this.acinfo.toJSON(),\n      signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n      signatureValue: this.signatureValue.toJSON()\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AttributeCertificateV2.js"],"names":["asn1js","getParametersValue","clearProps","GeneralNames","AlgorithmIdentifier","Attribute","Extensions","AttCertValidityPeriod","IssuerSerial","ObjectDigestInfo","constructor","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","memberName","Enumerated","ObjectIdentifier","BitString","Error","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","valueBlock","push","toJSON","V2Form","issuerName","baseCertificateID","objectDigestInfo","Constructed","idBlock","tagClass","tagNumber","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","Integer","Choice","Repeated","valueDec","Array","from","element","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,qBAAT,EAAgCC,YAAhC,QAAoD,6BAApD,C,CACA;;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAN,CACP;AACC;;AACA;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,GACX;AAAA,QADYC,UACZ,uEADyB,EACzB;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,kBAAL,GAA0BX,kBAAkB,CAACU,UAAD,EAAa,oBAAb,EAAmCF,gBAAgB,CAACI,aAAjB,CAA+B,oBAA/B,CAAnC,CAA5C;AAEA,QAAG,uBAAuBF,UAA1B;AACC;AACH;AACA;AACA;AACG,WAAKG,iBAAL,GAAyBb,kBAAkB,CAACU,UAAD,EAAa,mBAAb,EAAkCF,gBAAgB,CAACI,aAAjB,CAA+B,mBAA/B,CAAlC,CAA3C;AAED;AACF;AACA;AACA;;AACE,SAAKE,eAAL,GAAuBd,kBAAkB,CAACU,UAAD,EAAa,iBAAb,EAAgCF,gBAAgB,CAACI,aAAjB,CAA+B,iBAA/B,CAAhC,CAAzC;AACA;AACF;AACA;AACA;;AACE,SAAKG,YAAL,GAAoBf,kBAAkB,CAACU,UAAD,EAAa,cAAb,EAA6BF,gBAAgB,CAACI,aAAjB,CAA+B,cAA/B,CAA7B,CAAtC,CAxBD,CAyBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EA7BF,CA8BC;AACA,GAvCF,CAwCC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbL,aAAa,CAACM,UAAD,EACpB;AACC,YAAOA,UAAP;AAEC,WAAK,oBAAL;AACC,eAAO,IAAInB,MAAM,CAACoB,UAAX,EAAP;;AACD,WAAK,mBAAL;AACC,eAAO,IAAIpB,MAAM,CAACqB,gBAAX,EAAP;;AACD,WAAK,iBAAL;AACC,eAAO,IAAIjB,mBAAJ,EAAP;;AACD,WAAK,cAAL;AACC,eAAO,IAAIJ,MAAM,CAACsB,SAAX,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,mDAAkDJ,UAAW,EAAxE,CAAN;AAXF;AAaA,GA5DF,CA6DC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,GACb;AAAA,QADcP,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,UAAMa,KAAK,GAAGvB,kBAAkB,CAACU,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIX,MAAM,CAACyB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAACoB,UAAX,CAAsB;AAAEM,QAAAA,IAAI,EAAGF,KAAK,CAACZ,kBAAN,IAA4B;AAArC,OAAtB,CADM,EAEN,IAAIZ,MAAM,CAACqB,gBAAX,CAA4B;AAC3BQ,QAAAA,QAAQ,EAAE,IADiB;AAE3BH,QAAAA,IAAI,EAAGF,KAAK,CAACV,iBAAN,IAA2B;AAFP,OAA5B,CAFM,EAMNV,mBAAmB,CAACc,MAApB,CAA2BM,KAAK,CAACT,eAAN,IAAyB,EAApD,CANM,EAON,IAAIf,MAAM,CAACsB,SAAX,CAAqB;AAAEI,QAAAA,IAAI,EAAGF,KAAK,CAACR,YAAN,IAAsB;AAA/B,OAArB,CAPM;AAFoB,KAApB,CAAR;AAYA,GA3GF,CA4GC;;AACA;AACD;AACA;AACA;;;AACCC,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAhB,IAAAA,UAAU,CAACgB,MAAD,EAAS,CAClB,oBADkB,EAElB,mBAFkB,EAGlB,iBAHkB,EAIlB,cAJkB,CAAT,CAAV,CAFD,CAQC;AAEA;;AACA,UAAMY,IAAI,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBb,MAArB,EACZA,MADY,EAEZT,gBAAgB,CAACS,MAAjB,CAAwB;AACvBM,MAAAA,KAAK,EAAE;AACNZ,QAAAA,kBAAkB,EAAE,oBADd;AAENE,QAAAA,iBAAiB,EAAE,mBAFb;AAGNC,QAAAA,eAAe,EAAE;AAChBS,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADS,SAHX;AAQNX,QAAAA,YAAY,EAAE;AARR;AADgB,KAAxB,CAFY,CAAb;AAgBA,QAAGc,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIT,KAAJ,CAAU,0EAAV,CAAN,CA5BF,CA6BC;AAEA;;AACA,SAAKX,kBAAL,GAA0BkB,IAAI,CAACG,MAAL,CAAYrB,kBAAtC;AAEA,QAAG,uBAAuBkB,IAAI,CAACG,MAA/B,EACC,KAAKnB,iBAAL,GAAyBgB,IAAI,CAACG,MAAL,CAAYnB,iBAArC;AAED,SAAKC,eAAL,GAAuB,IAAIX,mBAAJ,CAAwB;AAAEc,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYlB;AAAtB,KAAxB,CAAvB;AACA,SAAKC,YAAL,GAAoBc,IAAI,CAACG,MAAL,CAAYjB,YAAhC,CAtCD,CAuCC;AACA,GA1JF,CA2JC;;AACA;AACD;AACA;AACA;;;AACCkB,EAAAA,QAAQ,GACR;AACC,UAAMD,MAAM,GAAG,IAAIjC,MAAM,CAACyB,QAAX,CAAoB;AAClCG,MAAAA,KAAK,EAAE,CAAC,KAAKhB,kBAAN;AAD2B,KAApB,CAAf;AAIA,QAAG,uBAAuB,IAA1B,EACCqB,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,KAAKtB,iBAAlC;AAEDmB,IAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,KAAKrB,eAAL,CAAqBmB,QAArB,EAA7B;AACAD,IAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,KAAKpB,YAAlC;AAEA,WAAOiB,MAAP;AACA,GA7KF,CA8KC;;AACA;AACD;AACA;AACA;;;AACCI,EAAAA,MAAM,GACN;AACC,UAAMJ,MAAM,GAAG;AACdrB,MAAAA,kBAAkB,EAAE,KAAKA,kBAAL,CAAwByB,MAAxB;AADN,KAAf;AAIA,QAAG,uBAAuB,IAA1B,EACCJ,MAAM,CAACnB,iBAAP,GAA2B,KAAKA,iBAAL,CAAuBuB,MAAvB,EAA3B;AAEDJ,IAAAA,MAAM,CAAClB,eAAP,GAAyB,KAAKA,eAAL,CAAqBsB,MAArB,EAAzB;AACAJ,IAAAA,MAAM,CAACjB,YAAP,GAAsB,KAAKA,YAAL,CAAkBqB,MAAlB,EAAtB;AAEA,WAAOJ,MAAP;AACA,GAhMF,CAiMC;;;AAjMD,C,CAmMA;;AACA;AACA;AACA;;AACA,OAAO,MAAMK,MAAN,CACP;AACC;;AACA;AACD;AACA;AACA;AACA;AACC5B,EAAAA,WAAW,GACX;AAAA,QADYC,UACZ,uEADyB,EACzB;AACC;AACA,QAAG,gBAAgBA,UAAnB;AACC;AACH;AACA;AACA;AACG,WAAK4B,UAAL,GAAkBtC,kBAAkB,CAACU,UAAD,EAAa,YAAb,EAA2B2B,MAAM,CAACzB,aAAP,CAAqB,YAArB,CAA3B,CAApC;AAED,QAAG,uBAAuBF,UAA1B;AACC;AACH;AACA;AACA;AACG,WAAK6B,iBAAL,GAAyBvC,kBAAkB,CAACU,UAAD,EAAa,mBAAb,EAAkC2B,MAAM,CAACzB,aAAP,CAAqB,mBAArB,CAAlC,CAA3C;AAED,QAAG,sBAAsBF,UAAzB;AACC;AACH;AACA;AACA;AACG,WAAK8B,gBAAL,GAAwBxC,kBAAkB,CAACU,UAAD,EAAa,kBAAb,EAAiC2B,MAAM,CAACzB,aAAP,CAAqB,kBAArB,CAAjC,CAA1C,CArBF,CAsBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EA1BF,CA2BC;AACA,GApCF,CAqCC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbL,aAAa,CAACM,UAAD,EACpB;AACC,YAAOA,UAAP;AAEC,WAAK,YAAL;AACC,eAAO,IAAIhB,YAAJ,EAAP;;AACD,WAAK,mBAAL;AACC,eAAO,IAAIK,YAAJ,EAAP;;AACD,WAAK,kBAAL;AACC,eAAO,IAAIC,gBAAJ,EAAP;;AACD;AACC,cAAM,IAAIc,KAAJ,CAAW,yCAAwCJ,UAAW,EAA9D,CAAN;AATF;AAWA,GAvDF,CAwDC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,GACb;AAAA,QADcP,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAMa,KAAK,GAAGvB,kBAAkB,CAACU,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIX,MAAM,CAACyB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACNzB,YAAY,CAACe,MAAb,CAAoB;AACnBM,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAEH,KAAK,CAACe;AADX;AADY,OAApB,EAIG,IAJH,CADM,EAMN,IAAIvC,MAAM,CAAC0C,WAAX,CAAuB;AACtBb,QAAAA,QAAQ,EAAE,IADY;AAEtBH,QAAAA,IAAI,EAAGF,KAAK,CAACgB,iBAAN,IAA2B,EAFZ;AAGtBG,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAHa;AAOtBjB,QAAAA,KAAK,EAAEpB,YAAY,CAACU,MAAb,GAAsBiB,UAAtB,CAAiCP;AAPlB,OAAvB,CANM,EAeN,IAAI5B,MAAM,CAAC0C,WAAX,CAAuB;AACtBb,QAAAA,QAAQ,EAAE,IADY;AAEtBH,QAAAA,IAAI,EAAGF,KAAK,CAACiB,gBAAN,IAA0B,EAFX;AAGtBE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAHa;AAOtBjB,QAAAA,KAAK,EAAEnB,gBAAgB,CAACS,MAAjB,GAA0BiB,UAA1B,CAAqCP;AAPtB,OAAvB,CAfM;AAFoB,KAApB,CAAR;AA4BA,GAlHF,CAmHC;;AACA;AACD;AACA;AACA;;;AACCX,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAhB,IAAAA,UAAU,CAACgB,MAAD,EAAS,CAClB,YADkB,EAElB,mBAFkB,EAGlB,kBAHkB,CAAT,CAAV,CAFD,CAOC;AAEA;;AACA,UAAMY,IAAI,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBb,MAArB,EACZA,MADY,EAEZoB,MAAM,CAACpB,MAAP,CAAc;AACbM,MAAAA,KAAK,EAAE;AACNe,QAAAA,UAAU,EAAE,YADN;AAENC,QAAAA,iBAAiB,EAAE,mBAFb;AAGNC,QAAAA,gBAAgB,EAAE;AAHZ;AADM,KAAd,CAFY,CAAb;AAWA,QAAGX,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIT,KAAJ,CAAU,gEAAV,CAAN,CAtBF,CAuBC;AAEA;;AACA,QAAG,gBAAgBO,IAAI,CAACG,MAAxB,EACC,KAAKM,UAAL,GAAkB,IAAIpC,YAAJ,CAAiB;AAAEe,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYM;AAAtB,KAAjB,CAAlB;;AAED,QAAG,uBAAuBT,IAAI,CAACG,MAA/B,EACA;AACC,WAAKO,iBAAL,GAAyB,IAAIhC,YAAJ,CAAiB;AACzCU,QAAAA,MAAM,EAAE,IAAIlB,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,UAAAA,KAAK,EAAEE,IAAI,CAACG,MAAL,CAAYO,iBAAZ,CAA8BL,UAA9B,CAAyCP;AADrB,SAApB;AADiC,OAAjB,CAAzB;AAKA;;AAED,QAAG,sBAAsBE,IAAI,CAACG,MAA9B,EACA;AACC,WAAKQ,gBAAL,GAAwB,IAAIhC,gBAAJ,CAAqB;AAC5CS,QAAAA,MAAM,EAAE,IAAIlB,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,UAAAA,KAAK,EAAEE,IAAI,CAACG,MAAL,CAAYQ,gBAAZ,CAA6BN,UAA7B,CAAwCP;AADpB,SAApB;AADoC,OAArB,CAAxB;AAKA,KA7CF,CA8CC;;AACA,GAxKF,CAyKC;;AACA;AACD;AACA;AACA;;;AACCM,EAAAA,QAAQ,GACR;AACC,UAAMD,MAAM,GAAG,IAAIjC,MAAM,CAACyB,QAAX,EAAf;AAEA,QAAG,gBAAgB,IAAnB,EACCQ,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,KAAKG,UAAL,CAAgBL,QAAhB,EAA7B;;AAED,QAAG,uBAAuB,IAA1B,EACA;AACCD,MAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,IAAIpC,MAAM,CAAC0C,WAAX,CAAuB;AACnDC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD0C;AAKnDjB,QAAAA,KAAK,EAAE,KAAKY,iBAAL,CAAuBN,QAAvB,GAAkCC,UAAlC,CAA6CP;AALD,OAAvB,CAA7B;AAOA;;AAED,QAAG,sBAAsB,IAAzB,EACA;AACCK,MAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,IAAIpC,MAAM,CAAC0C,WAAX,CAAuB;AACnDC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD0C;AAKnDjB,QAAAA,KAAK,EAAE,KAAKa,gBAAL,CAAsBP,QAAtB,GAAiCC,UAAjC,CAA4CP;AALA,OAAvB,CAA7B;AAOA,KA1BF,CA4BC;;;AACA,WAAOK,MAAP,CA7BD,CA8BC;AACA,GA9MF,CA+MC;;AACA;AACD;AACA;AACA;;;AACCI,EAAAA,MAAM,GACN;AACC,UAAMJ,MAAM,GAAG,EAAf;AAEA,QAAG,gBAAgB,IAAnB,EACCA,MAAM,CAACM,UAAP,GAAoB,KAAKA,UAAL,CAAgBF,MAAhB,EAApB;AAED,QAAG,uBAAuB,IAA1B,EACCJ,MAAM,CAACO,iBAAP,GAA2B,KAAKA,iBAAL,CAAuBH,MAAvB,EAA3B;AAED,QAAG,sBAAsB,IAAzB,EACCJ,MAAM,CAACQ,gBAAP,GAA0B,KAAKA,gBAAL,CAAsBJ,MAAtB,EAA1B;AAED,WAAOJ,MAAP;AACA,GAlOF,CAmOC;;;AAnOD,C,CAqOA;;AACA;AACA;AACA;;AACA,OAAO,MAAMa,MAAN,CACP;AACC;;AACA;AACD;AACA;AACA;AACA;AACCpC,EAAAA,WAAW,GACX;AAAA,QADYC,UACZ,uEADyB,EACzB;AACC;AACA,QAAG,uBAAuBA,UAA1B;AACC;AACH;AACA;AACA;AACG,WAAK6B,iBAAL,GAAyBvC,kBAAkB,CAACU,UAAD,EAAa,mBAAb,EAAkCmC,MAAM,CAACjC,aAAP,CAAqB,mBAArB,CAAlC,CAA3C;AAED,QAAG,gBAAgBF,UAAnB;AACC;AACH;AACA;AACA;AACG,WAAKoC,UAAL,GAAkB9C,kBAAkB,CAACU,UAAD,EAAa,YAAb,EAA2BmC,MAAM,CAACjC,aAAP,CAAqB,YAArB,CAA3B,CAApC;AAED,QAAG,sBAAsBF,UAAzB;AACC;AACH;AACA;AACA;AACG,WAAK8B,gBAAL,GAAwBxC,kBAAkB,CAACU,UAAD,EAAa,kBAAb,EAAiCmC,MAAM,CAACjC,aAAP,CAAqB,kBAArB,CAAjC,CAA1C,CArBF,CAsBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EA1BF,CA2BC;AACA,GApCF,CAqCC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbL,aAAa,CAACM,UAAD,EACpB;AACC,YAAOA,UAAP;AAEC,WAAK,mBAAL;AACC,eAAO,IAAIX,YAAJ,EAAP;;AACD,WAAK,YAAL;AACC,eAAO,IAAIL,YAAJ,EAAP;;AACD,WAAK,kBAAL;AACC,eAAO,IAAIM,gBAAJ,EAAP;;AACD;AACC,cAAM,IAAIc,KAAJ,CAAW,yCAAwCJ,UAAW,EAA9D,CAAN;AATF;AAWA,GAvDF,CAwDC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,GACb;AAAA,QADcP,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAMa,KAAK,GAAGvB,kBAAkB,CAACU,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIX,MAAM,CAACyB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC0C,WAAX,CAAuB;AACtBb,QAAAA,QAAQ,EAAE,IADY;AAEtBH,QAAAA,IAAI,EAAGF,KAAK,CAACgB,iBAAN,IAA2B,EAFZ;AAGtBG,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAHa;AAOtBjB,QAAAA,KAAK,EAAEpB,YAAY,CAACU,MAAb,GAAsBiB,UAAtB,CAAiCP;AAPlB,OAAvB,CADM,EAUN,IAAI5B,MAAM,CAAC0C,WAAX,CAAuB;AACtBb,QAAAA,QAAQ,EAAE,IADY;AAEtBH,QAAAA,IAAI,EAAGF,KAAK,CAACuB,UAAN,IAAoB,EAFL;AAGtBJ,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAHa;AAOtBjB,QAAAA,KAAK,EAAEzB,YAAY,CAACe,MAAb,GAAsBiB,UAAtB,CAAiCP;AAPlB,OAAvB,CAVM,EAmBN,IAAI5B,MAAM,CAAC0C,WAAX,CAAuB;AACtBb,QAAAA,QAAQ,EAAE,IADY;AAEtBH,QAAAA,IAAI,EAAGF,KAAK,CAACiB,gBAAN,IAA0B,EAFX;AAGtBE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAHa;AAOtBjB,QAAAA,KAAK,EAAEnB,gBAAgB,CAACS,MAAjB,GAA0BiB,UAA1B,CAAqCP;AAPtB,OAAvB,CAnBM;AAFoB,KAApB,CAAR;AAgCA,GAxHF,CAyHC;;AACA;AACD;AACA;AACA;;;AACCX,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAhB,IAAAA,UAAU,CAACgB,MAAD,EAAS,CAClB,mBADkB,EAElB,YAFkB,EAGlB,kBAHkB,CAAT,CAAV,CAFD,CAOC;AAEA;;AACA,UAAMY,IAAI,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBb,MAArB,EACZA,MADY,EAEZ4B,MAAM,CAAC5B,MAAP,CAAc;AACbM,MAAAA,KAAK,EAAE;AACNgB,QAAAA,iBAAiB,EAAE,mBADb;AAENO,QAAAA,UAAU,EAAE,YAFN;AAGNN,QAAAA,gBAAgB,EAAE;AAHZ;AADM,KAAd,CAFY,CAAb;AAWA,QAAGX,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIT,KAAJ,CAAU,gEAAV,CAAN,CAtBF,CAuBC;AAEA;;AACA,QAAG,uBAAuBO,IAAI,CAACG,MAA/B,EACA;AACC,WAAKO,iBAAL,GAAyB,IAAIhC,YAAJ,CAAiB;AACzCU,QAAAA,MAAM,EAAE,IAAIlB,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,UAAAA,KAAK,EAAEE,IAAI,CAACG,MAAL,CAAYO,iBAAZ,CAA8BL,UAA9B,CAAyCP;AADrB,SAApB;AADiC,OAAjB,CAAzB;AAKA;;AAED,QAAG,gBAAgBE,IAAI,CAACG,MAAxB,EACA;AACC,WAAKc,UAAL,GAAkB,IAAI5C,YAAJ,CAAiB;AAClCe,QAAAA,MAAM,EAAE,IAAIlB,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,UAAAA,KAAK,EAAEE,IAAI,CAACG,MAAL,CAAYc,UAAZ,CAAuBZ,UAAvB,CAAkCP;AADd,SAApB;AAD0B,OAAjB,CAAlB;AAKA;;AAED,QAAG,sBAAsBE,IAAI,CAACG,MAA9B,EACA;AACC,WAAKQ,gBAAL,GAAwB,IAAIhC,gBAAJ,CAAqB;AAC5CS,QAAAA,MAAM,EAAE,IAAIlB,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,UAAAA,KAAK,EAAEE,IAAI,CAACG,MAAL,CAAYQ,gBAAZ,CAA6BN,UAA7B,CAAwCP;AADpB,SAApB;AADoC,OAArB,CAAxB;AAKA,KAnDF,CAoDC;;AACA,GApLF,CAqLC;;AACA;AACD;AACA;AACA;;;AACCM,EAAAA,QAAQ,GACR;AACC,UAAMD,MAAM,GAAG,IAAIjC,MAAM,CAACyB,QAAX,EAAf;;AAEA,QAAG,uBAAuB,IAA1B,EACA;AACCQ,MAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,IAAIpC,MAAM,CAAC0C,WAAX,CAAuB;AACnDC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD0C;AAKnDjB,QAAAA,KAAK,EAAE,KAAKY,iBAAL,CAAuBN,QAAvB,GAAkCC,UAAlC,CAA6CP;AALD,OAAvB,CAA7B;AAOA;;AAED,QAAG,gBAAgB,IAAnB,EACA;AACCK,MAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,IAAIpC,MAAM,CAAC0C,WAAX,CAAuB;AACnDC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD0C;AAKnDjB,QAAAA,KAAK,EAAE,KAAKmB,UAAL,CAAgBb,QAAhB,GAA2BC,UAA3B,CAAsCP;AALM,OAAvB,CAA7B;AAOA;;AAED,QAAG,sBAAsB,IAAzB,EACA;AACCK,MAAAA,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,IAAIpC,MAAM,CAAC0C,WAAX,CAAuB;AACnDC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AAERC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD0C;AAKnDjB,QAAAA,KAAK,EAAE,KAAKa,gBAAL,CAAsBP,QAAtB,GAAiCC,UAAjC,CAA4CP;AALA,OAAvB,CAA7B;AAOA;;AAED,WAAOK,MAAP;AACA,GAhOF,CAiOC;;AACA;AACD;AACA;AACA;;;AACCI,EAAAA,MAAM,GACN;AACC,UAAMJ,MAAM,GAAG,EAAf;AAEA,QAAG,uBAAuB,IAA1B,EACCA,MAAM,CAACO,iBAAP,GAA2B,KAAKA,iBAAL,CAAuBH,MAAvB,EAA3B;AAED,QAAG,gBAAgB,IAAnB,EACCJ,MAAM,CAACc,UAAP,GAAoB,KAAKA,UAAL,CAAgBV,MAAhB,EAApB;AAED,QAAG,sBAAsB,IAAzB,EACCJ,MAAM,CAACQ,gBAAP,GAA0B,KAAKA,gBAAL,CAAsBJ,MAAtB,EAA1B;AAED,WAAOJ,MAAP;AACA,GApPF,CAqPC;;;AArPD,C,CAuPA;;AACA;AACA;AACA;;AACA,OAAO,MAAMe,0BAAN,CACP;AACC;;AACA;AACD;AACA;AACA;AACA;AACCtC,EAAAA,WAAW,GACX;AAAA,QADYC,UACZ,uEADyB,EACzB;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKsC,OAAL,GAAehD,kBAAkB,CAACU,UAAD,EAAa,SAAb,EAAwBqC,0BAA0B,CAACnC,aAA3B,CAAyC,SAAzC,CAAxB,CAAjC;AACA;AACF;AACA;AACA;;AACE,SAAKqC,MAAL,GAAcjD,kBAAkB,CAACU,UAAD,EAAa,QAAb,EAAuBqC,0BAA0B,CAACnC,aAA3B,CAAyC,QAAzC,CAAvB,CAAhC;AACA;AACF;AACA;AACA;;AACE,SAAKsC,MAAL,GAAclD,kBAAkB,CAACU,UAAD,EAAa,QAAb,EAAuBqC,0BAA0B,CAACnC,aAA3B,CAAyC,QAAzC,CAAvB,CAAhC;AACA;AACF;AACA;AACA;;AACE,SAAKuC,SAAL,GAAiBnD,kBAAkB,CAACU,UAAD,EAAa,WAAb,EAA0BqC,0BAA0B,CAACnC,aAA3B,CAAyC,WAAzC,CAA1B,CAAnC;AACA;AACF;AACA;AACA;;AACE,SAAKwC,YAAL,GAAoBpD,kBAAkB,CAACU,UAAD,EAAa,cAAb,EAA6BqC,0BAA0B,CAACnC,aAA3B,CAAyC,cAAzC,CAA7B,CAAtC;AACA;AACF;AACA;AACA;;AACE,SAAKyC,sBAAL,GAA8BrD,kBAAkB,CAACU,UAAD,EAAa,wBAAb,EAAuCqC,0BAA0B,CAACnC,aAA3B,CAAyC,wBAAzC,CAAvC,CAAhD;AACA;AACF;AACA;AACA;;AACE,SAAK0C,UAAL,GAAkBtD,kBAAkB,CAACU,UAAD,EAAa,YAAb,EAA2BqC,0BAA0B,CAACnC,aAA3B,CAAyC,YAAzC,CAA3B,CAApC;AAEA,QAAG,oBAAoBF,UAAvB;AACC;AACH;AACA;AACA;AACG,WAAK6C,cAAL,GAAsBvD,kBAAkB,CAACU,UAAD,EAAa,gBAAb,EAA+BqC,0BAA0B,CAACnC,aAA3B,CAAyC,gBAAzC,CAA/B,CAAxC;AAED,QAAG,gBAAgBF,UAAnB;AACC;AACH;AACA;AACA;AACG,WAAK8C,UAAL,GAAkBxD,kBAAkB,CAACU,UAAD,EAAa,YAAb,EAA2BqC,0BAA0B,CAACnC,aAA3B,CAAyC,YAAzC,CAA3B,CAApC,CAlDF,CAmDC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EAvDF,CAwDC;AACA,GAjEF,CAkEC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbL,aAAa,CAACM,UAAD,EACpB;AACC,YAAOA,UAAP;AAEC,WAAK,SAAL;AACC,eAAO,CAAP;;AACD,WAAK,QAAL;AACC,eAAO,IAAI2B,MAAJ,EAAP;;AACD,WAAK,QAAL;AACC,eAAO,EAAP;;AACD,WAAK,WAAL;AACC,eAAO,IAAI1C,mBAAJ,EAAP;;AACD,WAAK,cAAL;AACC,eAAO,IAAIJ,MAAM,CAAC0D,OAAX,EAAP;;AACD,WAAK,wBAAL;AACC,eAAO,IAAInD,qBAAJ,EAAP;;AACD,WAAK,YAAL;AACC,eAAO,EAAP;;AACD,WAAK,gBAAL;AACC,eAAO,IAAIP,MAAM,CAACsB,SAAX,EAAP;;AACD,WAAK,YAAL;AACC,eAAO,IAAIhB,UAAJ,EAAP;;AACD;AACC,cAAM,IAAIiB,KAAJ,CAAW,6DAA4DJ,UAAW,EAAlF,CAAN;AArBF;AAuBA,GAhGF,CAiGC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,GACb;AAAA,QADcP,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACE,UAAMa,KAAK,GAAGvB,kBAAkB,CAACU,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIX,MAAM,CAACyB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC0D,OAAX,CAAmB;AAAEhC,QAAAA,IAAI,EAAGF,KAAK,CAACyB,OAAN,IAAiB;AAA1B,OAAnB,CADM,EAENH,MAAM,CAAC5B,MAAP,CAAcM,KAAK,CAAC0B,MAAN,IAAgB,EAA9B,CAFM,EAGN,IAAIlD,MAAM,CAAC2D,MAAX,CAAkB;AACjB/B,QAAAA,KAAK,EAAE,CACNzB,YAAY,CAACe,MAAb,CAAoB;AACnBM,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAGH,KAAK,CAAC2B,MAAN,IAAgB;AADtB;AADY,SAApB,CADM,EAMN,IAAInD,MAAM,CAAC0C,WAAX,CAAuB;AACtBhB,UAAAA,IAAI,EAAGF,KAAK,CAAC2B,MAAN,IAAgB,EADD;AAEtBR,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAFa;AAMtBjB,UAAAA,KAAK,EAAEU,MAAM,CAACpB,MAAP,GAAgBiB,UAAhB,CAA2BP;AANZ,SAAvB,CANM;AADU,OAAlB,CAHM,EAoBNxB,mBAAmB,CAACc,MAApB,CAA2BM,KAAK,CAAC4B,SAAN,IAAmB,EAA9C,CApBM,EAqBN,IAAIpD,MAAM,CAAC0D,OAAX,CAAmB;AAAEhC,QAAAA,IAAI,EAAGF,KAAK,CAAC6B,YAAN,IAAsB;AAA/B,OAAnB,CArBM,EAsBN9C,qBAAqB,CAACW,MAAtB,CAA6BM,KAAK,CAAC8B,sBAAN,IAAgC,EAA7D,CAtBM,EAuBN,IAAItD,MAAM,CAACyB,QAAX,CAAoB;AACnBC,QAAAA,IAAI,EAAGF,KAAK,CAAC+B,UAAN,IAAoB,EADR;AAEnB3B,QAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC4D,QAAX,CAAoB;AACnBhC,UAAAA,KAAK,EAAEvB,SAAS,CAACa,MAAV;AADY,SAApB,CADM;AAFY,OAApB,CAvBM,EA+BN,IAAIlB,MAAM,CAACsB,SAAX,CAAqB;AACpBO,QAAAA,QAAQ,EAAE,IADU;AAEpBH,QAAAA,IAAI,EAAGF,KAAK,CAACgC,cAAN,IAAwB;AAFX,OAArB,CA/BM,EAmCNlD,UAAU,CAACY,MAAX,CAAkBM,KAAK,CAACiC,UAAN,IAAoB,EAAtC,EAA0C,IAA1C,CAnCM;AAFoB,KAApB,CAAR;AAwCA,GAzKF,CA0KC;;AACA;AACD;AACA;AACA;;;AACCxC,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAhB,IAAAA,UAAU,CAACgB,MAAD,EAAS,CAClB,SADkB,EAElB,QAFkB,EAGlB,QAHkB,EAIlB,WAJkB,EAKlB,cALkB,EAMlB,wBANkB,EAOlB,YAPkB,EAQlB,gBARkB,EASlB,YATkB,CAAT,CAAV,CAFD,CAaC;AAEA;;AACA,UAAMY,IAAI,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBb,MAArB,EACZA,MADY,EAEZ8B,0BAA0B,CAAC9B,MAA3B,CAAkC;AACjCM,MAAAA,KAAK,EAAE;AACNyB,QAAAA,OAAO,EAAE,SADH;AAENC,QAAAA,MAAM,EAAE;AACP1B,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADA,SAFF;AAONwB,QAAAA,MAAM,EAAE,QAPF;AAQNC,QAAAA,SAAS,EAAE;AACV5B,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADG,SARL;AAaN0B,QAAAA,YAAY,EAAE,cAbR;AAcNC,QAAAA,sBAAsB,EAAE;AACvB9B,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADgB,SAdlB;AAmBN4B,QAAAA,UAAU,EAAE,YAnBN;AAoBNC,QAAAA,cAAc,EAAE,gBApBV;AAqBNC,QAAAA,UAAU,EAAE;AACXjC,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADI;AArBN;AAD0B,KAAlC,CAFY,CAAb;AAiCA,QAAGG,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIT,KAAJ,CAAU,oFAAV,CAAN,CAlDF,CAmDC;AAEA;;AACA,SAAK0B,OAAL,GAAenB,IAAI,CAACG,MAAL,CAAYgB,OAAZ,CAAoBd,UAApB,CAA+B0B,QAA9C;AACA,SAAKX,MAAL,GAAc,IAAIJ,MAAJ,CAAW;AAAE5B,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYiB;AAAtB,KAAX,CAAd;;AAEA,YAAOpB,IAAI,CAACG,MAAL,CAAYkB,MAAZ,CAAmBR,OAAnB,CAA2BC,QAAlC;AAEC,WAAK,CAAL;AAAQ;AACP,aAAKO,MAAL,GAAc,IAAIb,MAAJ,CAAW;AACxBpB,UAAAA,MAAM,EAAE,IAAIlB,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,YAAAA,KAAK,EAAEE,IAAI,CAACG,MAAL,CAAYkB,MAAZ,CAAmBhB,UAAnB,CAA8BP;AADV,WAApB;AADgB,SAAX,CAAd;AAKA;;AACD,WAAK,CAAL,CATD,CASS;;AACR;AACC,cAAM,IAAIL,KAAJ,CAAU,2DAAV,CAAN;AAXF;;AAcA,SAAK6B,SAAL,GAAiB,IAAIhD,mBAAJ,CAAwB;AAAEc,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYmB;AAAtB,KAAxB,CAAjB;AACA,SAAKC,YAAL,GAAoBvB,IAAI,CAACG,MAAL,CAAYoB,YAAhC;AACA,SAAKC,sBAAL,GAA8B,IAAI/C,qBAAJ,CAA0B;AAAEW,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYqB;AAAtB,KAA1B,CAA9B;AACA,SAAKC,UAAL,GAAkBO,KAAK,CAACC,IAAN,CAAWjC,IAAI,CAACG,MAAL,CAAYsB,UAAZ,CAAuBpB,UAAvB,CAAkCP,KAA7C,EAAoDoC,OAAO,IAAI,IAAI3D,SAAJ,CAAc;AAAEa,MAAAA,MAAM,EAAE8C;AAAV,KAAd,CAA/D,CAAlB;AAEA,QAAG,oBAAoBlC,IAAI,CAACG,MAA5B,EACC,KAAKuB,cAAL,GAAsB1B,IAAI,CAACG,MAAL,CAAYuB,cAAlC;AAED,QAAG,gBAAgB1B,IAAI,CAACG,MAAxB,EACC,KAAKwB,UAAL,GAAkB,IAAInD,UAAJ,CAAe;AAAEY,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYwB;AAAtB,KAAf,CAAlB,CAhFF,CAiFC;AACA,GAlQF,CAmQC;;AACA;AACD;AACA;AACA;;;AACCvB,EAAAA,QAAQ,GACR;AACC,UAAMD,MAAM,GAAG,IAAIjC,MAAM,CAACyB,QAAX,CAAoB;AAClCG,MAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAAC0D,OAAX,CAAmB;AAAE9B,QAAAA,KAAK,EAAE,KAAKqB;AAAd,OAAnB,CADM,EAEN,KAAKC,MAAL,CAAYhB,QAAZ,EAFM,EAGN,IAAIlC,MAAM,CAAC0C,WAAX,CAAuB;AACtBC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SADa;AAKtBjB,QAAAA,KAAK,EAAE,KAAKuB,MAAL,CAAYjB,QAAZ,GAAuBC,UAAvB,CAAkCP;AALnB,OAAvB,CAHM,EAUN,KAAKwB,SAAL,CAAelB,QAAf,EAVM,EAWN,KAAKmB,YAXC,EAYN,KAAKC,sBAAL,CAA4BpB,QAA5B,EAZM,EAaN,IAAIlC,MAAM,CAACyB,QAAX,CAAoB;AACnBG,QAAAA,KAAK,EAAEkC,KAAK,CAACC,IAAN,CAAW,KAAKR,UAAhB,EAA4BS,OAAO,IAAIA,OAAO,CAAC9B,QAAR,EAAvC;AADY,OAApB,CAbM;AAD2B,KAApB,CAAf;AAoBA,QAAG,oBAAoB,IAAvB,EACCD,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,KAAKoB,cAAlC;AAED,QAAG,gBAAgB,IAAnB,EACCvB,MAAM,CAACE,UAAP,CAAkBP,KAAlB,CAAwBQ,IAAxB,CAA6B,KAAKqB,UAAL,CAAgBvB,QAAhB,EAA7B;AAED,WAAOD,MAAP;AACA,GArSF,CAsSC;;AACA;AACD;AACA;AACA;;;AACCI,EAAAA,MAAM,GACN;AACC,UAAMJ,MAAM,GAAG;AACdgB,MAAAA,OAAO,EAAE,KAAKA,OADA;AAEdC,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYb,MAAZ,EAFM;AAGdc,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYd,MAAZ,EAHM;AAIde,MAAAA,SAAS,EAAE,KAAKA,SAAL,CAAef,MAAf,EAJG;AAKdgB,MAAAA,YAAY,EAAE,KAAKA,YAAL,CAAkBhB,MAAlB,EALA;AAMdiB,MAAAA,sBAAsB,EAAE,KAAKA,sBAAL,CAA4BjB,MAA5B,EANV;AAOdkB,MAAAA,UAAU,EAAEO,KAAK,CAACC,IAAN,CAAW,KAAKR,UAAhB,EAA4BS,OAAO,IAAIA,OAAO,CAAC3B,MAAR,EAAvC;AAPE,KAAf;AAUA,QAAG,oBAAoB,IAAvB,EACCJ,MAAM,CAACuB,cAAP,GAAwB,KAAKA,cAAL,CAAoBnB,MAApB,EAAxB;AAED,QAAG,gBAAgB,IAAnB,EACCJ,MAAM,CAACwB,UAAP,GAAoB,KAAKA,UAAL,CAAgBpB,MAAhB,EAApB;AAED,WAAOJ,MAAP;AACA,GA9TF,CA+TC;;;AA/TD,C,CAiUA;;AACA;AACA;AACA;;AACA,eAAe,MAAMgC,sBAAN,CACf;AACC;;AACA;AACD;AACA;AACA;AACA;AACCvD,EAAAA,WAAW,GACX;AAAA,QADYC,UACZ,uEADyB,EACzB;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKuD,MAAL,GAAcjE,kBAAkB,CAACU,UAAD,EAAa,QAAb,EAAuBsD,sBAAsB,CAACpD,aAAvB,CAAqC,QAArC,CAAvB,CAAhC;AACA;AACF;AACA;AACA;;AACE,SAAKsD,kBAAL,GAA0BlE,kBAAkB,CAACU,UAAD,EAAa,oBAAb,EAAmCsD,sBAAsB,CAACpD,aAAvB,CAAqC,oBAArC,CAAnC,CAA5C;AACA;AACF;AACA;AACA;;AACE,SAAKuD,cAAL,GAAsBnE,kBAAkB,CAACU,UAAD,EAAa,gBAAb,EAA+BsD,sBAAsB,CAACpD,aAAvB,CAAqC,gBAArC,CAA/B,CAAxC,CAhBD,CAiBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EArBF,CAsBC;AACA,GA/BF,CAgCC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbL,aAAa,CAACM,UAAD,EACpB;AACC,YAAOA,UAAP;AAEC,WAAK,QAAL;AACC,eAAO,IAAI6B,0BAAJ,EAAP;;AACD,WAAK,oBAAL;AACC,eAAO,IAAI5C,mBAAJ,EAAP;;AACD,WAAK,gBAAL;AACC,eAAO,IAAIJ,MAAM,CAACsB,SAAX,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,yDAAwDJ,UAAW,EAA9E,CAAN;AATF;AAWA,GAlDF,CAmDC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,GACb;AAAA,QADcP,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACE,UAAMa,KAAK,GAAGvB,kBAAkB,CAACU,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,WAAQ,IAAIX,MAAM,CAACyB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACNoB,0BAA0B,CAAC9B,MAA3B,CAAkCM,KAAK,CAAC0C,MAAN,IAAgB,EAAlD,CADM,EAEN9D,mBAAmB,CAACc,MAApB,CAA2BM,KAAK,CAAC2C,kBAAN,IAA4B,EAAvD,CAFM,EAGN,IAAInE,MAAM,CAACsB,SAAX,CAAqB;AAAEI,QAAAA,IAAI,EAAGF,KAAK,CAAC4C,cAAN,IAAwB;AAAjC,OAArB,CAHM;AAFoB,KAApB,CAAR;AAQA,GAtFF,CAuFC;;AACA;AACD;AACA;AACA;;;AACCnD,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACAhB,IAAAA,UAAU,CAACgB,MAAD,EAAS,CAClB,QADkB,EAElB,oBAFkB,EAGlB,gBAHkB,CAAT,CAAV,CAFD,CAOC;AAEA;;AACA,UAAMY,IAAI,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBb,MAArB,EACZA,MADY,EAEZ+C,sBAAsB,CAAC/C,MAAvB,CAA8B;AAC7BM,MAAAA,KAAK,EAAE;AACN0C,QAAAA,MAAM,EAAE;AACP1C,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADA,SADF;AAMNwC,QAAAA,kBAAkB,EAAE;AACnB3C,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADY,SANd;AAWNyC,QAAAA,cAAc,EAAE;AAXV;AADsB,KAA9B,CAFY,CAAb;AAmBA,QAAGtC,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIT,KAAJ,CAAU,gFAAV,CAAN,CA9BF,CA+BC;AAEA;;AACA,SAAK2C,MAAL,GAAc,IAAIlB,0BAAJ,CAA+B;AAAE9B,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYiC;AAAtB,KAA/B,CAAd;AACA,SAAKC,kBAAL,GAA0B,IAAI/D,mBAAJ,CAAwB;AAAEc,MAAAA,MAAM,EAAEY,IAAI,CAACG,MAAL,CAAYkC;AAAtB,KAAxB,CAA1B;AACA,SAAKC,cAAL,GAAsBtC,IAAI,CAACG,MAAL,CAAYmC,cAAlC,CApCD,CAqCC;AACA,GAnIF,CAoIC;;AACA;AACD;AACA;AACA;;;AACClC,EAAAA,QAAQ,GACR;AACC,WAAQ,IAAIlC,MAAM,CAACyB,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAE,CACN,KAAKsC,MAAL,CAAYhC,QAAZ,EADM,EAEN,KAAKiC,kBAAL,CAAwBjC,QAAxB,EAFM,EAGN,KAAKkC,cAHC;AADoB,KAApB,CAAR;AAOA,GAlJF,CAmJC;;AACA;AACD;AACA;AACA;;;AACC/B,EAAAA,MAAM,GACN;AACC,WAAO;AACN6B,MAAAA,MAAM,EAAE,KAAKA,MAAL,CAAY7B,MAAZ,EADF;AAEN8B,MAAAA,kBAAkB,EAAE,KAAKA,kBAAL,CAAwB9B,MAAxB,EAFd;AAGN+B,MAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoB/B,MAApB;AAHV,KAAP;AAKA,GA/JF,CAgKC;;;AAhKD,C,CAkKA","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class ObjectDigestInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ObjectDigestInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Enumerated}\n\t\t * @desc digestedObjectType\n\t\t */\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n\t\t\n\t\tif(\"otherObjectTypeID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectIdentifier}\n\t\t\t * @desc otherObjectTypeID\n\t\t\t */\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n\t\t\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc digestAlgorithm\n\t\t */\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc objectDigest\n\t\t */\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"digestedObjectType\":\n\t\t\t\treturn new asn1js.Enumerated();\n\t\t\tcase \"otherObjectTypeID\":\n\t\t\t\treturn new asn1js.ObjectIdentifier();\n\t\t\tcase \"digestAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"objectDigest\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ObjectDigestInfo ::= SEQUENCE {\n\t *   digestedObjectType  ENUMERATED {\n\t *     publicKey            (0),\n\t *     publicKeyCert        (1),\n\t *     otherObjectTypes     (2) },\n\t *   -- otherObjectTypes MUST NOT\n\t *   -- be used in this profile\n\t *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n\t *   digestAlgorithm     AlgorithmIdentifier,\n\t *   objectDigest        BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [digestedObjectType]\n\t\t * @property {string} [otherObjectTypeID]\n\t\t * @property {string} [digestAlgorithm]\n\t\t * @property {string} [objectDigest]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\n\t\t\t\tnew asn1js.ObjectIdentifier({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"digestedObjectType\",\n\t\t\t\"otherObjectTypeID\",\n\t\t\t\"digestAlgorithm\",\n\t\t\t\"objectDigest\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tObjectDigestInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\n\t\t\t\t\tdigestAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tobjectDigest: \"objectDigest\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\n\t\t\n\t\tif(\"otherObjectTypeID\" in asn1.result)\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\n\t\t\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n\t\tthis.objectDigest = asn1.result.objectDigest;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [this.digestedObjectType]\n\t\t});\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.valueBlock.value.push(this.otherObjectTypeID);\n\t\t\n\t\tresult.valueBlock.value.push(this.digestAlgorithm.toSchema());\n\t\tresult.valueBlock.value.push(this.objectDigest);\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\n\t\t};\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n\t\t\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\n\t\tresult.objectDigest = this.objectDigest.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class V2Form\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for V2Form class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"issuerName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc issuerName\n\t\t\t */\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuerName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * V2Form ::= SEQUENCE {\n\t *   issuerName            GeneralNames  OPTIONAL,\n\t *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\t *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n\t *     -- issuerName MUST be present in this profile\n\t *     -- baseCertificateID and objectDigestInfo MUST NOT\n\t *     -- be present in this profile\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuerName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: names.issuerName\n\t\t\t\t\t}\n\t\t\t\t}, true),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuerName\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tV2Form.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuerName: \"issuerName\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"issuerName\" in asn1.result)\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.issuerName = this.issuerName.toJSON();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class Holder\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Holder class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"entityName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc entityName\n\t\t\t */\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"entityName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Holder ::= SEQUENCE {\n\t *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\t *       -- the issuer and serial number of\n\t *       -- the holder's Public Key Certificate\n\t *   entityName          [1] GeneralNames OPTIONAL,\n\t *       -- the name of the claimant or role\n\t *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n\t *       -- used to directly authenticate the holder,\n\t *       -- for example, an executable\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [entityName]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.entityName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"baseCertificateID\",\n\t\t\t\"entityName\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tHolder.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tentityName: \"entityName\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"entityName\" in asn1.result)\n\t\t{\n\t\t\tthis.entityName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t\tresult.entityName = this.entityName.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {Holder}\n\t\t * @desc holder\n\t\t */\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n\t\t/**\n\t\t * @type {GeneralNames|V2Form}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"holder\":\n\t\t\t\treturn new Holder();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfoV2 ::= SEQUENCE {\n\t *   version                 AttCertVersion, -- version is v2\n\t *   holder                  Holder,\n\t *   issuer                  AttCertIssuer,\n\t *   signature               AlgorithmIdentifier,\n\t *   serialNumber            CertificateSerialNumber,\n\t *   attrCertValidityPeriod  AttCertValidityPeriod,\n\t *   attributes              SEQUENCE OF Attribute,\n\t *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n\t *   extensions              Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tHolder.schema(names.holder || {}),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tGeneralNames.schema({\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"holder\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tholder: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"holder\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\n\t\t\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\n\t\t{\n\t\t\tcase 3: // V2Form\n\t\t\t\tthis.issuer = new V2Form({\n\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1: // GeneralNames (should not be used)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n\t\t}\n\t\t\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\t\tthis.holder.toSchema(),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tthis.signature.toSchema(),\n\t\t\t\tthis.serialNumber,\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version,\n\t\t\tholder: this.holder.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport default class AttributeCertificateV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV2}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV2();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV2,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureAlgorithm\",\n\t\t\t\"signatureValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
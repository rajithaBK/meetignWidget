{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _space = _interopRequireDefault(require(\"./space\"));\n\nvar _device = _interopRequireDefault(require(\"./device\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar Lyra = _webexCore.WebexPlugin.extend({\n  /**\n   * @typedef {Object} Endpoint\n   * @property {Object} advertiser\n   * @property {string} advertiser.id\n   * @property {string} advertiser.displayName\n   * @property {string} advertiser.orgId\n   * @property {Object} links\n   * @property {Object} links.addMeToSpace\n   * @property {string} links.addMeToSpace.href\n   * @property {string} links.addMeToSpace.method\n   * @property {Object} links.lyra_space\n   * @property {string} links.lyra_space.href\n   * @property {string} links.lyra_space.method\n   * @property {string} proof\n   * @property {Object} token\n   * @property {string} token.value\n   */\n  namespace: 'Lyra',\n  children: {\n    space: _space.default,\n    device: _device.default\n  },\n\n  /**\n   * Get the endpoint information\n   * @param {string} token - ultrasound token decoded\n   * @returns {Promise<Endpoint>}\n   */\n  getAdvertisedEndpoint: function getAdvertisedEndpoint(token) {\n    return this.webex.request({\n      method: 'GET',\n      api: 'proximity',\n      resource: '/ultrasound/advertisements',\n      qs: {\n        token: token\n      }\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = Lyra;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;AAIA;;AAEA;;AACA;AAPA;AACA;AACA;;;AAOA,IAAMA,IAAI,GAAGC,uBAAYC,MAAZD,CAAmB;AAC9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,WAAS,EAAE,MAlBmB;AAmB9BC,UAAQ,EAAE;AACRC,SAAK,EAAEC,cADC;AAERC,UAAM,EAAEC;AAFA,GAnBoB;;AAwB9B;AACF;AACA;AACA;AACA;AACEC,uBA7B8B,iCA6BRC,KA7BQ,EA6BD;AAC3B,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,KADgB;AAExBC,SAAG,EAAE,WAFmB;AAGxBC,cAAQ,EAAE,4BAHc;AAIxBC,QAAE,EAAE;AACFN,aAAK,EAALA;AADE;AAJoB,KAAnB,EAQJO,IARI,CAQC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAb;AARD,MAAP;AA9B4B;AAAAC;AAAA,CAAnBnB,CAAb;;eA2CeD","names":["Lyra","WebexPlugin","extend","namespace","children","space","Space","device","Device","getAdvertisedEndpoint","token","webex","request","method","api","resource","qs","then","res","body","version"],"sources":["lyra.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport Space from './space';\nimport Device from './device';\n\nconst Lyra = WebexPlugin.extend({\n  /**\n   * @typedef {Object} Endpoint\n   * @property {Object} advertiser\n   * @property {string} advertiser.id\n   * @property {string} advertiser.displayName\n   * @property {string} advertiser.orgId\n   * @property {Object} links\n   * @property {Object} links.addMeToSpace\n   * @property {string} links.addMeToSpace.href\n   * @property {string} links.addMeToSpace.method\n   * @property {Object} links.lyra_space\n   * @property {string} links.lyra_space.href\n   * @property {string} links.lyra_space.method\n   * @property {string} proof\n   * @property {Object} token\n   * @property {string} token.value\n   */\n  namespace: 'Lyra',\n  children: {\n    space: Space,\n    device: Device\n  },\n\n  /**\n   * Get the endpoint information\n   * @param {string} token - ultrasound token decoded\n   * @returns {Promise<Endpoint>}\n   */\n  getAdvertisedEndpoint(token) {\n    return this.webex.request({\n      method: 'GET',\n      api: 'proximity',\n      resource: '/ultrasound/advertisements',\n      qs: {\n        token\n      }\n    })\n      .then((res) => res.body);\n  }\n});\n\n\nexport default Lyra;\n"]},"metadata":{},"sourceType":"script"}
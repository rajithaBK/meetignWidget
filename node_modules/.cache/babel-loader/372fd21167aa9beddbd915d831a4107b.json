{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar SecretBag = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SecretBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function SecretBag() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SecretBag);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc secretTypeId\r\n     */\n    this.secretTypeId = getParametersValue(parameters, \"secretTypeId\", SecretBag.defaultValues(\"secretTypeId\"));\n    /**\r\n     * @type {*}\r\n     * @desc secretValue\r\n     */\n\n    this.secretValue = getParametersValue(parameters, \"secretValue\", SecretBag.defaultValues(\"secretValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(SecretBag, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"secretTypeId\", \"secretValue\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, SecretBag.schema({\n        names: {\n          id: \"secretTypeId\",\n          value: \"secretValue\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SecretBag\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\n      this.secretValue = asn1.result.secretValue; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.secretTypeId\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [this.secretValue.toSchema()]\n        })]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        secretTypeId: this.secretTypeId,\n        secretValue: this.secretValue.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"secretTypeId\":\n          return \"\";\n\n        case \"secretValue\":\n          return new asn1js.Any();\n\n        default:\n          throw new Error(\"Invalid member name for SecretBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"secretTypeId\":\n          return memberValue === \"\";\n\n        case \"secretValue\":\n          return memberValue instanceof asn1js.Any;\n\n        default:\n          throw new Error(\"Invalid member name for SecretBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * SecretBag ::= SEQUENCE {\r\n     *    secretTypeId BAG-TYPE.&id ({SecretTypes}),\r\n     *    secretValue  [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}{@secretTypeId})\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [id]\r\n       * @property {string} [value]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.id || \"id\"\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Any({\n            name: names.value || \"value\"\n          })] // EXPLICIT ANY value\n\n        })]\n      });\n    }\n  }]);\n\n  return SecretBag;\n}(); //**************************************************************************************\n\n\nexport { SecretBag as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SecretBag.js"],"names":["asn1js","getParametersValue","clearProps","SecretBag","parameters","secretTypeId","defaultValues","secretValue","fromSchema","schema","asn1","compareSchema","names","id","value","verified","Error","result","valueBlock","toString","Sequence","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","toSchema","toJSON","memberName","Any","memberValue","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SecretBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SecretBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc secretTypeId\r\n\t\t */\r\n\t\tthis.secretTypeId = getParametersValue(parameters, \"secretTypeId\", SecretBag.defaultValues(\"secretTypeId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc secretValue\r\n\t\t */\r\n\t\tthis.secretValue = getParametersValue(parameters, \"secretValue\", SecretBag.defaultValues(\"secretValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SecretBag ::= SEQUENCE {\r\n\t *    secretTypeId BAG-TYPE.&id ({SecretTypes}),\r\n\t *    secretValue  [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}{@secretTypeId})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"secretTypeId\",\r\n\t\t\t\"secretValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSecretBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"secretTypeId\",\r\n\t\t\t\t\tvalue: \"secretValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SecretBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\r\n\t\tthis.secretValue = asn1.result.secretValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.secretTypeId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.secretValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsecretTypeId: this.secretTypeId,\r\n\t\t\tsecretValue: this.secretValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
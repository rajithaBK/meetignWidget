{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport ECPrivateKey from \"./ECPrivateKey.js\";\nimport RSAPrivateKey from \"./RSAPrivateKey.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5208\r\n */\n\nvar PrivateKeyInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PrivateKeyInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PrivateKeyInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PrivateKeyInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc privateKeyAlgorithm\r\n     */\n\n    this.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc privateKey\r\n     */\n\n    this.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\n    if (\"attributes\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc attributes\r\n       */\n      this.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\n    if (\"parsedKey\" in parameters)\n      /**\r\n       * @type {ECPrivateKey|RSAPrivateKey}\r\n       * @desc Parsed public key value\r\n       */\n      this.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PrivateKeyInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"privateKeyAlgorithm\", \"privateKey\", \"attributes\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({\n        names: {\n          version: \"version\",\n          privateKeyAlgorithm: {\n            names: {\n              blockName: \"privateKeyAlgorithm\"\n            }\n          },\n          privateKey: \"privateKey\",\n          attributes: \"attributes\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.privateKeyAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.privateKeyAlgorithm\n      });\n      this.privateKey = asn1.result.privateKey;\n      if (\"attributes\" in asn1.result) this.attributes = Array.from(asn1.result.attributes, function (element) {\n        return new Attribute({\n          schema: element\n        });\n      });\n\n      switch (this.privateKeyAlgorithm.algorithmId) {\n        case \"1.2.840.113549.1.1.1\":\n          // RSA\n          {\n            var privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\n            if (privateKeyASN1.offset !== -1) this.parsedKey = new RSAPrivateKey({\n              schema: privateKeyASN1.result\n            });\n          }\n          break;\n\n        case \"1.2.840.10045.2.1\":\n          // ECDSA\n          if (\"algorithmParams\" in this.privateKeyAlgorithm) {\n            if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\n              var _privateKeyASN = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\n\n              if (_privateKeyASN.offset !== -1) {\n                this.parsedKey = new ECPrivateKey({\n                  namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n                  schema: _privateKeyASN.result\n                });\n              }\n            }\n          }\n\n          break;\n\n        default:\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [new asn1js.Integer({\n        value: this.version\n      }), this.privateKeyAlgorithm.toSchema(), this.privateKey];\n\n      if (\"attributes\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: Array.from(this.attributes, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      //region Return common value in case we do not have enough info fo making JWK\n      if (\"parsedKey\" in this === false) {\n        var object = {\n          version: this.version,\n          privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n          privateKey: this.privateKey.toJSON()\n        };\n        if (\"attributes\" in this) object.attributes = Array.from(this.attributes, function (element) {\n          return element.toJSON();\n        });\n        return object;\n      } //endregion\n      //region Making JWK\n\n\n      var jwk = {};\n\n      switch (this.privateKeyAlgorithm.algorithmId) {\n        case \"1.2.840.10045.2.1\":\n          // ECDSA\n          jwk.kty = \"EC\";\n          break;\n\n        case \"1.2.840.113549.1.1.1\":\n          // RSA\n          jwk.kty = \"RSA\";\n          break;\n\n        default:\n      }\n\n      var publicKeyJWK = this.parsedKey.toJSON();\n\n      for (var _i = 0, _Object$keys = Object.keys(publicKeyJWK); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        jwk[key] = publicKeyJWK[key];\n      }\n\n      return jwk; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert JSON value into current object\r\n     * @param {Object} json\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (\"kty\" in json) {\n        switch (json.kty.toUpperCase()) {\n          case \"EC\":\n            this.parsedKey = new ECPrivateKey({\n              json: json\n            });\n            this.privateKeyAlgorithm = new AlgorithmIdentifier({\n              algorithmId: \"1.2.840.10045.2.1\",\n              algorithmParams: new asn1js.ObjectIdentifier({\n                value: this.parsedKey.namedCurve\n              })\n            });\n            break;\n\n          case \"RSA\":\n            this.parsedKey = new RSAPrivateKey({\n              json: json\n            });\n            this.privateKeyAlgorithm = new AlgorithmIdentifier({\n              algorithmId: \"1.2.840.113549.1.1.1\",\n              algorithmParams: new asn1js.Null()\n            });\n            break;\n\n          default:\n            throw new Error(\"Invalid value for \\\"kty\\\" parameter: \".concat(json.kty));\n        }\n\n        this.privateKey = new asn1js.OctetString({\n          valueHex: this.parsedKey.toSchema().toBER(false)\n        });\n      }\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"privateKeyAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"privateKey\":\n          return new asn1js.OctetString();\n\n        case \"attributes\":\n          return [];\n\n        case \"parsedKey\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for PrivateKeyInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PrivateKeyInfo ::= SEQUENCE {\r\n     *    version Version,\r\n     *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n     *    privateKey PrivateKey,\r\n     *    attributes [0] Attributes OPTIONAL }\r\n     *\r\n     * Version ::= INTEGER {v1(0)} (v1,...)\r\n     *\r\n     * PrivateKey ::= OCTET STRING\r\n     *\r\n     * Attributes ::= SET OF Attribute\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [privateKeyAlgorithm]\r\n       * @property {string} [privateKey]\r\n       * @property {string} [attributes]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}), new asn1js.OctetString({\n          name: names.privateKey || \"\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.attributes || \"\",\n            value: Attribute.schema()\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return PrivateKeyInfo;\n}(); //**************************************************************************************\n\n\nexport { PrivateKeyInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PrivateKeyInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","Attribute","ECPrivateKey","RSAPrivateKey","PrivateKeyInfo","parameters","version","defaultValues","privateKeyAlgorithm","privateKey","attributes","parsedKey","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","Array","from","element","algorithmId","privateKeyASN1","fromBER","valueHex","offset","algorithmParams","ObjectIdentifier","namedCurve","toString","outputArray","Integer","value","toSchema","push","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","object","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","OctetString","toBER","memberName","name","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyInfo ::= SEQUENCE {\r\n\t *    version Version,\r\n\t *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t *    privateKey PrivateKey,\r\n\t *    attributes [0] Attributes OPTIONAL }\r\n\t *\r\n\t * Version ::= INTEGER {v1(0)} (v1,...)\r\n\t *\r\n\t * PrivateKey ::= OCTET STRING\r\n\t *\r\n\t * Attributes ::= SET OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
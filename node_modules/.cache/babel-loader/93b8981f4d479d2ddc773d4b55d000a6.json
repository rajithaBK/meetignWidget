{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar PasswordRecipientinfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PasswordRecipientinfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PasswordRecipientinfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PasswordRecipientinfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\n    if (\"keyDerivationAlgorithm\" in parameters)\n      /**\r\n       * @type {AlgorithmIdentifier}\r\n       * @desc keyDerivationAlgorithm\r\n       */\n      this.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedKey\r\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc password Password to derive key from\r\n     */\n\n    this.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PasswordRecipientinfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"keyDerivationAlgorithm\", \"keyEncryptionAlgorithm\", \"encryptedKey\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PasswordRecipientinfo.schema({\n        names: {\n          version: \"version\",\n          keyDerivationAlgorithm: \"keyDerivationAlgorithm\",\n          keyEncryptionAlgorithm: {\n            names: {\n              blockName: \"keyEncryptionAlgorithm\"\n            }\n          },\n          encryptedKey: \"encryptedKey\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n\n      if (\"keyDerivationAlgorithm\" in asn1.result) {\n        this.keyDerivationAlgorithm = new AlgorithmIdentifier({\n          schema: new asn1js.Sequence({\n            value: asn1.result.keyDerivationAlgorithm.valueBlock.value\n          })\n        });\n      }\n\n      this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.keyEncryptionAlgorithm\n      });\n      this.encryptedKey = asn1.result.encryptedKey; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create output array for sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n\n      if (\"keyDerivationAlgorithm\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\n        }));\n      }\n\n      outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n      outputArray.push(this.encryptedKey); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        version: this.version,\n        keyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\n        keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n        encryptedKey: this.encryptedKey.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return -1;\n\n        case \"keyDerivationAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"keyEncryptionAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"encryptedKey\":\n          return new asn1js.OctetString();\n\n        case \"password\":\n          return new ArrayBuffer(0);\n\n        default:\n          throw new Error(\"Invalid member name for PasswordRecipientinfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === -1;\n\n        case \"keyDerivationAlgorithm\":\n        case \"keyEncryptionAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"encryptedKey\":\n          return memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\n\n        case \"password\":\n          return memberValue.byteLength === 0;\n\n        default:\n          throw new Error(\"Invalid member name for PasswordRecipientinfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PasswordRecipientInfo ::= SEQUENCE {\r\n     *    version CMSVersion,   -- Always set to 0\r\n     *    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n     *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n     *    encryptedKey EncryptedKey }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [keyDerivationAlgorithm]\r\n       * @property {string} [keyEncryptionAlgorithm]\r\n       * @property {string} [encryptedKey]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), new asn1js.Constructed({\n          name: names.keyDerivationAlgorithm || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: AlgorithmIdentifier.schema().valueBlock.value\n        }), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({\n          name: names.encryptedKey || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return PasswordRecipientinfo;\n}(); //**************************************************************************************\n\n\nexport { PasswordRecipientinfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PasswordRecipientinfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","PasswordRecipientinfo","parameters","version","defaultValues","keyDerivationAlgorithm","keyEncryptionAlgorithm","encryptedKey","password","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","Sequence","value","outputArray","push","Integer","Constructed","idBlock","tagClass","tagNumber","toSchema","toJSON","memberName","OctetString","ArrayBuffer","memberValue","algorithmId","isEqual","byteLength","name","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class PasswordRecipientinfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PasswordRecipientinfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PasswordRecipientinfo.defaultValues(\"version\"));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc keyDerivationAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.keyDerivationAlgorithm = getParametersValue(parameters, \"keyDerivationAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyDerivationAlgorithm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", PasswordRecipientinfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", PasswordRecipientinfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc password Password to derive key from\r\n\t\t */\r\n\t\tthis.password = getParametersValue(parameters, \"password\", PasswordRecipientinfo.defaultValues(\"password\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"keyDerivationAlgorithm\":\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(PasswordRecipientinfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"password\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PasswordRecipientinfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PasswordRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,   -- Always set to 0\r\n\t *    keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationAlgorithm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.keyDerivationAlgorithm || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: AlgorithmIdentifier.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"keyDerivationAlgorithm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPasswordRecipientinfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkeyDerivationAlgorithm: \"keyDerivationAlgorithm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PasswordRecipientinfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.keyDerivationAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.keyDerivationAlgorithm.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create output array for sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\r\n\t\tif(\"keyDerivationAlgorithm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.keyDerivationAlgorithm.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkeyDerivationAlgorithm: this.keyDerivationAlgorithm.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nvar IssuingDistributionPoint = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for IssuingDistributionPoint class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function IssuingDistributionPoint() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IssuingDistributionPoint);\n\n    //region Internal properties of the object\n    if (\"distributionPoint\" in parameters)\n      /**\n       * @type {Array.<GeneralName>|RelativeDistinguishedNames}\n       * @desc distributionPoint\n       */\n      this.distributionPoint = getParametersValue(parameters, \"distributionPoint\", IssuingDistributionPoint.defaultValues(\"distributionPoint\"));\n    /**\n     * @type {boolean}\n     * @desc onlyContainsUserCerts\n     */\n\n    this.onlyContainsUserCerts = getParametersValue(parameters, \"onlyContainsUserCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"));\n    /**\n     * @type {boolean}\n     * @desc onlyContainsCACerts\n     */\n\n    this.onlyContainsCACerts = getParametersValue(parameters, \"onlyContainsCACerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"));\n    if (\"onlySomeReasons\" in parameters)\n      /**\n       * @type {number}\n       * @desc onlySomeReasons\n       */\n      this.onlySomeReasons = getParametersValue(parameters, \"onlySomeReasons\", IssuingDistributionPoint.defaultValues(\"onlySomeReasons\"));\n    /**\n     * @type {boolean}\n     * @desc indirectCRL\n     */\n\n    this.indirectCRL = getParametersValue(parameters, \"indirectCRL\", IssuingDistributionPoint.defaultValues(\"indirectCRL\"));\n    /**\n     * @type {boolean}\n     * @desc onlyContainsAttributeCerts\n     */\n\n    this.onlyContainsAttributeCerts = getParametersValue(parameters, \"onlyContainsAttributeCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(IssuingDistributionPoint, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"distributionPoint\", \"distributionPointNames\", \"onlyContainsUserCerts\", \"onlyContainsCACerts\", \"onlySomeReasons\", \"indirectCRL\", \"onlyContainsAttributeCerts\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n        names: {\n          distributionPoint: \"distributionPoint\",\n          distributionPointNames: \"distributionPointNames\",\n          onlyContainsUserCerts: \"onlyContainsUserCerts\",\n          onlyContainsCACerts: \"onlyContainsCACerts\",\n          onlySomeReasons: \"onlySomeReasons\",\n          indirectCRL: \"indirectCRL\",\n          onlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"distributionPoint\" in asn1.result) {\n        switch (true) {\n          case asn1.result.distributionPoint.idBlock.tagNumber === 0:\n            // GENERAL_NAMES variant\n            this.distributionPoint = Array.from(asn1.result.distributionPointNames, function (element) {\n              return new GeneralName({\n                schema: element\n              });\n            });\n            break;\n\n          case asn1.result.distributionPoint.idBlock.tagNumber === 1:\n            // RDN variant\n            {\n              this.distributionPoint = new RelativeDistinguishedNames({\n                schema: new asn1js.Sequence({\n                  value: asn1.result.distributionPoint.valueBlock.value\n                })\n              });\n            }\n            break;\n\n          default:\n            throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n        }\n      }\n\n      if (\"onlyContainsUserCerts\" in asn1.result) {\n        var view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n        this.onlyContainsUserCerts = view[0] !== 0x00;\n      }\n\n      if (\"onlyContainsCACerts\" in asn1.result) {\n        var _view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n\n        this.onlyContainsCACerts = _view[0] !== 0x00;\n      }\n\n      if (\"onlySomeReasons\" in asn1.result) {\n        var _view2 = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n\n        this.onlySomeReasons = _view2[0];\n      }\n\n      if (\"indirectCRL\" in asn1.result) {\n        var _view3 = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n\n        this.indirectCRL = _view3[0] !== 0x00;\n      }\n\n      if (\"onlyContainsAttributeCerts\" in asn1.result) {\n        var _view4 = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n\n        this.onlyContainsAttributeCerts = _view4[0] !== 0x00;\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n\n      if (\"distributionPoint\" in this) {\n        var value;\n\n        if (this.distributionPoint instanceof Array) {\n          value = new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: Array.from(this.distributionPoint, function (element) {\n              return element.toSchema();\n            })\n          });\n        } else {\n          value = this.distributionPoint.toSchema();\n          value.idBlock.tagClass = 3; // CONTEXT - SPECIFIC\n\n          value.idBlock.tagNumber = 1; // [1]\n        }\n\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [value]\n        }));\n      }\n\n      if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\")) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          valueHex: new Uint8Array([0xFF]).buffer\n        }));\n      }\n\n      if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\")) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          valueHex: new Uint8Array([0xFF]).buffer\n        }));\n      }\n\n      if (\"onlySomeReasons\" in this) {\n        var buffer = new ArrayBuffer(1);\n        var view = new Uint8Array(buffer);\n        view[0] = this.onlySomeReasons;\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 3 // [3]\n\n          },\n          valueHex: buffer\n        }));\n      }\n\n      if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\")) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 4 // [4]\n\n          },\n          valueHex: new Uint8Array([0xFF]).buffer\n        }));\n      }\n\n      if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 5 // [5]\n\n          },\n          valueHex: new Uint8Array([0xFF]).buffer\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {};\n\n      if (\"distributionPoint\" in this) {\n        if (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, function (element) {\n          return element.toJSON();\n        });else object.distributionPoint = this.distributionPoint.toJSON();\n      }\n\n      if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\")) object.onlyContainsUserCerts = this.onlyContainsUserCerts;\n      if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\")) object.onlyContainsCACerts = this.onlyContainsCACerts;\n      if (\"onlySomeReasons\" in this) object.onlySomeReasons = this.onlySomeReasons;\n      if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\")) object.indirectCRL = this.indirectCRL;\n      if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\")) object.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"distributionPoint\":\n          return [];\n\n        case \"onlyContainsUserCerts\":\n          return false;\n\n        case \"onlyContainsCACerts\":\n          return false;\n\n        case \"onlySomeReasons\":\n          return 0;\n\n        case \"indirectCRL\":\n          return false;\n\n        case \"onlyContainsAttributeCerts\":\n          return false;\n\n        default:\n          throw new Error(\"Invalid member name for IssuingDistributionPoint class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * IssuingDistributionPoint ::= SEQUENCE {\n     *    distributionPoint          [0] DistributionPointName OPTIONAL,\n     *    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n     *    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n     *    onlySomeReasons            [3] ReasonFlags OPTIONAL,\n     *    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n     *    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\n     *\n     * ReasonFlags ::= BIT STRING {\n     *    unused                  (0),\n     *    keyCompromise           (1),\n     *    cACompromise            (2),\n     *    affiliationChanged      (3),\n     *    superseded              (4),\n     *    cessationOfOperation    (5),\n     *    certificateHold         (6),\n     *    privilegeWithdrawn      (7),\n     *    aACompromise            (8) }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [distributionPoint]\n       * @property {string} [distributionPointNames]\n       * @property {string} [onlyContainsUserCerts]\n       * @property {string} [onlyContainsCACerts]\n       * @property {string} [onlySomeReasons]\n       * @property {string} [indirectCRL]\n       * @property {string} [onlyContainsAttributeCerts]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Choice({\n            value: [new asn1js.Constructed({\n              name: names.distributionPoint || \"\",\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 0 // [0]\n\n              },\n              value: [new asn1js.Repeated({\n                name: names.distributionPointNames || \"\",\n                value: GeneralName.schema()\n              })]\n            }), new asn1js.Constructed({\n              name: names.distributionPoint || \"\",\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 1 // [1]\n\n              },\n              value: RelativeDistinguishedNames.schema().valueBlock.value\n            })]\n          })]\n        }), new asn1js.Primitive({\n          name: names.onlyContainsUserCerts || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          }\n        }), // IMPLICIT boolean value\n        new asn1js.Primitive({\n          name: names.onlyContainsCACerts || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          }\n        }), // IMPLICIT boolean value\n        new asn1js.Primitive({\n          name: names.onlySomeReasons || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 3 // [3]\n\n          }\n        }), // IMPLICIT bitstring value\n        new asn1js.Primitive({\n          name: names.indirectCRL || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 4 // [4]\n\n          }\n        }), // IMPLICIT boolean value\n        new asn1js.Primitive({\n          name: names.onlyContainsAttributeCerts || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 5 // [5]\n\n          }\n        }) // IMPLICIT boolean value\n        ]\n      });\n    }\n  }]);\n\n  return IssuingDistributionPoint;\n}(); //**************************************************************************************\n\n\nexport { IssuingDistributionPoint as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/IssuingDistributionPoint.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","RelativeDistinguishedNames","IssuingDistributionPoint","parameters","distributionPoint","defaultValues","onlyContainsUserCerts","onlyContainsCACerts","onlySomeReasons","indirectCRL","onlyContainsAttributeCerts","fromSchema","schema","asn1","compareSchema","names","distributionPointNames","verified","Error","result","idBlock","tagNumber","Array","from","element","Sequence","value","valueBlock","view","Uint8Array","valueHex","outputArray","Constructed","tagClass","toSchema","push","Primitive","buffer","ArrayBuffer","object","toJSON","memberName","name","blockName","optional","Choice","Repeated"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,0BAAP,MAAuC,iCAAvC,C,CACA;;AACA;AACA;AACA;;IACqBC,wB;AAEpB;;AACA;AACD;AACA;AACA;AACA;AACC,sCACA;AAAA,QADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;AACA,QAAG,uBAAuBA,UAA1B;AACC;AACH;AACA;AACA;AACG,WAAKC,iBAAL,GAAyBN,kBAAkB,CAACK,UAAD,EAAa,mBAAb,EAAkCD,wBAAwB,CAACG,aAAzB,CAAuC,mBAAvC,CAAlC,CAA3C;AAED;AACF;AACA;AACA;;AACE,SAAKC,qBAAL,GAA6BR,kBAAkB,CAACK,UAAD,EAAa,uBAAb,EAAsCD,wBAAwB,CAACG,aAAzB,CAAuC,uBAAvC,CAAtC,CAA/C;AAEA;AACF;AACA;AACA;;AACE,SAAKE,mBAAL,GAA2BT,kBAAkB,CAACK,UAAD,EAAa,qBAAb,EAAoCD,wBAAwB,CAACG,aAAzB,CAAuC,qBAAvC,CAApC,CAA7C;AAEA,QAAG,qBAAqBF,UAAxB;AACC;AACH;AACA;AACA;AACG,WAAKK,eAAL,GAAuBV,kBAAkB,CAACK,UAAD,EAAa,iBAAb,EAAgCD,wBAAwB,CAACG,aAAzB,CAAuC,iBAAvC,CAAhC,CAAzC;AAED;AACF;AACA;AACA;;AACE,SAAKI,WAAL,GAAmBX,kBAAkB,CAACK,UAAD,EAAa,aAAb,EAA4BD,wBAAwB,CAACG,aAAzB,CAAuC,aAAvC,CAA5B,CAArC;AAEA;AACF;AACA;AACA;;AACE,SAAKK,0BAAL,GAAkCZ,kBAAkB,CAACK,UAAD,EAAa,4BAAb,EAA2CD,wBAAwB,CAACG,aAAzB,CAAuC,4BAAvC,CAA3C,CAApD,CAtCD,CAuCC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKQ,UAAL,CAAgBR,UAAU,CAACS,MAA3B,EA3CF,CA4CC;AACA,G,CACD;;AACA;AACD;AACA;AACA;;;;;WAiJC;;AACA;AACD;AACA;AACA;AACC,wBAAWA,MAAX,EACA;AACC;AACAb,MAAAA,UAAU,CAACa,MAAD,EAAS,CAClB,mBADkB,EAElB,wBAFkB,EAGlB,uBAHkB,EAIlB,qBAJkB,EAKlB,iBALkB,EAMlB,aANkB,EAOlB,4BAPkB,CAAT,CAAV,CAFD,CAWC;AAEA;;AACA,UAAMC,IAAI,GAAGhB,MAAM,CAACiB,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZV,wBAAwB,CAACU,MAAzB,CAAgC;AAC/BG,QAAAA,KAAK,EAAE;AACNX,UAAAA,iBAAiB,EAAE,mBADb;AAENY,UAAAA,sBAAsB,EAAE,wBAFlB;AAGNV,UAAAA,qBAAqB,EAAE,uBAHjB;AAINC,UAAAA,mBAAmB,EAAE,qBAJf;AAKNC,UAAAA,eAAe,EAAE,iBALX;AAMNC,UAAAA,WAAW,EAAE,aANP;AAONC,UAAAA,0BAA0B,EAAE;AAPtB;AADwB,OAAhC,CAFY,CAAb;AAeA,UAAGG,IAAI,CAACI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,kFAAV,CAAN,CA9BF,CA+BC;AAEA;;AACA,UAAG,uBAAuBL,IAAI,CAACM,MAA/B,EACA;AACC,gBAAO,IAAP;AAEC,eAAMN,IAAI,CAACM,MAAL,CAAYf,iBAAZ,CAA8BgB,OAA9B,CAAsCC,SAAtC,KAAoD,CAA1D;AAA8D;AAC7D,iBAAKjB,iBAAL,GAAyBkB,KAAK,CAACC,IAAN,CAAWV,IAAI,CAACM,MAAL,CAAYH,sBAAvB,EAA+C,UAAAQ,OAAO;AAAA,qBAAI,IAAIxB,WAAJ,CAAgB;AAAEY,gBAAAA,MAAM,EAAEY;AAAV,eAAhB,CAAJ;AAAA,aAAtD,CAAzB;AACA;;AACD,eAAMX,IAAI,CAACM,MAAL,CAAYf,iBAAZ,CAA8BgB,OAA9B,CAAsCC,SAAtC,KAAoD,CAA1D;AAA8D;AAC7D;AACC,mBAAKjB,iBAAL,GAAyB,IAAIH,0BAAJ,CAA+B;AACvDW,gBAAAA,MAAM,EAAE,IAAIf,MAAM,CAAC4B,QAAX,CAAoB;AAC3BC,kBAAAA,KAAK,EAAEb,IAAI,CAACM,MAAL,CAAYf,iBAAZ,CAA8BuB,UAA9B,CAAyCD;AADrB,iBAApB;AAD+C,eAA/B,CAAzB;AAKA;AACD;;AACD;AACC,kBAAM,IAAIR,KAAJ,CAAU,6FAAV,CAAN;AAfF;AAiBA;;AAED,UAAG,2BAA2BL,IAAI,CAACM,MAAnC,EACA;AACC,YAAMS,IAAI,GAAG,IAAIC,UAAJ,CAAehB,IAAI,CAACM,MAAL,CAAYb,qBAAZ,CAAkCqB,UAAlC,CAA6CG,QAA5D,CAAb;AACA,aAAKxB,qBAAL,GAA8BsB,IAAI,CAAC,CAAD,CAAJ,KAAY,IAA1C;AACA;;AAED,UAAG,yBAAyBf,IAAI,CAACM,MAAjC,EACA;AACC,YAAMS,KAAI,GAAG,IAAIC,UAAJ,CAAehB,IAAI,CAACM,MAAL,CAAYZ,mBAAZ,CAAgCoB,UAAhC,CAA2CG,QAA1D,CAAb;;AACA,aAAKvB,mBAAL,GAA4BqB,KAAI,CAAC,CAAD,CAAJ,KAAY,IAAxC;AACA;;AAED,UAAG,qBAAqBf,IAAI,CAACM,MAA7B,EACA;AACC,YAAMS,MAAI,GAAG,IAAIC,UAAJ,CAAehB,IAAI,CAACM,MAAL,CAAYX,eAAZ,CAA4BmB,UAA5B,CAAuCG,QAAtD,CAAb;;AACA,aAAKtB,eAAL,GAAuBoB,MAAI,CAAC,CAAD,CAA3B;AACA;;AAED,UAAG,iBAAiBf,IAAI,CAACM,MAAzB,EACA;AACC,YAAMS,MAAI,GAAG,IAAIC,UAAJ,CAAehB,IAAI,CAACM,MAAL,CAAYV,WAAZ,CAAwBkB,UAAxB,CAAmCG,QAAlD,CAAb;;AACA,aAAKrB,WAAL,GAAoBmB,MAAI,CAAC,CAAD,CAAJ,KAAY,IAAhC;AACA;;AAED,UAAG,gCAAgCf,IAAI,CAACM,MAAxC,EACA;AACC,YAAMS,MAAI,GAAG,IAAIC,UAAJ,CAAehB,IAAI,CAACM,MAAL,CAAYT,0BAAZ,CAAuCiB,UAAvC,CAAkDG,QAAjE,CAAb;;AACA,aAAKpB,0BAAL,GAAmCkB,MAAI,CAAC,CAAD,CAAJ,KAAY,IAA/C;AACA,OAnFF,CAoFC;;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,oBACA;AACC;AACA,UAAMG,WAAW,GAAG,EAApB;;AAEA,UAAG,uBAAuB,IAA1B,EACA;AACC,YAAIL,KAAJ;;AAEA,YAAG,KAAKtB,iBAAL,YAAkCkB,KAArC,EACA;AACCI,UAAAA,KAAK,GAAG,IAAI7B,MAAM,CAACmC,WAAX,CAAuB;AAC9BZ,YAAAA,OAAO,EAAE;AACRa,cAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,cAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,aADqB;AAK9BK,YAAAA,KAAK,EAAEJ,KAAK,CAACC,IAAN,CAAW,KAAKnB,iBAAhB,EAAmC,UAAAoB,OAAO;AAAA,qBAAIA,OAAO,CAACU,QAAR,EAAJ;AAAA,aAA1C;AALuB,WAAvB,CAAR;AAOA,SATD,MAWA;AACCR,UAAAA,KAAK,GAAG,KAAKtB,iBAAL,CAAuB8B,QAAvB,EAAR;AAEAR,UAAAA,KAAK,CAACN,OAAN,CAAca,QAAd,GAAyB,CAAzB,CAHD,CAG6B;;AAC5BP,UAAAA,KAAK,CAACN,OAAN,CAAcC,SAAd,GAA0B,CAA1B,CAJD,CAI8B;AAC7B;;AAEDU,QAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAItC,MAAM,CAACmC,WAAX,CAAuB;AACvCZ,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD8B;AAKvCK,UAAAA,KAAK,EAAE,CAACA,KAAD;AALgC,SAAvB,CAAjB;AAOA;;AAED,UAAG,KAAKpB,qBAAL,KAA+BJ,wBAAwB,CAACG,aAAzB,CAAuC,uBAAvC,CAAlC,EACA;AACC0B,QAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAItC,MAAM,CAACuC,SAAX,CAAqB;AACrChB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCS,UAAAA,QAAQ,EAAG,IAAID,UAAJ,CAAe,CAAC,IAAD,CAAf,CAAD,CAAyBQ;AALE,SAArB,CAAjB;AAOA;;AAED,UAAG,KAAK9B,mBAAL,KAA6BL,wBAAwB,CAACG,aAAzB,CAAuC,qBAAvC,CAAhC,EACA;AACC0B,QAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAItC,MAAM,CAACuC,SAAX,CAAqB;AACrChB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCS,UAAAA,QAAQ,EAAG,IAAID,UAAJ,CAAe,CAAC,IAAD,CAAf,CAAD,CAAyBQ;AALE,SAArB,CAAjB;AAOA;;AAED,UAAG,qBAAqB,IAAxB,EACA;AACC,YAAMA,MAAM,GAAG,IAAIC,WAAJ,CAAgB,CAAhB,CAAf;AACA,YAAMV,IAAI,GAAG,IAAIC,UAAJ,CAAeQ,MAAf,CAAb;AAEAT,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAKpB,eAAf;AAEAuB,QAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAItC,MAAM,CAACuC,SAAX,CAAqB;AACrChB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCS,UAAAA,QAAQ,EAAEO;AAL2B,SAArB,CAAjB;AAOA;;AAED,UAAG,KAAK5B,WAAL,KAAqBP,wBAAwB,CAACG,aAAzB,CAAuC,aAAvC,CAAxB,EACA;AACC0B,QAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAItC,MAAM,CAACuC,SAAX,CAAqB;AACrChB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCS,UAAAA,QAAQ,EAAG,IAAID,UAAJ,CAAe,CAAC,IAAD,CAAf,CAAD,CAAyBQ;AALE,SAArB,CAAjB;AAOA;;AAED,UAAG,KAAK3B,0BAAL,KAAoCR,wBAAwB,CAACG,aAAzB,CAAuC,4BAAvC,CAAvC,EACA;AACC0B,QAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAItC,MAAM,CAACuC,SAAX,CAAqB;AACrChB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAD4B;AAKrCS,UAAAA,QAAQ,EAAG,IAAID,UAAJ,CAAe,CAAC,IAAD,CAAf,CAAD,CAAyBQ;AALE,SAArB,CAAjB;AAOA,OA7FF,CA8FC;AAEA;;;AACA,aAAQ,IAAIxC,MAAM,CAAC4B,QAAX,CAAoB;AAC3BC,QAAAA,KAAK,EAAEK;AADoB,OAApB,CAAR,CAjGD,CAoGC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBACA;AACC,UAAMQ,MAAM,GAAG,EAAf;;AAEA,UAAG,uBAAuB,IAA1B,EACA;AACC,YAAG,KAAKnC,iBAAL,YAAkCkB,KAArC,EACCiB,MAAM,CAACnC,iBAAP,GAA2BkB,KAAK,CAACC,IAAN,CAAW,KAAKnB,iBAAhB,EAAmC,UAAAoB,OAAO;AAAA,iBAAIA,OAAO,CAACgB,MAAR,EAAJ;AAAA,SAA1C,CAA3B,CADD,KAGCD,MAAM,CAACnC,iBAAP,GAA2B,KAAKA,iBAAL,CAAuBoC,MAAvB,EAA3B;AACD;;AAED,UAAG,KAAKlC,qBAAL,KAA+BJ,wBAAwB,CAACG,aAAzB,CAAuC,uBAAvC,CAAlC,EACCkC,MAAM,CAACjC,qBAAP,GAA+B,KAAKA,qBAApC;AAED,UAAG,KAAKC,mBAAL,KAA6BL,wBAAwB,CAACG,aAAzB,CAAuC,qBAAvC,CAAhC,EACCkC,MAAM,CAAChC,mBAAP,GAA6B,KAAKA,mBAAlC;AAED,UAAG,qBAAqB,IAAxB,EACCgC,MAAM,CAAC/B,eAAP,GAAyB,KAAKA,eAA9B;AAED,UAAG,KAAKC,WAAL,KAAqBP,wBAAwB,CAACG,aAAzB,CAAuC,aAAvC,CAAxB,EACCkC,MAAM,CAAC9B,WAAP,GAAqB,KAAKA,WAA1B;AAED,UAAG,KAAKC,0BAAL,KAAoCR,wBAAwB,CAACG,aAAzB,CAAuC,4BAAvC,CAAvC,EACCkC,MAAM,CAAC7B,0BAAP,GAAoC,KAAKA,0BAAzC;AAED,aAAO6B,MAAP;AACA,K,CACD;;;;WA1XA,uBAAqBE,UAArB,EACA;AACC,cAAOA,UAAP;AAEC,aAAK,mBAAL;AACC,iBAAO,EAAP;;AACD,aAAK,uBAAL;AACC,iBAAO,KAAP;;AACD,aAAK,qBAAL;AACC,iBAAO,KAAP;;AACD,aAAK,iBAAL;AACC,iBAAO,CAAP;;AACD,aAAK,aAAL;AACC,iBAAO,KAAP;;AACD,aAAK,4BAAL;AACC,iBAAO,KAAP;;AACD;AACC,gBAAM,IAAIvB,KAAJ,mEAAqEuB,UAArE,EAAN;AAfF;AAiBA,K,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBACA;AAAA,UADctC,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,UAAMY,KAAK,GAAGjB,kBAAkB,CAACK,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,aAAQ,IAAIN,MAAM,CAAC4B,QAAX,CAAoB;AAC3BiB,QAAAA,IAAI,EAAG3B,KAAK,CAAC4B,SAAN,IAAmB,EADC;AAE3BjB,QAAAA,KAAK,EAAE,CACN,IAAI7B,MAAM,CAACmC,WAAX,CAAuB;AACtBY,UAAAA,QAAQ,EAAE,IADY;AAEtBxB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAFa;AAMtBK,UAAAA,KAAK,EAAE,CACN,IAAI7B,MAAM,CAACgD,MAAX,CAAkB;AACjBnB,YAAAA,KAAK,EAAE,CACN,IAAI7B,MAAM,CAACmC,WAAX,CAAuB;AACtBU,cAAAA,IAAI,EAAG3B,KAAK,CAACX,iBAAN,IAA2B,EADZ;AAEtBgB,cAAAA,OAAO,EAAE;AACRa,gBAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,gBAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,eAFa;AAMtBK,cAAAA,KAAK,EAAE,CACN,IAAI7B,MAAM,CAACiD,QAAX,CAAoB;AACnBJ,gBAAAA,IAAI,EAAG3B,KAAK,CAACC,sBAAN,IAAgC,EADpB;AAEnBU,gBAAAA,KAAK,EAAE1B,WAAW,CAACY,MAAZ;AAFY,eAApB,CADM;AANe,aAAvB,CADM,EAcN,IAAIf,MAAM,CAACmC,WAAX,CAAuB;AACtBU,cAAAA,IAAI,EAAG3B,KAAK,CAACX,iBAAN,IAA2B,EADZ;AAEtBgB,cAAAA,OAAO,EAAE;AACRa,gBAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,gBAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,eAFa;AAMtBK,cAAAA,KAAK,EAAEzB,0BAA0B,CAACW,MAA3B,GAAoCe,UAApC,CAA+CD;AANhC,aAAvB,CAdM;AADU,WAAlB,CADM;AANe,SAAvB,CADM,EAmCN,IAAI7B,MAAM,CAACuC,SAAX,CAAqB;AACpBM,UAAAA,IAAI,EAAG3B,KAAK,CAACT,qBAAN,IAA+B,EADlB;AAEpBsC,UAAAA,QAAQ,EAAE,IAFU;AAGpBxB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CAnCM,EA0CF;AACJ,YAAIxB,MAAM,CAACuC,SAAX,CAAqB;AACpBM,UAAAA,IAAI,EAAG3B,KAAK,CAACR,mBAAN,IAA6B,EADhB;AAEpBqC,UAAAA,QAAQ,EAAE,IAFU;AAGpBxB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CA3CM,EAkDF;AACJ,YAAIxB,MAAM,CAACuC,SAAX,CAAqB;AACpBM,UAAAA,IAAI,EAAG3B,KAAK,CAACP,eAAN,IAAyB,EADZ;AAEpBoC,UAAAA,QAAQ,EAAE,IAFU;AAGpBxB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CAnDM,EA0DF;AACJ,YAAIxB,MAAM,CAACuC,SAAX,CAAqB;AACpBM,UAAAA,IAAI,EAAG3B,KAAK,CAACN,WAAN,IAAqB,EADR;AAEpBmC,UAAAA,QAAQ,EAAE,IAFU;AAGpBxB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CA3DM,EAkEF;AACJ,YAAIxB,MAAM,CAACuC,SAAX,CAAqB;AACpBM,UAAAA,IAAI,EAAG3B,KAAK,CAACL,0BAAN,IAAoC,EADvB;AAEpBkC,UAAAA,QAAQ,EAAE,IAFU;AAGpBxB,UAAAA,OAAO,EAAE;AACRa,YAAAA,QAAQ,EAAE,CADF;AACK;AACbZ,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL;AAHW,SAArB,CAnEM,CA0EH;AA1EG;AAFoB,OAApB,CAAR;AA+EA;;;;KA6OF;;;SAxbqBnB,wB","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class IssuingDistributionPoint\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for IssuingDistributionPoint class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"distributionPoint\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralName>|RelativeDistinguishedNames}\n\t\t\t * @desc distributionPoint\n\t\t\t */\n\t\t\tthis.distributionPoint = getParametersValue(parameters, \"distributionPoint\", IssuingDistributionPoint.defaultValues(\"distributionPoint\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsUserCerts\n\t\t */\n\t\tthis.onlyContainsUserCerts = getParametersValue(parameters, \"onlyContainsUserCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsCACerts\n\t\t */\n\t\tthis.onlyContainsCACerts = getParametersValue(parameters, \"onlyContainsCACerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"));\n\n\t\tif(\"onlySomeReasons\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc onlySomeReasons\n\t\t\t */\n\t\t\tthis.onlySomeReasons = getParametersValue(parameters, \"onlySomeReasons\", IssuingDistributionPoint.defaultValues(\"onlySomeReasons\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc indirectCRL\n\t\t */\n\t\tthis.indirectCRL = getParametersValue(parameters, \"indirectCRL\", IssuingDistributionPoint.defaultValues(\"indirectCRL\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsAttributeCerts\n\t\t */\n\t\tthis.onlyContainsAttributeCerts = getParametersValue(parameters, \"onlyContainsAttributeCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"distributionPoint\":\n\t\t\t\treturn [];\n\t\t\tcase \"onlyContainsUserCerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsCACerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlySomeReasons\":\n\t\t\t\treturn 0;\n\t\t\tcase \"indirectCRL\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsAttributeCerts\":\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuingDistributionPoint class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * IssuingDistributionPoint ::= SEQUENCE {\n\t *    distributionPoint          [0] DistributionPointName OPTIONAL,\n\t *    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n\t *    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n\t *    onlySomeReasons            [3] ReasonFlags OPTIONAL,\n\t *    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n\t *    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\n\t *\n\t * ReasonFlags ::= BIT STRING {\n\t *    unused                  (0),\n\t *    keyCompromise           (1),\n\t *    cACompromise            (2),\n\t *    affiliationChanged      (3),\n\t *    superseded              (4),\n\t *    cessationOfOperation    (5),\n\t *    certificateHold         (6),\n\t *    privilegeWithdrawn      (7),\n\t *    aACompromise            (8) }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [distributionPoint]\n\t\t * @property {string} [distributionPointNames]\n\t\t * @property {string} [onlyContainsUserCerts]\n\t\t * @property {string} [onlyContainsCACerts]\n\t\t * @property {string} [onlySomeReasons]\n\t\t * @property {string} [indirectCRL]\n\t\t * @property {string} [onlyContainsAttributeCerts]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\t\t\t\t\tname: (names.distributionPointNames || \"\"),\n\t\t\t\t\t\t\t\t\t\t\tvalue: GeneralName.schema()\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: RelativeDistinguishedNames.schema().valueBlock.value\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsUserCerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsCACerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlySomeReasons || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT bitstring value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.indirectCRL || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsAttributeCerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t\t}\n\t\t\t\t}) // IMPLICIT boolean value\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"distributionPoint\",\n\t\t\t\"distributionPointNames\",\n\t\t\t\"onlyContainsUserCerts\",\n\t\t\t\"onlyContainsCACerts\",\n\t\t\t\"onlySomeReasons\",\n\t\t\t\"indirectCRL\",\n\t\t\t\"onlyContainsAttributeCerts\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tIssuingDistributionPoint.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdistributionPoint: \"distributionPoint\",\n\t\t\t\t\tdistributionPointNames: \"distributionPointNames\",\n\t\t\t\t\tonlyContainsUserCerts: \"onlyContainsUserCerts\",\n\t\t\t\t\tonlyContainsCACerts: \"onlyContainsCACerts\",\n\t\t\t\t\tonlySomeReasons: \"onlySomeReasons\",\n\t\t\t\t\tindirectCRL: \"indirectCRL\",\n\t\t\t\t\tonlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"distributionPoint\" in asn1.result)\n\t\t{\n\t\t\tswitch(true)\n\t\t\t{\n\t\t\t\tcase (asn1.result.distributionPoint.idBlock.tagNumber === 0): // GENERAL_NAMES variant\n\t\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n\t\t\t\t\tbreak;\n\t\t\t\tcase (asn1.result.distributionPoint.idBlock.tagNumber === 1): // RDN variant\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.distributionPoint = new RelativeDistinguishedNames({\n\t\t\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(\"onlyContainsUserCerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsUserCerts = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlyContainsCACerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsCACerts = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlySomeReasons\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n\t\t\tthis.onlySomeReasons = view[0];\n\t\t}\n\t\t\n\t\tif(\"indirectCRL\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n\t\t\tthis.indirectCRL = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlyContainsAttributeCerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsAttributeCerts = (view[0] !== 0x00);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\t\t\n\t\tif(\"distributionPoint\" in this)\n\t\t{\n\t\t\tlet value;\n\t\t\t\n\t\t\tif(this.distributionPoint instanceof Array)\n\t\t\t{\n\t\t\t\tvalue = new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = this.distributionPoint.toSchema();\n\t\t\t\t\n\t\t\t\tvalue.idBlock.tagClass = 3; // CONTEXT - SPECIFIC\n\t\t\t\tvalue.idBlock.tagNumber = 1; // [1]\n\t\t\t}\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [value]\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"onlySomeReasons\" in this)\n\t\t{\n\t\t\tconst buffer = new ArrayBuffer(1);\n\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\n\t\t\tview[0] = this.onlySomeReasons;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tvalueHex: buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {};\n\t\t\n\t\tif(\"distributionPoint\" in this)\n\t\t{\n\t\t\tif(this.distributionPoint instanceof Array)\n\t\t\t\tobject.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());\n\t\t\telse\n\t\t\t\tobject.distributionPoint = this.distributionPoint.toJSON();\n\t\t}\n\t\t\n\t\tif(this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"))\n\t\t\tobject.onlyContainsUserCerts = this.onlyContainsUserCerts;\n\t\t\n\t\tif(this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"))\n\t\t\tobject.onlyContainsCACerts = this.onlyContainsCACerts;\n\t\t\n\t\tif(\"onlySomeReasons\" in this)\n\t\t\tobject.onlySomeReasons = this.onlySomeReasons;\n\t\t\n\t\tif(this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\"))\n\t\t\tobject.indirectCRL = this.indirectCRL;\n\t\t\n\t\tif(this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"))\n\t\t\tobject.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n\t\t\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
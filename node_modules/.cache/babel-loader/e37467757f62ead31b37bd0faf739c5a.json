{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar Signature = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Signature class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function Signature() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Signature);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signatureAlgorithm\r\n     */\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\n    if (\"certs\" in parameters)\n      /**\r\n       * @type {Array.<Certificate>}\r\n       * @desc certs\r\n       */\n      this.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(Signature, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"signatureAlgorithm\", \"signature\", \"certs\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Signature.schema({\n        names: {\n          signatureAlgorithm: {\n            names: {\n              blockName: \"signatureAlgorithm\"\n            }\n          },\n          signature: \"signature\",\n          certs: \"certs\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Signature\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.signatureAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.signatureAlgorithm\n      });\n      this.signature = asn1.result.signature;\n      if (\"certs\" in asn1.result) this.certs = Array.from(asn1.result.certs, function (element) {\n        return new Certificate({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array of output sequence\n      var outputArray = [];\n      outputArray.push(this.signatureAlgorithm.toSchema());\n      outputArray.push(this.signature);\n\n      if (\"certs\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Sequence({\n            value: Array.from(this.certs, function (element) {\n              return element.toSchema();\n            })\n          })]\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n        signature: this.signature.toJSON()\n      };\n      if (\"certs\" in this) _object.certs = Array.from(this.certs, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"signatureAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signature\":\n          return new asn1js.BitString();\n\n        case \"certs\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for Signature class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"signatureAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"signature\":\n          return memberValue.isEqual(Signature.defaultValues(memberName));\n\n        case \"certs\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for Signature class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * Signature       ::=     SEQUENCE {\r\n     *    signatureAlgorithm      AlgorithmIdentifier,\r\n     *    signature               BIT STRING,\r\n     *    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [signatureAlgorithm]\r\n       * @property {string} [signature]\r\n       * @property {string} [certs]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js.BitString({\n          name: names.signature || \"\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Sequence({\n            value: [new asn1js.Repeated({\n              name: names.certs || \"\",\n              value: Certificate.schema(names.certs || {})\n            })]\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return Signature;\n}(); //**************************************************************************************\n\n\nexport { Signature as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Signature.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","Certificate","Signature","parameters","signatureAlgorithm","defaultValues","signature","certs","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Array","from","element","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","memberName","BitString","memberValue","algorithmId","isEqual","length","name","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Signature\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Signature class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Signature       ::=     SEQUENCE {\r\n\t *    signatureAlgorithm      AlgorithmIdentifier,\r\n\t *    signature               BIT STRING,\r\n\t *    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignature.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignature: \"signature\",\r\n\t\t\t\t\tcerts: \"certs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Signature\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signature = asn1.result.signature;\r\n\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
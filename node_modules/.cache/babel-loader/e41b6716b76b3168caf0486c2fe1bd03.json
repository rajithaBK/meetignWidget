{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/define-property\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _constants = require(\"../constants\");\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n/**\n * @class MediaProperties\n */\n\n\nvar MediaProperties = /*#__PURE__*/function () {\n  /**\n   * @param {Object} [options] -- to auto construct\n   * @returns {MediaProperties}\n   */\n  function MediaProperties() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck2.default)(this, MediaProperties);\n    (0, _defineProperty3.default)(this, \"namespace\", _constants.MEETINGS);\n    this.peerConnection = _util.default.createPeerConnection();\n    this.mediaDirection = options.mediaDirection;\n    this.videoTrack = options.videoTrack;\n    this.audioTrack = options.audioTrack;\n    this.shareTrack = options.shareTrack;\n    this.remoteShare = options.remoteShare;\n    this.remoteAudioTrack = options.remoteAudioTrack;\n    this.remoteVideoTrack = options.remoteVideoTrack;\n    this.localQualityLevel = options.localQualityLevel || _constants.QUALITY_LEVELS.HIGH;\n    this.remoteQualityLevel = options.remoteQualityLevel || _constants.QUALITY_LEVELS.HIGH;\n    this.mediaSettings = {};\n    this.videoDeviceId = null; // deprecated after v1.89.3, remove when feasible.\n    // backwards compatible code.\n\n    (0, _defineProperty2.default)(this, 'remoteStream', {\n      set: function set(stream) {\n        var audio = stream.getAudioTracks();\n        var video = stream.getVideoTracks();\n        _this.remoteAudioTrack = audio.length && audio[0];\n        _this.remoteVideoTrack = video.length && video[0];\n      },\n      get: function get() {\n        _loggerProxy.default.logger.warn('Media:properties#remoteStream --> [DEPRECATION WARNING]: remoteStream (getter) has been deprecated after v1.89.3 (use remoteAudioTrack, remoteVideoTrack instead)'); // return if set or create a stream for backwards compatibility\n\n\n        return _util.default.createMediaStream([_this.remoteAudioTrack, _this.remoteVideoTrack]);\n      }\n    });\n  }\n  /**\n   * Retrieves the preferred video input device\n   * @returns {Object|null}\n   */\n\n\n  (0, _createClass2.default)(MediaProperties, [{\n    key: \"getVideoDeviceId\",\n    value: function getVideoDeviceId() {\n      return this.videoDeviceId || null;\n    }\n  }, {\n    key: \"setMediaDirection\",\n    value: function setMediaDirection(mediaDirection) {\n      this.mediaDirection = mediaDirection;\n    }\n  }, {\n    key: \"setMediaSettings\",\n    value: function setMediaSettings(type, values) {\n      this.mediaSettings[type] = values;\n    }\n  }, {\n    key: \"setMediaPeerConnection\",\n    value: function setMediaPeerConnection(peerConnection) {\n      this.peerConnection = peerConnection;\n    }\n  }, {\n    key: \"setLocalVideoTrack\",\n    value: function setLocalVideoTrack(videoTrack) {\n      this.videoTrack = videoTrack;\n    }\n  }, {\n    key: \"setLocalAudioTrack\",\n    value: function setLocalAudioTrack(audioTrack) {\n      this.audioTrack = audioTrack;\n    }\n  }, {\n    key: \"setLocalQualityLevel\",\n    value: function setLocalQualityLevel(localQualityLevel) {\n      this.localQualityLevel = localQualityLevel;\n    }\n  }, {\n    key: \"setLocalShareTrack\",\n    value: function setLocalShareTrack(shareTrack) {\n      this.shareTrack = shareTrack;\n    }\n  }, {\n    key: \"setRemoteQualityLevel\",\n    value: function setRemoteQualityLevel(remoteQualityLevel) {\n      this.remoteQualityLevel = remoteQualityLevel;\n    }\n    /**\n     * @deprecated after v1.89.3\n     * @param {remoteStream} remoteStream Sets remote media stream\n     * @returns {null}\n     * Use setRemoteAudioTrack, setRemoteVideoTrack\n     * and setRemoteShareTrack.\n     */\n\n  }, {\n    key: \"setRemoteStream\",\n    value: function setRemoteStream(remoteStream) {\n      _loggerProxy.default.logger.warn('Media:properties#setRemoteStream --> [DEPRECATION WARNING]: setRemoteStream has been deprecated after v1.89.3 (use setRemoteAudioTrack, setRemoteVideoTrack instead)'); // calls setter\n\n\n      this.remoteStream = remoteStream;\n    }\n  }, {\n    key: \"setRemoteShare\",\n    value: function setRemoteShare(remoteShare) {\n      this.remoteShare = remoteShare;\n    }\n    /**\n     * Sets the remote audio track\n     * @param {MediaTrack} remoteAudioTrack MediaTrack to save\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setRemoteAudioTrack\",\n    value: function setRemoteAudioTrack(remoteAudioTrack) {\n      this.remoteAudioTrack = remoteAudioTrack;\n    }\n    /**\n     * Sets the remote video track\n     * @param {MediaTrack} remoteVideoTrack MediaTrack to save\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setRemoteVideoTrack\",\n    value: function setRemoteVideoTrack(remoteVideoTrack) {\n      this.remoteVideoTrack = remoteVideoTrack;\n    }\n    /**\n     * Stores the preferred video input device\n     * @param {string} deviceId Preferred video input device\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setVideoDeviceId\",\n    value: function setVideoDeviceId(deviceId) {\n      this.videoDeviceId = deviceId;\n    }\n  }, {\n    key: \"unsetPeerConnection\",\n    value: function unsetPeerConnection() {\n      this.peerConnection = null;\n    }\n  }, {\n    key: \"reInitiatePeerconnection\",\n    value: function reInitiatePeerconnection() {\n      this.peerConnection = _util.default.createPeerConnection();\n    }\n  }, {\n    key: \"unsetLocalVideoTrack\",\n    value: function unsetLocalVideoTrack() {\n      this.videoTrack = null;\n    }\n  }, {\n    key: \"unsetLocalShareTrack\",\n    value: function unsetLocalShareTrack() {\n      this.shareTrack = null;\n    }\n  }, {\n    key: \"unsetLocalAudioTrack\",\n    value: function unsetLocalAudioTrack() {\n      this.audioTrack = null;\n    }\n    /**\n     * Removes remote stream from class instance\n     * @deprecated after v1.89.3\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetRemoteStream\",\n    value: function unsetRemoteStream() {\n      _loggerProxy.default.logger.warn('Media:properties#unsetRemoteStream --> [DEPRECATION WARNING]: unsetRemoteStream has been deprecated after v1.89.3 (use unsetRemoteTracks instead)'); // unsets audio and video only\n\n\n      this.unsetRemoteMedia();\n    }\n    /**\n     * Removes both remote audio and video from class instance\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetRemoteMedia\",\n    value: function unsetRemoteMedia() {\n      this.remoteAudioTrack = null;\n      this.remoteVideoTrack = null;\n    }\n  }, {\n    key: \"unsetRemoteShare\",\n    value: function unsetRemoteShare() {\n      this.remoteShare = null;\n    }\n  }, {\n    key: \"unsetLocalVideoTracks\",\n    value: function unsetLocalVideoTracks() {\n      this.unsetLocalVideoTrack();\n      this.unsetLocalShareTrack();\n    }\n    /**\n     * Removes remote stream and remote share from class instance\n     * @deprecated after v1.89.3\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetRemoteStreams\",\n    value: function unsetRemoteStreams() {\n      _loggerProxy.default.logger.warn('Media:properties#unsetRemoteStreams --> [DEPRECATION WARNING]: unsetRemoteStreams has been deprecated after v1.89.3 (use unsetRemoteTracks instead)');\n\n      this.unsetRemoteStream();\n      this.unsetRemoteShare();\n    }\n    /**\n     * Unsets all remote tracks\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetRemoteTracks\",\n    value: function unsetRemoteTracks() {\n      this.unsetRemoteMedia();\n      this.unsetRemoteShare();\n    }\n  }, {\n    key: \"unsetShareStreams\",\n    value: function unsetShareStreams() {\n      this.unsetLocalShareTrack();\n      this.unsetRemoteShare();\n    }\n    /**\n     * Removes both local and remote video stream from class instance\n     * @deprecated after v1.89.3\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetMediaStreams\",\n    value: function unsetMediaStreams() {\n      _loggerProxy.default.logger.warn('Media:properties#unsetMediaStreams --> [DEPRECATION WARNING]: unsetMediaStreams has been deprecated after v1.89.3 (use unsetMediaTracks instead)');\n\n      this.unsetLocalVideoTrack();\n      this.unsetRemoteStream();\n    }\n    /**\n     * Removes both local and remote video stream from class instance\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unsetMediaTracks\",\n    value: function unsetMediaTracks() {\n      this.unsetLocalVideoTrack();\n      this.unsetRemoteMedia();\n    }\n  }]);\n  return MediaProperties;\n}();\n\nexports.default = MediaProperties;","map":{"version":3,"mappings":"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","names":["MediaProperties","options","MEETINGS","peerConnection","MediaUtil","createPeerConnection","mediaDirection","videoTrack","audioTrack","shareTrack","remoteShare","remoteAudioTrack","remoteVideoTrack","localQualityLevel","QUALITY_LEVELS","HIGH","remoteQualityLevel","mediaSettings","videoDeviceId","set","stream","audio","getAudioTracks","video","getVideoTracks","_this","length","get","LoggerProxy","logger","warn","createMediaStream","type","values","remoteStream","deviceId","unsetRemoteMedia","unsetLocalVideoTrack","unsetLocalShareTrack","unsetRemoteStream","unsetRemoteShare"],"sources":["properties.js"],"sourcesContent":["import {\n  MEETINGS,\n  QUALITY_LEVELS\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport MediaUtil from './util';\n\n/**\n * @class MediaProperties\n */\nexport default class MediaProperties {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} [options] -- to auto construct\n   * @returns {MediaProperties}\n   */\n  constructor(options = {}) {\n    this.peerConnection = MediaUtil.createPeerConnection();\n    this.mediaDirection = options.mediaDirection;\n    this.videoTrack = options.videoTrack;\n    this.audioTrack = options.audioTrack;\n    this.shareTrack = options.shareTrack;\n    this.remoteShare = options.remoteShare;\n    this.remoteAudioTrack = options.remoteAudioTrack;\n    this.remoteVideoTrack = options.remoteVideoTrack;\n    this.localQualityLevel = options.localQualityLevel || QUALITY_LEVELS.HIGH;\n    this.remoteQualityLevel = options.remoteQualityLevel || QUALITY_LEVELS.HIGH;\n    this.mediaSettings = {};\n    this.videoDeviceId = null;\n\n    // deprecated after v1.89.3, remove when feasible.\n    // backwards compatible code.\n    Object.defineProperty(this, 'remoteStream', {\n      set: (stream) => {\n        const audio = stream.getAudioTracks();\n        const video = stream.getVideoTracks();\n\n        this.remoteAudioTrack = audio.length && audio[0];\n        this.remoteVideoTrack = video.length && video[0];\n      },\n      get: () => {\n        LoggerProxy.logger.warn('Media:properties#remoteStream --> [DEPRECATION WARNING]: remoteStream (getter) has been deprecated after v1.89.3 (use remoteAudioTrack, remoteVideoTrack instead)');\n\n        // return if set or create a stream for backwards compatibility\n        return MediaUtil.createMediaStream([this.remoteAudioTrack, this.remoteVideoTrack]);\n      }\n    });\n  }\n\n  /**\n   * Retrieves the preferred video input device\n   * @returns {Object|null}\n   */\n  getVideoDeviceId() {\n    return this.videoDeviceId || null;\n  }\n\n  setMediaDirection(mediaDirection) {\n    this.mediaDirection = mediaDirection;\n  }\n\n  setMediaSettings(type, values) {\n    this.mediaSettings[type] = values;\n  }\n\n  setMediaPeerConnection(peerConnection) {\n    this.peerConnection = peerConnection;\n  }\n\n  setLocalVideoTrack(videoTrack) {\n    this.videoTrack = videoTrack;\n  }\n\n  setLocalAudioTrack(audioTrack) {\n    this.audioTrack = audioTrack;\n  }\n\n  setLocalQualityLevel(localQualityLevel) {\n    this.localQualityLevel = localQualityLevel;\n  }\n\n  setLocalShareTrack(shareTrack) {\n    this.shareTrack = shareTrack;\n  }\n\n  setRemoteQualityLevel(remoteQualityLevel) {\n    this.remoteQualityLevel = remoteQualityLevel;\n  }\n\n  /**\n   * @deprecated after v1.89.3\n   * @param {remoteStream} remoteStream Sets remote media stream\n   * @returns {null}\n   * Use setRemoteAudioTrack, setRemoteVideoTrack\n   * and setRemoteShareTrack.\n   */\n  setRemoteStream(remoteStream) {\n    LoggerProxy.logger.warn('Media:properties#setRemoteStream --> [DEPRECATION WARNING]: setRemoteStream has been deprecated after v1.89.3 (use setRemoteAudioTrack, setRemoteVideoTrack instead)');\n    // calls setter\n    this.remoteStream = remoteStream;\n  }\n\n  setRemoteShare(remoteShare) {\n    this.remoteShare = remoteShare;\n  }\n\n  /**\n   * Sets the remote audio track\n   * @param {MediaTrack} remoteAudioTrack MediaTrack to save\n   * @returns {void}\n   */\n  setRemoteAudioTrack(remoteAudioTrack) {\n    this.remoteAudioTrack = remoteAudioTrack;\n  }\n\n  /**\n   * Sets the remote video track\n   * @param {MediaTrack} remoteVideoTrack MediaTrack to save\n   * @returns {void}\n   */\n  setRemoteVideoTrack(remoteVideoTrack) {\n    this.remoteVideoTrack = remoteVideoTrack;\n  }\n\n  /**\n   * Stores the preferred video input device\n   * @param {string} deviceId Preferred video input device\n   * @returns {void}\n   */\n  setVideoDeviceId(deviceId) {\n    this.videoDeviceId = deviceId;\n  }\n\n  unsetPeerConnection() {\n    this.peerConnection = null;\n  }\n\n  reInitiatePeerconnection() {\n    this.peerConnection = MediaUtil.createPeerConnection();\n  }\n\n  unsetLocalVideoTrack() {\n    this.videoTrack = null;\n  }\n\n  unsetLocalShareTrack() {\n    this.shareTrack = null;\n  }\n\n  unsetLocalAudioTrack() {\n    this.audioTrack = null;\n  }\n\n  /**\n   * Removes remote stream from class instance\n   * @deprecated after v1.89.3\n   * @returns {void}\n   */\n  unsetRemoteStream() {\n    LoggerProxy.logger.warn('Media:properties#unsetRemoteStream --> [DEPRECATION WARNING]: unsetRemoteStream has been deprecated after v1.89.3 (use unsetRemoteTracks instead)');\n    // unsets audio and video only\n    this.unsetRemoteMedia();\n  }\n\n  /**\n   * Removes both remote audio and video from class instance\n   * @returns {void}\n   */\n  unsetRemoteMedia() {\n    this.remoteAudioTrack = null;\n    this.remoteVideoTrack = null;\n  }\n\n  unsetRemoteShare() {\n    this.remoteShare = null;\n  }\n\n  unsetLocalVideoTracks() {\n    this.unsetLocalVideoTrack();\n    this.unsetLocalShareTrack();\n  }\n\n  /**\n   * Removes remote stream and remote share from class instance\n   * @deprecated after v1.89.3\n   * @returns {void}\n   */\n  unsetRemoteStreams() {\n    LoggerProxy.logger.warn('Media:properties#unsetRemoteStreams --> [DEPRECATION WARNING]: unsetRemoteStreams has been deprecated after v1.89.3 (use unsetRemoteTracks instead)');\n    this.unsetRemoteStream();\n    this.unsetRemoteShare();\n  }\n\n  /**\n   * Unsets all remote tracks\n   * @returns {void}\n   */\n  unsetRemoteTracks() {\n    this.unsetRemoteMedia();\n    this.unsetRemoteShare();\n  }\n\n  unsetShareStreams() {\n    this.unsetLocalShareTrack();\n    this.unsetRemoteShare();\n  }\n\n  /**\n   * Removes both local and remote video stream from class instance\n   * @deprecated after v1.89.3\n   * @returns {void}\n   */\n  unsetMediaStreams() {\n    LoggerProxy.logger.warn('Media:properties#unsetMediaStreams --> [DEPRECATION WARNING]: unsetMediaStreams has been deprecated after v1.89.3 (use unsetMediaTracks instead)');\n    this.unsetLocalVideoTrack();\n    this.unsetRemoteStream();\n  }\n\n  /**\n   * Removes both local and remote video stream from class instance\n   * @returns {void}\n   */\n  unsetMediaTracks() {\n    this.unsetLocalVideoTrack();\n    this.unsetRemoteMedia();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
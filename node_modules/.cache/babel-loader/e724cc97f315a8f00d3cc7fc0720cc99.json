{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from RFC5652\n */\n\nvar OtherKeyAttribute = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for OtherKeyAttribute class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function OtherKeyAttribute() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OtherKeyAttribute);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     * @desc keyAttrId\n     */\n    this.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\n    if (\"keyAttr\" in parameters)\n      /**\n       * @type {*}\n       * @desc keyAttr\n       */\n      this.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(OtherKeyAttribute, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"keyAttrId\", \"keyAttr\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, OtherKeyAttribute.schema({\n        names: {\n          keyAttrId: \"keyAttrId\",\n          keyAttr: \"keyAttr\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n      if (\"keyAttr\" in asn1.result) this.keyAttr = asn1.result.keyAttr; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.keyAttrId\n      }));\n      if (\"keyAttr\" in this) outputArray.push(this.keyAttr); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        keyAttrId: this.keyAttrId\n      };\n      if (\"keyAttr\" in this) _object.keyAttr = this.keyAttr.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"keyAttrId\":\n          return \"\";\n\n        case \"keyAttr\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for OtherKeyAttribute class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"keyAttrId\":\n          return memberValue === \"\";\n\n        case \"keyAttr\":\n          return Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for OtherKeyAttribute class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * OtherKeyAttribute ::= SEQUENCE {\n     *    keyAttrId OBJECT IDENTIFIER,\n     *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [optional]\n       * @property {string} [keyAttrId]\n       * @property {string} [keyAttr]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        optional: names.optional || true,\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.keyAttrId || \"\"\n        }), new asn1js.Any({\n          optional: true,\n          name: names.keyAttr || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return OtherKeyAttribute;\n}(); //**************************************************************************************\n\n\nexport { OtherKeyAttribute as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OtherKeyAttribute.js"],"names":["asn1js","getParametersValue","clearProps","OtherKeyAttribute","parameters","keyAttrId","defaultValues","keyAttr","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","outputArray","push","ObjectIdentifier","value","Sequence","_object","toJSON","memberName","memberValue","Object","keys","length","optional","name","blockName","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from RFC5652\n */\nexport default class OtherKeyAttribute\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for OtherKeyAttribute class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc keyAttrId\n\t\t */\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\n\n\t\tif(\"keyAttr\" in parameters)\n\t\t\t/**\n\t\t\t * @type {*}\n\t\t\t * @desc keyAttr\n\t\t\t */\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"keyAttrId\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"keyAttr\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"keyAttrId\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"keyAttr\":\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * OtherKeyAttribute ::= SEQUENCE {\n\t *    keyAttrId OBJECT IDENTIFIER,\n\t *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [optional]\n\t\t * @property {string} [keyAttrId]\n\t\t * @property {string} [keyAttr]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\toptional: (names.optional || true),\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\n\t\t\t\tnew asn1js.Any({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.keyAttr || \"\")\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"keyAttrId\",\n\t\t\t\"keyAttr\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tOtherKeyAttribute.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\n\t\t\t\t\tkeyAttr: \"keyAttr\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n\n\t\tif(\"keyAttr\" in asn1.result)\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\n\n\t\tif(\"keyAttr\" in this)\n\t\t\toutputArray.push(this.keyAttr);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst _object = {\n\t\t\tkeyAttrId: this.keyAttrId\n\t\t};\n\n\t\tif(\"keyAttr\" in this)\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
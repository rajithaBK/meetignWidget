{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractTokenizer = void 0;\n\nconst peek_readable_1 = require(\"peek-readable\");\n/**\r\n * Core tokenizer\r\n */\n\n\nclass AbstractTokenizer {\n  constructor(fileInfo) {\n    /**\r\n     * Tokenizer-stream position\r\n     */\n    this.position = 0;\n    this.numBuffer = new Uint8Array(8);\n    this.fileInfo = fileInfo ? fileInfo : {};\n  }\n  /**\r\n   * Read a token from the tokenizer-stream\r\n   * @param token - The token to read\r\n   * @param position - If provided, the desired position in the tokenizer-stream\r\n   * @returns Promise with token data\r\n   */\n\n\n  async readToken(token) {\n    let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.position;\n    const uint8Array = Buffer.alloc(token.len);\n    const len = await this.readBuffer(uint8Array, {\n      position\n    });\n    if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n    return token.get(uint8Array, 0);\n  }\n  /**\r\n   * Peek a token from the tokenizer-stream.\r\n   * @param token - Token to peek from the tokenizer-stream.\r\n   * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\r\n   * @returns Promise with token data\r\n   */\n\n\n  async peekToken(token) {\n    let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.position;\n    const uint8Array = Buffer.alloc(token.len);\n    const len = await this.peekBuffer(uint8Array, {\n      position\n    });\n    if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n    return token.get(uint8Array, 0);\n  }\n  /**\r\n   * Read a numeric token from the stream\r\n   * @param token - Numeric token\r\n   * @returns Promise with number\r\n   */\n\n\n  async readNumber(token) {\n    const len = await this.readBuffer(this.numBuffer, {\n      length: token.len\n    });\n    if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n    return token.get(this.numBuffer, 0);\n  }\n  /**\r\n   * Read a numeric token from the stream\r\n   * @param token - Numeric token\r\n   * @returns Promise with number\r\n   */\n\n\n  async peekNumber(token) {\n    const len = await this.peekBuffer(this.numBuffer, {\n      length: token.len\n    });\n    if (len < token.len) throw new peek_readable_1.EndOfStreamError();\n    return token.get(this.numBuffer, 0);\n  }\n  /**\r\n   * Ignore number of bytes, advances the pointer in under tokenizer-stream.\r\n   * @param length - Number of bytes to ignore\r\n   * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\r\n   */\n\n\n  async ignore(length) {\n    if (this.fileInfo.size !== undefined) {\n      const bytesLeft = this.fileInfo.size - this.position;\n\n      if (length > bytesLeft) {\n        this.position += bytesLeft;\n        return bytesLeft;\n      }\n    }\n\n    this.position += length;\n    return length;\n  }\n\n  async close() {// empty\n  }\n\n  normalizeOptions(uint8Array, options) {\n    if (options && options.position !== undefined && options.position < this.position) {\n      throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n    }\n\n    if (options) {\n      return {\n        mayBeLess: options.mayBeLess === true,\n        offset: options.offset ? options.offset : 0,\n        length: options.length ? options.length : uint8Array.length - (options.offset ? options.offset : 0),\n        position: options.position ? options.position : this.position\n      };\n    }\n\n    return {\n      mayBeLess: false,\n      offset: 0,\n      length: uint8Array.length,\n      position: this.position\n    };\n  }\n\n}\n\nexports.AbstractTokenizer = AbstractTokenizer;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/strtok3/lib/AbstractTokenizer.js"],"names":["Object","defineProperty","exports","value","AbstractTokenizer","peek_readable_1","require","constructor","fileInfo","position","numBuffer","Uint8Array","readToken","token","uint8Array","Buffer","alloc","len","readBuffer","EndOfStreamError","get","peekToken","peekBuffer","readNumber","length","peekNumber","ignore","size","undefined","bytesLeft","close","normalizeOptions","options","Error","mayBeLess","offset"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AbstractTokenizer = void 0;\r\nconst peek_readable_1 = require(\"peek-readable\");\r\n/**\r\n * Core tokenizer\r\n */\r\nclass AbstractTokenizer {\r\n    constructor(fileInfo) {\r\n        /**\r\n         * Tokenizer-stream position\r\n         */\r\n        this.position = 0;\r\n        this.numBuffer = new Uint8Array(8);\r\n        this.fileInfo = fileInfo ? fileInfo : {};\r\n    }\r\n    /**\r\n     * Read a token from the tokenizer-stream\r\n     * @param token - The token to read\r\n     * @param position - If provided, the desired position in the tokenizer-stream\r\n     * @returns Promise with token data\r\n     */\r\n    async readToken(token, position = this.position) {\r\n        const uint8Array = Buffer.alloc(token.len);\r\n        const len = await this.readBuffer(uint8Array, { position });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(uint8Array, 0);\r\n    }\r\n    /**\r\n     * Peek a token from the tokenizer-stream.\r\n     * @param token - Token to peek from the tokenizer-stream.\r\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\r\n     * @returns Promise with token data\r\n     */\r\n    async peekToken(token, position = this.position) {\r\n        const uint8Array = Buffer.alloc(token.len);\r\n        const len = await this.peekBuffer(uint8Array, { position });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(uint8Array, 0);\r\n    }\r\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */\r\n    async readNumber(token) {\r\n        const len = await this.readBuffer(this.numBuffer, { length: token.len });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(this.numBuffer, 0);\r\n    }\r\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */\r\n    async peekNumber(token) {\r\n        const len = await this.peekBuffer(this.numBuffer, { length: token.len });\r\n        if (len < token.len)\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        return token.get(this.numBuffer, 0);\r\n    }\r\n    /**\r\n     * Ignore number of bytes, advances the pointer in under tokenizer-stream.\r\n     * @param length - Number of bytes to ignore\r\n     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\r\n     */\r\n    async ignore(length) {\r\n        if (this.fileInfo.size !== undefined) {\r\n            const bytesLeft = this.fileInfo.size - this.position;\r\n            if (length > bytesLeft) {\r\n                this.position += bytesLeft;\r\n                return bytesLeft;\r\n            }\r\n        }\r\n        this.position += length;\r\n        return length;\r\n    }\r\n    async close() {\r\n        // empty\r\n    }\r\n    normalizeOptions(uint8Array, options) {\r\n        if (options && options.position !== undefined && options.position < this.position) {\r\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n        }\r\n        if (options) {\r\n            return {\r\n                mayBeLess: options.mayBeLess === true,\r\n                offset: options.offset ? options.offset : 0,\r\n                length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),\r\n                position: options.position ? options.position : this.position\r\n            };\r\n        }\r\n        return {\r\n            mayBeLess: false,\r\n            offset: 0,\r\n            length: uint8Array.length,\r\n            position: this.position\r\n        };\r\n    }\r\n}\r\nexports.AbstractTokenizer = AbstractTokenizer;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralSubtree from \"./GeneralSubtree.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nvar NameConstraints = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for NameConstraints class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function NameConstraints() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NameConstraints);\n\n    //region Internal properties of the object\n    if (\"permittedSubtrees\" in parameters)\n      /**\n       * @type {Array.<GeneralSubtree>}\n       * @desc permittedSubtrees\n       */\n      this.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n    if (\"excludedSubtrees\" in parameters)\n      /**\n       * @type {Array.<GeneralSubtree>}\n       * @desc excludedSubtrees\n       */\n      this.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(NameConstraints, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"permittedSubtrees\", \"excludedSubtrees\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\n        names: {\n          permittedSubtrees: \"permittedSubtrees\",\n          excludedSubtrees: \"excludedSubtrees\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for NameConstraints\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"permittedSubtrees\" in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, function (element) {\n        return new GeneralSubtree({\n          schema: element\n        });\n      });\n      if (\"excludedSubtrees\" in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, function (element) {\n        return new GeneralSubtree({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n\n      if (\"permittedSubtrees\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: Array.from(this.permittedSubtrees, function (element) {\n            return element.toSchema();\n          })\n        }));\n      }\n\n      if (\"excludedSubtrees\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: Array.from(this.excludedSubtrees, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {};\n      if (\"permittedSubtrees\" in this) object.permittedSubtrees = Array.from(this.permittedSubtrees, function (element) {\n        return element.toJSON();\n      });\n      if (\"excludedSubtrees\" in this) object.excludedSubtrees = Array.from(this.excludedSubtrees, function (element) {\n        return element.toJSON();\n      });\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"permittedSubtrees\":\n          return [];\n\n        case \"excludedSubtrees\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for NameConstraints class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * NameConstraints ::= SEQUENCE {\n     *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n     *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [permittedSubtrees]\n       * @property {string} [excludedSubtrees]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.permittedSubtrees || \"\",\n            value: GeneralSubtree.schema()\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.excludedSubtrees || \"\",\n            value: GeneralSubtree.schema()\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return NameConstraints;\n}(); //**************************************************************************************\n\n\nexport { NameConstraints as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/NameConstraints.js"],"names":["asn1js","getParametersValue","clearProps","GeneralSubtree","NameConstraints","parameters","permittedSubtrees","defaultValues","excludedSubtrees","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","Array","from","element","outputArray","push","Constructed","idBlock","tagClass","tagNumber","value","toSchema","Sequence","object","toJSON","memberName","name","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralSubtree from \"./GeneralSubtree.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class NameConstraints\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for NameConstraints class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"permittedSubtrees\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralSubtree>}\n\t\t\t * @desc permittedSubtrees\n\t\t\t */\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n\n\t\tif(\"excludedSubtrees\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralSubtree>}\n\t\t\t * @desc excludedSubtrees\n\t\t\t */\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"permittedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tcase \"excludedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * NameConstraints ::= SEQUENCE {\n\t *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n\t *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [permittedSubtrees]\n\t\t * @property {string} [excludedSubtrees]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"permittedSubtrees\",\n\t\t\t\"excludedSubtrees\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tNameConstraints.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"permittedSubtrees\" in asn1.result)\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n\n\t\tif(\"excludedSubtrees\" in asn1.result)\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\t\t\n\t\tif(\"permittedSubtrees\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"excludedSubtrees\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {};\n\t\t\n\t\tif(\"permittedSubtrees\" in this)\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\n\n\t\tif(\"excludedSubtrees\" in this)\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
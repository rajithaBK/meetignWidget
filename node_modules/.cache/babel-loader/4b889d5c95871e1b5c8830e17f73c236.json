{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _constants = require(\"../constants\");\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n/**\n * @class MeetingInfoRequest\n */\n\n\nvar MeetingInfoRequest = /*#__PURE__*/function () {\n  /**\n   * Meeting Info Request Constructor\n   * @param {WebexSDK} webex\n   */\n  function MeetingInfoRequest(webex) {\n    (0, _classCallCheck2.default)(this, MeetingInfoRequest);\n    this.webex = webex;\n  }\n  /**\n   *\n   * @param {Object} options with format of {type: String, desintation: String}\n   * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, conversationUrl respectively\n   * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI\n   * with the desination matching\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @throws {Error} if the options are not valid and complete\n   * @memberof MeetingInfoRequest\n   */\n\n\n  (0, _createClass2.default)(MeetingInfoRequest, [{\n    key: \"fetchMeetingInfo\",\n    value: function fetchMeetingInfo(options) {\n      if (!options || !options.type || !options.destination) {\n        throw new _parameter.default('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');\n      }\n\n      var resourceUrl = _util.default.getResourceUrl(options.type, options.destination);\n\n      var requestParams = _util.default.getRequestParams(resourceUrl, options.type, options.destination, _constants.API.LOCUS);\n\n      return this.webex.request(requestParams);\n    }\n  }]);\n  return MeetingInfoRequest;\n}();\n\nexports.default = MeetingInfoRequest;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;;;IACqBA,kB;AACnB;AACF;AACA;AACA;AACE,8BAAYC,KAAZ,EAAmB;AAAA;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,0BAAiBC,OAAjB,EAA0B;AACxB,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,IAArB,IAA6B,CAACD,OAAO,CAACE,WAA1C,EAAuD;AACrD,cAAM,IAAIC,kBAAJ,CAAmB,0IAAnB,CAAN;AACD;;AACD,UAAMC,WAAW,GAAGC,cAAgBC,cAAhBD,CAA+BL,OAAO,CAACC,IAAvCI,EAA6CL,OAAO,CAACE,WAArDG,CAApB;;AACA,UAAME,aAAa,GAAGF,cAAgBG,gBAAhBH,CAAiCD,WAAjCC,EAA8CL,OAAO,CAACC,IAAtDI,EAA4DL,OAAO,CAACE,WAApEG,EAAiFI,eAAIC,KAArFL,CAAtB;;AAEA,aAAO,KAAKN,KAAL,CAAWY,OAAX,CAAmBJ,aAAnB,CAAP;AACD","names":["MeetingInfoRequest","webex","options","type","destination","ParameterError","resourceUrl","MeetingInfoUtil","getResourceUrl","requestParams","getRequestParams","API","LOCUS","request"],"sources":["request.js"],"sourcesContent":["import {API} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport MeetingInfoUtil from './util';\n/**\n * @class MeetingInfoRequest\n */\nexport default class MeetingInfoRequest {\n  /**\n   * Meeting Info Request Constructor\n   * @param {WebexSDK} webex\n   */\n  constructor(webex) {\n    this.webex = webex;\n  }\n\n  /**\n   *\n   * @param {Object} options with format of {type: String, desintation: String}\n   * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, conversationUrl respectively\n   * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI\n   * with the desination matching\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @throws {Error} if the options are not valid and complete\n   * @memberof MeetingInfoRequest\n   */\n  fetchMeetingInfo(options) {\n    if (!options || !options.type || !options.destination) {\n      throw new ParameterError('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');\n    }\n    const resourceUrl = MeetingInfoUtil.getResourceUrl(options.type, options.destination);\n    const requestParams = MeetingInfoUtil.getRequestParams(resourceUrl, options.type, options.destination, API.LOCUS);\n\n    return this.webex.request(requestParams);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar RelativeDistinguishedNames = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RelativeDistinguishedNames class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n   * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n   */\n  function RelativeDistinguishedNames() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RelativeDistinguishedNames);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<AttributeTypeAndValue>}\r\n     * @desc Array of \"type and value\" objects\r\n     */\n    this.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc Value of the RDN before decoding from schema\r\n     */\n\n    this.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(RelativeDistinguishedNames, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"RDN\", \"typesAndValues\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n        names: {\n          blockName: \"RDN\",\n          repeatedSet: \"typesAndValues\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\n        this.typesAndValues = Array.from(asn1.result.typesAndValues, function (element) {\n          return new AttributeTypeAndValue({\n            schema: element\n          });\n        }); // noinspection JSUnresolvedVariable\n\n      this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Decode stored TBS value\n      if (this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\n        {\n          return new asn1js.Sequence({\n            value: [new asn1js.Set({\n              value: Array.from(this.typesAndValues, function (element) {\n                return element.toSchema();\n              })\n            })]\n          });\n        }\n\n      var asn1 = asn1js.fromBER(this.valueBeforeDecode); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return asn1.result; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        typesAndValues: Array.from(this.typesAndValues, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n    /**\r\n     * Compare two RDN values, or RDN with ArrayBuffer value\r\n     * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(compareTo) {\n      if (compareTo instanceof RelativeDistinguishedNames) {\n        if (this.typesAndValues.length !== compareTo.typesAndValues.length) return false;\n\n        var _iterator = _createForOfIteratorHelper(this.typesAndValues.entries()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                index = _step$value[0],\n                typeAndValue = _step$value[1];\n\n            if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false) return false;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return true;\n      }\n\n      if (compareTo instanceof ArrayBuffer) return isEqualBuffer(this.valueBeforeDecode, compareTo);\n      return false;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"typesAndValues\":\n          return [];\n\n        case \"valueBeforeDecode\":\n          return new ArrayBuffer(0);\n\n        default:\n          throw new Error(\"Invalid member name for RelativeDistinguishedNames class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"typesAndValues\":\n          return memberValue.length === 0;\n\n        case \"valueBeforeDecode\":\n          return memberValue.byteLength === 0;\n\n        default:\n          throw new Error(\"Invalid member name for RelativeDistinguishedNames class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n     *\r\n     * RelativeDistinguishedName ::=\r\n     * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName] Name for entire block\r\n       * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n       * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n       * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.repeatedSequence || \"\",\n          value: new asn1js.Set({\n            value: [new asn1js.Repeated({\n              name: names.repeatedSet || \"\",\n              value: AttributeTypeAndValue.schema(names.typeAndValue || {})\n            })]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return RelativeDistinguishedNames;\n}(); //**************************************************************************************\n\n\nexport { RelativeDistinguishedNames as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RelativeDistinguishedNames.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","AttributeTypeAndValue","RelativeDistinguishedNames","parameters","typesAndValues","defaultValues","valueBeforeDecode","fromSchema","schema","asn1","compareSchema","names","blockName","repeatedSet","verified","Error","result","Array","from","element","RDN","byteLength","Sequence","value","Set","toSchema","fromBER","toJSON","compareTo","length","entries","index","typeAndValue","isEqual","ArrayBuffer","memberName","memberValue","name","Repeated","repeatedSequence"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @desc Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t *\r\n\t * RelativeDistinguishedName ::=\r\n\t * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
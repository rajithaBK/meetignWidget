{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport OtherPrimeInfo from \"./OtherPrimeInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nvar RSAPrivateKey = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RSAPrivateKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function RSAPrivateKey() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RSAPrivateKey);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc modulus\r\n     */\n\n    this.modulus = getParametersValue(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc publicExponent\r\n     */\n\n    this.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc privateExponent\r\n     */\n\n    this.privateExponent = getParametersValue(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc prime1\r\n     */\n\n    this.prime1 = getParametersValue(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc prime2\r\n     */\n\n    this.prime2 = getParametersValue(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc exponent1\r\n     */\n\n    this.exponent1 = getParametersValue(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc exponent2\r\n     */\n\n    this.exponent2 = getParametersValue(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc coefficient\r\n     */\n\n    this.coefficient = getParametersValue(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\n    if (\"otherPrimeInfos\" in parameters)\n      /**\r\n       * @type {Array.<OtherPrimeInfo>}\r\n       * @desc otherPrimeInfos\r\n       */\n      this.otherPrimeInfos = getParametersValue(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(RSAPrivateKey, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"modulus\", \"publicExponent\", \"privateExponent\", \"prime1\", \"prime2\", \"exponent1\", \"exponent2\", \"coefficient\", \"otherPrimeInfos\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({\n        names: {\n          version: \"version\",\n          modulus: \"modulus\",\n          publicExponent: \"publicExponent\",\n          privateExponent: \"privateExponent\",\n          prime1: \"prime1\",\n          prime2: \"prime2\",\n          exponent1: \"exponent1\",\n          exponent2: \"exponent2\",\n          coefficient: \"coefficient\",\n          otherPrimeInfo: {\n            names: {\n              blockName: \"otherPrimeInfos\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RSAPrivateKey\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.modulus = asn1.result.modulus.convertFromDER(256);\n      this.publicExponent = asn1.result.publicExponent;\n      this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n      this.prime1 = asn1.result.prime1.convertFromDER(128);\n      this.prime2 = asn1.result.prime2.convertFromDER(128);\n      this.exponent1 = asn1.result.exponent1.convertFromDER(128);\n      this.exponent2 = asn1.result.exponent2.convertFromDER(128);\n      this.coefficient = asn1.result.coefficient.convertFromDER(128);\n      if (\"otherPrimeInfos\" in asn1.result) this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, function (element) {\n        return new OtherPrimeInfo({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(this.modulus.convertToDER());\n      outputArray.push(this.publicExponent);\n      outputArray.push(this.privateExponent.convertToDER());\n      outputArray.push(this.prime1.convertToDER());\n      outputArray.push(this.prime2.convertToDER());\n      outputArray.push(this.exponent1.convertToDER());\n      outputArray.push(this.exponent2.convertToDER());\n      outputArray.push(this.coefficient.convertToDER());\n\n      if (\"otherPrimeInfos\" in this) {\n        outputArray.push(new asn1js.Sequence({\n          value: Array.from(this.otherPrimeInfos, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var jwk = {\n        n: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\n        e: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true),\n        d: toBase64(arrayBufferToString(this.privateExponent.valueBlock.valueHex), true, true, true),\n        p: toBase64(arrayBufferToString(this.prime1.valueBlock.valueHex), true, true, true),\n        q: toBase64(arrayBufferToString(this.prime2.valueBlock.valueHex), true, true, true),\n        dp: toBase64(arrayBufferToString(this.exponent1.valueBlock.valueHex), true, true, true),\n        dq: toBase64(arrayBufferToString(this.exponent2.valueBlock.valueHex), true, true, true),\n        qi: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true, true)\n      };\n      if (\"otherPrimeInfos\" in this) jwk.oth = Array.from(this.otherPrimeInfos, function (element) {\n        return element.toJSON();\n      });\n      return jwk;\n    } //**********************************************************************************\n\n    /**\r\n     * Convert JSON value into current object\r\n     * @param {Object} json\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (\"n\" in json) this.modulus = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.n, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"n\\\"\");\n      if (\"e\" in json) this.publicExponent = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.e, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"e\\\"\");\n      if (\"d\" in json) this.privateExponent = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.d, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n      if (\"p\" in json) this.prime1 = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.p, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"p\\\"\");\n      if (\"q\" in json) this.prime2 = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.q, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"q\\\"\");\n      if (\"dp\" in json) this.exponent1 = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.dp, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"dp\\\"\");\n      if (\"dq\" in json) this.exponent2 = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.dq, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"dq\\\"\");\n      if (\"qi\" in json) this.coefficient = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.qi, true, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"qi\\\"\");\n      if (\"oth\" in json) this.otherPrimeInfos = Array.from(json.oth, function (element) {\n        return new OtherPrimeInfo({\n          json: element\n        });\n      });\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"modulus\":\n          return new asn1js.Integer();\n\n        case \"publicExponent\":\n          return new asn1js.Integer();\n\n        case \"privateExponent\":\n          return new asn1js.Integer();\n\n        case \"prime1\":\n          return new asn1js.Integer();\n\n        case \"prime2\":\n          return new asn1js.Integer();\n\n        case \"exponent1\":\n          return new asn1js.Integer();\n\n        case \"exponent2\":\n          return new asn1js.Integer();\n\n        case \"coefficient\":\n          return new asn1js.Integer();\n\n        case \"otherPrimeInfos\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for RSAPrivateKey class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * RSAPrivateKey ::= Sequence {\r\n     *    version           Version,\r\n     *    modulus           Integer,  -- n\r\n     *    publicExponent    Integer,  -- e\r\n     *    privateExponent   Integer,  -- d\r\n     *    prime1            Integer,  -- p\r\n     *    prime2            Integer,  -- q\r\n     *    exponent1         Integer,  -- d mod (p-1)\r\n     *    exponent2         Integer,  -- d mod (q-1)\r\n     *    coefficient       Integer,  -- (inverse of q) mod p\r\n     *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n     * }\r\n     *\r\n     * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [modulus]\r\n       * @property {string} [publicExponent]\r\n       * @property {string} [privateExponent]\r\n       * @property {string} [prime1]\r\n       * @property {string} [prime2]\r\n       * @property {string} [exponent1]\r\n       * @property {string} [exponent2]\r\n       * @property {string} [coefficient]\r\n       * @property {string} [otherPrimeInfosName]\r\n       * @property {Object} [otherPrimeInfo]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), new asn1js.Integer({\n          name: names.modulus || \"\"\n        }), new asn1js.Integer({\n          name: names.publicExponent || \"\"\n        }), new asn1js.Integer({\n          name: names.privateExponent || \"\"\n        }), new asn1js.Integer({\n          name: names.prime1 || \"\"\n        }), new asn1js.Integer({\n          name: names.prime2 || \"\"\n        }), new asn1js.Integer({\n          name: names.exponent1 || \"\"\n        }), new asn1js.Integer({\n          name: names.exponent2 || \"\"\n        }), new asn1js.Integer({\n          name: names.coefficient || \"\"\n        }), new asn1js.Sequence({\n          optional: true,\n          value: [new asn1js.Repeated({\n            name: names.otherPrimeInfosName || \"\",\n            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return RSAPrivateKey;\n}(); //**************************************************************************************\n\n\nexport { RSAPrivateKey as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RSAPrivateKey.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","clearProps","OtherPrimeInfo","RSAPrivateKey","parameters","version","defaultValues","modulus","publicExponent","privateExponent","prime1","prime2","exponent1","exponent2","coefficient","otherPrimeInfos","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","otherPrimeInfo","blockName","verified","Error","result","valueBlock","valueDec","convertFromDER","Array","from","element","outputArray","push","Integer","value","convertToDER","Sequence","toSchema","jwk","n","valueHex","e","d","p","q","dp","dq","qi","oth","toJSON","memberName","name","optional","Repeated","otherPrimeInfosName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport OtherPrimeInfo from \"./OtherPrimeInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc modulus\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc publicExponent\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc privateExponent\r\n\t\t */\r\n\t\tthis.privateExponent = getParametersValue(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime1\r\n\t\t */\r\n\t\tthis.prime1 = getParametersValue(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime2\r\n\t\t */\r\n\t\tthis.prime2 = getParametersValue(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent1\r\n\t\t */\r\n\t\tthis.exponent1 = getParametersValue(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent2\r\n\t\t */\r\n\t\tthis.exponent2 = getParametersValue(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\r\n\r\n\t\tif(\"otherPrimeInfos\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<OtherPrimeInfo>}\r\n\t\t\t * @desc otherPrimeInfos\r\n\t\t\t */\r\n\t\t\tthis.otherPrimeInfos = getParametersValue(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"privateExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"otherPrimeInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPrivateKey ::= Sequence {\r\n\t *    version           Version,\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer,  -- e\r\n\t *    privateExponent   Integer,  -- d\r\n\t *    prime1            Integer,  -- p\r\n\t *    prime2            Integer,  -- q\r\n\t *    exponent1         Integer,  -- d mod (p-1)\r\n\t *    exponent2         Integer,  -- d mod (q-1)\r\n\t *    coefficient       Integer,  -- (inverse of q) mod p\r\n\t *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n\t * }\r\n\t *\r\n\t * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [modulus]\r\n\t\t * @property {string} [publicExponent]\r\n\t\t * @property {string} [privateExponent]\r\n\t\t * @property {string} [prime1]\r\n\t\t * @property {string} [prime2]\r\n\t\t * @property {string} [exponent1]\r\n\t\t * @property {string} [exponent2]\r\n\t\t * @property {string} [coefficient]\r\n\t\t * @property {string} [otherPrimeInfosName]\r\n\t\t * @property {Object} [otherPrimeInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.privateExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.otherPrimeInfosName || \"\"),\r\n\t\t\t\t\t\t\tvalue: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\",\r\n\t\t\t\"privateExponent\",\r\n\t\t\t\"prime1\",\r\n\t\t\t\"prime2\",\r\n\t\t\t\"exponent1\",\r\n\t\t\t\"exponent2\",\r\n\t\t\t\"coefficient\",\r\n\t\t\t\"otherPrimeInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\",\r\n\t\t\t\t\tprivateExponent: \"privateExponent\",\r\n\t\t\t\t\tprime1: \"prime1\",\r\n\t\t\t\t\tprime2: \"prime2\",\r\n\t\t\t\t\texponent1: \"exponent1\",\r\n\t\t\t\t\texponent2: \"exponent2\",\r\n\t\t\t\t\tcoefficient: \"coefficient\",\r\n\t\t\t\t\totherPrimeInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"otherPrimeInfos\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\tthis.privateExponent = asn1.result.privateExponent.convertFromDER(256);\r\n\t\tthis.prime1 = asn1.result.prime1.convertFromDER(128);\r\n\t\tthis.prime2 = asn1.result.prime2.convertFromDER(128);\r\n\t\tthis.exponent1 = asn1.result.exponent1.convertFromDER(128);\r\n\t\tthis.exponent2 = asn1.result.exponent2.convertFromDER(128);\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER(128);\r\n\r\n\t\tif(\"otherPrimeInfos\" in asn1.result)\r\n\t\t\tthis.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.modulus.convertToDER());\r\n\t\toutputArray.push(this.publicExponent);\r\n\t\toutputArray.push(this.privateExponent.convertToDER());\r\n\t\toutputArray.push(this.prime1.convertToDER());\r\n\t\toutputArray.push(this.prime2.convertToDER());\r\n\t\toutputArray.push(this.exponent1.convertToDER());\r\n\t\toutputArray.push(this.exponent2.convertToDER());\r\n\t\toutputArray.push(this.coefficient.convertToDER());\r\n\t\t\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.otherPrimeInfos, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst jwk = {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.privateExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\tp: toBase64(arrayBufferToString(this.prime1.valueBlock.valueHex), true, true, true),\r\n\t\t\tq: toBase64(arrayBufferToString(this.prime2.valueBlock.valueHex), true, true, true),\r\n\t\t\tdp: toBase64(arrayBufferToString(this.exponent1.valueBlock.valueHex), true, true, true),\r\n\t\t\tdq: toBase64(arrayBufferToString(this.exponent2.valueBlock.valueHex), true, true, true),\r\n\t\t\tqi: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t\tjwk.oth = Array.from(this.otherPrimeInfos, element => element.toJSON());\r\n\r\n\t\treturn jwk;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.n, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.privateExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"p\" in json)\r\n\t\t\tthis.prime1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.p, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"p\\\"\");\r\n\r\n\t\tif(\"q\" in json)\r\n\t\t\tthis.prime2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.q, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"q\\\"\");\r\n\r\n\t\tif(\"dp\" in json)\r\n\t\t\tthis.exponent1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dp, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dp\\\"\");\r\n\r\n\t\tif(\"dq\" in json)\r\n\t\t\tthis.exponent2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dq, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dq\\\"\");\r\n\r\n\t\tif(\"qi\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.qi, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"qi\\\"\");\r\n\r\n\t\tif(\"oth\" in json)\r\n\t\t\tthis.otherPrimeInfos = Array.from(json.oth, element => new OtherPrimeInfo({ json: element }));\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
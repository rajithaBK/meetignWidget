{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/define-property\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n/**\n * @class\n */\n\n\nvar Interceptor = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {Object} attrs\n   * @returns {UrlInterceptor}\n   */\n  function Interceptor(attrs) {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, Interceptor);\n\n    if (attrs) {\n      (0, _keys.default)(attrs).forEach(function (key) {\n        var value = attrs[key];\n        (0, _defineProperty.default)(_this, key, {\n          enumerable: true,\n          value: value\n        });\n      });\n    }\n  }\n  /**\n   * Logs the options of a request. This should be utilized\n   * during the intercepting process, but can be used at any\n   * time otherwise.\n   * @param {object} options\n   * @returns {void}\n   */\n\n\n  (0, _createClass2.default)(Interceptor, [{\n    key: \"logOptions\",\n    value: function logOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n\n      if (!process.env.ENABLE_VERBOSE_NETWORK_LOGGING || !logger) {\n        return;\n      } // prepend a header for the interceptor\n\n\n      logger.info('/***** Interceptor ****************************************************\\\\');\n      logger.info(\"\".concat(this.constructor.name, \" - \").concat((0, _stringify.default)(options, null, 2)));\n    }\n    /**\n     * @abstract\n     * @returns {Interceptor}\n     */\n\n  }, {\n    key: \"onRequest\",\n    value:\n    /**\n     * Transform request options before sending them\n     * @param {Object} options\n     * @returns {Promise<Object>}\n     */\n    function onRequest(options) {\n      return _promise.default.resolve(options);\n    }\n    /**\n     * Handle request failures\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {RejectedPromise<Error>}\n     */\n\n  }, {\n    key: \"onRequestError\",\n    value: function onRequestError(options, reason) {\n      return _promise.default.reject(reason);\n    }\n    /**\n     * Transform response before returning it\n     * @param {Object} options\n     * @param {HttpResponse} response\n     * @returns {Promise<HttpResponse>}\n     */\n\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(options, response) {\n      return _promise.default.resolve(response);\n    }\n    /**\n     * Handle response errors\n     * @param {Object} options\n     * @param {WebexHttpError} reason\n     * @returns {Promise<WebexHttpError>}\n     */\n\n  }, {\n    key: \"onResponseError\",\n    value: function onResponseError(options, reason) {\n      return _promise.default.reject(reason);\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      throw new Error('`Interceptor.create()` must be defined');\n    }\n  }]);\n  return Interceptor;\n}();\n\nexports.default = Interceptor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;;;IACqBA,W;AACnB;AACF;AACA;AACA;AACA;AACE,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,QAAIA,KAAJ,EAAW;AACT,yBAAYA,KAAZ,EAAmBC,OAAnB,CAA2B,UAACC,GAAD,EAAS;AAClC,YAAMC,KAAK,GAAGH,KAAK,CAACE,GAAD,CAAnB;AAEA,qCAAuBE,KAAvB,EAA6BF,GAA7B,EAAkC;AAChCG,oBAAU,EAAE,IADoB;AAEhCF,eAAK,EAALA;AAFgC,SAAlC;AAHF;AAQD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,sBAAyB;AAAA,UAAdG,OAAc,uEAAJ,EAAI;AACvB,UAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI,CAACC,OAAO,CAACC,GAARD,CAAYE,8BAAb,IAA+C,CAACJ,MAApD,EAA4D;AAC1D;AAJqB,QAOvB;;;AACAA,YAAM,CAACK,IAAPL,CAAY,2EAAZA;AAEAA,YAAM,CAACK,IAAPL,WACK,KAAKM,WAAL,CAAiBC,IADtB,gBACgC,wBAAeR,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CADhC;AAGD;AAED;AACF;AACA;AACA;;;;;AAKE;AACF;AACA;AACA;AACA;AACE,uBAAUA,OAAV,EAAmB;AACjB,aAAOS,iBAAQC,OAAR,CAAgBV,OAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,OAAf,EAAwBW,MAAxB,EAAgC;AAC9B,aAAOF,iBAAQG,MAAR,CAAeD,MAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAWX,OAAX,EAAoBa,QAApB,EAA8B;AAC5B,aAAOJ,iBAAQC,OAAR,CAAgBG,QAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBb,OAAhB,EAAyBW,MAAzB,EAAiC;AAC/B,aAAOF,iBAAQG,MAAR,CAAeD,MAAf,CAAP;AACD;;;WAzCD,kBAAgB;AACd,YAAM,IAAIG,KAAJ,CAAU,wCAAV,CAAN;AACD","names":["Interceptor","attrs","forEach","key","value","_this","enumerable","options","logger","console","process","env","ENABLE_VERBOSE_NETWORK_LOGGING","info","constructor","name","_promise","resolve","reason","reject","response","Error"],"sources":["interceptor.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\n\n/**\n * @class\n */\nexport default class Interceptor {\n  /**\n   * @constructor\n   * @param {Object} attrs\n   * @returns {UrlInterceptor}\n   */\n  constructor(attrs) {\n    if (attrs) {\n      Object.keys(attrs).forEach((key) => {\n        const value = attrs[key];\n\n        Reflect.defineProperty(this, key, {\n          enumerable: true,\n          value\n        });\n      });\n    }\n  }\n\n  /**\n   * Logs the options of a request. This should be utilized\n   * during the intercepting process, but can be used at any\n   * time otherwise.\n   * @param {object} options\n   * @returns {void}\n   */\n  logOptions(options = {}) {\n    const logger = get(this, 'webex.logger', console);\n\n    if (!process.env.ENABLE_VERBOSE_NETWORK_LOGGING || !logger) {\n      return;\n    }\n\n    // prepend a header for the interceptor\n    logger.info('/***** Interceptor ****************************************************\\\\');\n\n    logger.info(\n      `${this.constructor.name} - ${JSON.stringify(options, null, 2)}`\n    );\n  }\n\n  /**\n   * @abstract\n   * @returns {Interceptor}\n   */\n  static create() {\n    throw new Error('`Interceptor.create()` must be defined');\n  }\n\n  /**\n   * Transform request options before sending them\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */\n  onRequest(options) {\n    return Promise.resolve(options);\n  }\n\n  /**\n   * Handle request failures\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {RejectedPromise<Error>}\n   */\n  onRequestError(options, reason) {\n    return Promise.reject(reason);\n  }\n\n  /**\n   * Transform response before returning it\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Promise<HttpResponse>}\n   */\n  onResponse(options, response) {\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Handle response errors\n   * @param {Object} options\n   * @param {WebexHttpError} reason\n   * @returns {Promise<WebexHttpError>}\n   */\n  onResponseError(options, reason) {\n    return Promise.reject(reason);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
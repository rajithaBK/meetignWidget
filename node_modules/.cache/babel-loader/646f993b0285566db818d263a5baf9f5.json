{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport ResponseBytes from \"./ResponseBytes.js\";\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar OCSPResponse = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OCSPResponse class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function OCSPResponse() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OCSPResponse);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Enumerated}\r\n     * @desc responseStatus\r\n     */\n    this.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\n    if (\"responseBytes\" in parameters)\n      /**\r\n       * @type {ResponseBytes}\r\n       * @desc responseBytes\r\n       */\n      this.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(OCSPResponse, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"responseStatus\", \"responseBytes\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, OCSPResponse.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OCSPResponse\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.responseStatus = asn1.result.responseStatus;\n      if (\"responseBytes\" in asn1.result) this.responseBytes = new ResponseBytes({\n        schema: asn1.result.responseBytes\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.responseStatus);\n\n      if (\"responseBytes\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [this.responseBytes.toSchema()]\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        responseStatus: this.responseStatus.toJSON()\n      };\n      if (\"responseBytes\" in this) _object.responseBytes = this.responseBytes.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Get OCSP response status for specific certificate\r\n     * @param {Certificate} certificate\r\n     * @param {Certificate} issuerCertificate\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: \"getCertificateStatus\",\n    value: function getCertificateStatus(certificate, issuerCertificate) {\n      //region Initial variables\n      var basicResponse;\n      var result = {\n        isForCertificate: false,\n        status: 2 // 0 = good, 1 = revoked, 2 = unknown\n\n      }; //endregion\n      //region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\n\n      if (\"responseBytes\" in this === false) return result;\n      if (this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\n        return result;\n\n      try {\n        var asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\n        basicResponse = new BasicOCSPResponse({\n          schema: asn1Basic.result\n        });\n      } catch (ex) {\n        return result;\n      } //endregion\n\n\n      return basicResponse.getCertificateStatus(certificate, issuerCertificate);\n    } //**********************************************************************************\n\n    /**\r\n     * Make a signature for current OCSP Response\r\n     * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n     * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey, hashAlgorithm) {\n      //region Check that ResponseData has type BasicOCSPResponse and sign it\n      if (this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\") {\n        var asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\n        var basicResponse = new BasicOCSPResponse({\n          schema: asn1.result\n        });\n        return basicResponse.sign(privateKey, hashAlgorithm);\n      }\n\n      return Promise.reject(\"Unknown ResponseBytes type: \".concat(this.responseBytes.responseType)); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Verify current OCSP Response\r\n     * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var issuerCertificate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      //region Check that ResponseBytes exists in the object\n      if (\"responseBytes\" in this === false) return Promise.reject(\"Empty ResponseBytes field\"); //endregion\n      //region Check that ResponceData has type BasicOCSPResponse and verify it\n\n      if (this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\") {\n        var asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\n        var basicResponse = new BasicOCSPResponse({\n          schema: asn1.result\n        });\n\n        if (issuerCertificate !== null) {\n          if (\"certs\" in basicResponse === false) basicResponse.certs = [];\n          basicResponse.certs.push(issuerCertificate);\n        }\n\n        return basicResponse.verify();\n      }\n\n      return Promise.reject(\"Unknown ResponseBytes type: \".concat(this.responseBytes.responseType)); //endregion\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"responseStatus\":\n          return new asn1js.Enumerated();\n\n        case \"responseBytes\":\n          return new ResponseBytes();\n\n        default:\n          throw new Error(\"Invalid member name for OCSPResponse class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"responseStatus\":\n          return memberValue.isEqual(OCSPResponse.defaultValues(memberName));\n\n        case \"responseBytes\":\n          return ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType) && ResponseBytes.compareWithDefault(\"response\", memberValue.response);\n\n        default:\n          throw new Error(\"Invalid member name for OCSPResponse class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * OCSPResponse ::= SEQUENCE {\r\n     *    responseStatus         OCSPResponseStatus,\r\n     *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n     *\r\n     * OCSPResponseStatus ::= ENUMERATED {\r\n     *    successful            (0),  -- Response has valid confirmations\r\n     *    malformedRequest      (1),  -- Illegal confirmation request\r\n     *    internalError         (2),  -- Internal error in issuer\r\n     *    tryLater              (3),  -- Try again later\r\n     *    -- (4) is not used\r\n     *    sigRequired           (5),  -- Must sign the request\r\n     *    unauthorized          (6)   -- Request unauthorized\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [responseStatus]\r\n       * @property {string} [responseBytes]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"OCSPResponse\",\n        value: [new asn1js.Enumerated({\n          name: names.responseStatus || \"responseStatus\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [ResponseBytes.schema(names.responseBytes || {\n            names: {\n              blockName: \"responseBytes\"\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return OCSPResponse;\n}(); //**************************************************************************************\n\n\nexport { OCSPResponse as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OCSPResponse.js"],"names":["asn1js","getParametersValue","clearProps","ResponseBytes","BasicOCSPResponse","OCSPResponse","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","asn1","compareSchema","verified","Error","result","outputArray","push","Constructed","idBlock","tagClass","tagNumber","value","toSchema","Sequence","_object","toJSON","certificate","issuerCertificate","basicResponse","isForCertificate","status","responseType","asn1Basic","fromBER","response","valueBlock","valueHex","ex","getCertificateStatus","privateKey","hashAlgorithm","sign","Promise","reject","certs","verify","memberName","Enumerated","memberValue","isEqual","compareWithDefault","names","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @desc responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @desc responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPResponse ::= SEQUENCE {\r\n\t *    responseStatus         OCSPResponseStatus,\r\n\t *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t *\r\n\t * OCSPResponseStatus ::= ENUMERATED {\r\n\t *    successful            (0),  -- Response has valid confirmations\r\n\t *    malformedRequest      (1),  -- Illegal confirmation request\r\n\t *    internalError         (2),  -- Internal error in issuer\r\n\t *    tryLater              (3),  -- Try again later\r\n\t *    -- (4) is not used\r\n\t *    sigRequired           (5),  -- Must sign the request\r\n\t *    unauthorized          (6)   -- Request unauthorized\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseStatus\",\r\n\t\t\t\"responseBytes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
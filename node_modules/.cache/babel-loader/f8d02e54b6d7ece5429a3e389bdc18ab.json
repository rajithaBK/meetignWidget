{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _apply = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/apply\"));\n\nvar _isNan = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/number/is-nan\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/typeof\"));\n\nvar _isObject2 = _interopRequireDefault(require(\"lodash/isObject\"));\n\nvar _defaults2 = _interopRequireDefault(require(\"lodash/defaults\"));\n\nvar _ampersandState = _interopRequireDefault(require(\"ampersand-state\"));\n\nvar _constants = require(\"../constants\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * The model returned from the {@link FeatureModel#parse} method.\n *\n * @typedef {Object} ParsedFeatureModel\n * @property {boolean|number|string} ParsedFeatureModel.value - The parsed val.\n * @property {string} ParsedFeatureModel.type - The type of the parsed val.\n */\n\n/**\n * Feature model.\n *\n * @description\n * This model contains details on a single feature and is received from the\n * **WDM** service upon registration.\n */\n\n\nvar FeatureModel = _ampersandState.default.extend({\n  idAttribute: 'key',\n  // needed by Ampersand to determine unique item\n  // Ampersand property members.\n  props: {\n    /**\n     * Contains the unique identifier for this feature to be addressed by.\n     *\n     * @type {string}\n     */\n    key: 'string',\n\n    /**\n     * This property contains the date in which this feature was last modified.\n     *\n     * @type {date}\n     */\n    lastModified: 'date',\n\n    /**\n     * This property defines whether or not the feature is mutable.\n     *\n     * @type {boolean}\n     */\n    mutable: 'boolean',\n\n    /**\n     * This property contains the data type the string value should be\n     * interpreted as.\n     *\n     * @type {FEATURE_TYPES}\n     */\n    type: 'string',\n\n    /**\n     * This property contains the string value of this feature.\n     *\n     * @type {string}\n     */\n    val: 'string',\n\n    /**\n     * This property contains the interpreted value of this feature.\n     *\n     * @type {any}\n     */\n    value: 'any'\n  },\n\n  /**\n   * Class object constructor. This method safely initializes the class object\n   * prior to it fully loading to allow data to be accessed and modified\n   * immediately after construction instead of initialization.\n   *\n   * @override\n   * @param {Object} attrs - An object to map against the feature's properties.\n   * @param {Object} [options={}] - Ampersand options for `parse` and `parent`.\n   */\n  constructor: function constructor(attrs) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _defaults2.default)(options, {\n      parse: true\n    });\n    return (0, _apply.default)(_ampersandState.default.prototype.constructor, this, [attrs, options]);\n  },\n  // Ampsersand method members.\n\n  /**\n   * Parse {@link FeatureModel} properties recieved as strings from **WDM**\n   * and cast them as their appropriate types.\n   *\n   * @private\n   * @memberof FeatureModel\n   * @param {Object} model - The model to parse.\n   * @property {string} model.val - The value to be parsed.\n   * @returns {ParsedFeatureModel} - The parsed model.\n   */\n  parse: function parse(model) {\n    // Validate that a model was provided and that it is an object.\n    if (!model || (0, _typeof2.default)(model) !== 'object') {\n      // Return an empty object to satisfy the requirements of `Ampersand`.\n      return {};\n    }\n\n    var parsedModel = _objectSpread({}, model);\n\n    var val = parsedModel.val; // Validate that the value is a number.\n\n    if (!(0, _isNan.default)(Number(val))) {\n      parsedModel.type = _constants.FEATURE_TYPES.NUMBER;\n      parsedModel.value = Number(val);\n    } // Validate if the value should be a true boolean.\n    else if (typeof val === 'string' && val.toLowerCase() === 'true') {\n      parsedModel.type = _constants.FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = true;\n    } // Validate if the value should be a false boolean.\n    else if (typeof val === 'string' && val.toLowerCase() === 'false') {\n      parsedModel.type = _constants.FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = false;\n    } // In all other cases, the value is string, even if it is undefined.\n    else {\n      parsedModel.type = _constants.FEATURE_TYPES.STRING;\n      parsedModel.value = val;\n    }\n\n    return parsedModel;\n  },\n\n  /**\n   * Serialize the feature using the parent ampersand method with its date as an\n   * ISO string. This converts the feature into a request-transportable object.\n   *\n   * @override\n   * @param  {Record<string,boolean>} [args] - List of properties to serialize.\n   * @returns {Object} - The request-ready transport object.\n   */\n  serialize: function serialize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    } // Call the overloaded class member.\n\n\n    var attrs = (0, _apply.default)(_ampersandState.default.prototype.serialize, this, args); // Validate that the overloaded class member returned an object with the\n    // `lastModified` key-value pair and instance it as an ISO string.\n\n    if (attrs.lastModified) {\n      attrs.lastModified = new Date(attrs.lastModified).toISOString();\n    }\n\n    return attrs;\n  },\n\n  /**\n   * Set a property of this object to a specific value. This method utilizes\n   * code that exists within the `ampersand-state` dependency to handle\n   * scenarios in which `key = {\"key\": \"value\"}` or\n   * `key = \"key\", value = \"value\"`. Since the snippet is pulled directly from\n   * `ampersand-state`, there is no need to test both scenarios.\n   *\n   * @override\n   * @param {object | string} key - The key value, or object to be set.\n   * @param {any} value - The key value or object to set the keyed pair to.\n   * @param {any} options - The object to set the keyed pair to.\n   * @returns {any} - The changed property.\n   */\n  set: function set(key, value, options) {\n    // Declare formatted output variables for properly setting the targetted\n    // property for this method.\n    var attrs;\n    var optns; // Validate if the key is an instance of any object or not.\n\n    if ((0, _isObject2.default)(key) || key === null) {\n      attrs = key;\n      optns = value;\n    } else {\n      attrs = {};\n      attrs[key] = value;\n      optns = options;\n    }\n\n    attrs = this.parse(attrs, optns);\n    return (0, _apply.default)(_ampersandState.default.prototype.set, this, [attrs, optns]);\n  }\n});\n\nvar _default = FeatureModel;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["FeatureModel","AmpState","extend","idAttribute","props","key","lastModified","mutable","type","val","value","constructor","attrs","options","parse","prototype","model","parsedModel","Number","FEATURE_TYPES","NUMBER","toLowerCase","BOOLEAN","STRING","serialize","args","arguments","Date","toISOString","set","optns"],"sources":["feature-model.js"],"sourcesContent":["// External dependencies.\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject} from 'lodash';\n\nimport {FEATURE_TYPES} from '../constants';\n\n/**\n * The model returned from the {@link FeatureModel#parse} method.\n *\n * @typedef {Object} ParsedFeatureModel\n * @property {boolean|number|string} ParsedFeatureModel.value - The parsed val.\n * @property {string} ParsedFeatureModel.type - The type of the parsed val.\n */\n\n/**\n * Feature model.\n *\n * @description\n * This model contains details on a single feature and is received from the\n * **WDM** service upon registration.\n */\nconst FeatureModel = AmpState.extend({\n\n  idAttribute: 'key', // needed by Ampersand to determine unique item\n\n  // Ampersand property members.\n\n  props: {\n    /**\n     * Contains the unique identifier for this feature to be addressed by.\n     *\n     * @type {string}\n     */\n    key: 'string',\n\n    /**\n     * This property contains the date in which this feature was last modified.\n     *\n     * @type {date}\n     */\n    lastModified: 'date',\n\n    /**\n     * This property defines whether or not the feature is mutable.\n     *\n     * @type {boolean}\n     */\n    mutable: 'boolean',\n\n    /**\n     * This property contains the data type the string value should be\n     * interpreted as.\n     *\n     * @type {FEATURE_TYPES}\n     */\n    type: 'string',\n\n    /**\n     * This property contains the string value of this feature.\n     *\n     * @type {string}\n     */\n    val: 'string',\n\n    /**\n     * This property contains the interpreted value of this feature.\n     *\n     * @type {any}\n     */\n    value: 'any'\n  },\n\n  /**\n   * Class object constructor. This method safely initializes the class object\n   * prior to it fully loading to allow data to be accessed and modified\n   * immediately after construction instead of initialization.\n   *\n   * @override\n   * @param {Object} attrs - An object to map against the feature's properties.\n   * @param {Object} [options={}] - Ampersand options for `parse` and `parent`.\n   */\n  constructor(attrs, options = {}) {\n    defaults(options, {parse: true});\n\n    return Reflect.apply(\n      AmpState.prototype.constructor,\n      this,\n      [attrs, options]\n    );\n  },\n\n  // Ampsersand method members.\n\n  /**\n   * Parse {@link FeatureModel} properties recieved as strings from **WDM**\n   * and cast them as their appropriate types.\n   *\n   * @private\n   * @memberof FeatureModel\n   * @param {Object} model - The model to parse.\n   * @property {string} model.val - The value to be parsed.\n   * @returns {ParsedFeatureModel} - The parsed model.\n   */\n  parse(model) {\n    // Validate that a model was provided and that it is an object.\n    if (!model || typeof model !== 'object') {\n      // Return an empty object to satisfy the requirements of `Ampersand`.\n      return {};\n    }\n\n    const parsedModel = {...model};\n    const {val} = parsedModel;\n\n    // Validate that the value is a number.\n    if (!Number.isNaN(Number(val))) {\n      parsedModel.type = FEATURE_TYPES.NUMBER;\n      parsedModel.value = Number(val);\n    }\n    // Validate if the value should be a true boolean.\n    else if (typeof val === 'string' && val.toLowerCase() === 'true') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = true;\n    }\n    // Validate if the value should be a false boolean.\n    else if (typeof val === 'string' && val.toLowerCase() === 'false') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = false;\n    }\n    // In all other cases, the value is string, even if it is undefined.\n    else {\n      parsedModel.type = FEATURE_TYPES.STRING;\n      parsedModel.value = val;\n    }\n\n    return parsedModel;\n  },\n\n  /**\n   * Serialize the feature using the parent ampersand method with its date as an\n   * ISO string. This converts the feature into a request-transportable object.\n   *\n   * @override\n   * @param  {Record<string,boolean>} [args] - List of properties to serialize.\n   * @returns {Object} - The request-ready transport object.\n   */\n  serialize(...args) {\n    // Call the overloaded class member.\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n\n    // Validate that the overloaded class member returned an object with the\n    // `lastModified` key-value pair and instance it as an ISO string.\n    if (attrs.lastModified) {\n      attrs.lastModified = (new Date(attrs.lastModified).toISOString());\n    }\n\n    return attrs;\n  },\n\n  /**\n   * Set a property of this object to a specific value. This method utilizes\n   * code that exists within the `ampersand-state` dependency to handle\n   * scenarios in which `key = {\"key\": \"value\"}` or\n   * `key = \"key\", value = \"value\"`. Since the snippet is pulled directly from\n   * `ampersand-state`, there is no need to test both scenarios.\n   *\n   * @override\n   * @param {object | string} key - The key value, or object to be set.\n   * @param {any} value - The key value or object to set the keyed pair to.\n   * @param {any} options - The object to set the keyed pair to.\n   * @returns {any} - The changed property.\n   */\n  set(key, value, options) {\n    // Declare formatted output variables for properly setting the targetted\n    // property for this method.\n    let attrs;\n    let optns;\n\n    // Validate if the key is an instance of any object or not.\n    if (isObject(key) || key === null) {\n      attrs = key;\n      optns = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n      optns = options;\n    }\n\n    attrs = this.parse(attrs, optns);\n\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, optns]);\n  }\n});\n\nexport default FeatureModel;\n"]},"metadata":{},"sourceType":"script"}
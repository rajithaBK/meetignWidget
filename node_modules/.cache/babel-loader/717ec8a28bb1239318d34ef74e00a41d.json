{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from RFC3739\n */\n\nexport var QCStatement = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for QCStatement class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function QCStatement() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, QCStatement);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     */\n    this.id = getParametersValue(parameters, \"id\", QCStatement.defaultValues(\"id\"));\n\n    if (\"type\" in parameters) {\n      /**\n       * @type {*} Any data described by \"id\"\n       */\n      this.type = getParametersValue(parameters, \"type\", QCStatement.defaultValues(\"type\"));\n    } //endregion\n    //region If input argument array contains \"schema\" for this object\n\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(QCStatement, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"id\", \"type\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, QCStatement.schema({\n        names: {\n          id: \"id\",\n          type: \"type\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for QCStatement\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.id = asn1.result.id.valueBlock.toString();\n      if (\"type\" in asn1.result) this.type = asn1.result.type; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var value = [new asn1js.ObjectIdentifier({\n        value: this.id\n      })];\n      if (\"type\" in this) value.push(this.type); //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: value\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        id: this.id\n      };\n      if (\"type\" in this) object.type = this.type.toJSON();\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"id\":\n          return \"\";\n\n        case \"type\":\n          return new asn1js.Null();\n\n        default:\n          throw new Error(\"Invalid member name for QCStatement class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"id\":\n          return memberValue === \"\";\n\n        case \"type\":\n          return memberValue instanceof asn1js.Null;\n\n        default:\n          throw new Error(\"Invalid member name for QCStatement class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n    \t *\t QCStatement ::= SEQUENCE {\n     *       statementId   QC-STATEMENT.&id({SupportedStatements}),\n     *       statementInfo QC-STATEMENT.&Type({SupportedStatements}{@statementId}) OPTIONAL\n     *   }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [id]\n       * @property {string} [type]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.id || \"\"\n        }), new asn1js.Any({\n          name: names.type || \"\",\n          optional: true\n        })]\n      });\n    }\n  }]);\n\n  return QCStatement;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC3739\n */\n\nvar QCStatements = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for QCStatements class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function QCStatements() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, QCStatements);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {Array<QCStatement>}\n     */\n    this.values = getParametersValue(parameters, \"values\", QCStatements.defaultValues(\"values\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(QCStatements, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"values\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, QCStatements.schema({\n        names: {\n          values: \"values\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for QCStatements\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.values = Array.from(asn1.result.values, function (element) {\n        return new QCStatement({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: Array.from(this.values, function (element) {\n          return element.toSchema();\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        extensions: Array.from(this.values, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"values\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for QCStatements class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"values\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for QCStatements class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * QCStatements ::= SEQUENCE OF QCStatement\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [values]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.values || \"\",\n          value: QCStatement.schema(names.value || {})\n        })]\n      });\n    }\n  }]);\n\n  return QCStatements;\n}(); //**************************************************************************************\n\n\nexport { QCStatements as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/QCStatements.js"],"names":["asn1js","getParametersValue","clearProps","QCStatement","parameters","id","defaultValues","type","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","value","ObjectIdentifier","push","Sequence","object","toJSON","memberName","Null","memberValue","name","blockName","Any","optional","QCStatements","values","Array","from","element","toSchema","extensions","length","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from RFC3739\n */\nexport class QCStatement\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for QCStatement class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = getParametersValue(parameters, \"id\", QCStatement.defaultValues(\"id\"));\n\n\t\tif(\"type\" in parameters)\n\t\t{\n\t\t\t/**\n\t\t\t * @type {*} Any data described by \"id\"\n\t\t\t */\n\t\t\tthis.type = getParametersValue(parameters, \"type\", QCStatement.defaultValues(\"type\"));\n\t\t}\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"id\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"type\":\n\t\t\t\treturn new asn1js.Null();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"id\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"type\":\n\t\t\t\treturn (memberValue instanceof asn1js.Null);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n \t *\t QCStatement ::= SEQUENCE {\n\t *       statementId   QC-STATEMENT.&id({SupportedStatements}),\n\t *       statementInfo QC-STATEMENT.&Type({SupportedStatements}{@statementId}) OPTIONAL\n\t *   }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [id]\n\t\t * @property {string} [type]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"\") }),\n\t\t\t\tnew asn1js.Any({\n\t\t\t\t\tname: (names.type || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"id\",\n\t\t\t\"type\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tQCStatement.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tid: \"id\",\n\t\t\t\t\ttype: \"type\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatement\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.id = asn1.result.id.valueBlock.toString();\n\n\t\tif(\"type\" in asn1.result)\n\t\t\tthis.type = asn1.result.type;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst value = [\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.id })\n\t\t];\n\n\t\tif(\"type\" in this)\n\t\t\tvalue.push(this.type);\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\tid: this.id\n\t\t};\n\n\t\tif(\"type\" in this)\n\t\t\tobject.type = this.type.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC3739\n */\nexport default class QCStatements\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for QCStatements class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array<QCStatement>}\n\t\t */\n\t\tthis.values = getParametersValue(parameters, \"values\", QCStatements.defaultValues(\"values\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"values\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"values\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * QCStatements ::= SEQUENCE OF QCStatement\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [values]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\tname: (names.values || \"\"),\n\t\t\t\t\tvalue: QCStatement.schema(names.value || {})\n\t\t\t\t}),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"values\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tQCStatements.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tvalues: \"values\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatements\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.values, element => element.toSchema())\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\textensions: Array.from(this.values, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _ampersandState = _interopRequireDefault(require(\"ampersand-state\"));\n/* eslint-disable no-underscore-dangle */\n\n/**\n * @class\n */\n\n\nvar ServiceUrl = _ampersandState.default.extend({\n  namespace: 'ServiceUrl',\n  props: {\n    defaultUrl: ['string', true, undefined],\n    hosts: ['array', false, function () {\n      return [];\n    }],\n    name: ['string', true, undefined]\n  },\n\n  /**\n   * Generate a host url based on the host\n   * uri provided.\n   * @param {string} hostUri\n   * @returns {string}\n   */\n  _generateHostUrl: function _generateHostUrl(hostUri) {\n    var url = _url.default.parse(this.defaultUrl); // setting url.hostname will not apply during Url.format(), set host via\n    // a string literal instead.\n\n\n    url.host = \"\".concat(hostUri).concat(url.port ? \":\".concat(url.port) : '');\n    return _url.default.format(url);\n  },\n\n  /**\n   * Generate a list of urls based on this\n   * `ServiceUrl`'s known hosts.\n   * @returns {string[]}\n   */\n  _getHostUrls: function _getHostUrls() {\n    var _this = this;\n\n    return this.hosts.map(function (host) {\n      return {\n        url: _this._generateHostUrl(host.host),\n        priority: host.priority\n      };\n    });\n  },\n\n  /**\n   * Get the current host url with the highest priority. If a clusterId is not\n   * provided, this will only return a URL with a filtered host that has the\n   * `homeCluster` value set to `true`.\n   *\n   * @param {string} [clusterId] - The clusterId to filter for a priority host.\n   * @returns {string} - The priority host url.\n   */\n  _getPriorityHostUrl: function _getPriorityHostUrl(clusterId) {\n    if (this.hosts.length === 0) {\n      return this.defaultUrl;\n    }\n\n    var filteredHosts = clusterId ? this.hosts.filter(function (host) {\n      return host.id === clusterId;\n    }) : this.hosts.filter(function (host) {\n      return host.homeCluster;\n    });\n    var aliveHosts = filteredHosts.filter(function (host) {\n      return !host.failed;\n    });\n    filteredHosts = aliveHosts.length === 0 ? filteredHosts.map(function (host) {\n      /* eslint-disable-next-line no-param-reassign */\n      host.failed = false;\n      return host;\n    }) : aliveHosts;\n    return this._generateHostUrl(filteredHosts.reduce(function (previous, current) {\n      return previous.priority > current.priority || !previous.homeCluster ? current : previous;\n    }, {}).host);\n  },\n\n  /**\n   * Attempt to mark a host from this `ServiceUrl` as failed and return true\n   * if the provided url has a host that could be successfully marked as failed.\n   *\n   * @param {string} url\n   * @returns {boolean}\n   */\n  failHost: function failHost(url) {\n    if (url === this.defaultUrl) {\n      return true;\n    }\n\n    var _Url$parse = _url.default.parse(url),\n        hostname = _Url$parse.hostname;\n\n    var foundHost = this.hosts.find(function (hostObj) {\n      return hostObj.host === hostname;\n    });\n\n    if (foundHost) {\n      foundHost.failed = true;\n    }\n\n    return foundHost !== undefined;\n  },\n\n  /**\n   * Get the current `defaultUrl` or generate a url using the host with the\n   * highest priority via host rendering.\n   *\n   * @param {boolean} [priorityHost] - Retrieve the priority host.\n   * @param {string} [clusterId] - Cluster to match a host against.\n   * @returns {string} - The full service url.\n   */\n  get: function get(priorityHost, clusterId) {\n    if (!priorityHost) {\n      return this.defaultUrl;\n    }\n\n    return this._getPriorityHostUrl(clusterId);\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\n\nvar _default = ServiceUrl;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AAEA;AAEA;;AACA;AACA;AACA;;;AACA,IAAMA,UAAU,GAAGC,wBAASC,MAATD,CAAgB;AACjCE,WAAS,EAAE,YADsB;AAGjCC,OAAK,EAAE;AACLC,cAAU,EAAE,CAAC,QAAD,EAAW,IAAX,EAAiBC,SAAjB,CADP;AAELC,SAAK,EAAE,CAAC,OAAD,EAAU,KAAV,EAAiB;AAAA,aAAO,EAAP;AAAjB,MAFF;AAGLC,QAAI,EAAE,CAAC,QAAD,EAAW,IAAX,EAAiBF,SAAjB;AAHD,GAH0B;;AASjC;AACF;AACA;AACA;AACA;AACA;AACEG,kBAfiC,4BAehBC,OAfgB,EAeP;AACxB,QAAMC,GAAG,GAAGC,aAAIC,KAAJD,CAAU,KAAKP,UAAfO,CAAZ,CADwB,CAGxB;AACA;;;AACAD,OAAG,CAACG,IAAJH,aAAcD,OAAd,SAAwBC,GAAG,CAACI,IAAJJ,cAAeA,GAAG,CAACI,IAAnB,IAA4B,EAApD;AAEA,WAAOH,aAAII,MAAJJ,CAAWD,GAAXC,CAAP;AAtB+B;;AAyBjC;AACF;AACA;AACA;AACA;AACEK,cA9BiC,0BA8BlB;AAAA;;AACb,WAAO,KAAKV,KAAL,CAAWW,GAAX,CAAe,UAACJ,IAAD;AAAA,aAAW;AAC/BH,WAAG,EAAEQ,KAAI,CAACV,gBAAL,CAAsBK,IAAI,CAACA,IAA3B,CAD0B;AAE/BM,gBAAQ,EAAEN,IAAI,CAACM;AAFgB,OAAX;AAAf,MAAP;AA/B+B;;AAqCjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,qBA7CiC,+BA6CbC,SA7Ca,EA6CF;AAC7B,QAAI,KAAKf,KAAL,CAAWgB,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAO,KAAKlB,UAAZ;AACD;;AAED,QAAImB,aAAa,GAAGF,SAAS,GAC3B,KAAKf,KAAL,CAAWkB,MAAX,CAAkB,UAACX,IAAD;AAAA,aAAUA,IAAI,CAACY,EAALZ,KAAYQ,SAAtB;AAAlB,MAD2B,GAE3B,KAAKf,KAAL,CAAWkB,MAAX,CAAkB,UAACX,IAAD;AAAA,aAAUA,IAAI,CAACa,WAAf;AAAlB,MAFF;AAIA,QAAMC,UAAU,GAAGJ,aAAa,CAACC,MAAdD,CACjB,UAACV,IAAD;AAAA,aAAU,CAACA,IAAI,CAACe,MAAhB;AADiB,MAAnB;AAIAL,iBAAa,GAAII,UAAU,CAACL,MAAXK,KAAsB,CAAtBA,GACfJ,aAAa,CAACN,GAAdM,CACE,UAACV,IAAD,EAAU;AACR;AACAA,UAAI,CAACe,MAALf,GAAc,KAAdA;AAEA,aAAOA,IAAP;AALJ,MADec,GAQXA,UARNJ;AAUA,WAAO,KAAKf,gBAAL,CAAsBe,aAAa,CAACM,MAAdN,CAAqB,UAACO,QAAD,EAAWC,OAAX;AAAA,aAC/CD,QAAQ,CAACX,QAATW,GAAoBC,OAAO,CAACZ,QAA5BW,IAAwC,CAACA,QAAQ,CAACJ,WAAlDI,GACCC,OADDD,GACWA,QAFoC;AAArB,OAG1B,EAH0BP,EAGtBV,IAHA,CAAP;AApE+B;;AA0EjC;AACF;AACA;AACA;AACA;AACA;AACA;AACEmB,UAjFiC,oBAiFxBtB,GAjFwB,EAiFnB;AACZ,QAAIA,GAAG,KAAK,KAAKN,UAAjB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,qBAAmBO,aAAIC,KAAJD,CAAUD,GAAVC,CAAnB;AAAA,QAAOsB,QAAP,cAAOA,QAAP;;AACA,QAAMC,SAAS,GAAG,KAAK5B,KAAL,CAAW6B,IAAX,CAAgB,UAACC,OAAD;AAAA,aAAaA,OAAO,CAACvB,IAARuB,KAAiBH,QAA9B;AAAhB,MAAlB;;AAEA,QAAIC,SAAJ,EAAe;AACbA,eAAS,CAACN,MAAVM,GAAmB,IAAnBA;AACD;;AAED,WAAQA,SAAS,KAAK7B,SAAtB;AA7F+B;;AAgGjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEgC,KAxGiC,eAwG7BC,YAxG6B,EAwGfjB,SAxGe,EAwGJ;AAC3B,QAAI,CAACiB,YAAL,EAAmB;AACjB,aAAO,KAAKlC,UAAZ;AACD;;AAED,WAAO,KAAKgB,mBAAL,CAAyBC,SAAzB,CAAP;AACD;AA9GgC,CAAhBrB,CAAnB;AAgHA;;;eAEeD","names":["ServiceUrl","AmpState","extend","namespace","props","defaultUrl","undefined","hosts","name","_generateHostUrl","hostUri","url","Url","parse","host","port","format","_getHostUrls","map","_this","priority","_getPriorityHostUrl","clusterId","length","filteredHosts","filter","id","homeCluster","aliveHosts","failed","reduce","previous","current","failHost","hostname","foundHost","find","hostObj","get","priorityHost"],"sources":["service-url.js"],"sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceUrl = AmpState.extend({\n  namespace: 'ServiceUrl',\n\n  props: {\n    defaultUrl: ['string', true, undefined],\n    hosts: ['array', false, () => ([])],\n    name: ['string', true, undefined]\n  },\n\n  /**\n   * Generate a host url based on the host\n   * uri provided.\n   * @param {string} hostUri\n   * @returns {string}\n   */\n  _generateHostUrl(hostUri) {\n    const url = Url.parse(this.defaultUrl);\n\n    // setting url.hostname will not apply during Url.format(), set host via\n    // a string literal instead.\n    url.host = `${hostUri}${url.port ? `:${url.port}` : ''}`;\n\n    return Url.format(url);\n  },\n\n  /**\n   * Generate a list of urls based on this\n   * `ServiceUrl`'s known hosts.\n   * @returns {string[]}\n   */\n  _getHostUrls() {\n    return this.hosts.map((host) => ({\n      url: this._generateHostUrl(host.host),\n      priority: host.priority\n    }));\n  },\n\n  /**\n   * Get the current host url with the highest priority. If a clusterId is not\n   * provided, this will only return a URL with a filtered host that has the\n   * `homeCluster` value set to `true`.\n   *\n   * @param {string} [clusterId] - The clusterId to filter for a priority host.\n   * @returns {string} - The priority host url.\n   */\n  _getPriorityHostUrl(clusterId) {\n    if (this.hosts.length === 0) {\n      return this.defaultUrl;\n    }\n\n    let filteredHosts = clusterId ?\n      this.hosts.filter((host) => host.id === clusterId) :\n      this.hosts.filter((host) => host.homeCluster);\n\n    const aliveHosts = filteredHosts.filter(\n      (host) => !host.failed\n    );\n\n    filteredHosts = (aliveHosts.length === 0) ?\n      filteredHosts.map(\n        (host) => {\n          /* eslint-disable-next-line no-param-reassign */\n          host.failed = false;\n\n          return host;\n        }\n      ) : aliveHosts;\n\n    return this._generateHostUrl(filteredHosts.reduce((previous, current) => (\n      (previous.priority > current.priority || !previous.homeCluster) ?\n        current : previous\n    ), {}).host);\n  },\n\n  /**\n   * Attempt to mark a host from this `ServiceUrl` as failed and return true\n   * if the provided url has a host that could be successfully marked as failed.\n   *\n   * @param {string} url\n   * @returns {boolean}\n   */\n  failHost(url) {\n    if (url === this.defaultUrl) {\n      return true;\n    }\n\n    const {hostname} = Url.parse(url);\n    const foundHost = this.hosts.find((hostObj) => hostObj.host === hostname);\n\n    if (foundHost) {\n      foundHost.failed = true;\n    }\n\n    return (foundHost !== undefined);\n  },\n\n  /**\n   * Get the current `defaultUrl` or generate a url using the host with the\n   * highest priority via host rendering.\n   *\n   * @param {boolean} [priorityHost] - Retrieve the priority host.\n   * @param {string} [clusterId] - Cluster to match a host against.\n   * @returns {string} - The full service url.\n   */\n  get(priorityHost, clusterId) {\n    if (!priorityHost) {\n      return this.defaultUrl;\n    }\n\n    return this._getPriorityHostUrl(clusterId);\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceUrl;\n"]},"metadata":{},"sourceType":"script"}
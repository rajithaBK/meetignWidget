{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\nimport MessageImprint from \"./MessageImprint.js\";\nimport Accuracy from \"./Accuracy.js\";\nimport GeneralName from \"./GeneralName.js\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nvar TSTInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TSTInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function TSTInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TSTInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {string}\r\n     * @desc policy\r\n     */\n\n    this.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\n    /**\r\n     * @type {MessageImprint}\r\n     * @desc messageImprint\r\n     */\n\n    this.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\n    /**\r\n     * @type {Date}\r\n     * @desc genTime\r\n     */\n\n    this.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\n    if (\"accuracy\" in parameters)\n      /**\r\n       * @type {Accuracy}\r\n       * @desc accuracy\r\n       */\n      this.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\n    if (\"ordering\" in parameters)\n      /**\r\n       * @type {boolean}\r\n       * @desc ordering\r\n       */\n      this.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\n    if (\"nonce\" in parameters)\n      /**\r\n       * @type {Integer}\r\n       * @desc nonce\r\n       */\n      this.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\n    if (\"tsa\" in parameters)\n      /**\r\n       * @type {GeneralName}\r\n       * @desc tsa\r\n       */\n      this.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\n    if (\"extensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc extensions\r\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(TSTInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"TSTInfo.version\", \"TSTInfo.policy\", \"TSTInfo.messageImprint\", \"TSTInfo.serialNumber\", \"TSTInfo.genTime\", \"TSTInfo.accuracy\", \"TSTInfo.ordering\", \"TSTInfo.nonce\", \"TSTInfo.tsa\", \"TSTInfo.extensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, TSTInfo.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TSTInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\n      this.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\n      this.messageImprint = new MessageImprint({\n        schema: asn1.result[\"TSTInfo.messageImprint\"]\n      });\n      this.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\n      this.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\n      if (\"TSTInfo.accuracy\" in asn1.result) this.accuracy = new Accuracy({\n        schema: asn1.result[\"TSTInfo.accuracy\"]\n      });\n      if (\"TSTInfo.ordering\" in asn1.result) this.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\n      if (\"TSTInfo.nonce\" in asn1.result) this.nonce = asn1.result[\"TSTInfo.nonce\"];\n      if (\"TSTInfo.tsa\" in asn1.result) this.tsa = new GeneralName({\n        schema: asn1.result[\"TSTInfo.tsa\"]\n      });\n      if (\"TSTInfo.extensions\" in asn1.result) this.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.policy\n      }));\n      outputArray.push(this.messageImprint.toSchema());\n      outputArray.push(this.serialNumber);\n      outputArray.push(new asn1js.GeneralizedTime({\n        valueDate: this.genTime\n      }));\n      if (\"accuracy\" in this) outputArray.push(this.accuracy.toSchema());\n      if (\"ordering\" in this) outputArray.push(new asn1js.Boolean({\n        value: this.ordering\n      }));\n      if (\"nonce\" in this) outputArray.push(this.nonce);\n\n      if (\"tsa\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [this.tsa.toSchema()]\n        }));\n      } //region Create array of extensions\n\n\n      if (\"extensions\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: Array.from(this.extensions, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        version: this.version,\n        policy: this.policy,\n        messageImprint: this.messageImprint.toJSON(),\n        serialNumber: this.serialNumber.toJSON(),\n        genTime: this.genTime\n      };\n      if (\"accuracy\" in this) _object.accuracy = this.accuracy.toJSON();\n      if (\"ordering\" in this) _object.ordering = this.ordering;\n      if (\"nonce\" in this) _object.nonce = this.nonce.toJSON();\n      if (\"tsa\" in this) _object.tsa = this.tsa.toJSON();\n      if (\"extensions\" in this) _object.extensions = Array.from(this.extensions, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Verify current TST Info value\r\n     * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var _this = this;\n\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //region Initial variables\n      var sequence = Promise.resolve();\n      var data;\n      var notBefore = null;\n      var notAfter = null; //endregion\n      //region Get a \"crypto\" extension\n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n      //region Get initial parameters\n\n      if (\"data\" in parameters) data = parameters.data;else return Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\n      if (\"notBefore\" in parameters) notBefore = parameters.notBefore;\n      if (\"notAfter\" in parameters) notAfter = parameters.notAfter; //endregion\n      //region Check date\n\n      if (notBefore !== null) {\n        if (this.genTime < notBefore) return Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\n      }\n\n      if (notAfter !== null) {\n        if (this.genTime > notAfter) return Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\n      } //endregion\n      //region Find hashing algorithm\n\n\n      var shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\n      if (\"name\" in shaAlgorithm === false) return Promise.reject(\"Unsupported signature algorithm: \".concat(this.messageImprint.hashAlgorithm.algorithmId)); //endregion\n      //region Calculate message digest for input \"data\" buffer\n      // noinspection JSCheckFunctionSignatures\n\n      sequence = sequence.then(function () {\n        return crypto.digest(shaAlgorithm.name, new Uint8Array(data));\n      }).then(function (result) {\n        return isEqualBuffer(result, _this.messageImprint.hashedMessage.valueBlock.valueHex);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"policy\":\n          return \"\";\n\n        case \"messageImprint\":\n          return new MessageImprint();\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        case \"genTime\":\n          return new Date(0, 0, 0);\n\n        case \"accuracy\":\n          return new Accuracy();\n\n        case \"ordering\":\n          return false;\n\n        case \"nonce\":\n          return new asn1js.Integer();\n\n        case \"tsa\":\n          return new GeneralName();\n\n        case \"extensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for TSTInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n        case \"policy\":\n        case \"genTime\":\n        case \"ordering\":\n          return memberValue === TSTInfo.defaultValues(memberName);\n\n        case \"messageImprint\":\n          return MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage);\n\n        case \"serialNumber\":\n        case \"nonce\":\n          return memberValue.isEqual(TSTInfo.defaultValues(memberName));\n\n        case \"accuracy\":\n          return Accuracy.compareWithDefault(\"seconds\", memberValue.seconds) && Accuracy.compareWithDefault(\"millis\", memberValue.millis) && Accuracy.compareWithDefault(\"micros\", memberValue.micros);\n\n        case \"tsa\":\n          return GeneralName.compareWithDefault(\"type\", memberValue.type) && GeneralName.compareWithDefault(\"value\", memberValue.value);\n\n        case \"extensions\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for TSTInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * TSTInfo ::= SEQUENCE  {\r\n     *   version                      INTEGER  { v1(1) },\r\n     *   policy                       TSAPolicyId,\r\n     *   messageImprint               MessageImprint,\r\n     *   serialNumber                 INTEGER,\r\n     *   genTime                      GeneralizedTime,\r\n     *   accuracy                     Accuracy                 OPTIONAL,\r\n     *   ordering                     BOOLEAN             DEFAULT FALSE,\r\n     *   nonce                        INTEGER                  OPTIONAL,\r\n     *   tsa                          [0] GeneralName          OPTIONAL,\r\n     *   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [policy]\r\n       * @property {string} [messageImprint]\r\n       * @property {string} [serialNumber]\r\n       * @property {string} [genTime]\r\n       * @property {string} [accuracy]\r\n       * @property {string} [ordering]\r\n       * @property {string} [nonce]\r\n       * @property {string} [tsa]\r\n       * @property {string} [extensions]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"TSTInfo\",\n        value: [new asn1js.Integer({\n          name: names.version || \"TSTInfo.version\"\n        }), new asn1js.ObjectIdentifier({\n          name: names.policy || \"TSTInfo.policy\"\n        }), MessageImprint.schema(names.messageImprint || {\n          names: {\n            blockName: \"TSTInfo.messageImprint\"\n          }\n        }), new asn1js.Integer({\n          name: names.serialNumber || \"TSTInfo.serialNumber\"\n        }), new asn1js.GeneralizedTime({\n          name: names.genTime || \"TSTInfo.genTime\"\n        }), Accuracy.schema(names.accuracy || {\n          names: {\n            blockName: \"TSTInfo.accuracy\"\n          }\n        }), new asn1js.Boolean({\n          name: names.ordering || \"TSTInfo.ordering\",\n          optional: true\n        }), new asn1js.Integer({\n          name: names.nonce || \"TSTInfo.nonce\",\n          optional: true\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [GeneralName.schema(names.tsa || {\n            names: {\n              blockName: \"TSTInfo.tsa\"\n            }\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.extensions || \"TSTInfo.extensions\",\n            value: Extension.schema(names.extension || {})\n          })]\n        }) // IMPLICIT Extensions\n        ]\n      });\n    }\n  }]);\n\n  return TSTInfo;\n}(); //**************************************************************************************\n\n\nexport { TSTInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/TSTInfo.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","getCrypto","getAlgorithmByOID","MessageImprint","Accuracy","GeneralName","Extension","TSTInfo","parameters","version","defaultValues","policy","messageImprint","serialNumber","genTime","accuracy","ordering","nonce","tsa","extensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","toString","toDate","value","Array","from","element","outputArray","push","Integer","ObjectIdentifier","toSchema","GeneralizedTime","valueDate","Boolean","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","sequence","Promise","resolve","data","notBefore","notAfter","crypto","reject","shaAlgorithm","hashAlgorithm","algorithmId","then","digest","name","Uint8Array","hashedMessage","valueHex","memberName","Date","memberValue","compareWithDefault","isEqual","seconds","millis","micros","type","length","names","blockName","Repeated","extension"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Accuracy from \"./Accuracy.js\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @desc messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @desc accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @desc ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TSTInfo ::= SEQUENCE  {\r\n\t *   version                      INTEGER  { v1(1) },\r\n\t *   policy                       TSAPolicyId,\r\n\t *   messageImprint               MessageImprint,\r\n\t *   serialNumber                 INTEGER,\r\n\t *   genTime                      GeneralizedTime,\r\n\t *   accuracy                     Accuracy                 OPTIONAL,\r\n\t *   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t *   nonce                        INTEGER                  OPTIONAL,\r\n\t *   tsa                          [0] GeneralName          OPTIONAL,\r\n\t *   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TSTInfo.version\",\r\n\t\t\t\"TSTInfo.policy\",\r\n\t\t\t\"TSTInfo.messageImprint\",\r\n\t\t\t\"TSTInfo.serialNumber\",\r\n\t\t\t\"TSTInfo.genTime\",\r\n\t\t\t\"TSTInfo.accuracy\",\r\n\t\t\t\"TSTInfo.ordering\",\r\n\t\t\t\"TSTInfo.nonce\",\r\n\t\t\t\"TSTInfo.tsa\",\r\n\t\t\t\"TSTInfo.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSTInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore = null;\r\n\t\tlet notAfter = null;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Check date\r\n\t\tif(notBefore !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime < notBefore)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\r\n\t\t}\r\n\t\t\r\n\t\tif(notAfter !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime > notAfter)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(\r\n\t\t\tresult => isEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
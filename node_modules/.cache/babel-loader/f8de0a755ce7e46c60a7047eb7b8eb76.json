{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5652\n */\n\nvar RecipientIdentifier = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for RecipientIdentifier class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function RecipientIdentifier() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RecipientIdentifier);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {number}\n     * @desc variant\n     */\n    this.variant = getParametersValue(parameters, \"variant\", RecipientIdentifier.defaultValues(\"variant\"));\n    if (\"value\" in parameters)\n      /**\n       * @type {*}\n       * @desc value\n       */\n      this.value = getParametersValue(parameters, \"value\", RecipientIdentifier.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(RecipientIdentifier, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"blockName\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RecipientIdentifier.schema({\n        names: {\n          blockName: \"blockName\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RecipientIdentifier\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (asn1.result.blockName.idBlock.tagClass === 1) {\n        this.variant = 1;\n        this.value = new IssuerAndSerialNumber({\n          schema: asn1.result.blockName\n        });\n      } else {\n        this.variant = 2;\n        this.value = new asn1js.OctetString({\n          valueHex: asn1.result.blockName.valueBlock.valueHex\n        });\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      switch (this.variant) {\n        case 1:\n          return this.value.toSchema();\n\n        case 2:\n          return new asn1js.Primitive({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            valueHex: this.value.valueBlock.valueHex\n          });\n\n        default:\n          return new asn1js.Any();\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        variant: this.variant\n      };\n      if (this.variant === 1 || this.variant === 2) _object.value = this.value.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"variant\":\n          return -1;\n\n        case \"value\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for RecipientIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"variant\":\n          return memberValue === -1;\n\n        case \"values\":\n          return Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for RecipientIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * RecipientIdentifier ::= CHOICE {\n     *    issuerAndSerialNumber IssuerAndSerialNumber,\n     *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\n     *\n     * SubjectKeyIdentifier ::= OCTET STRING\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Choice({\n        value: [IssuerAndSerialNumber.schema({\n          names: {\n            blockName: names.blockName || \"\"\n          }\n        }), new asn1js.Primitive({\n          name: names.blockName || \"\",\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          }\n        })]\n      });\n    }\n  }]);\n\n  return RecipientIdentifier;\n}(); //**************************************************************************************\n\n\nexport { RecipientIdentifier as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RecipientIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","IssuerAndSerialNumber","RecipientIdentifier","parameters","variant","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","idBlock","tagClass","OctetString","valueHex","valueBlock","toSchema","Primitive","tagNumber","Any","_object","toJSON","memberName","memberValue","Object","keys","length","Choice","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\n//**************************************************************************************\n/**\n * Class from RFC5652\n */\nexport default class RecipientIdentifier\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for RecipientIdentifier class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc variant\n\t\t */\n\t\tthis.variant = getParametersValue(parameters, \"variant\", RecipientIdentifier.defaultValues(\"variant\"));\n\n\t\tif(\"value\" in parameters)\n\t\t\t/**\n\t\t\t * @type {*}\n\t\t\t * @desc value\n\t\t\t */\n\t\t\tthis.value = getParametersValue(parameters, \"value\", RecipientIdentifier.defaultValues(\"value\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"variant\":\n\t\t\t\treturn (-1);\n\t\t\tcase \"value\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"variant\":\n\t\t\t\treturn (memberValue === (-1));\n\t\t\tcase \"values\":\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * RecipientIdentifier ::= CHOICE {\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\n\t *\n\t * SubjectKeyIdentifier ::= OCTET STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Choice({\n\t\t\tvalue: [\n\t\t\t\tIssuerAndSerialNumber.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: (names.blockName || \"\")\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"blockName\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tRecipientIdentifier.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tblockName: \"blockName\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientIdentifier\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif(asn1.result.blockName.idBlock.tagClass === 1)\n\t\t{\n\t\t\tthis.variant = 1;\n\t\t\tthis.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.variant = 2;\n\t\t\tthis.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex }) ;\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\tswitch(this.variant)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\treturn this.value.toSchema();\n\t\t\tcase 2:\n\t\t\t\treturn new asn1js.Primitive({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalueHex: this.value.valueBlock.valueHex\n\t\t\t\t});\n\t\t\tdefault:\n\t\t\t\treturn new asn1js.Any();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst _object = {\n\t\t\tvariant: this.variant\n\t\t};\n\n\t\tif((this.variant === 1) || (this.variant === 2))\n\t\t\t_object.value = this.value.toJSON();\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
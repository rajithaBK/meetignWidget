{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _loggerProxy = _interopRequireDefault(require(\"../logs/logger-proxy\"));\n\nvar _loggerConfig = _interopRequireDefault(require(\"../logs/logger-config\"));\n\nvar _parameter = _interopRequireDefault(require(\"../errors/parameter\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n\nvar TriggerProxy = {};\n\nTriggerProxy.trigger = function (instance, scope, trigger, payload) {\n  if (!instance || !instance.trigger) {\n    throw new _parameter.default('Instance to trigger from must be defined and have a trigger function.');\n  }\n\n  _loggerProxy.default.logger.debug(\"\".concat(_util.default.getScopeLog(scope), \"event#\").concat(trigger).concat(_loggerConfig.default.verboseEvents ? \" -- \".concat(_util.default.getEventLog(payload)) : ''));\n\n  return instance.trigger(trigger, payload);\n};\n\nvar _default = TriggerProxy;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AAGA,IAAMA,YAAY,GAAG,EAArB;;AAEAA,YAAY,CAACC,OAAbD,GAAuB,UAACE,QAAD,EAAWC,KAAX,EAAkBF,OAAlB,EAA2BG,OAA3B,EAAuC;AAC5D,MAAI,CAACF,QAAD,IAAa,CAACA,QAAQ,CAACD,OAA3B,EAAoC;AAClC,UAAM,IAAII,kBAAJ,CAAmB,uEAAnB,CAAN;AACD;;AAEDC,uBAAYC,MAAZD,CAAmBE,KAAnBF,WAA4BG,cAAWC,WAAXD,CAAuBN,KAAvBM,CAA5B,mBAAkER,OAAlE,SAA4EU,sBAAaC,aAAbD,iBAAoCF,cAAWI,WAAXJ,CAAuBL,OAAvBK,CAApC,IAAwE,EAApJ;;AAEA,SAAOP,QAAQ,CAACD,OAATC,CAAiBD,OAAjBC,EAA0BE,OAA1BF,CAAP;AAPF;;eAUeF","names":["TriggerProxy","trigger","instance","scope","payload","ParameterError","LoggerProxy","logger","debug","EventsUtil","getScopeLog","LoggerConfig","verboseEvents","getEventLog"],"sources":["trigger-proxy.js"],"sourcesContent":["\nimport LoggerProxy from '../logs/logger-proxy';\nimport LoggerConfig from '../logs/logger-config';\nimport ParameterError from '../errors/parameter';\n\nimport EventsUtil from './util';\n\n\nconst TriggerProxy = {};\n\nTriggerProxy.trigger = (instance, scope, trigger, payload) => {\n  if (!instance || !instance.trigger) {\n    throw new ParameterError('Instance to trigger from must be defined and have a trigger function.');\n  }\n\n  LoggerProxy.logger.debug(`${EventsUtil.getScopeLog(scope)}event#${trigger}${LoggerConfig.verboseEvents ? ` -- ${EventsUtil.getEventLog(payload)}` : ''}`);\n\n  return instance.trigger(trigger, payload);\n};\n\nexport default TriggerProxy;\n"]},"metadata":{},"sourceType":"script"}
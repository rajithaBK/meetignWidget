{"ast":null,"code":"import _toConsumableArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\rkanthet\\\\Documents\\\\test_window_object\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { getParametersValue, isEqualBuffer } from \"pvutils\";\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\"; //**************************************************************************************\n\nvar CertificateChainValidationEngine = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertificateChainValidationEngine class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function CertificateChainValidationEngine() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CertificateChainValidationEngine);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<Certificate>}\r\n     * @desc Array of pre-defined trusted (by user) certificates\r\n     */\n    this.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\n    /**\r\n     * @type {Array.<Certificate>}\r\n     * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n     */\n\n    this.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\n    /**\r\n     * @type {Array.<CertificateRevocationList>}\r\n     * @desc Array of all CRLs for all certificates from certificate chain\r\n     */\n\n    this.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\n    /**\r\n     * @type {Array}\r\n     * @desc Array of all OCSP responses\r\n     */\n\n    this.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\n    /**\r\n     * @type {Date}\r\n     * @desc The date at which the check would be\r\n     */\n\n    this.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\n    /**\r\n     * @type {Function}\r\n     * @desc The date at which the check would be\r\n     */\n\n    this.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\n    /**\r\n     * @type {Function}\r\n     * @desc The date at which the check would be\r\n     */\n\n    this.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\")); //endregion\n  } //**********************************************************************************\n\n\n  _createClass(CertificateChainValidationEngine, [{\n    key: \"defaultFindIssuer\",\n    value: //**********************************************************************************\n    function () {\n      var _defaultFindIssuer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(certificate, validationEngine) {\n        var result, keyIdentifier, authorityCertIssuer, authorityCertSerialNumber, verificationResult, _iterator, _step, extension, checkCertificate, _iterator3, _step3, trustedCert, _iterator4, _step4, intermediateCert, i, _verificationResult;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                checkCertificate = function _checkCertificate(possibleIssuer) {\n                  //region Firstly search for appropriate extensions\n                  if (keyIdentifier !== null) {\n                    if (\"extensions\" in possibleIssuer) {\n                      var extensionFound = false;\n\n                      var _iterator2 = _createForOfIteratorHelper(possibleIssuer.extensions),\n                          _step2;\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          var _extension = _step2.value;\n\n                          if (_extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\n                            {\n                              extensionFound = true;\n                              if (isEqualBuffer(_extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex)) result.push(possibleIssuer);\n                              break;\n                            }\n                        }\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      if (extensionFound) return;\n                    }\n                  } //endregion\n                  //region Now search for authorityCertSerialNumber\n\n\n                  var authorityCertSerialNumberEqual = false;\n                  if (authorityCertSerialNumber !== null) authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber); //endregion\n                  //region And at least search for Issuer data\n\n                  if (authorityCertIssuer !== null) {\n                    if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\n                      if (authorityCertSerialNumberEqual) result.push(possibleIssuer);\n                    }\n                  } else {\n                    if (certificate.issuer.isEqual(possibleIssuer.subject)) result.push(possibleIssuer);\n                  } //endregion\n\n                };\n\n                //region Initial variables\n                result = [];\n                keyIdentifier = null;\n                authorityCertIssuer = null;\n                authorityCertSerialNumber = null; //endregion\n                //region Speed-up searching in case of self-signed certificates\n\n                if (!certificate.subject.isEqual(certificate.issuer)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.prev = 6;\n                _context.next = 9;\n                return certificate.verify();\n\n              case 9:\n                verificationResult = _context.sent;\n\n                if (!(verificationResult === true)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", [certificate]);\n\n              case 12:\n                _context.next = 16;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](6);\n\n              case 16:\n                if (!(\"extensions\" in certificate)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                _iterator = _createForOfIteratorHelper(certificate.extensions);\n                _context.prev = 18;\n\n                _iterator.s();\n\n              case 20:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 27;\n                  break;\n                }\n\n                extension = _step.value;\n\n                if (!(extension.extnID === \"2.5.29.35\")) {\n                  _context.next = 25;\n                  break;\n                }\n\n                if (\"keyIdentifier\" in extension.parsedValue) keyIdentifier = extension.parsedValue.keyIdentifier;else {\n                  if (\"authorityCertIssuer\" in extension.parsedValue) authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\n                  if (\"authorityCertSerialNumber\" in extension.parsedValue) authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\n                }\n                return _context.abrupt(\"break\", 27);\n\n              case 25:\n                _context.next = 20;\n                break;\n\n              case 27:\n                _context.next = 32;\n                break;\n\n              case 29:\n                _context.prev = 29;\n                _context.t1 = _context[\"catch\"](18);\n\n                _iterator.e(_context.t1);\n\n              case 32:\n                _context.prev = 32;\n\n                _iterator.f();\n\n                return _context.finish(32);\n\n              case 35:\n                //endregion\n                //region Search in Trusted Certificates\n                _iterator3 = _createForOfIteratorHelper(validationEngine.trustedCerts);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    trustedCert = _step3.value;\n                    checkCertificate(trustedCert);\n                  } //endregion\n                  //region Search in Intermediate Certificates\n\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                _iterator4 = _createForOfIteratorHelper(validationEngine.certs);\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    intermediateCert = _step4.value;\n                    checkCertificate(intermediateCert);\n                  } //endregion\n                  //region Now perform certificate verification checking\n\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                i = 0;\n\n              case 40:\n                if (!(i < result.length)) {\n                  _context.next = 54;\n                  break;\n                }\n\n                _context.prev = 41;\n                _context.next = 44;\n                return certificate.verify(result[i]);\n\n              case 44:\n                _verificationResult = _context.sent;\n                if (_verificationResult === false) result.splice(i, 1);\n                _context.next = 51;\n                break;\n\n              case 48:\n                _context.prev = 48;\n                _context.t2 = _context[\"catch\"](41);\n                result.splice(i, 1); // Something wrong, remove the certificate\n\n              case 51:\n                i++;\n                _context.next = 40;\n                break;\n\n              case 54:\n                return _context.abrupt(\"return\", result);\n\n              case 55:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[6, 14], [18, 29, 32, 35], [41, 48]]);\n      }));\n\n      function defaultFindIssuer(_x, _x2) {\n        return _defaultFindIssuer.apply(this, arguments);\n      }\n\n      return defaultFindIssuer;\n    }() //**********************************************************************************\n\n    /**\r\n     * Return default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     */\n\n  }, {\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"trustedCerts\":\n          return [];\n\n        case \"certs\":\n          return [];\n\n        case \"crls\":\n          return [];\n\n        case \"ocsps\":\n          return [];\n\n        case \"checkDate\":\n          return new Date();\n\n        case \"findOrigin\":\n          return CertificateChainValidationEngine.defaultFindOrigin;\n\n        case \"findIssuer\":\n          return this.defaultFindIssuer;\n\n        default:\n          throw new Error(\"Invalid member name for CertificateChainValidationEngine class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n  }, {\n    key: \"sort\",\n    value: function () {\n      var _sort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var passedWhenNotRevValues,\n            localCerts,\n            _this,\n            buildPath,\n            _buildPath,\n            findCRL,\n            _findCRL,\n            findOCSP,\n            _findOCSP,\n            checkForCA,\n            _checkForCA,\n            basicCheck,\n            _basicCheck,\n            i,\n            j,\n            result,\n            certificatePath,\n            _i,\n            found,\n            _j,\n            certificate,\n            k,\n            shortestLength,\n            shortestIndex,\n            _i2,\n            _i3,\n            _args7 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _basicCheck = function _basicCheck3() {\n                  _basicCheck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(path, checkDate) {\n                    var _i8, _i9, _i10, ocspResult, crlResult, _j6, isCertificateRevoked, isCertificateCA, issuerCertificate, extensionFound, _iterator5, _step5, extension, _i11, _result3;\n\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            _i8 = 0;\n\n                          case 1:\n                            if (!(_i8 < path.length)) {\n                              _context6.next = 7;\n                              break;\n                            }\n\n                            if (!(path[_i8].notBefore.value > checkDate || path[_i8].notAfter.value < checkDate)) {\n                              _context6.next = 4;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 8,\n                              resultMessage: \"The certificate is either not yet valid or expired\"\n                            });\n\n                          case 4:\n                            _i8++;\n                            _context6.next = 1;\n                            break;\n\n                          case 7:\n                            if (!(path.length < 2)) {\n                              _context6.next = 9;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 9,\n                              resultMessage: \"Too short certificate path\"\n                            });\n\n                          case 9:\n                            _i9 = path.length - 2;\n\n                          case 10:\n                            if (!(_i9 >= 0)) {\n                              _context6.next = 17;\n                              break;\n                            }\n\n                            if (!(path[_i9].issuer.isEqual(path[_i9].subject) === false)) {\n                              _context6.next = 14;\n                              break;\n                            }\n\n                            if (!(path[_i9].issuer.isEqual(path[_i9 + 1].subject) === false)) {\n                              _context6.next = 14;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 10,\n                              resultMessage: \"Incorrect name chaining\"\n                            });\n\n                          case 14:\n                            _i9--;\n                            _context6.next = 10;\n                            break;\n\n                          case 17:\n                            if (!(_this.crls.length !== 0 || _this.ocsps.length !== 0)) {\n                              _context6.next = 87;\n                              break;\n                            }\n\n                            _i10 = 0;\n\n                          case 19:\n                            if (!(_i10 < path.length - 1)) {\n                              _context6.next = 87;\n                              break;\n                            }\n\n                            //region Initial variables\n                            ocspResult = 2;\n                            crlResult = {\n                              status: 0,\n                              statusMessage: \"\"\n                            }; //endregion\n                            //region Check OCSPs first\n\n                            if (!(_this.ocsps.length !== 0)) {\n                              _context6.next = 32;\n                              break;\n                            }\n\n                            _context6.next = 25;\n                            return findOCSP(path[_i10], path[_i10 + 1]);\n\n                          case 25:\n                            ocspResult = _context6.sent;\n                            _context6.t0 = ocspResult;\n                            _context6.next = _context6.t0 === 0 ? 29 : _context6.t0 === 1 ? 30 : _context6.t0 === 2 ? 31 : 32;\n                            break;\n\n                          case 29:\n                            return _context6.abrupt(\"continue\", 84);\n\n                          case 30:\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 12,\n                              resultMessage: \"One of certificates was revoked via OCSP response\"\n                            });\n\n                          case 31:\n                            return _context6.abrupt(\"break\", 32);\n\n                          case 32:\n                            if (!(_this.crls.length !== 0)) {\n                              _context6.next = 56;\n                              break;\n                            }\n\n                            _context6.next = 35;\n                            return findCRL(path[_i10]);\n\n                          case 35:\n                            crlResult = _context6.sent;\n\n                            if (!(crlResult.status === 0)) {\n                              _context6.next = 52;\n                              break;\n                            }\n\n                            _j6 = 0;\n\n                          case 38:\n                            if (!(_j6 < crlResult.result.length)) {\n                              _context6.next = 50;\n                              break;\n                            }\n\n                            //region Check that the CRL issuer certificate have not been revoked\n                            isCertificateRevoked = crlResult.result[_j6].crl.isCertificateRevoked(path[_i10]);\n\n                            if (!isCertificateRevoked) {\n                              _context6.next = 42;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 12,\n                              resultMessage: \"One of certificates had been revoked\"\n                            });\n\n                          case 42:\n                            _context6.next = 44;\n                            return checkForCA(crlResult.result[_j6].certificate, true);\n\n                          case 44:\n                            isCertificateCA = _context6.sent;\n\n                            if (!(isCertificateCA.result === false)) {\n                              _context6.next = 47;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 13,\n                              resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\n                            });\n\n                          case 47:\n                            _j6++;\n                            _context6.next = 38;\n                            break;\n\n                          case 50:\n                            _context6.next = 54;\n                            break;\n\n                          case 52:\n                            if (!(passedWhenNotRevValues === false)) {\n                              _context6.next = 54;\n                              break;\n                            }\n\n                            throw {\n                              result: false,\n                              resultCode: 11,\n                              resultMessage: \"No revocation values found for one of certificates: \".concat(crlResult.statusMessage)\n                            };\n\n                          case 54:\n                            _context6.next = 58;\n                            break;\n\n                          case 56:\n                            if (!(ocspResult === 2)) {\n                              _context6.next = 58;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 11,\n                              resultMessage: \"No revocation values found for one of certificates\"\n                            });\n\n                          case 58:\n                            if (!(ocspResult === 2 && crlResult.status === 2 && passedWhenNotRevValues)) {\n                              _context6.next = 84;\n                              break;\n                            }\n\n                            issuerCertificate = path[_i10 + 1];\n                            extensionFound = false;\n\n                            if (!(\"extensions\" in issuerCertificate)) {\n                              _context6.next = 82;\n                              break;\n                            }\n\n                            _iterator5 = _createForOfIteratorHelper(issuerCertificate.extensions);\n                            _context6.prev = 63;\n\n                            _iterator5.s();\n\n                          case 65:\n                            if ((_step5 = _iterator5.n()).done) {\n                              _context6.next = 74;\n                              break;\n                            }\n\n                            extension = _step5.value;\n                            _context6.t1 = extension.extnID;\n                            _context6.next = _context6.t1 === \"2.5.29.31\" ? 70 : _context6.t1 === \"2.5.29.46\" ? 70 : _context6.t1 === \"1.3.6.1.5.5.7.1.1\" ? 70 : 72;\n                            break;\n\n                          case 70:\n                            // AuthorityInfoAccess\n                            extensionFound = true;\n                            return _context6.abrupt(\"break\", 72);\n\n                          case 72:\n                            _context6.next = 65;\n                            break;\n\n                          case 74:\n                            _context6.next = 79;\n                            break;\n\n                          case 76:\n                            _context6.prev = 76;\n                            _context6.t2 = _context6[\"catch\"](63);\n\n                            _iterator5.e(_context6.t2);\n\n                          case 79:\n                            _context6.prev = 79;\n\n                            _iterator5.f();\n\n                            return _context6.finish(79);\n\n                          case 82:\n                            if (!extensionFound) {\n                              _context6.next = 84;\n                              break;\n                            }\n\n                            throw {\n                              result: false,\n                              resultCode: 11,\n                              resultMessage: \"No revocation values found for one of certificates: \".concat(crlResult.statusMessage)\n                            };\n\n                          case 84:\n                            _i10++;\n                            _context6.next = 19;\n                            break;\n\n                          case 87:\n                            _i11 = 1;\n\n                          case 88:\n                            if (!(_i11 < path.length)) {\n                              _context6.next = 97;\n                              break;\n                            }\n\n                            _context6.next = 91;\n                            return checkForCA(path[_i11]);\n\n                          case 91:\n                            _result3 = _context6.sent;\n\n                            if (!(_result3.result === false)) {\n                              _context6.next = 94;\n                              break;\n                            }\n\n                            return _context6.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 14,\n                              resultMessage: \"One of intermediate certificates is not a CA certificate\"\n                            });\n\n                          case 94:\n                            _i11++;\n                            _context6.next = 88;\n                            break;\n\n                          case 97:\n                            return _context6.abrupt(\"return\", {\n                              result: true\n                            });\n\n                          case 98:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6, null, [[63, 76, 79, 82]]);\n                  }));\n                  return _basicCheck.apply(this, arguments);\n                };\n\n                basicCheck = function _basicCheck2(_x8, _x9) {\n                  return _basicCheck.apply(this, arguments);\n                };\n\n                _checkForCA = function _checkForCA3() {\n                  _checkForCA = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(certificate) {\n                    var needToCheckCRL,\n                        isCA,\n                        mustBeCA,\n                        keyUsagePresent,\n                        cRLSign,\n                        _j5,\n                        view,\n                        _args5 = arguments;\n\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            needToCheckCRL = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : false;\n                            //region Initial variables\n                            isCA = false;\n                            mustBeCA = false;\n                            keyUsagePresent = false;\n                            cRLSign = false; //endregion\n\n                            if (!(\"extensions\" in certificate)) {\n                              _context5.next = 21;\n                              break;\n                            }\n\n                            _j5 = 0;\n\n                          case 7:\n                            if (!(_j5 < certificate.extensions.length)) {\n                              _context5.next = 15;\n                              break;\n                            }\n\n                            if (!(certificate.extensions[_j5].critical === true && \"parsedValue\" in certificate.extensions[_j5] === false)) {\n                              _context5.next = 10;\n                              break;\n                            }\n\n                            return _context5.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 6,\n                              resultMessage: \"Unable to parse critical certificate extension: \".concat(certificate.extensions[_j5].extnID)\n                            });\n\n                          case 10:\n                            if (certificate.extensions[_j5].extnID === \"2.5.29.15\") // KeyUsage\n                              {\n                                keyUsagePresent = true;\n                                view = new Uint8Array(certificate.extensions[_j5].parsedValue.valueBlock.valueHex);\n                                if ((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\n                                  mustBeCA = true;\n                                if ((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\n                                  cRLSign = true;\n                              }\n\n                            if (certificate.extensions[_j5].extnID === \"2.5.29.19\") // BasicConstraints\n                              {\n                                if (\"cA\" in certificate.extensions[_j5].parsedValue) {\n                                  if (certificate.extensions[_j5].parsedValue.cA === true) isCA = true;\n                                }\n                              }\n\n                          case 12:\n                            _j5++;\n                            _context5.next = 7;\n                            break;\n\n                          case 15:\n                            if (!(mustBeCA === true && isCA === false)) {\n                              _context5.next = 17;\n                              break;\n                            }\n\n                            return _context5.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 3,\n                              resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\n                            });\n\n                          case 17:\n                            if (!(keyUsagePresent === true && isCA === true && mustBeCA === false)) {\n                              _context5.next = 19;\n                              break;\n                            }\n\n                            return _context5.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 4,\n                              resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\n                            });\n\n                          case 19:\n                            if (!(isCA === true && keyUsagePresent === true && needToCheckCRL && cRLSign === false)) {\n                              _context5.next = 21;\n                              break;\n                            }\n\n                            return _context5.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 5,\n                              resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\n                            });\n\n                          case 21:\n                            if (!(isCA === false)) {\n                              _context5.next = 23;\n                              break;\n                            }\n\n                            return _context5.abrupt(\"return\", {\n                              result: false,\n                              resultCode: 7,\n                              resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\n                            });\n\n                          case 23:\n                            return _context5.abrupt(\"return\", {\n                              result: true,\n                              resultCode: 0,\n                              resultMessage: \"\"\n                            });\n\n                          case 24:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n                  return _checkForCA.apply(this, arguments);\n                };\n\n                checkForCA = function _checkForCA2(_x7) {\n                  return _checkForCA.apply(this, arguments);\n                };\n\n                _findOCSP = function _findOCSP3() {\n                  _findOCSP = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(certificate, issuerCertificate) {\n                    var hashAlgorithm, _i7, _result2;\n\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            //region Get hash algorithm from certificate\n                            hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\n\n                            if (!(\"name\" in hashAlgorithm === false)) {\n                              _context4.next = 3;\n                              break;\n                            }\n\n                            return _context4.abrupt(\"return\", 1);\n\n                          case 3:\n                            if (!(\"hash\" in hashAlgorithm === false)) {\n                              _context4.next = 5;\n                              break;\n                            }\n\n                            return _context4.abrupt(\"return\", 1);\n\n                          case 5:\n                            _i7 = 0;\n\n                          case 6:\n                            if (!(_i7 < _this.ocsps.length)) {\n                              _context4.next = 17;\n                              break;\n                            }\n\n                            _context4.next = 9;\n                            return _this.ocsps[_i7].getCertificateStatus(certificate, issuerCertificate);\n\n                          case 9:\n                            _result2 = _context4.sent;\n\n                            if (!_result2.isForCertificate) {\n                              _context4.next = 14;\n                              break;\n                            }\n\n                            if (!(_result2.status === 0)) {\n                              _context4.next = 13;\n                              break;\n                            }\n\n                            return _context4.abrupt(\"return\", 0);\n\n                          case 13:\n                            return _context4.abrupt(\"return\", 1);\n\n                          case 14:\n                            _i7++;\n                            _context4.next = 6;\n                            break;\n\n                          case 17:\n                            return _context4.abrupt(\"return\", 2);\n\n                          case 18:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n                  return _findOCSP.apply(this, arguments);\n                };\n\n                findOCSP = function _findOCSP2(_x5, _x6) {\n                  return _findOCSP.apply(this, arguments);\n                };\n\n                _findCRL = function _findCRL3() {\n                  _findCRL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(certificate) {\n                    var issuerCertificates, crls, crlsAndCertificates, _i6, _j4, _result;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            //region Initial variables\n                            issuerCertificates = [];\n                            crls = [];\n                            crlsAndCertificates = []; //endregion\n                            //region Find all possible CRL issuers\n\n                            issuerCertificates.push.apply(issuerCertificates, _toConsumableArray(localCerts.filter(function (element) {\n                              return certificate.issuer.isEqual(element.subject);\n                            })));\n\n                            if (!(issuerCertificates.length === 0)) {\n                              _context3.next = 6;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"return\", {\n                              status: 1,\n                              statusMessage: \"No certificate's issuers\"\n                            });\n\n                          case 6:\n                            //endregion\n                            //region Find all CRLs for certificate's issuer\n                            crls.push.apply(crls, _toConsumableArray(_this.crls.filter(function (element) {\n                              return element.issuer.isEqual(certificate.issuer);\n                            })));\n\n                            if (!(crls.length === 0)) {\n                              _context3.next = 9;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"return\", {\n                              status: 2,\n                              statusMessage: \"No CRLs for specific certificate issuer\"\n                            });\n\n                          case 9:\n                            _i6 = 0;\n\n                          case 10:\n                            if (!(_i6 < crls.length)) {\n                              _context3.next = 32;\n                              break;\n                            }\n\n                            if (!(crls[_i6].nextUpdate.value < _this.checkDate)) {\n                              _context3.next = 13;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"continue\", 29);\n\n                          case 13:\n                            _j4 = 0;\n\n                          case 14:\n                            if (!(_j4 < issuerCertificates.length)) {\n                              _context3.next = 29;\n                              break;\n                            }\n\n                            _context3.prev = 15;\n                            _context3.next = 18;\n                            return crls[_i6].verify({\n                              issuerCertificate: issuerCertificates[_j4]\n                            });\n\n                          case 18:\n                            _result = _context3.sent;\n\n                            if (!_result) {\n                              _context3.next = 22;\n                              break;\n                            }\n\n                            crlsAndCertificates.push({\n                              crl: crls[_i6],\n                              certificate: issuerCertificates[_j4]\n                            });\n                            return _context3.abrupt(\"break\", 29);\n\n                          case 22:\n                            _context3.next = 26;\n                            break;\n\n                          case 24:\n                            _context3.prev = 24;\n                            _context3.t0 = _context3[\"catch\"](15);\n\n                          case 26:\n                            _j4++;\n                            _context3.next = 14;\n                            break;\n\n                          case 29:\n                            _i6++;\n                            _context3.next = 10;\n                            break;\n\n                          case 32:\n                            if (!crlsAndCertificates.length) {\n                              _context3.next = 34;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"return\", {\n                              status: 0,\n                              statusMessage: \"\",\n                              result: crlsAndCertificates\n                            });\n\n                          case 34:\n                            return _context3.abrupt(\"return\", {\n                              status: 3,\n                              statusMessage: \"No valid CRLs found\"\n                            });\n\n                          case 35:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, null, [[15, 24]]);\n                  }));\n                  return _findCRL.apply(this, arguments);\n                };\n\n                findCRL = function _findCRL2(_x4) {\n                  return _findCRL.apply(this, arguments);\n                };\n\n                _buildPath = function _buildPath3() {\n                  _buildPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(certificate) {\n                    var result, checkUnique, findIssuerResult, _i5, buildPathResult, _j3, copy;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            checkUnique = function _checkUnique(array) {\n                              var unique = true;\n\n                              for (var _i4 = 0; _i4 < array.length; _i4++) {\n                                for (var _j2 = 0; _j2 < array.length; _j2++) {\n                                  if (_j2 === _i4) continue;\n\n                                  if (array[_i4] === array[_j2]) {\n                                    unique = false;\n                                    break;\n                                  }\n                                }\n\n                                if (!unique) break;\n                              }\n\n                              return unique;\n                            };\n\n                            result = []; //region Aux function checking array for unique elements\n\n                            _context2.next = 4;\n                            return _this.findIssuer(certificate, _this);\n\n                          case 4:\n                            findIssuerResult = _context2.sent;\n\n                            if (!(findIssuerResult.length === 0)) {\n                              _context2.next = 7;\n                              break;\n                            }\n\n                            throw new Error(\"No valid certificate paths found\");\n\n                          case 7:\n                            _i5 = 0;\n\n                          case 8:\n                            if (!(_i5 < findIssuerResult.length)) {\n                              _context2.next = 19;\n                              break;\n                            }\n\n                            if (!isEqualBuffer(findIssuerResult[_i5].tbs, certificate.tbs)) {\n                              _context2.next = 12;\n                              break;\n                            }\n\n                            result.push([findIssuerResult[_i5]]);\n                            return _context2.abrupt(\"continue\", 16);\n\n                          case 12:\n                            _context2.next = 14;\n                            return buildPath(findIssuerResult[_i5]);\n\n                          case 14:\n                            buildPathResult = _context2.sent;\n\n                            for (_j3 = 0; _j3 < buildPathResult.length; _j3++) {\n                              copy = buildPathResult[_j3].slice();\n                              copy.splice(0, 0, findIssuerResult[_i5]);\n                              if (checkUnique(copy)) result.push(copy);else result.push(buildPathResult[_j3]);\n                            }\n\n                          case 16:\n                            _i5++;\n                            _context2.next = 8;\n                            break;\n\n                          case 19:\n                            return _context2.abrupt(\"return\", result);\n\n                          case 20:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                  return _buildPath.apply(this, arguments);\n                };\n\n                buildPath = function _buildPath2(_x3) {\n                  return _buildPath.apply(this, arguments);\n                };\n\n                passedWhenNotRevValues = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : false;\n                //region Initial variables\n                localCerts = [];\n                _this = this; //endregion\n                //region Building certificate path\n\n                //endregion\n                //region Do main work\n                //region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\n                localCerts.push.apply(localCerts, _toConsumableArray(_this.trustedCerts));\n                localCerts.push.apply(localCerts, _toConsumableArray(_this.certs)); //endregion\n                //region Check all certificates for been unique\n\n                i = 0;\n\n              case 16:\n                if (!(i < localCerts.length)) {\n                  _context7.next = 31;\n                  break;\n                }\n\n                j = 0;\n\n              case 18:\n                if (!(j < localCerts.length)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                if (!(i === j)) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                return _context7.abrupt(\"continue\", 25);\n\n              case 21:\n                if (!isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs)) {\n                  _context7.next = 25;\n                  break;\n                }\n\n                localCerts.splice(j, 1);\n                i = 0;\n                return _context7.abrupt(\"break\", 28);\n\n              case 25:\n                j++;\n                _context7.next = 18;\n                break;\n\n              case 28:\n                i++;\n                _context7.next = 16;\n                break;\n\n              case 31:\n                certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\n                //endregion\n                //region Build path for \"end entity\" certificate\n\n                _context7.next = 34;\n                return buildPath(localCerts[localCerts.length - 1]);\n\n              case 34:\n                result = _context7.sent;\n\n                if (!(result.length === 0)) {\n                  _context7.next = 37;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  result: false,\n                  resultCode: 60,\n                  resultMessage: \"Unable to find certificate path\"\n                });\n\n              case 37:\n                _i = 0;\n\n              case 38:\n                if (!(_i < result.length)) {\n                  _context7.next = 60;\n                  break;\n                }\n\n                found = false;\n                _j = 0;\n\n              case 41:\n                if (!(_j < result[_i].length)) {\n                  _context7.next = 56;\n                  break;\n                }\n\n                certificate = result[_i][_j];\n                k = 0;\n\n              case 44:\n                if (!(k < _this.trustedCerts.length)) {\n                  _context7.next = 51;\n                  break;\n                }\n\n                if (!isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs)) {\n                  _context7.next = 48;\n                  break;\n                }\n\n                found = true;\n                return _context7.abrupt(\"break\", 51);\n\n              case 48:\n                k++;\n                _context7.next = 44;\n                break;\n\n              case 51:\n                if (!found) {\n                  _context7.next = 53;\n                  break;\n                }\n\n                return _context7.abrupt(\"break\", 56);\n\n              case 53:\n                _j++;\n                _context7.next = 41;\n                break;\n\n              case 56:\n                if (!found) {\n                  result.splice(_i, 1);\n                  _i = 0;\n                }\n\n              case 57:\n                _i++;\n                _context7.next = 38;\n                break;\n\n              case 60:\n                if (!(result.length === 0)) {\n                  _context7.next = 62;\n                  break;\n                }\n\n                throw {\n                  result: false,\n                  resultCode: 97,\n                  resultMessage: \"No valid certificate paths found\"\n                };\n\n              case 62:\n                //endregion\n                //region Find shortest certificate path (for the moment it is the only criteria)\n                shortestLength = result[0].length;\n                shortestIndex = 0;\n\n                for (_i2 = 0; _i2 < result.length; _i2++) {\n                  if (result[_i2].length < shortestLength) {\n                    shortestLength = result[_i2].length;\n                    shortestIndex = _i2;\n                  }\n                } //endregion\n                //region Create certificate path for basic check\n\n\n                for (_i3 = 0; _i3 < result[shortestIndex].length; _i3++) {\n                  certificatePath.push(result[shortestIndex][_i3]);\n                } //endregion\n                //region Perform basic checking for all certificates in the path\n\n\n                _context7.next = 68;\n                return basicCheck(certificatePath, _this.checkDate);\n\n              case 68:\n                result = _context7.sent;\n\n                if (!(result.result === false)) {\n                  _context7.next = 71;\n                  break;\n                }\n\n                throw result;\n\n              case 71:\n                return _context7.abrupt(\"return\", certificatePath);\n\n              case 72:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function sort() {\n        return _sort.apply(this, arguments);\n      }\n\n      return sort;\n    }() //**********************************************************************************\n\n    /**\r\n     * Major verification function for certificate chain.\r\n     * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var parameters,\n            compareDNSName,\n            compareRFC822Name,\n            compareUniformResourceIdentifier,\n            compareIPAddress,\n            compareDirectoryName,\n            _passedWhenNotRevValues,\n            initialPolicySet,\n            initialExplicitPolicy,\n            initialPolicyMappingInhibit,\n            initialInhibitPolicy,\n            initialPermittedSubtreesSet,\n            initialExcludedSubtreesSet,\n            initialRequiredNameForms,\n            explicitPolicyIndicator,\n            policyMappingInhibitIndicator,\n            inhibitAnyPolicyIndicator,\n            pendingConstraints,\n            explicitPolicyPending,\n            policyMappingInhibitPending,\n            inhibitAnyPolicyPending,\n            permittedSubtrees,\n            excludedSubtrees,\n            requiredNameForms,\n            pathDepth,\n            allPolicies,\n            policiesAndCerts,\n            anyPolicyArray,\n            ii,\n            policyMappings,\n            certPolicies,\n            explicitPolicyStart,\n            i,\n            j,\n            s,\n            k,\n            policyIndex,\n            _s,\n            certArray,\n            _policyIndex,\n            searchAnyPolicy,\n            _i15,\n            _k,\n            issuerDomainPolicyIndex,\n            subjectDomainPolicyIndex,\n            n,\n            _j7,\n            m,\n            _i16,\n            _j8,\n            authConstrPolicies,\n            _i17,\n            found,\n            _j9,\n            anyPolicyFound,\n            _k2,\n            userConstrPolicies,\n            _i18,\n            _j10,\n            policyResult,\n            _i19,\n            subjectAltNames,\n            certPermittedSubtrees,\n            certExcludedSubtrees,\n            _j11,\n            formFound,\n            _j12,\n            _k3,\n            constrGroups,\n            _j13,\n            p,\n            groupPermitted,\n            valueExists,\n            group,\n            _j14,\n            _k4,\n            _k5,\n            _k6,\n            _k7,\n            _k8,\n            excluded,\n            _j15,\n            _k9,\n            _k10,\n            _k11,\n            _k12,\n            _k13,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                compareDirectoryName = function _compareDirectoryName(name, constraint) {\n                  /// <summary>Compare two directoryName values</summary>\n                  /// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\n                  /// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\n                  /// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\n                  /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n                  //region Initial check\n                  if (name.typesAndValues.length === 0 || constraint.typesAndValues.length === 0) return true;\n                  if (name.typesAndValues.length < constraint.typesAndValues.length) return false; //endregion\n                  //region Initial variables\n\n                  var result = true;\n                  var nameStart = 0; //endregion\n\n                  for (var i = 0; i < constraint.typesAndValues.length; i++) {\n                    var localResult = false;\n\n                    for (var j = nameStart; j < name.typesAndValues.length; j++) {\n                      localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\n                      if (name.typesAndValues[j].type === constraint.typesAndValues[i].type) result = result && localResult;\n\n                      if (localResult === true) {\n                        if (nameStart === 0 || nameStart === j) {\n                          nameStart = j + 1;\n                          break;\n                        } else // Structure of \"name\" must be the same with \"constraint\"\n                          return false;\n                      }\n                    }\n\n                    if (localResult === false) return false;\n                  }\n\n                  return nameStart === 0 ? false : result;\n                };\n\n                compareIPAddress = function _compareIPAddress(name, constraint) {\n                  /// <summary>Compare two iPAddress values</summary>\n                  /// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\n                  /// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\n                  /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n                  //region Common variables\n                  var nameView = new Uint8Array(name.valueBlock.valueHex);\n                  var constraintView = new Uint8Array(constraint.valueBlock.valueHex); //endregion\n                  //region Work with IPv4 addresses\n\n                  if (nameView.length === 4 && constraintView.length === 8) {\n                    for (var i = 0; i < 4; i++) {\n                      if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4]) return false;\n                    }\n\n                    return true;\n                  } //endregion\n                  //region Work with IPv6 addresses\n\n\n                  if (nameView.length === 16 && constraintView.length === 32) {\n                    for (var _i14 = 0; _i14 < 16; _i14++) {\n                      if ((nameView[_i14] ^ constraintView[_i14]) & constraintView[_i14 + 16]) return false;\n                    }\n\n                    return true;\n                  } //endregion\n\n\n                  return false;\n                };\n\n                compareUniformResourceIdentifier = function _compareUniformResour(name, constraint) {\n                  /// <summary>Compare two uniformResourceIdentifier values</summary>\n                  /// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\n                  /// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\n                  /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n                  //region Make a \"string preparation\" for both name and constrain\n                  var namePrepared = stringPrep(name);\n                  var constraintPrepared = stringPrep(constraint); //endregion\n                  //region Find out a major URI part to compare with\n\n                  var ns = namePrepared.split(\"/\");\n                  var cs = constraintPrepared.split(\"/\");\n                  if (cs.length > 1) // Malformed constraint\n                    return false;\n\n                  if (ns.length > 1) // Full URI string\n                    {\n                      for (var i = 0; i < ns.length; i++) {\n                        if (ns[i].length > 0 && ns[i].charAt(ns[i].length - 1) !== \":\") {\n                          var nsPort = ns[i].split(\":\");\n                          namePrepared = nsPort[0];\n                          break;\n                        }\n                      }\n                    } //endregion\n\n\n                  var result = compareDNSName(namePrepared, constraintPrepared);\n\n                  if (result) {\n                    //region Make a \"splitted\" versions of \"constraint\" and \"name\"\n                    var nameSplitted = namePrepared.split(\".\");\n                    var constraintSplitted = constraintPrepared.split(\".\"); //endregion\n\n                    if (constraintSplitted[0].length === 0) return true;\n                    return nameSplitted.length === constraintSplitted.length;\n                  }\n\n                  return false;\n                };\n\n                compareRFC822Name = function _compareRFC822Name(name, constraint) {\n                  /// <summary>Compare two rfc822Name values</summary>\n                  /// <param name=\"name\" type=\"String\">E-mail address from name</param>\n                  /// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\n                  /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n                  //region Make a \"string preparation\" for both name and constrain\n                  var namePrepared = stringPrep(name);\n                  var constraintPrepared = stringPrep(constraint); //endregion\n                  //region Make a \"splitted\" versions of \"constraint\" and \"name\"\n\n                  var nameSplitted = namePrepared.split(\"@\");\n                  var constraintSplitted = constraintPrepared.split(\"@\"); //endregion\n                  //region Splitted array length checking\n\n                  if (nameSplitted.length === 0 || constraintSplitted.length === 0 || nameSplitted.length < constraintSplitted.length) return false; //endregion\n\n                  if (constraintSplitted.length === 1) {\n                    var _result4 = compareDNSName(nameSplitted[1], constraintSplitted[0]);\n\n                    if (_result4) {\n                      //region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\n                      var ns = nameSplitted[1].split(\".\");\n                      var cs = constraintSplitted[0].split(\".\"); //endregion\n\n                      if (cs[0].length === 0) return true;\n                      return ns.length === cs.length;\n                    }\n\n                    return false;\n                  }\n\n                  return namePrepared.localeCompare(constraintPrepared) === 0;\n                };\n\n                compareDNSName = function _compareDNSName(name, constraint) {\n                  /// <summary>Compare two dNSName values</summary>\n                  /// <param name=\"name\" type=\"String\">DNS from name</param>\n                  /// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\n                  /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\n                  //region Make a \"string preparation\" for both name and constrain\n                  var namePrepared = stringPrep(name);\n                  var constraintPrepared = stringPrep(constraint); //endregion\n                  //region Make a \"splitted\" versions of \"constraint\" and \"name\"\n\n                  var nameSplitted = namePrepared.split(\".\");\n                  var constraintSplitted = constraintPrepared.split(\".\"); //endregion\n                  //region Length calculation and additional check\n\n                  var nameLen = nameSplitted.length;\n                  var constrLen = constraintSplitted.length;\n                  if (nameLen === 0 || constrLen === 0 || nameLen < constrLen) return false; //endregion\n                  //region Check that no part of \"name\" has zero length\n\n                  for (var i = 0; i < nameLen; i++) {\n                    if (nameSplitted[i].length === 0) return false;\n                  } //endregion\n                  //region Check that no part of \"constraint\" has zero length\n\n\n                  for (var _i12 = 0; _i12 < constrLen; _i12++) {\n                    if (constraintSplitted[_i12].length === 0) {\n                      if (_i12 === 0) {\n                        if (constrLen === 1) return false;\n                        continue;\n                      }\n\n                      return false;\n                    }\n                  } //endregion\n                  //region Check that \"name\" has a tail as \"constraint\"\n\n\n                  for (var _i13 = 0; _i13 < constrLen; _i13++) {\n                    if (constraintSplitted[constrLen - 1 - _i13].length === 0) continue;\n                    if (nameSplitted[nameLen - 1 - _i13].localeCompare(constraintSplitted[constrLen - 1 - _i13]) !== 0) return false;\n                  } //endregion\n\n\n                  return true;\n                };\n\n                parameters = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                _context8.prev = 6;\n\n                if (!(this.certs.length === 0)) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                throw \"Empty certificate array\";\n\n              case 9:\n                //endregion\n                //region Get input variables\n                _passedWhenNotRevValues = false;\n                if (\"passedWhenNotRevValues\" in parameters) _passedWhenNotRevValues = parameters.passedWhenNotRevValues;\n                initialPolicySet = [];\n                initialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\n\n                initialExplicitPolicy = false;\n                initialPolicyMappingInhibit = false;\n                initialInhibitPolicy = false;\n                initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\n\n                initialExcludedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\n\n                initialRequiredNameForms = []; // Array of \"simpl.x509.GeneralSubtree\"\n\n                if (\"initialPolicySet\" in parameters) initialPolicySet = parameters.initialPolicySet;\n                if (\"initialExplicitPolicy\" in parameters) initialExplicitPolicy = parameters.initialExplicitPolicy;\n                if (\"initialPolicyMappingInhibit\" in parameters) initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\n                if (\"initialInhibitPolicy\" in parameters) initialInhibitPolicy = parameters.initialInhibitPolicy;\n                if (\"initialPermittedSubtreesSet\" in parameters) initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\n                if (\"initialExcludedSubtreesSet\" in parameters) initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\n                if (\"initialRequiredNameForms\" in parameters) initialRequiredNameForms = parameters.initialRequiredNameForms;\n                explicitPolicyIndicator = initialExplicitPolicy;\n                policyMappingInhibitIndicator = initialPolicyMappingInhibit;\n                inhibitAnyPolicyIndicator = initialInhibitPolicy;\n                pendingConstraints = new Array(3);\n                pendingConstraints[0] = false; // For \"explicitPolicyPending\"\n\n                pendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\n\n                pendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\n\n                explicitPolicyPending = 0;\n                policyMappingInhibitPending = 0;\n                inhibitAnyPolicyPending = 0;\n                permittedSubtrees = initialPermittedSubtreesSet;\n                excludedSubtrees = initialExcludedSubtreesSet;\n                requiredNameForms = initialRequiredNameForms;\n                pathDepth = 1; //endregion\n                //region Sorting certificates in the chain array\n\n                _context8.next = 42;\n                return this.sort(_passedWhenNotRevValues);\n\n              case 42:\n                this.certs = _context8.sent;\n                //endregion\n                //region Work with policies\n                //region Support variables\n                allPolicies = []; // Array of all policies (string values)\n\n                allPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\n\n                policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\n\n                anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\n\n                for (ii = 0; ii < this.certs.length - 1; ii++) {\n                  anyPolicyArray[ii] = true;\n                }\n\n                policiesAndCerts.push(anyPolicyArray);\n                policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\n\n                certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\n\n                explicitPolicyStart = explicitPolicyIndicator ? this.certs.length - 1 : -1; //endregion\n                //region Gather all neccessary information from certificate chain\n\n                i = this.certs.length - 2;\n\n              case 53:\n                if (!(i >= 0)) {\n                  _context8.next = 108;\n                  break;\n                }\n\n                if (!(\"extensions\" in this.certs[i])) {\n                  _context8.next = 105;\n                  break;\n                }\n\n                j = 0;\n\n              case 56:\n                if (!(j < this.certs[i].extensions.length)) {\n                  _context8.next = 91;\n                  break;\n                }\n\n                if (!(this.certs[i].extensions[j].extnID === \"2.5.29.32\")) {\n                  _context8.next = 82;\n                  break;\n                }\n\n                certPolicies[i] = this.certs[i].extensions[j].parsedValue; //region Remove entry from \"anyPolicies\" for the certificate\n\n                s = 0;\n\n              case 60:\n                if (!(s < allPolicies.length)) {\n                  _context8.next = 67;\n                  break;\n                }\n\n                if (!(allPolicies[s] === \"2.5.29.32.0\")) {\n                  _context8.next = 64;\n                  break;\n                }\n\n                delete policiesAndCerts[s][i];\n                return _context8.abrupt(\"break\", 67);\n\n              case 64:\n                s++;\n                _context8.next = 60;\n                break;\n\n              case 67:\n                k = 0;\n\n              case 68:\n                if (!(k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length)) {\n                  _context8.next = 82;\n                  break;\n                }\n\n                policyIndex = -1; //region Try to find extension in \"allPolicies\" array\n\n                _s = 0;\n\n              case 71:\n                if (!(_s < allPolicies.length)) {\n                  _context8.next = 78;\n                  break;\n                }\n\n                if (!(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[_s])) {\n                  _context8.next = 75;\n                  break;\n                }\n\n                policyIndex = _s;\n                return _context8.abrupt(\"break\", 78);\n\n              case 75:\n                _s++;\n                _context8.next = 71;\n                break;\n\n              case 78:\n                //endregion\n                if (policyIndex === -1) {\n                  allPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\n                  certArray = new Array(this.certs.length - 1);\n                  certArray[i] = true;\n                  policiesAndCerts.push(certArray);\n                } else policiesAndCerts[policyIndex][i] = true;\n\n              case 79:\n                k++;\n                _context8.next = 68;\n                break;\n\n              case 82:\n                if (!(this.certs[i].extensions[j].extnID === \"2.5.29.33\")) {\n                  _context8.next = 86;\n                  break;\n                }\n\n                if (!policyMappingInhibitIndicator) {\n                  _context8.next = 85;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  result: false,\n                  resultCode: 98,\n                  resultMessage: \"Policy mapping prohibited\"\n                });\n\n              case 85:\n                policyMappings[i] = this.certs[i].extensions[j].parsedValue;\n\n              case 86:\n                //endregion\n                //region PolicyConstraints\n                if (this.certs[i].extensions[j].extnID === \"2.5.29.36\") {\n                  if (explicitPolicyIndicator === false) {\n                    //region requireExplicitPolicy\n                    if (this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0) {\n                      explicitPolicyIndicator = true;\n                      explicitPolicyStart = i;\n                    } else {\n                      if (pendingConstraints[0] === false) {\n                        pendingConstraints[0] = true;\n                        explicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\n                      } else explicitPolicyPending = explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\n                    } //endregion\n                    //region inhibitPolicyMapping\n\n\n                    if (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0) policyMappingInhibitIndicator = true;else {\n                      if (pendingConstraints[1] === false) {\n                        pendingConstraints[1] = true;\n                        policyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\n                      } else policyMappingInhibitPending = policyMappingInhibitPending > this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1 ? this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1 : policyMappingInhibitPending;\n                    } //endregion\n                  }\n                } //endregion\n                //region InhibitAnyPolicy\n\n\n                if (this.certs[i].extensions[j].extnID === \"2.5.29.54\") {\n                  if (inhibitAnyPolicyIndicator === false) {\n                    if (this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0) inhibitAnyPolicyIndicator = true;else {\n                      if (pendingConstraints[2] === false) {\n                        pendingConstraints[2] = true;\n                        inhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\n                      } else inhibitAnyPolicyPending = inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\n                    }\n                  }\n                } //endregion\n\n\n              case 88:\n                j++;\n                _context8.next = 56;\n                break;\n\n              case 91:\n                if (!(inhibitAnyPolicyIndicator === true)) {\n                  _context8.next = 102;\n                  break;\n                }\n\n                _policyIndex = -1; //region Find \"anyPolicy\" index\n\n                searchAnyPolicy = 0;\n\n              case 94:\n                if (!(searchAnyPolicy < allPolicies.length)) {\n                  _context8.next = 101;\n                  break;\n                }\n\n                if (!(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")) {\n                  _context8.next = 98;\n                  break;\n                }\n\n                _policyIndex = searchAnyPolicy;\n                return _context8.abrupt(\"break\", 101);\n\n              case 98:\n                searchAnyPolicy++;\n                _context8.next = 94;\n                break;\n\n              case 101:\n                //endregion\n                if (_policyIndex !== -1) delete policiesAndCerts[0][i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\n\n              case 102:\n                //endregion\n                //region Process with \"pending constraints\"\n                if (explicitPolicyIndicator === false) {\n                  if (pendingConstraints[0] === true) {\n                    explicitPolicyPending--;\n\n                    if (explicitPolicyPending === 0) {\n                      explicitPolicyIndicator = true;\n                      explicitPolicyStart = i;\n                      pendingConstraints[0] = false;\n                    }\n                  }\n                }\n\n                if (policyMappingInhibitIndicator === false) {\n                  if (pendingConstraints[1] === true) {\n                    policyMappingInhibitPending--;\n\n                    if (policyMappingInhibitPending === 0) {\n                      policyMappingInhibitIndicator = true;\n                      pendingConstraints[1] = false;\n                    }\n                  }\n                }\n\n                if (inhibitAnyPolicyIndicator === false) {\n                  if (pendingConstraints[2] === true) {\n                    inhibitAnyPolicyPending--;\n\n                    if (inhibitAnyPolicyPending === 0) {\n                      inhibitAnyPolicyIndicator = true;\n                      pendingConstraints[2] = false;\n                    }\n                  }\n                } //endregion\n\n\n              case 105:\n                i--, pathDepth++;\n                _context8.next = 53;\n                break;\n\n              case 108:\n                _i15 = 0;\n\n              case 109:\n                if (!(_i15 < this.certs.length - 1)) {\n                  _context8.next = 126;\n                  break;\n                }\n\n                if (!(_i15 < this.certs.length - 2 && typeof policyMappings[_i15 + 1] !== \"undefined\")) {\n                  _context8.next = 123;\n                  break;\n                }\n\n                _k = 0;\n\n              case 112:\n                if (!(_k < policyMappings[_i15 + 1].mappings.length)) {\n                  _context8.next = 123;\n                  break;\n                }\n\n                if (!(policyMappings[_i15 + 1].mappings[_k].issuerDomainPolicy === \"2.5.29.32.0\" || policyMappings[_i15 + 1].mappings[_k].subjectDomainPolicy === \"2.5.29.32.0\")) {\n                  _context8.next = 115;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  result: false,\n                  resultCode: 99,\n                  resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\n                });\n\n              case 115:\n                //endregion\n                //region Initial variables\n                issuerDomainPolicyIndex = -1;\n                subjectDomainPolicyIndex = -1; //endregion\n                //region Search for index of policies indedes\n\n                for (n = 0; n < allPolicies.length; n++) {\n                  if (allPolicies[n] === policyMappings[_i15 + 1].mappings[_k].issuerDomainPolicy) issuerDomainPolicyIndex = n;\n                  if (allPolicies[n] === policyMappings[_i15 + 1].mappings[_k].subjectDomainPolicy) subjectDomainPolicyIndex = n;\n                } //endregion\n                //region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\n\n\n                if (typeof policiesAndCerts[issuerDomainPolicyIndex][_i15] !== \"undefined\") delete policiesAndCerts[issuerDomainPolicyIndex][_i15]; //endregion\n                //region Check all policies for the certificate\n\n                for (_j7 = 0; _j7 < certPolicies[_i15].certificatePolicies.length; _j7++) {\n                  if (policyMappings[_i15 + 1].mappings[_k].subjectDomainPolicy === certPolicies[_i15].certificatePolicies[_j7].policyIdentifier) {\n                    //region Set mapped policy for current certificate\n                    if (issuerDomainPolicyIndex !== -1 && subjectDomainPolicyIndex !== -1) {\n                      for (m = 0; m <= _i15; m++) {\n                        if (typeof policiesAndCerts[subjectDomainPolicyIndex][m] !== \"undefined\") {\n                          policiesAndCerts[issuerDomainPolicyIndex][m] = true;\n                          delete policiesAndCerts[subjectDomainPolicyIndex][m];\n                        }\n                      }\n                    } //endregion\n\n                  }\n                } //endregion\n\n\n              case 120:\n                _k++;\n                _context8.next = 112;\n                break;\n\n              case 123:\n                _i15++;\n                _context8.next = 109;\n                break;\n\n              case 126:\n                //endregion\n                //region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\n                for (_i16 = 0; _i16 < allPolicies.length; _i16++) {\n                  if (allPolicies[_i16] === \"2.5.29.32.0\") {\n                    for (_j8 = 0; _j8 < explicitPolicyStart; _j8++) {\n                      delete policiesAndCerts[_i16][_j8];\n                    }\n                  }\n                } //endregion\n                //region Create \"set of authorities-constrained policies\"\n\n\n                authConstrPolicies = [];\n                _i17 = 0;\n\n              case 129:\n                if (!(_i17 < policiesAndCerts.length)) {\n                  _context8.next = 157;\n                  break;\n                }\n\n                found = true;\n                _j9 = 0;\n\n              case 132:\n                if (!(_j9 < this.certs.length - 1)) {\n                  _context8.next = 153;\n                  break;\n                }\n\n                anyPolicyFound = false;\n\n                if (!(_j9 < explicitPolicyStart && allPolicies[_i17] === \"2.5.29.32.0\" && allPolicies.length > 1)) {\n                  _context8.next = 137;\n                  break;\n                }\n\n                found = false;\n                return _context8.abrupt(\"break\", 153);\n\n              case 137:\n                if (!(typeof policiesAndCerts[_i17][_j9] === \"undefined\")) {\n                  _context8.next = 150;\n                  break;\n                }\n\n                if (!(_j9 >= explicitPolicyStart)) {\n                  _context8.next = 147;\n                  break;\n                }\n\n                _k2 = 0;\n\n              case 140:\n                if (!(_k2 < allPolicies.length)) {\n                  _context8.next = 147;\n                  break;\n                }\n\n                if (!(allPolicies[_k2] === \"2.5.29.32.0\")) {\n                  _context8.next = 144;\n                  break;\n                }\n\n                if (policiesAndCerts[_k2][_j9] === true) anyPolicyFound = true;\n                return _context8.abrupt(\"break\", 147);\n\n              case 144:\n                _k2++;\n                _context8.next = 140;\n                break;\n\n              case 147:\n                if (anyPolicyFound) {\n                  _context8.next = 150;\n                  break;\n                }\n\n                found = false;\n                return _context8.abrupt(\"break\", 153);\n\n              case 150:\n                _j9++;\n                _context8.next = 132;\n                break;\n\n              case 153:\n                if (found === true) authConstrPolicies.push(allPolicies[_i17]);\n\n              case 154:\n                _i17++;\n                _context8.next = 129;\n                break;\n\n              case 157:\n                //endregion\n                //region Create \"set of user-constrained policies\"\n                userConstrPolicies = [];\n\n                if (!(initialPolicySet.length === 1 && initialPolicySet[0] === \"2.5.29.32.0\" && explicitPolicyIndicator === false)) {\n                  _context8.next = 162;\n                  break;\n                }\n\n                userConstrPolicies = initialPolicySet;\n                _context8.next = 179;\n                break;\n\n              case 162:\n                if (!(authConstrPolicies.length === 1 && authConstrPolicies[0] === \"2.5.29.32.0\")) {\n                  _context8.next = 166;\n                  break;\n                }\n\n                userConstrPolicies = initialPolicySet;\n                _context8.next = 179;\n                break;\n\n              case 166:\n                _i18 = 0;\n\n              case 167:\n                if (!(_i18 < authConstrPolicies.length)) {\n                  _context8.next = 179;\n                  break;\n                }\n\n                _j10 = 0;\n\n              case 169:\n                if (!(_j10 < initialPolicySet.length)) {\n                  _context8.next = 176;\n                  break;\n                }\n\n                if (!(initialPolicySet[_j10] === authConstrPolicies[_i18] || initialPolicySet[_j10] === \"2.5.29.32.0\")) {\n                  _context8.next = 173;\n                  break;\n                }\n\n                userConstrPolicies.push(authConstrPolicies[_i18]);\n                return _context8.abrupt(\"break\", 176);\n\n              case 173:\n                _j10++;\n                _context8.next = 169;\n                break;\n\n              case 176:\n                _i18++;\n                _context8.next = 167;\n                break;\n\n              case 179:\n                //endregion\n                //region Combine output object\n                policyResult = {\n                  result: userConstrPolicies.length > 0,\n                  resultCode: 0,\n                  resultMessage: userConstrPolicies.length > 0 ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\n                  authConstrPolicies: authConstrPolicies,\n                  userConstrPolicies: userConstrPolicies,\n                  explicitPolicyIndicator: explicitPolicyIndicator,\n                  policyMappings: policyMappings,\n                  certificatePath: this.certs\n                };\n\n                if (!(userConstrPolicies.length === 0)) {\n                  _context8.next = 182;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", policyResult);\n\n              case 182:\n                if (!(policyResult.result === false)) {\n                  _context8.next = 184;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", policyResult);\n\n              case 184:\n                //endregion\n                //region Check all certificates, excluding \"trust anchor\"\n                pathDepth = 1;\n                _i19 = this.certs.length - 2;\n\n              case 186:\n                if (!(_i19 >= 0)) {\n                  _context8.next = 308;\n                  break;\n                }\n\n                //region Support variables\n                subjectAltNames = [];\n                certPermittedSubtrees = [];\n                certExcludedSubtrees = []; //endregion\n\n                if (\"extensions\" in this.certs[_i19]) {\n                  for (_j11 = 0; _j11 < this.certs[_i19].extensions.length; _j11++) {\n                    //region NameConstraints\n                    if (this.certs[_i19].extensions[_j11].extnID === \"2.5.29.30\") {\n                      if (\"permittedSubtrees\" in this.certs[_i19].extensions[_j11].parsedValue) certPermittedSubtrees = certPermittedSubtrees.concat(this.certs[_i19].extensions[_j11].parsedValue.permittedSubtrees);\n                      if (\"excludedSubtrees\" in this.certs[_i19].extensions[_j11].parsedValue) certExcludedSubtrees = certExcludedSubtrees.concat(this.certs[_i19].extensions[_j11].parsedValue.excludedSubtrees);\n                    } //endregion\n                    //region SubjectAltName\n\n\n                    if (this.certs[_i19].extensions[_j11].extnID === \"2.5.29.17\") subjectAltNames = subjectAltNames.concat(this.certs[_i19].extensions[_j11].parsedValue.altNames); //endregion\n                  }\n                } //region Checking for \"required name forms\"\n\n\n                formFound = requiredNameForms.length <= 0;\n                _j12 = 0;\n\n              case 193:\n                if (!(_j12 < requiredNameForms.length)) {\n                  _context8.next = 214;\n                  break;\n                }\n\n                _context8.t0 = requiredNameForms[_j12].base.type;\n                _context8.next = _context8.t0 === 4 ? 197 : 211;\n                break;\n\n              case 197:\n                if (!(requiredNameForms[_j12].base.value.typesAndValues.length !== this.certs[_i19].subject.typesAndValues.length)) {\n                  _context8.next = 199;\n                  break;\n                }\n\n                return _context8.abrupt(\"continue\", 211);\n\n              case 199:\n                formFound = true;\n                _k3 = 0;\n\n              case 201:\n                if (!(_k3 < this.certs[_i19].subject.typesAndValues.length)) {\n                  _context8.next = 208;\n                  break;\n                }\n\n                if (!(this.certs[_i19].subject.typesAndValues[_k3].type !== requiredNameForms[_j12].base.value.typesAndValues[_k3].type)) {\n                  _context8.next = 205;\n                  break;\n                }\n\n                formFound = false;\n                return _context8.abrupt(\"break\", 208);\n\n              case 205:\n                _k3++;\n                _context8.next = 201;\n                break;\n\n              case 208:\n                if (!(formFound === true)) {\n                  _context8.next = 210;\n                  break;\n                }\n\n                return _context8.abrupt(\"break\", 211);\n\n              case 210:\n                return _context8.abrupt(\"break\", 211);\n\n              case 211:\n                _j12++;\n                _context8.next = 193;\n                break;\n\n              case 214:\n                if (!(formFound === false)) {\n                  _context8.next = 219;\n                  break;\n                }\n\n                policyResult.result = false;\n                policyResult.resultCode = 21;\n                policyResult.resultMessage = \"No neccessary name form found\";\n                throw policyResult;\n\n              case 219:\n                //endregion\n                //region Checking for \"permited sub-trees\"\n                //region Make groups for all types of constraints\n                constrGroups = []; // Array of array for groupped constraints\n\n                constrGroups[0] = []; // rfc822Name\n\n                constrGroups[1] = []; // dNSName\n\n                constrGroups[2] = []; // directoryName\n\n                constrGroups[3] = []; // uniformResourceIdentifier\n\n                constrGroups[4] = []; // iPAddress\n\n                _j13 = 0;\n\n              case 226:\n                if (!(_j13 < permittedSubtrees.length)) {\n                  _context8.next = 243;\n                  break;\n                }\n\n                _context8.t1 = permittedSubtrees[_j13].base.type;\n                _context8.next = _context8.t1 === 1 ? 230 : _context8.t1 === 2 ? 232 : _context8.t1 === 4 ? 234 : _context8.t1 === 6 ? 236 : _context8.t1 === 7 ? 238 : 240;\n                break;\n\n              case 230:\n                constrGroups[0].push(permittedSubtrees[_j13]);\n                return _context8.abrupt(\"break\", 240);\n\n              case 232:\n                constrGroups[1].push(permittedSubtrees[_j13]);\n                return _context8.abrupt(\"break\", 240);\n\n              case 234:\n                constrGroups[2].push(permittedSubtrees[_j13]);\n                return _context8.abrupt(\"break\", 240);\n\n              case 236:\n                constrGroups[3].push(permittedSubtrees[_j13]);\n                return _context8.abrupt(\"break\", 240);\n\n              case 238:\n                constrGroups[4].push(permittedSubtrees[_j13]);\n                return _context8.abrupt(\"break\", 240);\n\n              case 240:\n                _j13++;\n                _context8.next = 226;\n                break;\n\n              case 243:\n                p = 0;\n\n              case 244:\n                if (!(p < 5)) {\n                  _context8.next = 277;\n                  break;\n                }\n\n                groupPermitted = false;\n                valueExists = false;\n                group = constrGroups[p];\n                _j14 = 0;\n\n              case 249:\n                if (!(_j14 < group.length)) {\n                  _context8.next = 269;\n                  break;\n                }\n\n                _context8.t2 = p;\n                _context8.next = _context8.t2 === 0 ? 253 : _context8.t2 === 1 ? 255 : _context8.t2 === 2 ? 257 : _context8.t2 === 3 ? 260 : _context8.t2 === 4 ? 262 : 264;\n                break;\n\n              case 253:\n                if (subjectAltNames.length > 0) {\n                  for (_k4 = 0; _k4 < subjectAltNames.length; _k4++) {\n                    if (subjectAltNames[_k4].type === 1) // rfc822Name\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[_k4].value, group[_j14].base.value);\n                      }\n                  }\n                } else // Try to find out \"emailAddress\" inside \"subject\"\n                  {\n                    for (_k5 = 0; _k5 < this.certs[_i19].subject.typesAndValues.length; _k5++) {\n                      if (this.certs[_i19].subject.typesAndValues[_k5].type === \"1.2.840.113549.1.9.1\" || // PKCS#9 e-mail address\n                      this.certs[_i19].subject.typesAndValues[_k5].type === \"0.9.2342.19200300.100.1.3\") // RFC1274 \"rfc822Mailbox\" e-mail address\n                        {\n                          valueExists = true;\n                          groupPermitted = groupPermitted || compareRFC822Name(this.certs[_i19].subject.typesAndValues[_k5].value.valueBlock.value, group[_j14].base.value);\n                        }\n                    }\n                  }\n\n                return _context8.abrupt(\"break\", 264);\n\n              case 255:\n                if (subjectAltNames.length > 0) {\n                  for (_k6 = 0; _k6 < subjectAltNames.length; _k6++) {\n                    if (subjectAltNames[_k6].type === 2) // dNSName\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareDNSName(subjectAltNames[_k6].value, group[_j14].base.value);\n                      }\n                  }\n                }\n\n                return _context8.abrupt(\"break\", 264);\n\n              case 257:\n                valueExists = true;\n                groupPermitted = compareDirectoryName(this.certs[_i19].subject, group[_j14].base.value);\n                return _context8.abrupt(\"break\", 264);\n\n              case 260:\n                if (subjectAltNames.length > 0) {\n                  for (_k7 = 0; _k7 < subjectAltNames.length; _k7++) {\n                    if (subjectAltNames[_k7].type === 6) // uniformResourceIdentifier\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[_k7].value, group[_j14].base.value);\n                      }\n                  }\n                }\n\n                return _context8.abrupt(\"break\", 264);\n\n              case 262:\n                if (subjectAltNames.length > 0) {\n                  for (_k8 = 0; _k8 < subjectAltNames.length; _k8++) {\n                    if (subjectAltNames[_k8].type === 7) // iPAddress\n                      {\n                        valueExists = true;\n                        groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[_k8].value, group[_j14].base.value);\n                      }\n                  }\n                }\n\n                return _context8.abrupt(\"break\", 264);\n\n              case 264:\n                if (!groupPermitted) {\n                  _context8.next = 266;\n                  break;\n                }\n\n                return _context8.abrupt(\"break\", 269);\n\n              case 266:\n                _j14++;\n                _context8.next = 249;\n                break;\n\n              case 269:\n                if (!(groupPermitted === false && group.length > 0 && valueExists)) {\n                  _context8.next = 274;\n                  break;\n                }\n\n                policyResult.result = false;\n                policyResult.resultCode = 41;\n                policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\n                throw policyResult;\n\n              case 274:\n                p++;\n                _context8.next = 244;\n                break;\n\n              case 277:\n                //endregion\n                //endregion\n                //region Checking for \"excluded sub-trees\"\n                excluded = false;\n                _j15 = 0;\n\n              case 279:\n                if (!(_j15 < excludedSubtrees.length)) {\n                  _context8.next = 298;\n                  break;\n                }\n\n                _context8.t3 = excludedSubtrees[_j15].base.type;\n                _context8.next = _context8.t3 === 1 ? 283 : _context8.t3 === 2 ? 285 : _context8.t3 === 4 ? 287 : _context8.t3 === 6 ? 289 : _context8.t3 === 7 ? 291 : 293;\n                break;\n\n              case 283:\n                if (subjectAltNames.length >= 0) {\n                  for (_k9 = 0; _k9 < subjectAltNames.length; _k9++) {\n                    if (subjectAltNames[_k9].type === 1) // rfc822Name\n                      excluded = excluded || compareRFC822Name(subjectAltNames[_k9].value, excludedSubtrees[_j15].base.value);\n                  }\n                } else // Try to find out \"emailAddress\" inside \"subject\"\n                  {\n                    for (_k10 = 0; _k10 < this.certs[_i19].subject.typesAndValues.length; _k10++) {\n                      if (this.certs[_i19].subject.typesAndValues[_k10].type === \"1.2.840.113549.1.9.1\" || // PKCS#9 e-mail address\n                      this.certs[_i19].subject.typesAndValues[_k10].type === \"0.9.2342.19200300.100.1.3\") // RFC1274 \"rfc822Mailbox\" e-mail address\n                        excluded = excluded || compareRFC822Name(this.certs[_i19].subject.typesAndValues[_k10].value.valueBlock.value, excludedSubtrees[_j15].base.value);\n                    }\n                  }\n\n                return _context8.abrupt(\"break\", 293);\n\n              case 285:\n                if (subjectAltNames.length > 0) {\n                  for (_k11 = 0; _k11 < subjectAltNames.length; _k11++) {\n                    if (subjectAltNames[_k11].type === 2) // dNSName\n                      excluded = excluded || compareDNSName(subjectAltNames[_k11].value, excludedSubtrees[_j15].base.value);\n                  }\n                }\n\n                return _context8.abrupt(\"break\", 293);\n\n              case 287:\n                excluded = excluded || compareDirectoryName(this.certs[_i19].subject, excludedSubtrees[_j15].base.value);\n                return _context8.abrupt(\"break\", 293);\n\n              case 289:\n                if (subjectAltNames.length > 0) {\n                  for (_k12 = 0; _k12 < subjectAltNames.length; _k12++) {\n                    if (subjectAltNames[_k12].type === 6) // uniformResourceIdentifier\n                      excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[_k12].value, excludedSubtrees[_j15].base.value);\n                  }\n                }\n\n                return _context8.abrupt(\"break\", 293);\n\n              case 291:\n                if (subjectAltNames.length > 0) {\n                  for (_k13 = 0; _k13 < subjectAltNames.length; _k13++) {\n                    if (subjectAltNames[_k13].type === 7) // iPAddress\n                      excluded = excluded || compareIPAddress(subjectAltNames[_k13].value, excludedSubtrees[_j15].base.value);\n                  }\n                }\n\n                return _context8.abrupt(\"break\", 293);\n\n              case 293:\n                if (!excluded) {\n                  _context8.next = 295;\n                  break;\n                }\n\n                return _context8.abrupt(\"break\", 298);\n\n              case 295:\n                _j15++;\n                _context8.next = 279;\n                break;\n\n              case 298:\n                if (!(excluded === true)) {\n                  _context8.next = 303;\n                  break;\n                }\n\n                policyResult.result = false;\n                policyResult.resultCode = 42;\n                policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\n                throw policyResult;\n\n              case 303:\n                //endregion\n                //region Append \"cert_..._subtrees\" to \"..._subtrees\"\n                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\n                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees); //endregion\n\n              case 305:\n                _i19--, pathDepth++;\n                _context8.next = 186;\n                break;\n\n              case 308:\n                return _context8.abrupt(\"return\", policyResult);\n\n              case 311:\n                _context8.prev = 311;\n                _context8.t4 = _context8[\"catch\"](6);\n\n                if (!(_context8.t4 instanceof Object)) {\n                  _context8.next = 318;\n                  break;\n                }\n\n                if (!(\"resultMessage\" in _context8.t4)) {\n                  _context8.next = 316;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", _context8.t4);\n\n              case 316:\n                if (!(\"message\" in _context8.t4)) {\n                  _context8.next = 318;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  result: false,\n                  resultCode: -1,\n                  resultMessage: _context8.t4.message\n                });\n\n              case 318:\n                return _context8.abrupt(\"return\", {\n                  result: false,\n                  resultCode: -1,\n                  resultMessage: _context8.t4\n                });\n\n              case 319:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[6, 311]]);\n      }));\n\n      function verify() {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }() //**********************************************************************************\n\n  }], [{\n    key: \"defaultFindOrigin\",\n    value: function defaultFindOrigin(certificate, validationEngine) {\n      //region Firstly encode TBS for certificate\n      if (certificate.tbs.byteLength === 0) certificate.tbs = certificate.encodeTBS(); //endregion\n      //region Search in Intermediate Certificates\n\n      var _iterator6 = _createForOfIteratorHelper(validationEngine.certs),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var localCert = _step6.value;\n          //region Firstly encode TBS for certificate\n          if (localCert.tbs.byteLength === 0) localCert.tbs = localCert.encodeTBS(); //endregion\n\n          if (isEqualBuffer(certificate.tbs, localCert.tbs)) return \"Intermediate Certificates\";\n        } //endregion\n        //region Search in Trusted Certificates\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(validationEngine.trustedCerts),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var trustedCert = _step7.value;\n          //region Firstly encode TBS for certificate\n          if (trustedCert.tbs.byteLength === 0) trustedCert.tbs = trustedCert.encodeTBS(); //endregion\n\n          if (isEqualBuffer(certificate.tbs, trustedCert.tbs)) return \"Trusted Certificates\";\n        } //endregion\n\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return \"Unknown\";\n    }\n  }]);\n\n  return CertificateChainValidationEngine;\n}(); //**************************************************************************************\n\n\nexport { CertificateChainValidationEngine as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertificateChainValidationEngine.js"],"names":["getParametersValue","isEqualBuffer","getAlgorithmByOID","stringPrep","CertificateChainValidationEngine","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","certificate","validationEngine","checkCertificate","possibleIssuer","keyIdentifier","extensionFound","extensions","extension","extnID","parsedValue","valueBlock","valueHex","result","push","authorityCertSerialNumberEqual","authorityCertSerialNumber","serialNumber","isEqual","authorityCertIssuer","subject","issuer","verify","verificationResult","trustedCert","intermediateCert","i","length","splice","memberName","Date","defaultFindOrigin","defaultFindIssuer","Error","buildPath","findCRL","findOCSP","checkForCA","basicCheck","path","notBefore","value","notAfter","resultCode","resultMessage","_this","ocspResult","crlResult","status","statusMessage","j","isCertificateRevoked","crl","isCertificateCA","passedWhenNotRevValues","issuerCertificate","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","view","Uint8Array","cA","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","issuerCertificates","crlsAndCertificates","localCerts","filter","element","nextUpdate","checkUnique","array","unique","findIssuerResult","tbs","buildPathResult","copy","slice","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","compareRFC822Name","compareUniformResourceIdentifier","compareIPAddress","compareDirectoryName","name","constraint","typesAndValues","nameStart","localResult","type","nameView","constraintView","namePrepared","constraintPrepared","ns","split","cs","charAt","nsPort","nameSplitted","constraintSplitted","localeCompare","nameLen","constrLen","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","sort","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","Object","message","byteLength","encodeTBS","localCert"],"mappings":"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","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic defaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn CertificateChainValidationEngine.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort(passedWhenNotRevValues = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for certificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 2,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 3,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"The certificate is either not yet valid or expired\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 1); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult = 2;\r\n\t\t\t\t\tlet crlResult = {\r\n\t\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\t\tstatusMessage: \"\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\r\n\t\t\t\t\t\tif(crlResult.status === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(passedWhenNotRevValues === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check we do have links to revocation values inside issuer's certificate\r\n\t\t\t\t\tif((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst issuerCertificate = path[i + 1];\r\n\t\t\t\t\t\tlet extensionFound = false;\r\n\r\n\t\t\t\t\t\tif(\"extensions\" in issuerCertificate)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const extension of issuerCertificate.extensions)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tswitch(extension.extnID)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\t\t\t\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\t\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\t//region Auxiliary functions for name constraints checking\r\n\t\tfunction compareDNSName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Length calculation and additional check\r\n\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\r\n\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Splitted array length checking\r\n\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t{\r\n\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find out a major URI part to compare with\r\n\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\r\n\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\r\n\t\t\tif(result)\r\n\t\t\t{\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareIPAddress(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Common variables\r\n\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv4 addresses\r\n\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv6 addresses\r\n\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Initial check\r\n\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result = true;\r\n\t\t\tlet nameStart = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet localResult = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(localResult === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet passedWhenNotRevValues = false;\r\n\r\n\t\t\tif(\"passedWhenNotRevValues\" in parameters)\r\n\t\t\t\tpassedWhenNotRevValues = parameters.passedWhenNotRevValues;\r\n\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort(passedWhenNotRevValues);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _constants = require(\"./constants\");\n/**\n * The state of a specific catalog to be used by {@link ServiceState}.\n *\n * @typedef {Record<string, boolean>} CatalogState\n * @property {boolean} CatalogState.collecting - If the catalog is collecting.\n * @property {boolean} CatalogState.ready - If the catalog is ready.\n */\n\n/**\n * @class\n * @classdesc - Manages the state of the service catalogs for a webex instance.\n */\n\n\nvar ServiceState = /*#__PURE__*/function () {\n  /**\n   * Generate a new {@link ServiceState}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceState\n   */\n  function ServiceState() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, ServiceState); // Iterate over the possible catalog names and generate their states.\n\n    _constants.SERVICE_CATALOGS.forEach(function (catalog) {\n      _this[catalog] = ServiceState.generateCatalogState();\n    });\n  }\n  /**\n   * Set a catalog to be collecting or not.\n   *\n   * @public\n   * @memberof ServiceState\n   * @param {string} catalog - Catalog to target.\n   * @param {boolean} collecting - If the target is collecting or not.\n   * @returns {undefined}\n   */\n\n\n  (0, _createClass2.default)(ServiceState, [{\n    key: \"setCollecting\",\n    value: function setCollecting(catalog, collecting) {\n      // Validate that the catalog state exists.\n      if (this[catalog]) {\n        // Set the 'collecting' status of the catalog state.\n        this[catalog].collecting = collecting;\n      }\n    }\n    /**\n     * Set a catalog to be ready or not.\n     *\n     * @public\n     * @memberof ServiceState\n     * @param {string} catalog - Catalog to target.\n     * @param {boolean} ready - If the target is ready or not.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"setReady\",\n    value: function setReady(catalog, ready) {\n      // Validate that the catalog state exists.\n      if (this[catalog]) {\n        // Set the 'ready' status of the catalog state.\n        this[catalog].ready = ready;\n      }\n    }\n    /**\n     * Generate a {@link CatalogState}.\n     *\n     * @public\n     * @static\n     * @memberof ServiceState\n     * @returns {CatalogState} - The generated {@link CatalogState}.\n     */\n\n  }], [{\n    key: \"generateCatalogState\",\n    value: function generateCatalogState() {\n      return {\n        collecting: false,\n        ready: false\n      };\n    }\n  }]);\n  return ServiceState;\n}();\n\nexports.default = ServiceState;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;IACqBA,Y;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACE,0BAAc;AAAA;;AAAA,uDACZ;;AACAC,gCAAiBC,OAAjBD,CACE,UAACE,OAAD,EAAa;AACXC,WAAI,CAACD,OAAD,CAAJ,GAAgBH,YAAY,CAACK,oBAAbL,EAAhB;AAFJ;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,uBAAcG,OAAd,EAAuBG,UAAvB,EAAmC;AACjC;AACA,UAAI,KAAKH,OAAL,CAAJ,EAAmB;AACjB;AACA,aAAKA,OAAL,EAAcG,UAAd,GAA2BA,UAA3B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAASH,OAAT,EAAkBI,KAAlB,EAAyB;AACvB;AACA,UAAI,KAAKJ,OAAL,CAAJ,EAAmB;AACjB;AACA,aAAKA,OAAL,EAAcI,KAAd,GAAsBA,KAAtB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gCAA8B;AAC5B,aAAO;AACLD,kBAAU,EAAE,KADP;AAELC,aAAK,EAAE;AAFF,OAAP;AAID","names":["ServiceState","SERVICE_CATALOGS","forEach","catalog","_this","generateCatalogState","collecting","ready"],"sources":["service-state.js"],"sourcesContent":["import {SERVICE_CATALOGS} from './constants';\n\n/**\n * The state of a specific catalog to be used by {@link ServiceState}.\n *\n * @typedef {Record<string, boolean>} CatalogState\n * @property {boolean} CatalogState.collecting - If the catalog is collecting.\n * @property {boolean} CatalogState.ready - If the catalog is ready.\n */\n\n/**\n * @class\n * @classdesc - Manages the state of the service catalogs for a webex instance.\n */\nexport default class ServiceState {\n  /**\n   * Generate a new {@link ServiceState}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceState\n   */\n  constructor() {\n    // Iterate over the possible catalog names and generate their states.\n    SERVICE_CATALOGS.forEach(\n      (catalog) => {\n        this[catalog] = ServiceState.generateCatalogState();\n      }\n    );\n  }\n\n  /**\n   * Set a catalog to be collecting or not.\n   *\n   * @public\n   * @memberof ServiceState\n   * @param {string} catalog - Catalog to target.\n   * @param {boolean} collecting - If the target is collecting or not.\n   * @returns {undefined}\n   */\n  setCollecting(catalog, collecting) {\n    // Validate that the catalog state exists.\n    if (this[catalog]) {\n      // Set the 'collecting' status of the catalog state.\n      this[catalog].collecting = collecting;\n    }\n  }\n\n  /**\n   * Set a catalog to be ready or not.\n   *\n   * @public\n   * @memberof ServiceState\n   * @param {string} catalog - Catalog to target.\n   * @param {boolean} ready - If the target is ready or not.\n   * @returns {undefined}\n   */\n  setReady(catalog, ready) {\n    // Validate that the catalog state exists.\n    if (this[catalog]) {\n      // Set the 'ready' status of the catalog state.\n      this[catalog].ready = ready;\n    }\n  }\n\n  /**\n   * Generate a {@link CatalogState}.\n   *\n   * @public\n   * @static\n   * @memberof ServiceState\n   * @returns {CatalogState} - The generated {@link CatalogState}.\n   */\n  static generateCatalogState() {\n    return {\n      collecting: false,\n      ready: false\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
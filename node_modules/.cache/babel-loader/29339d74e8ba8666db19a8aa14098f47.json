{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar RecipientKeyIdentifier = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RecipientKeyIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function RecipientKeyIdentifier() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RecipientKeyIdentifier);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {OctetString}\r\n     * @desc subjectKeyIdentifier\r\n     */\n    this.subjectKeyIdentifier = getParametersValue(parameters, \"subjectKeyIdentifier\", RecipientKeyIdentifier.defaultValues(\"subjectKeyIdentifier\"));\n    if (\"date\" in parameters)\n      /**\r\n       * @type {GeneralizedTime}\r\n       * @desc date\r\n       */\n      this.date = getParametersValue(parameters, \"date\", RecipientKeyIdentifier.defaultValues(\"date\"));\n    if (\"other\" in parameters)\n      /**\r\n       * @type {OtherKeyAttribute}\r\n       * @desc other\r\n       */\n      this.other = getParametersValue(parameters, \"other\", RecipientKeyIdentifier.defaultValues(\"other\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(RecipientKeyIdentifier, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"subjectKeyIdentifier\", \"date\", \"other\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RecipientKeyIdentifier.schema({\n        names: {\n          subjectKeyIdentifier: \"subjectKeyIdentifier\",\n          date: \"date\",\n          other: {\n            names: {\n              blockName: \"other\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RecipientKeyIdentifier\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\n      if (\"date\" in asn1.result) this.date = asn1.result.date;\n      if (\"other\" in asn1.result) this.other = new OtherKeyAttribute({\n        schema: asn1.result.other\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.subjectKeyIdentifier);\n      if (\"date\" in this) outputArray.push(this.date);\n      if (\"other\" in this) outputArray.push(this.other.toSchema()); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\n      };\n      if (\"date\" in this) _object.date = this.date;\n      if (\"other\" in this) _object.other = this.other.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"subjectKeyIdentifier\":\n          return new asn1js.OctetString();\n\n        case \"date\":\n          return new asn1js.GeneralizedTime();\n\n        case \"other\":\n          return new OtherKeyAttribute();\n\n        default:\n          throw new Error(\"Invalid member name for RecipientKeyIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"subjectKeyIdentifier\":\n          return memberValue.isEqual(RecipientKeyIdentifier.defaultValues(\"subjectKeyIdentifier\"));\n\n        case \"date\":\n          // noinspection OverlyComplexBooleanExpressionJS\n          return memberValue.year === 0 && memberValue.month === 0 && memberValue.day === 0 && memberValue.hour === 0 && memberValue.minute === 0 && memberValue.second === 0 && memberValue.millisecond === 0;\n\n        case \"other\":\n          return memberValue.keyAttrId === \"\" && \"keyAttr\" in memberValue === false;\n\n        default:\n          throw new Error(\"Invalid member name for RecipientKeyIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * RecipientKeyIdentifier ::= SEQUENCE {\r\n     *    subjectKeyIdentifier SubjectKeyIdentifier,\r\n     *    date GeneralizedTime OPTIONAL,\r\n     *    other OtherKeyAttribute OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [type]\r\n       * @property {string} [setName]\r\n       * @property {string} [values]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.OctetString({\n          name: names.subjectKeyIdentifier || \"\"\n        }), new asn1js.GeneralizedTime({\n          optional: true,\n          name: names.date || \"\"\n        }), OtherKeyAttribute.schema(names.other || {})]\n      });\n    }\n  }]);\n\n  return RecipientKeyIdentifier;\n}(); //**************************************************************************************\n\n\nexport { RecipientKeyIdentifier as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RecipientKeyIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","OtherKeyAttribute","RecipientKeyIdentifier","parameters","subjectKeyIdentifier","defaultValues","date","other","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","outputArray","push","toSchema","Sequence","value","_object","toJSON","memberName","OctetString","GeneralizedTime","memberValue","isEqual","year","month","day","hour","minute","second","millisecond","keyAttrId","name","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc subjectKeyIdentifier\r\n\t\t */\r\n\t\tthis.subjectKeyIdentifier = getParametersValue(parameters, \"subjectKeyIdentifier\", RecipientKeyIdentifier.defaultValues(\"subjectKeyIdentifier\"));\r\n\r\n\t\tif(\"date\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralizedTime}\r\n\t\t\t * @desc date\r\n\t\t\t */\r\n\t\t\tthis.date = getParametersValue(parameters, \"date\", RecipientKeyIdentifier.defaultValues(\"date\"));\r\n\r\n\t\tif(\"other\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OtherKeyAttribute}\r\n\t\t\t * @desc other\r\n\t\t\t */\r\n\t\t\tthis.other = getParametersValue(parameters, \"other\", RecipientKeyIdentifier.defaultValues(\"other\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"subjectKeyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn new asn1js.GeneralizedTime();\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn new OtherKeyAttribute();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"subjectKeyIdentifier\":\r\n\t\t\t\treturn (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(\"subjectKeyIdentifier\")));\r\n\t\t\tcase \"date\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((memberValue.year === 0) &&\r\n\t\t\t\t(memberValue.month === 0) &&\r\n\t\t\t\t(memberValue.day === 0) &&\r\n\t\t\t\t(memberValue.hour === 0) &&\r\n\t\t\t\t(memberValue.minute === 0) &&\r\n\t\t\t\t(memberValue.second === 0) &&\r\n\t\t\t\t(memberValue.millisecond === 0));\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn ((memberValue.keyAttrId === \"\") && ((\"keyAttr\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientKeyIdentifier ::= SEQUENCE {\r\n\t *    subjectKeyIdentifier SubjectKeyIdentifier,\r\n\t *    date GeneralizedTime OPTIONAL,\r\n\t *    other OtherKeyAttribute OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.subjectKeyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.date || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tOtherKeyAttribute.schema(names.other || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"subjectKeyIdentifier\",\r\n\t\t\t\"date\",\r\n\t\t\t\"other\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsubjectKeyIdentifier: \"subjectKeyIdentifier\",\r\n\t\t\t\t\tdate: \"date\",\r\n\t\t\t\t\tother: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"other\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\r\n\r\n\t\tif(\"date\" in asn1.result)\r\n\t\t\tthis.date = asn1.result.date;\r\n\r\n\t\tif(\"other\" in asn1.result)\r\n\t\t\tthis.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.subjectKeyIdentifier);\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\toutputArray.push(this.date);\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\toutputArray.push(this.other.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsubjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\t_object.date = this.date;\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\t_object.other = this.other.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
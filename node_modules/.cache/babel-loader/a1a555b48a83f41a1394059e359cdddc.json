{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"../logs/logger-proxy\"));\n\nvar _loggerConfig = _interopRequireDefault(require(\"../logs/logger-config\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Events\n * plugin-meetings local\n * Used to emit events internally between modules specific to an object\n */\n\n\nvar EventsScope = /*#__PURE__*/function (_ChildEmitter) {\n  (0, _inherits2.default)(EventsScope, _ChildEmitter);\n\n  var _super = _createSuper(EventsScope);\n\n  function EventsScope() {\n    (0, _classCallCheck2.default)(this, EventsScope);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(EventsScope, [{\n    key: \"emit\",\n    value:\n    /**\n     * Emits and logs an event\n     * @param {*} scope\n     * @param {*} eventName\n     * @param {*} args\n     * @returns {Function}\n     */\n    function emit(scope, eventName, args) {\n      _loggerProxy.default.logger.debug(\"\".concat(_util.default.getScopeLog(scope), \"event#\").concat(eventName).concat(_loggerConfig.default.verboseEvents ? \" -- \".concat(_util.default.getEventLog(args)) : ''));\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(EventsScope.prototype), \"emit\", this).call(this, eventName, args);\n    }\n  }]);\n  return EventsScope;\n}(_events.default);\n\nexports.default = EventsScope;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;IACqBA,W;;;;;;;;;;;;;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACE,kBAAKC,KAAL,EAAYC,SAAZ,EAAuBC,IAAvB,EAA6B;AAC3BC,2BAAYC,MAAZD,CAAmBE,KAAnBF,WAA4BG,cAAWC,WAAXD,CAAuBN,KAAvBM,CAA5B,mBAAkEL,SAAlE,SAA8EO,sBAAaC,aAAbD,iBAAoCF,cAAWI,WAAXJ,CAAuBJ,IAAvBI,CAApC,IAAqE,EAAnJ;;AAEA,+GAAkBL,SAAlB,EAA6BC,IAA7B;AACD;;;EAZsCS,e","names":["EventsScope","scope","eventName","args","LoggerProxy","logger","debug","EventsUtil","getScopeLog","LoggerConfig","verboseEvents","getEventLog","ChildEmitter"],"sources":["events-scope.js"],"sourcesContent":["import ChildEmitter from 'events';\n\nimport LoggerProxy from '../logs/logger-proxy';\nimport LoggerConfig from '../logs/logger-config';\n\nimport EventsUtil from './util';\n\n/**\n * Events\n * plugin-meetings local\n * Used to emit events internally between modules specific to an object\n */\nexport default class EventsScope extends ChildEmitter {\n  /**\n   * Emits and logs an event\n   * @param {*} scope\n   * @param {*} eventName\n   * @param {*} args\n   * @returns {Function}\n   */\n  emit(scope, eventName, args) {\n    LoggerProxy.logger.debug(`${EventsUtil.getScopeLog(scope)}event#${eventName}${LoggerConfig.verboseEvents ? ` -- ${EventsUtil.getEventLog(args)}` : ''}`);\n\n    return super.emit(eventName, args);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3447\r\n */\n\nvar OtherPrimeInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OtherPrimeInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function OtherPrimeInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OtherPrimeInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Integer}\r\n     * @desc prime\r\n     */\n    this.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc exponent\r\n     */\n\n    this.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc coefficient\r\n     */\n\n    this.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(OtherPrimeInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"prime\", \"exponent\", \"coefficient\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({\n        names: {\n          prime: \"prime\",\n          exponent: \"exponent\",\n          coefficient: \"coefficient\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.prime = asn1.result.prime.convertFromDER();\n      this.exponent = asn1.result.exponent.convertFromDER();\n      this.coefficient = asn1.result.coefficient.convertFromDER(); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.prime.convertToDER(), this.exponent.convertToDER(), this.coefficient.convertToDER()]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        r: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\n        d: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\n        t: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\n      };\n    } //**********************************************************************************\n\n    /**\r\n     * Convert JSON value into current object\r\n     * @param {Object} json\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (\"r\" in json) this.prime = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.r, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"r\\\"\");\n      if (\"d\" in json) this.exponent = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.d, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"d\\\"\");\n      if (\"t\" in json) this.coefficient = new asn1js.Integer({\n        valueHex: stringToArrayBuffer(fromBase64(json.t, true))\n      });else throw new Error(\"Absent mandatory parameter \\\"t\\\"\");\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"prime\":\n          return new asn1js.Integer();\n\n        case \"exponent\":\n          return new asn1js.Integer();\n\n        case \"coefficient\":\n          return new asn1js.Integer();\n\n        default:\n          throw new Error(\"Invalid member name for OtherPrimeInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * OtherPrimeInfo ::= Sequence {\r\n     *    prime             Integer,  -- ri\r\n     *    exponent          Integer,  -- di\r\n     *    coefficient       Integer   -- ti\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} prime\r\n       * @property {string} exponent\r\n       * @property {string} coefficient\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.prime || \"\"\n        }), new asn1js.Integer({\n          name: names.exponent || \"\"\n        }), new asn1js.Integer({\n          name: names.coefficient || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return OtherPrimeInfo;\n}(); //**************************************************************************************\n\n\nexport { OtherPrimeInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OtherPrimeInfo.js"],"names":["asn1js","getParametersValue","toBase64","arrayBufferToString","stringToArrayBuffer","fromBase64","clearProps","OtherPrimeInfo","parameters","prime","defaultValues","exponent","coefficient","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","verified","Error","result","convertFromDER","Sequence","value","convertToDER","r","valueBlock","valueHex","d","t","Integer","memberName","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherPrimeInfo ::= Sequence {\r\n\t *    prime             Integer,  -- ri\r\n\t *    exponent          Integer,  -- di\r\n\t *    coefficient       Integer   -- ti\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"prime\",\r\n\t\t\t\"exponent\",\r\n\t\t\t\"coefficient\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
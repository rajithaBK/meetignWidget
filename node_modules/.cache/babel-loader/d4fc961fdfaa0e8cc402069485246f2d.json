{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar AuthorityKeyIdentifier = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AuthorityKeyIdentifier class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function AuthorityKeyIdentifier() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AuthorityKeyIdentifier);\n\n    //region Internal properties of the object\n    if (\"keyIdentifier\" in parameters)\n      /**\r\n       * @type {OctetString}\r\n       * @desc keyIdentifier\r\n       */\n      this.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\n    if (\"authorityCertIssuer\" in parameters)\n      /**\r\n       * @type {Array.<GeneralName>}\r\n       * @desc authorityCertIssuer\r\n       */\n      this.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\n    if (\"authorityCertSerialNumber\" in parameters)\n      /**\r\n       * @type {Integer}\r\n       * @desc authorityCertIssuer\r\n       */\n      this.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(AuthorityKeyIdentifier, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"keyIdentifier\", \"authorityCertIssuer\", \"authorityCertSerialNumber\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n        names: {\n          keyIdentifier: \"keyIdentifier\",\n          authorityCertIssuer: \"authorityCertIssuer\",\n          authorityCertSerialNumber: \"authorityCertSerialNumber\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"keyIdentifier\" in asn1.result) this.keyIdentifier = new asn1js.OctetString({\n        valueHex: asn1.result.keyIdentifier.valueBlock.valueHex\n      });\n      if (\"authorityCertIssuer\" in asn1.result) this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, function (element) {\n        return new GeneralName({\n          schema: element\n        });\n      });\n      if (\"authorityCertSerialNumber\" in asn1.result) this.authorityCertSerialNumber = new asn1js.Integer({\n        valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n\n      if (\"keyIdentifier\" in this) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          valueHex: this.keyIdentifier.valueBlock.valueHex\n        }));\n      }\n\n      if (\"authorityCertIssuer\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: Array.from(this.authorityCertIssuer, function (element) {\n            return element.toSchema();\n          })\n        }));\n      }\n\n      if (\"authorityCertSerialNumber\" in this) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          valueHex: this.authorityCertSerialNumber.valueBlock.valueHex\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {};\n      if (\"keyIdentifier\" in this) object.keyIdentifier = this.keyIdentifier.toJSON();\n      if (\"authorityCertIssuer\" in this) object.authorityCertIssuer = Array.from(this.authorityCertIssuer, function (element) {\n        return element.toJSON();\n      });\n      if (\"authorityCertSerialNumber\" in this) object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"keyIdentifier\":\n          return new asn1js.OctetString();\n\n        case \"authorityCertIssuer\":\n          return [];\n\n        case \"authorityCertSerialNumber\":\n          return new asn1js.Integer();\n\n        default:\n          throw new Error(\"Invalid member name for AuthorityKeyIdentifier class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n     *\r\n     * AuthorityKeyIdentifier ::= SEQUENCE {\r\n     *    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n     *    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n     *    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n     *\r\n     * KeyIdentifier ::= OCTET STRING\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [keyIdentifier]\r\n       * @property {string} [authorityCertIssuer]\r\n       * @property {string} [authorityCertSerialNumber]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Primitive({\n          name: names.keyIdentifier || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          }\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.authorityCertIssuer || \"\",\n            value: GeneralName.schema()\n          })]\n        }), new asn1js.Primitive({\n          name: names.authorityCertSerialNumber || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          }\n        })]\n      });\n    }\n  }]);\n\n  return AuthorityKeyIdentifier;\n}(); //**************************************************************************************\n\n\nexport { AuthorityKeyIdentifier as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AuthorityKeyIdentifier.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","AuthorityKeyIdentifier","parameters","keyIdentifier","defaultValues","authorityCertIssuer","authorityCertSerialNumber","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","OctetString","valueHex","valueBlock","Array","from","element","Integer","outputArray","push","Primitive","idBlock","tagClass","tagNumber","Constructed","value","toSchema","Sequence","object","toJSON","memberName","name","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AuthorityKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthorityKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"keyIdentifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc keyIdentifier\r\n\t\t\t */\r\n\t\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"authorityCertIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"authorityCertIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"authorityCertSerialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n\t *\r\n\t * AuthorityKeyIdentifier ::= SEQUENCE {\r\n\t *    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n\t *    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n\t *    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n\t *\r\n\t * KeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [authorityCertIssuer]\r\n\t\t * @property {string} [authorityCertSerialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.keyIdentifier || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.authorityCertIssuer || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.authorityCertSerialNumber || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyIdentifier\",\r\n\t\t\t\"authorityCertIssuer\",\r\n\t\t\t\"authorityCertSerialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthorityKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tauthorityCertIssuer: \"authorityCertIssuer\",\r\n\t\t\t\t\tauthorityCertSerialNumber: \"authorityCertSerialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"keyIdentifier\" in asn1.result)\r\n\t\t\tthis.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\r\n\r\n\t\tif(\"authorityCertIssuer\" in asn1.result)\r\n\t\t\tthis.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new GeneralName({ schema: element }));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in asn1.result)\r\n\t\t\tthis.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.keyIdentifier.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.authorityCertIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.authorityCertSerialNumber.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t\tobject.keyIdentifier = this.keyIdentifier.toJSON();\r\n\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t\tobject.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t\tobject.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Attribute from \"./Attribute.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar SignedAndUnsignedAttributes = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SignedAndUnsignedAttributes class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function SignedAndUnsignedAttributes() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SignedAndUnsignedAttributes);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc type\r\n     */\n    this.type = getParametersValue(parameters, \"type\", SignedAndUnsignedAttributes.defaultValues(\"type\"));\n    /**\r\n     * @type {Array}\r\n     * @desc attributes\r\n     */\n\n    this.attributes = getParametersValue(parameters, \"attributes\", SignedAndUnsignedAttributes.defaultValues(\"attributes\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc encodedValue Need to have it in order to successfully process with signature verification\r\n     */\n\n    this.encodedValue = getParametersValue(parameters, \"encodedValue\", SignedAndUnsignedAttributes.defaultValues(\"encodedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(SignedAndUnsignedAttributes, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"attributes\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({\n        names: {\n          tagNumber: this.type,\n          attributes: \"attributes\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SignedAndUnsignedAttributes\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.type = asn1.result.idBlock.tagNumber;\n      this.encodedValue = asn1.result.valueBeforeDecode; //region Change type from \"[0]\" to \"SET\" accordingly to standard\n\n      var encodedView = new Uint8Array(this.encodedValue);\n      encodedView[0] = 0x31; //endregion\n\n      if (\"attributes\" in asn1.result === false) {\n        if (this.type === 0) throw new Error(\"Wrong structure of SignedUnsignedAttributes\");else return; // Not so important in case of \"UnsignedAttributes\"\n      }\n\n      this.attributes = Array.from(asn1.result.attributes, function (element) {\n        return new Attribute({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      if (SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes)) throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\"); //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: this.type // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\n\n        },\n        value: Array.from(this.attributes, function (element) {\n          return element.toSchema();\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes)) throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n      return {\n        type: this.type,\n        attributes: Array.from(this.attributes, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"type\":\n          return -1;\n\n        case \"attributes\":\n          return [];\n\n        case \"encodedValue\":\n          return new ArrayBuffer(0);\n\n        default:\n          throw new Error(\"Invalid member name for SignedAndUnsignedAttributes class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"type\":\n          return memberValue === SignedAndUnsignedAttributes.defaultValues(\"type\");\n\n        case \"attributes\":\n          return memberValue.length === 0;\n\n        case \"encodedValue\":\n          return memberValue.byteLength === 0;\n\n        default:\n          throw new Error(\"Invalid member name for SignedAndUnsignedAttributes class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n     *\r\n     * UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {number} [tagNumber]\r\n       * @property {string} [attributes]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Constructed({\n        name: names.blockName || \"\",\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: names.tagNumber // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.attributes || \"\",\n          value: Attribute.schema()\n        })]\n      });\n    }\n  }]);\n\n  return SignedAndUnsignedAttributes;\n}(); //**************************************************************************************\n\n\nexport { SignedAndUnsignedAttributes as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SignedAndUnsignedAttributes.js"],"names":["asn1js","getParametersValue","clearProps","Attribute","SignedAndUnsignedAttributes","parameters","type","defaultValues","attributes","encodedValue","fromSchema","schema","asn1","compareSchema","names","tagNumber","verified","Error","result","idBlock","valueBeforeDecode","encodedView","Uint8Array","Array","from","element","compareWithDefault","Constructed","optional","tagClass","value","toSchema","toJSON","memberName","ArrayBuffer","memberValue","length","byteLength","name","blockName","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedAndUnsignedAttributes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedAndUnsignedAttributes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", SignedAndUnsignedAttributes.defaultValues(\"attributes\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc encodedValue Need to have it in order to successfully process with signature verification\r\n\t\t */\r\n\t\tthis.encodedValue = getParametersValue(parameters, \"encodedValue\", SignedAndUnsignedAttributes.defaultValues(\"encodedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\t *\r\n\t * UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {number} [tagNumber]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: names.tagNumber // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedAndUnsignedAttributes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttagNumber: this.type,\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedAndUnsignedAttributes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.idBlock.tagNumber;\r\n\t\tthis.encodedValue = asn1.result.valueBeforeDecode;\r\n\r\n\t\t//region Change type from \"[0]\" to \"SET\" accordingly to standard\r\n\t\tconst encodedView = new Uint8Array(this.encodedValue);\r\n\t\tencodedView[0] = 0x31;\r\n\t\t//endregion\r\n\r\n\t\tif((\"attributes\" in asn1.result) === false)\r\n\t\t{\r\n\t\t\tif(this.type === 0)\r\n\t\t\t\tthrow new Error(\"Wrong structure of SignedUnsignedAttributes\");\r\n\t\t\telse\r\n\t\t\t\treturn; // Not so important in case of \"UnsignedAttributes\"\r\n\t\t}\r\n\r\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: this.type // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
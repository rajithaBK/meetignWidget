{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\";\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5652\n */\n\nvar KeyTransRecipientInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for KeyTransRecipientInfo class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function KeyTransRecipientInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KeyTransRecipientInfo);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\n    /**\n     * @type {RecipientIdentifier}\n     * @desc rid\n     */\n\n    this.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc keyEncryptionAlgorithm\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\n     * @type {OctetString}\n     * @desc encryptedKey\n     */\n\n    this.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\n    /**\n     * @type {Certificate}\n     * @desc recipientCertificate For some reasons we need to store recipient's certificate here\n     */\n\n    this.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(KeyTransRecipientInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"rid\", \"keyEncryptionAlgorithm\", \"encryptedKey\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\n        names: {\n          version: \"version\",\n          rid: {\n            names: {\n              blockName: \"rid\"\n            }\n          },\n          keyEncryptionAlgorithm: {\n            names: {\n              blockName: \"keyEncryptionAlgorithm\"\n            }\n          },\n          encryptedKey: \"encryptedKey\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      if (asn1.result.rid.idBlock.tagClass === 3) this.rid = new asn1js.OctetString({\n        valueHex: asn1.result.rid.valueBlock.valueHex\n      }); // SubjectKeyIdentifier\n      else this.rid = new IssuerAndSerialNumber({\n        schema: asn1.result.rid\n      });\n      this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.keyEncryptionAlgorithm\n      });\n      this.encryptedKey = asn1.result.encryptedKey; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence \n      var outputArray = [];\n\n      if (this.rid instanceof IssuerAndSerialNumber) {\n        this.version = 0;\n        outputArray.push(new asn1js.Integer({\n          value: this.version\n        }));\n        outputArray.push(this.rid.toSchema());\n      } else {\n        this.version = 2;\n        outputArray.push(new asn1js.Integer({\n          value: this.version\n        }));\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          valueHex: this.rid.valueBlock.valueHex\n        }));\n      }\n\n      outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n      outputArray.push(this.encryptedKey); //endregion \n      //region Construct and return new ASN.1 schema for this object \n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion \n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        version: this.version,\n        rid: this.rid.toJSON(),\n        keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n        encryptedKey: this.encryptedKey.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return -1;\n\n        case \"rid\":\n          return {};\n\n        case \"keyEncryptionAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"encryptedKey\":\n          return new asn1js.OctetString();\n\n        case \"recipientCertificate\":\n          return new Certificate();\n\n        default:\n          throw new Error(\"Invalid member name for KeyTransRecipientInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Compare values with default values for all class members\n     * @param {string} memberName String name for a class member\n     * @param {*} memberValue Value to compare with default value\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === KeyTransRecipientInfo.defaultValues(\"version\");\n\n        case \"rid\":\n          return Object.keys(memberValue).length === 0;\n\n        case \"keyEncryptionAlgorithm\":\n        case \"encryptedKey\":\n          return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n\n        case \"recipientCertificate\":\n          return false;\n        // For now we do not need to compare any values with the \"recipientCertificate\"\n\n        default:\n          throw new Error(\"Invalid member name for KeyTransRecipientInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * KeyTransRecipientInfo ::= SEQUENCE {\n     *    version CMSVersion,  -- always set to 0 or 2\n     *    rid RecipientIdentifier,\n     *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n     *    encryptedKey EncryptedKey }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [version]\n       * @property {string} [rid]\n       * @property {string} [keyEncryptionAlgorithm]\n       * @property {string} [encryptedKey]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), RecipientIdentifier.schema(names.rid || {}), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), new asn1js.OctetString({\n          name: names.encryptedKey || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return KeyTransRecipientInfo;\n}(); //**************************************************************************************\n\n\nexport { KeyTransRecipientInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/KeyTransRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","Certificate","RecipientIdentifier","IssuerAndSerialNumber","KeyTransRecipientInfo","parameters","version","defaultValues","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","idBlock","tagClass","OctetString","valueHex","outputArray","push","Integer","value","toSchema","Primitive","tagNumber","Sequence","toJSON","memberName","memberValue","Object","keys","length","isEqual","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\";\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\n//**************************************************************************************\n/**\n * Class from RFC5652\n */\nexport default class KeyTransRecipientInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for KeyTransRecipientInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {RecipientIdentifier}\n\t\t * @desc rid\n\t\t */\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc keyEncryptionAlgorithm\n\t\t */\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc encryptedKey\n\t\t */\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\n\t\t/**\n\t\t * @type {Certificate}\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\n\t\t */\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (-1);\n\t\t\tcase \"rid\":\n\t\t\t\treturn {};\n\t\t\tcase \"keyEncryptionAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"encryptedKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"recipientCertificate\":\n\t\t\t\treturn new Certificate();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\n\t\t\tcase \"rid\":\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\n\t\t\tcase \"keyEncryptionAlgorithm\":\n\t\t\tcase \"encryptedKey\":\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n\t\t\tcase \"recipientCertificate\":\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * KeyTransRecipientInfo ::= SEQUENCE {\n\t *    version CMSVersion,  -- always set to 0 or 2\n\t *    rid RecipientIdentifier,\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\t *    encryptedKey EncryptedKey }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [version]\n\t\t * @property {string} [rid]\n\t\t * @property {string} [keyEncryptionAlgorithm]\n\t\t * @property {string} [encryptedKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"rid\",\n\t\t\t\"keyEncryptionAlgorithm\",\n\t\t\t\"encryptedKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tKeyTransRecipientInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\trid: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"rid\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tkeyEncryptionAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\n\t\t\tthis.rid = new asn1js.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex }); // SubjectKeyIdentifier\n\t\telse\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\n\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence \n\t\tconst outputArray = [];\n\t\t\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\n\t\t{\n\t\t\tthis.version = 0;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\n\t\t\toutputArray.push(this.rid.toSchema());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.version = 2;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalueHex: this.rid.valueBlock.valueHex\n\t\t\t}));\n\t\t}\n\t\t\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\n\t\toutputArray.push(this.encryptedKey);\n\t\t//endregion \n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object \n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion \n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\trid: this.rid.toJSON(),\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _weakMap = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/weak-map\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _deleteProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/delete-property\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser */\n\n\nvar namespaces = new _weakMap.default();\nvar loggers = new _weakMap.default();\n/**\n * localStorage adapter for webex-core storage layer\n */\n\nvar StorageAdapterLocalStorage = /*#__PURE__*/function () {\n  /**\n   * @constructs {StorageAdapterLocalStorage}\n   * @param {string} basekey localStorage key underwhich all namespaces will be\n   * stored\n   */\n  function StorageAdapterLocalStorage(basekey) {\n    (0, _classCallCheck2.default)(this, StorageAdapterLocalStorage);\n    /**\n     * localStorage binding\n     */\n\n    this.Bound = /*#__PURE__*/function () {\n      /**\n       * @constructs {Bound}\n       * @param {string} namespace\n       * @param {Object} options\n       */\n      function _class(namespace, options) {\n        (0, _classCallCheck2.default)(this, _class);\n        namespaces.set(this, namespace);\n        loggers.set(this, options.logger);\n      }\n      /**\n       * @private\n       * @returns {rawData}\n       */\n\n\n      (0, _createClass2.default)(_class, [{\n        key: \"_getRawData\",\n        value: function _getRawData() {\n          var rawData = localStorage.getItem(basekey);\n          return rawData ? JSON.parse(rawData) : {};\n        }\n        /**\n         * @private\n         * @returns {mixed}\n         */\n\n      }, {\n        key: \"_load\",\n        value: function _load() {\n          var allData = this._getRawData();\n\n          return allData[namespaces.get(this)] || {};\n        }\n        /**\n         * @param {Object} data\n         * @private\n         * @returns {undefined}\n         */\n\n      }, {\n        key: \"_save\",\n        value: function _save(data) {\n          var allData = this._getRawData();\n\n          allData[namespaces.get(this)] = data;\n          localStorage.setItem(basekey, (0, _stringify.default)(allData));\n        }\n        /**\n         * Clears the localStorage\n         * @param {string} key\n         * @returns {Promise}\n         */\n\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          loggers.get(this).info('local-storage-store-adapter: clearing localStorage');\n          return _promise.default.resolve(localStorage.removeItem(basekey));\n        }\n        /**\n         * Removes the specified key\n         * @param {string} key\n         * @returns {Promise}\n         */\n\n      }, {\n        key: \"del\",\n        value: function del(key) {\n          var _this = this;\n\n          return new _promise.default(function (resolve) {\n            loggers.get(_this).info(\"local-storage-store-adapter: deleting `\".concat(key, \"`\"));\n\n            var data = _this._load();\n\n            (0, _deleteProperty.default)(data, key);\n\n            _this._save(data);\n\n            resolve();\n          });\n        }\n        /**\n         * Retrieves the data at the specified key\n         * @param {string} key\n         * @returns {Promise<mixed>}\n         */\n\n      }, {\n        key: \"get\",\n        value: function get(key) {\n          var _this2 = this;\n\n          return new _promise.default(function (resolve, reject) {\n            loggers.get(_this2).debug(\"local-storage-store-adapter: reading `\".concat(key, \"`\"));\n\n            var data = _this2._load();\n\n            var value = data[key];\n\n            if (typeof value !== 'undefined') {\n              return resolve(value);\n            }\n\n            return reject(new _webexCore.NotFoundError(\"No value found for \".concat(key)));\n          });\n        }\n        /**\n         * Stores the specified value at the specified key\n         * @param {string} key\n         * @param {mixed} value\n         * @returns {Promise}\n         */\n\n      }, {\n        key: \"put\",\n        value: function put(key, value) {\n          var _this3 = this;\n\n          return new _promise.default(function (resolve) {\n            loggers.get(_this3).debug(\"local-storage-store-adapter: writing `\".concat(key, \"`\"));\n\n            var data = _this3._load();\n\n            data[key] = value;\n\n            _this3._save(data);\n\n            resolve();\n          });\n        }\n      }]);\n      return _class;\n    }();\n  }\n  /**\n   * Returns an adapter bound to the specified namespace\n   * @param {string} namespace\n   * @param {Object} options\n   * @returns {Promise<Bound>}\n   */\n\n\n  (0, _createClass2.default)(StorageAdapterLocalStorage, [{\n    key: \"bind\",\n    value: function bind(namespace, options) {\n      options = options || {};\n\n      if (!namespace) {\n        return _promise.default.reject(new Error('`namespace` is required'));\n      }\n\n      if (!options.logger) {\n        return _promise.default.reject(new Error('`options.logger` is required'));\n      }\n\n      options.logger.debug('local-storage-store-adapter: returning binding');\n      return _promise.default.resolve(new this.Bound(namespace, options));\n    }\n  }]);\n  return StorageAdapterLocalStorage;\n}();\n\nexports.default = StorageAdapterLocalStorage;","map":{"version":3,"mappings":"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","names":["namespaces","loggers","StorageAdapterLocalStorage","basekey","Bound","namespace","options","set","logger","key","value","rawData","localStorage","getItem","JSON","parse","allData","_getRawData","get","data","setItem","info","_promise","resolve","removeItem","_this","_load","_save","reject","_this2","debug","NotFoundError","_this3","Error"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser */\n\nimport {NotFoundError} from '@webex/webex-core';\n\nconst namespaces = new WeakMap();\nconst loggers = new WeakMap();\n\n/**\n * localStorage adapter for webex-core storage layer\n */\nexport default class StorageAdapterLocalStorage {\n  /**\n   * @constructs {StorageAdapterLocalStorage}\n   * @param {string} basekey localStorage key underwhich all namespaces will be\n   * stored\n   */\n  constructor(basekey) {\n    /**\n     * localStorage binding\n     */\n    this.Bound = class {\n      /**\n       * @constructs {Bound}\n       * @param {string} namespace\n       * @param {Object} options\n       */\n      constructor(namespace, options) {\n        namespaces.set(this, namespace);\n        loggers.set(this, options.logger);\n      }\n\n      /**\n       * @private\n       * @returns {rawData}\n       */\n      _getRawData() {\n        const rawData = localStorage.getItem(basekey);\n\n        return rawData ? JSON.parse(rawData) : {};\n      }\n\n      /**\n       * @private\n       * @returns {mixed}\n       */\n      _load() {\n        const allData = this._getRawData();\n\n        return allData[namespaces.get(this)] || {};\n      }\n\n      /**\n       * @param {Object} data\n       * @private\n       * @returns {undefined}\n       */\n      _save(data) {\n        const allData = this._getRawData();\n\n        allData[namespaces.get(this)] = data;\n\n        localStorage.setItem(basekey, JSON.stringify(allData));\n      }\n\n      /**\n       * Clears the localStorage\n       * @param {string} key\n       * @returns {Promise}\n       */\n      clear() {\n        loggers.get(this).info('local-storage-store-adapter: clearing localStorage');\n\n        return Promise.resolve(localStorage.removeItem(basekey));\n      }\n\n      /**\n       * Removes the specified key\n       * @param {string} key\n       * @returns {Promise}\n       */\n      del(key) {\n        return new Promise((resolve) => {\n          loggers.get(this).info(`local-storage-store-adapter: deleting \\`${key}\\``);\n          const data = this._load();\n\n          Reflect.deleteProperty(data, key);\n          this._save(data);\n          resolve();\n        });\n      }\n\n      /**\n       * Retrieves the data at the specified key\n       * @param {string} key\n       * @returns {Promise<mixed>}\n       */\n      get(key) {\n        return new Promise((resolve, reject) => {\n          loggers.get(this).debug(`local-storage-store-adapter: reading \\`${key}\\``);\n          const data = this._load();\n          const value = data[key];\n\n          if (typeof value !== 'undefined') {\n            return resolve(value);\n          }\n\n          return reject(new NotFoundError(`No value found for ${key}`));\n        });\n      }\n\n      /**\n       * Stores the specified value at the specified key\n       * @param {string} key\n       * @param {mixed} value\n       * @returns {Promise}\n       */\n      put(key, value) {\n        return new Promise((resolve) => {\n          loggers.get(this).debug(`local-storage-store-adapter: writing \\`${key}\\``);\n          const data = this._load();\n\n          data[key] = value;\n          this._save(data);\n          resolve();\n        });\n      }\n    };\n  }\n\n  /**\n   * Returns an adapter bound to the specified namespace\n   * @param {string} namespace\n   * @param {Object} options\n   * @returns {Promise<Bound>}\n   */\n  bind(namespace, options) {\n    options = options || {};\n    if (!namespace) {\n      return Promise.reject(new Error('`namespace` is required'));\n    }\n\n    if (!options.logger) {\n      return Promise.reject(new Error('`options.logger` is required'));\n    }\n\n    options.logger.debug('local-storage-store-adapter: returning binding');\n\n    return Promise.resolve(new this.Bound(namespace, options));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
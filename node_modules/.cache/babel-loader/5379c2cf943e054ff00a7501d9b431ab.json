{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport Request from \"./Request.js\";\nimport Extension from \"./Extension.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar TBSRequest = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TBSRequest class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function TBSRequest() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TBSRequest);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc tbs\r\n     */\n    this.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\n    if (\"version\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc version\r\n       */\n      this.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\n    if (\"requestorName\" in parameters)\n      /**\r\n       * @type {GeneralName}\r\n       * @desc requestorName\r\n       */\n      this.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\n    /**\r\n     * @type {Array.<Request>}\r\n     * @desc requestList\r\n     */\n\n    this.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\n    if (\"requestExtensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc requestExtensions\r\n       */\n      this.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(TBSRequest, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"TBSRequest\", \"TBSRequest.version\", \"TBSRequest.requestorName\", \"TBSRequest.requests\", \"TBSRequest.requestExtensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, TBSRequest.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TBSRequest\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.tbs = asn1.result.TBSRequest.valueBeforeDecode;\n      if (\"TBSRequest.version\" in asn1.result) this.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\n      if (\"TBSRequest.requestorName\" in asn1.result) this.requestorName = new GeneralName({\n        schema: asn1.result[\"TBSRequest.requestorName\"]\n      });\n      this.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], function (element) {\n        return new Request({\n          schema: element\n        });\n      });\n      if (\"TBSRequest.requestExtensions\" in asn1.result) this.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      //region Decode stored TBS value\n      var tbsSchema;\n\n      if (encodeFlag === false) {\n        if (this.tbs.byteLength === 0) // No stored TBS part\n          return TBSRequest.schema();\n        tbsSchema = asn1js.fromBER(this.tbs).result;\n      } //endregion\n      //region Create TBS schema via assembling from TBS parts\n      else {\n        var outputArray = [];\n\n        if (\"version\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [new asn1js.Integer({\n              value: this.version\n            })]\n          }));\n        }\n\n        if (\"requestorName\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [this.requestorName.toSchema()]\n          }));\n        }\n\n        outputArray.push(new asn1js.Sequence({\n          value: Array.from(this.requestList, function (element) {\n            return element.toSchema();\n          })\n        }));\n\n        if (\"requestExtensions\" in this) {\n          outputArray.push(new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 2 // [2]\n\n            },\n            value: [new asn1js.Sequence({\n              value: Array.from(this.requestExtensions, function (element) {\n                return element.toSchema();\n              })\n            })]\n          }));\n        }\n\n        tbsSchema = new asn1js.Sequence({\n          value: outputArray\n        });\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return tbsSchema; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {};\n      if (\"version\" in this) _object.version = this.version;\n      if (\"requestorName\" in this) _object.requestorName = this.requestorName.toJSON();\n      _object.requestList = Array.from(this.requestList, function (element) {\n        return element.toJSON();\n      });\n      if (\"requestExtensions\" in this) _object.requestExtensions = Array.from(this.requestExtensions, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"tbs\":\n          return new ArrayBuffer(0);\n\n        case \"version\":\n          return 0;\n\n        case \"requestorName\":\n          return new GeneralName();\n\n        case \"requestList\":\n        case \"requestExtensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for TBSRequest class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"tbs\":\n          return memberValue.byteLength === 0;\n\n        case \"version\":\n          return memberValue === TBSRequest.defaultValues(memberName);\n\n        case \"requestorName\":\n          return memberValue.type === GeneralName.defaultValues(\"type\") && Object.keys(memberValue.value).length === 0;\n\n        case \"requestList\":\n        case \"requestExtensions\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for TBSRequest class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * TBSRequest      ::=     SEQUENCE {\r\n     *    version             [0]     EXPLICIT Version DEFAULT v1,\r\n     *    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n     *    requestList                 SEQUENCE OF Request,\r\n     *    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [TBSRequestVersion]\r\n       * @property {string} [requestorName]\r\n       * @property {string} [requestList]\r\n       * @property {string} [requests]\r\n       * @property {string} [requestNames]\r\n       * @property {string} [extensions]\r\n       * @property {string} [requestExtensions]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"TBSRequest\",\n        value: [new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Integer({\n            name: names.TBSRequestVersion || \"TBSRequest.version\"\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [GeneralName.schema(names.requestorName || {\n            names: {\n              blockName: \"TBSRequest.requestorName\"\n            }\n          })]\n        }), new asn1js.Sequence({\n          name: names.requestList || \"TBSRequest.requestList\",\n          value: [new asn1js.Repeated({\n            name: names.requests || \"TBSRequest.requests\",\n            value: Request.schema(names.requestNames || {})\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          value: [Extensions.schema(names.extensions || {\n            names: {\n              blockName: names.requestExtensions || \"TBSRequest.requestExtensions\"\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return TBSRequest;\n}(); //**************************************************************************************\n\n\nexport { TBSRequest as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/TBSRequest.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","Request","Extension","Extensions","TBSRequest","parameters","tbs","defaultValues","version","requestorName","requestList","requestExtensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","value","encodeFlag","tbsSchema","byteLength","fromBER","outputArray","push","Constructed","idBlock","tagClass","tagNumber","Integer","toSchema","Sequence","_object","toJSON","memberName","ArrayBuffer","memberValue","type","Object","keys","length","names","name","blockName","optional","TBSRequestVersion","Repeated","requests","requestNames","extensions"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Request from \"./Request.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class TBSRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TBSRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\r\n\r\n\t\tif(\"version\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc version\r\n\t\t\t */\r\n\t\t\tthis.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\r\n\r\n\t\tif(\"requestorName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc requestorName\r\n\t\t\t */\r\n\t\t\tthis.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Request>}\r\n\t\t * @desc requestList\r\n\t\t */\r\n\t\tthis.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\r\n\r\n\t\tif(\"requestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc requestExtensions\r\n\t\t\t */\r\n\t\t\tthis.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === TBSRequest.defaultValues(memberName));\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TBSRequest      ::=     SEQUENCE {\r\n\t *    version             [0]     EXPLICIT Version DEFAULT v1,\r\n\t *    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n\t *    requestList                 SEQUENCE OF Request,\r\n\t *    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [TBSRequestVersion]\r\n\t\t * @property {string} [requestorName]\r\n\t\t * @property {string} [requestList]\r\n\t\t * @property {string} [requests]\r\n\t\t * @property {string} [requestNames]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [requestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TBSRequest\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.TBSRequestVersion || \"TBSRequest.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.requestorName || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TBSRequest.requestorName\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.requestList || \"TBSRequest.requestList\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.requests || \"TBSRequest.requests\"),\r\n\t\t\t\t\t\t\tvalue: Request.schema(names.requestNames || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.requestExtensions || \"TBSRequest.requestExtensions\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TBSRequest\",\r\n\t\t\t\"TBSRequest.version\",\r\n\t\t\t\"TBSRequest.requestorName\",\r\n\t\t\t\"TBSRequest.requests\",\r\n\t\t\t\"TBSRequest.requestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTBSRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TBSRequest\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.TBSRequest.valueBeforeDecode;\r\n\r\n\t\tif(\"TBSRequest.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\r\n\t\tif(\"TBSRequest.requestorName\" in asn1.result)\r\n\t\t\tthis.requestorName = new GeneralName({ schema: asn1.result[\"TBSRequest.requestorName\"] });\r\n\r\n\t\tthis.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], element => new Request({ schema: element }));\r\n\r\n\t\tif(\"TBSRequest.requestExtensions\" in asn1.result)\r\n\t\t\tthis.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn TBSRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tif(\"requestorName\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.requestorName.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.requestList, element => element.toSchema())\r\n\t\t\t}));\r\n\r\n\t\t\tif(\"requestExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: Array.from(this.requestExtensions, element => element.toSchema())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn tbsSchema;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"requestorName\" in this)\r\n\t\t\t_object.requestorName = this.requestorName.toJSON();\r\n\r\n\t\t_object.requestList = Array.from(this.requestList, element => element.toJSON());\r\n\r\n\t\tif(\"requestExtensions\" in this)\r\n\t\t\t_object.requestExtensions = Array.from(this.requestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
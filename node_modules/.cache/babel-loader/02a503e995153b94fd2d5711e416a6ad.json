{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.fromBase64url = fromBase64url;\nexports.toBase64Url = toBase64Url;\nexports.encode = encode;\nexports.decode = decode;\nexports.validate = validate;\nexports.default = void 0;\n\nvar _urlsafeBase = _interopRequireDefault(require(\"urlsafe-base64\"));\n\nvar _safeBuffer = require(\"safe-buffer\");\n\nvar _isBuffer = _interopRequireDefault(require(\"./isBuffer\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction fromBase64url(str) {\n  return _urlsafeBase.default.decode(str).toString();\n}\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\n\n\nfunction toBase64Url(str) {\n  var buffer = str;\n\n  if (!(0, _isBuffer.default)(buffer)) {\n    buffer = _safeBuffer.Buffer.from(buffer);\n  }\n\n  return _urlsafeBase.default.encode(buffer);\n}\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\n\n\nfunction encode(str) {\n  return toBase64Url(str);\n}\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\n\n\nfunction decode(str) {\n  return fromBase64url(str);\n}\n/**\n * Indicates if the provided string is, in fact, a base64 string\n * @param {String} str\n * @returns {Boolean}\n */\n\n\nfunction validate(str) {\n  return _urlsafeBase.default.validate(str);\n}\n\nvar _default = {\n  fromBase64url: fromBase64url,\n  toBase64Url: toBase64Url,\n  encode: encode,\n  decode: decode,\n  validate: validate\n};\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAIA;;AACA;;AAEA;AAPA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;;;AACO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,SAAOC,qBAAcC,MAAdD,CAAqBD,GAArBC,EAA0BE,QAA1BF,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASG,WAAT,CAAqBJ,GAArB,EAA0B;AAC/B,MAAIK,MAAM,GAAGL,GAAb;;AAEA,MAAI,CAAC,uBAASK,MAAT,CAAL,EAAuB;AACrBA,UAAM,GAAGC,mBAAOC,IAAPD,CAAYD,MAAZC,CAATD;AACD;;AAED,SAAOJ,qBAAcO,MAAdP,CAAqBI,MAArBJ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASO,MAAT,CAAgBR,GAAhB,EAAqB;AAC1B,SAAOI,WAAW,CAACJ,GAAD,CAAlB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASE,MAAT,CAAgBF,GAAhB,EAAqB;AAC1B,SAAOD,aAAa,CAACC,GAAD,CAApB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASS,QAAT,CAAkBT,GAAlB,EAAuB;AAC5B,SAAOC,qBAAcQ,QAAdR,CAAuBD,GAAvBC,CAAP;AACD;;eAEc;AACbF,eAAa,EAAbA,aADa;AAEbK,aAAW,EAAXA,WAFa;AAGbI,QAAM,EAANA,MAHa;AAIbN,QAAM,EAANA,MAJa;AAKbO,UAAQ,EAARA;AALa","names":["fromBase64url","str","UrlSafeBase64","decode","toString","toBase64Url","buffer","Buffer","from","encode","validate"],"sources":["base64.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport UrlSafeBase64 from 'urlsafe-base64';\nimport {Buffer} from 'safe-buffer';\n\nimport isBuffer from './isBuffer';\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function fromBase64url(str) {\n  return UrlSafeBase64.decode(str).toString();\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function toBase64Url(str) {\n  let buffer = str;\n\n  if (!isBuffer(buffer)) {\n    buffer = Buffer.from(buffer);\n  }\n\n  return UrlSafeBase64.encode(buffer);\n}\n\n/**\n * Converts a string to a base64url-encoded string. It also accepts a buffer\n * @param {string|buffer} str\n * @returns {string}\n */\nexport function encode(str) {\n  return toBase64Url(str);\n}\n\n/**\n * Converts a string from a base64url-encoded string\n * @param {string} str\n * @returns {string}\n */\nexport function decode(str) {\n  return fromBase64url(str);\n}\n\n/**\n * Indicates if the provided string is, in fact, a base64 string\n * @param {String} str\n * @returns {Boolean}\n */\nexport function validate(str) {\n  return UrlSafeBase64.validate(str);\n}\n\nexport default {\n  fromBase64url,\n  toBase64Url,\n  encode,\n  decode,\n  validate\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from RFC3739\n */\n\nexport class QCStatement {\n  //**********************************************************************************\n\n  /**\n   * Constructor for QCStatement class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     */\n    this.id = getParametersValue(parameters, \"id\", QCStatement.defaultValues(\"id\"));\n\n    if (\"type\" in parameters) {\n      /**\n       * @type {*} Any data described by \"id\"\n       */\n      this.type = getParametersValue(parameters, \"type\", QCStatement.defaultValues(\"type\"));\n    } //endregion\n    //region If input argument array contains \"schema\" for this object\n\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"id\":\n        return \"\";\n\n      case \"type\":\n        return new asn1js.Null();\n\n      default:\n        throw new Error(`Invalid member name for QCStatement class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"id\":\n        return memberValue === \"\";\n\n      case \"type\":\n        return memberValue instanceof asn1js.Null;\n\n      default:\n        throw new Error(`Invalid member name for QCStatement class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n  \t *\t QCStatement ::= SEQUENCE {\n   *       statementId   QC-STATEMENT.&id({SupportedStatements}),\n   *       statementInfo QC-STATEMENT.&Type({SupportedStatements}{@statementId}) OPTIONAL\n   *   }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [id]\n     * @property {string} [type]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.id || \"\"\n      }), new asn1js.Any({\n        name: names.type || \"\",\n        optional: true\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"id\", \"type\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, QCStatement.schema({\n      names: {\n        id: \"id\",\n        type: \"type\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for QCStatement\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.id = asn1.result.id.valueBlock.toString();\n    if (\"type\" in asn1.result) this.type = asn1.result.type; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    const value = [new asn1js.ObjectIdentifier({\n      value: this.id\n    })];\n    if (\"type\" in this) value.push(this.type); //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const object = {\n      id: this.id\n    };\n    if (\"type\" in this) object.type = this.type.toJSON();\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************\n\n/**\n * Class from RFC3739\n */\n\nexport default class QCStatements {\n  //**********************************************************************************\n\n  /**\n   * Constructor for QCStatements class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {Array<QCStatement>}\n     */\n    this.values = getParametersValue(parameters, \"values\", QCStatements.defaultValues(\"values\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"values\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for QCStatements class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n\n\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"values\":\n        return memberValue.length === 0;\n\n      default:\n        throw new Error(`Invalid member name for QCStatements class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * QCStatements ::= SEQUENCE OF QCStatement\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [values]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Repeated({\n        name: names.values || \"\",\n        value: QCStatement.schema(names.value || {})\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"values\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, QCStatements.schema({\n      names: {\n        values: \"values\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for QCStatements\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.values = Array.from(asn1.result.values, element => new QCStatement({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.values, element => element.toSchema())\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    return {\n      extensions: Array.from(this.values, element => element.toJSON())\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/QCStatements.js"],"names":["asn1js","getParametersValue","clearProps","QCStatement","constructor","parameters","id","defaultValues","type","fromSchema","schema","memberName","Null","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","ObjectIdentifier","Any","optional","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","push","toJSON","object","QCStatements","values","length","Repeated","Array","from","element","extensions"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from RFC3739\n */\nexport class QCStatement\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for QCStatement class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = getParametersValue(parameters, \"id\", QCStatement.defaultValues(\"id\"));\n\n\t\tif(\"type\" in parameters)\n\t\t{\n\t\t\t/**\n\t\t\t * @type {*} Any data described by \"id\"\n\t\t\t */\n\t\t\tthis.type = getParametersValue(parameters, \"type\", QCStatement.defaultValues(\"type\"));\n\t\t}\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"id\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"type\":\n\t\t\t\treturn new asn1js.Null();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"id\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"type\":\n\t\t\t\treturn (memberValue instanceof asn1js.Null);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n \t *\t QCStatement ::= SEQUENCE {\n\t *       statementId   QC-STATEMENT.&id({SupportedStatements}),\n\t *       statementInfo QC-STATEMENT.&Type({SupportedStatements}{@statementId}) OPTIONAL\n\t *   }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [id]\n\t\t * @property {string} [type]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"\") }),\n\t\t\t\tnew asn1js.Any({\n\t\t\t\t\tname: (names.type || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"id\",\n\t\t\t\"type\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tQCStatement.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tid: \"id\",\n\t\t\t\t\ttype: \"type\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatement\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.id = asn1.result.id.valueBlock.toString();\n\n\t\tif(\"type\" in asn1.result)\n\t\t\tthis.type = asn1.result.type;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst value = [\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.id })\n\t\t];\n\n\t\tif(\"type\" in this)\n\t\t\tvalue.push(this.type);\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\tid: this.id\n\t\t};\n\n\t\tif(\"type\" in this)\n\t\t\tobject.type = this.type.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC3739\n */\nexport default class QCStatements\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for QCStatements class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array<QCStatement>}\n\t\t */\n\t\tthis.values = getParametersValue(parameters, \"values\", QCStatements.defaultValues(\"values\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"values\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"values\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * QCStatements ::= SEQUENCE OF QCStatement\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [values]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\tname: (names.values || \"\"),\n\t\t\t\t\tvalue: QCStatement.schema(names.value || {})\n\t\t\t\t}),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"values\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tQCStatements.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tvalues: \"values\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatements\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.values, element => element.toSchema())\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\textensions: Array.from(this.values, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport PolicyInformation from \"./PolicyInformation.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar CertificatePolicies = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertificatePolicies class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function CertificatePolicies() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CertificatePolicies);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<PolicyInformation>}\r\n     * @desc certificatePolicies\r\n     */\n    this.certificatePolicies = getParametersValue(parameters, \"certificatePolicies\", CertificatePolicies.defaultValues(\"certificatePolicies\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(CertificatePolicies, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"certificatePolicies\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, CertificatePolicies.schema({\n        names: {\n          certificatePolicies: \"certificatePolicies\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificatePolicies\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.certificatePolicies = Array.from(asn1.result.certificatePolicies, function (element) {\n        return new PolicyInformation({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: Array.from(this.certificatePolicies, function (element) {\n          return element.toSchema();\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        certificatePolicies: Array.from(this.certificatePolicies, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"certificatePolicies\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for CertificatePolicies class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [certificatePolicies]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.certificatePolicies || \"\",\n          value: PolicyInformation.schema()\n        })]\n      });\n    }\n  }]);\n\n  return CertificatePolicies;\n}(); //**************************************************************************************\n\n\nexport { CertificatePolicies as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertificatePolicies.js"],"names":["asn1js","getParametersValue","clearProps","PolicyInformation","CertificatePolicies","parameters","certificatePolicies","defaultValues","fromSchema","schema","asn1","compareSchema","names","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","memberName","name","blockName","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyInformation from \"./PolicyInformation.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificatePolicies\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificatePolicies class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyInformation>}\r\n\t\t * @desc certificatePolicies\r\n\t\t */\r\n\t\tthis.certificatePolicies = getParametersValue(parameters, \"certificatePolicies\", CertificatePolicies.defaultValues(\"certificatePolicies\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificatePolicies\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificatePolicies class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificatePolicies]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.certificatePolicies || \"\"),\r\n\t\t\t\t\tvalue: PolicyInformation.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificatePolicies\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificatePolicies.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertificatePolicies: \"certificatePolicies\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificatePolicies\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.certificatePolicies, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificatePolicies: Array.from(this.certificatePolicies, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = processImage;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _index = require(\"./index\");\n/* eslint-env browser */\n\n/**\n * Determins the dimensions of an image\n * @param {Object} constraints\n * @param {Number} constraints.width\n * @param {Number} constraints.height\n * @param {Number} maxWidth\n * @param {Number} maxHeight\n * @returns {Object}\n */\n\n\nfunction computeDimensions(_ref, maxWidth, maxHeight) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  if (height > width) {\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n  } else {\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n  }\n\n  return {\n    height: height,\n    width: width\n  };\n}\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @param {Boolean} options.isAvatar\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\n\n\nfunction processImage(_ref2) {\n  var file = _ref2.file,\n      type = _ref2.type,\n      thumbnailMaxWidth = _ref2.thumbnailMaxWidth,\n      thumbnailMaxHeight = _ref2.thumbnailMaxHeight,\n      enableThumbnails = _ref2.enableThumbnails,\n      logger = _ref2.logger,\n      isAvatar = _ref2.isAvatar;\n\n  if (!type || !type.startsWith('image')) {\n    return _promise.default.resolve();\n  }\n\n  file = file instanceof Blob ? file : new Blob([file]);\n  return new _promise.default(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function onload() {\n      resolve(img);\n    };\n\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  }).then(function (img) {\n    var fileDimensions = (0, _pick2.default)(img, 'height', 'width');\n\n    if (isAvatar) {\n      // only if image is a profile avatar\n      logger.info('dimensions will be set for avatar image');\n      var size = fileDimensions.height > fileDimensions.width ? fileDimensions.height : fileDimensions.width;\n      fileDimensions.height = size;\n      fileDimensions.width = size;\n    }\n\n    if (!enableThumbnails) {\n      logger.info('thumbnails not enabled');\n      return [null, fileDimensions, null];\n    }\n\n    var thumbnailDimensions = computeDimensions(fileDimensions, thumbnailMaxWidth, thumbnailMaxHeight);\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var width = thumbnailDimensions.width,\n        height = thumbnailDimensions.height; // explanation of orientation:\n    // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images\n\n    if (file.orientation && file.orientation > 4) {\n      canvas.width = height;\n      canvas.height = width;\n      thumbnailDimensions.width = height;\n      thumbnailDimensions.height = width;\n    } else {\n      canvas.width = thumbnailDimensions.width;\n      canvas.height = thumbnailDimensions.height;\n    }\n\n    (0, _index.orient)({\n      orientation: file && file.orientation ? file.orientation : '',\n      img: img,\n      x: 0,\n      y: 0,\n      width: width,\n      height: height,\n      ctx: ctx\n    }, file);\n    var parts = canvas.toDataURL('image/png').split(','); // Thumbnail uploads were failing with common/base64 decoding\n\n    var byteString = atob(parts[1]);\n    var buffer = new ArrayBuffer(byteString.length);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < byteString.length; i += 1) {\n      view.setUint8(i, byteString.charCodeAt(i));\n    }\n\n    return [buffer, fileDimensions, thumbnailDimensions];\n  });\n}","map":{"version":3,"mappings":"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","names":["computeDimensions","maxWidth","maxHeight","width","height","processImage","file","type","thumbnailMaxWidth","thumbnailMaxHeight","enableThumbnails","logger","isAvatar","startsWith","_promise","resolve","Blob","reject","img","Image","onload","onerror","src","URL","createObjectURL","then","fileDimensions","info","size","thumbnailDimensions","canvas","document","createElement","ctx","getContext","orientation","x","y","parts","toDataURL","split","byteString","atob","buffer","ArrayBuffer","length","view","DataView","i","setUint8","charCodeAt"],"sources":["process-image.browser.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {pick} from 'lodash';\n\nimport {orient} from './index';\n/* eslint-env browser */\n\n/**\n * Determins the dimensions of an image\n * @param {Object} constraints\n * @param {Number} constraints.width\n * @param {Number} constraints.height\n * @param {Number} maxWidth\n * @param {Number} maxHeight\n * @returns {Object}\n */\nfunction computeDimensions({width, height}, maxWidth, maxHeight) {\n  if (height > width) {\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n  }\n  else {\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n  }\n\n  return {height, width};\n}\n\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @param {Boolean} options.isAvatar\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\nexport default function processImage({\n  file, type, thumbnailMaxWidth, thumbnailMaxHeight, enableThumbnails, logger, isAvatar\n}) {\n  if (!type || !type.startsWith('image')) {\n    return Promise.resolve();\n  }\n\n  file = file instanceof Blob ? file : new Blob([file]);\n\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    img.onload = function onload() {\n      resolve(img);\n    };\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  })\n    .then((img) => {\n      const fileDimensions = pick(img, 'height', 'width');\n\n      if (isAvatar) { // only if image is a profile avatar\n        logger.info('dimensions will be set for avatar image');\n        const size = fileDimensions.height > fileDimensions.width ? fileDimensions.height : fileDimensions.width;\n\n        fileDimensions.height = size;\n        fileDimensions.width = size;\n      }\n      if (!enableThumbnails) {\n        logger.info('thumbnails not enabled');\n\n        return [null, fileDimensions, null];\n      }\n      const thumbnailDimensions = computeDimensions(fileDimensions, thumbnailMaxWidth, thumbnailMaxHeight);\n\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const {width, height} = thumbnailDimensions;\n\n      // explanation of orientation:\n      // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images\n      if (file.orientation && file.orientation > 4) {\n        canvas.width = height;\n        canvas.height = width;\n        thumbnailDimensions.width = height;\n        thumbnailDimensions.height = width;\n      }\n      else {\n        canvas.width = thumbnailDimensions.width;\n        canvas.height = thumbnailDimensions.height;\n      }\n\n\n      orient(\n        {\n          orientation: file && file.orientation ? file.orientation : '',\n          img,\n          x: 0,\n          y: 0,\n          width,\n          height,\n          ctx\n        },\n        file\n      );\n\n      const parts = canvas.toDataURL('image/png').split(',');\n      // Thumbnail uploads were failing with common/base64 decoding\n      const byteString = atob(parts[1]);\n\n      const buffer = new ArrayBuffer(byteString.length);\n      const view = new DataView(buffer);\n\n      for (let i = 0; i < byteString.length; i += 1) {\n        view.setUint8(i, byteString.charCodeAt(i));\n      }\n\n      return [buffer, fileDimensions, thumbnailDimensions];\n    });\n}\n"]},"metadata":{},"sourceType":"script"}
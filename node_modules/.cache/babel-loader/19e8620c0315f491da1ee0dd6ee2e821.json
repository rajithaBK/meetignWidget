{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Time from \"./Time.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar RevokedCertificate = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for RevokedCertificate class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function RevokedCertificate() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RevokedCertificate);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Integer}\r\n     * @desc userCertificate\r\n     */\n    this.userCertificate = getParametersValue(parameters, \"userCertificate\", RevokedCertificate.defaultValues(\"userCertificate\"));\n    /**\r\n     * @type {Time}\r\n     * @desc revocationDate\r\n     */\n\n    this.revocationDate = getParametersValue(parameters, \"revocationDate\", RevokedCertificate.defaultValues(\"revocationDate\"));\n    if (\"crlEntryExtensions\" in parameters)\n      /**\r\n       * @type {Extensions}\r\n       * @desc crlEntryExtensions\r\n       */\n      this.crlEntryExtensions = getParametersValue(parameters, \"crlEntryExtensions\", RevokedCertificate.defaultValues(\"crlEntryExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(RevokedCertificate, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"userCertificate\", \"revocationDate\", \"crlEntryExtensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, RevokedCertificate.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for RevokedCertificate\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.userCertificate = asn1.result.userCertificate;\n      this.revocationDate = new Time({\n        schema: asn1.result.revocationDate\n      });\n      if (\"crlEntryExtensions\" in asn1.result) this.crlEntryExtensions = new Extensions({\n        schema: asn1.result.crlEntryExtensions\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [this.userCertificate, this.revocationDate.toSchema()];\n      if (\"crlEntryExtensions\" in this) outputArray.push(this.crlEntryExtensions.toSchema()); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        userCertificate: this.userCertificate.toJSON(),\n        revocationDate: this.revocationDate.toJSON\n      };\n      if (\"crlEntryExtensions\" in this) object.crlEntryExtensions = this.crlEntryExtensions.toJSON();\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"userCertificate\":\n          return new asn1js.Integer();\n\n        case \"revocationDate\":\n          return new Time();\n\n        case \"crlEntryExtensions\":\n          return new Extensions();\n\n        default:\n          throw new Error(\"Invalid member name for RevokedCertificate class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n        *        userCertificate         CertificateSerialNumber,\r\n        *        revocationDate          Time,\r\n        *        crlEntryExtensions      Extensions OPTIONAL\r\n        *                                 -- if present, version MUST be v2\r\n        *                             }  OPTIONAL,\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [userCertificate]\r\n       * @property {string} [revocationDate]\r\n       * @property {string} [crlEntryExtensions]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.userCertificate || \"userCertificate\"\n        }), Time.schema({\n          names: {\n            utcTimeName: names.revocationDate || \"revocationDate\",\n            generalTimeName: names.revocationDate || \"revocationDate\"\n          }\n        }), Extensions.schema({\n          names: {\n            blockName: names.crlEntryExtensions || \"crlEntryExtensions\"\n          }\n        }, true)]\n      });\n    }\n  }]);\n\n  return RevokedCertificate;\n}(); //**************************************************************************************\n\n\nexport { RevokedCertificate as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/RevokedCertificate.js"],"names":["asn1js","getParametersValue","clearProps","Time","Extensions","RevokedCertificate","parameters","userCertificate","defaultValues","revocationDate","crlEntryExtensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","outputArray","toSchema","push","Sequence","value","object","toJSON","memberName","Integer","names","name","blockName","utcTimeName","generalTimeName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Time from \"./Time.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RevokedCertificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevokedCertificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc userCertificate\r\n\t\t */\r\n\t\tthis.userCertificate = getParametersValue(parameters, \"userCertificate\", RevokedCertificate.defaultValues(\"userCertificate\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc revocationDate\r\n\t\t */\r\n\t\tthis.revocationDate = getParametersValue(parameters, \"revocationDate\", RevokedCertificate.defaultValues(\"revocationDate\"));\r\n\r\n\t\tif(\"crlEntryExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlEntryExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlEntryExtensions = getParametersValue(parameters, \"crlEntryExtensions\", RevokedCertificate.defaultValues(\"crlEntryExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"userCertificate\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"revocationDate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"crlEntryExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevokedCertificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n     *        userCertificate         CertificateSerialNumber,\r\n     *        revocationDate          Time,\r\n     *        crlEntryExtensions      Extensions OPTIONAL\r\n     *                                 -- if present, version MUST be v2\r\n     *                             }  OPTIONAL,\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [userCertificate]\r\n\t\t * @property {string} [revocationDate]\r\n\t\t * @property {string} [crlEntryExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.userCertificate || \"userCertificate\") }),\r\n\t\t\t\tTime.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tutcTimeName: (names.revocationDate || \"revocationDate\"),\r\n\t\t\t\t\t\tgeneralTimeName: (names.revocationDate || \"revocationDate\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.crlEntryExtensions || \"crlEntryExtensions\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true)\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"userCertificate\",\r\n\t\t\t\"revocationDate\",\r\n\t\t\t\"crlEntryExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevokedCertificate.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevokedCertificate\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.userCertificate = asn1.result.userCertificate;\r\n\t\tthis.revocationDate = new Time({ schema: asn1.result.revocationDate });\r\n\r\n\t\tif(\"crlEntryExtensions\" in asn1.result)\r\n\t\t\tthis.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tthis.userCertificate,\r\n\t\t\tthis.revocationDate.toSchema()\r\n\t\t];\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\toutputArray.push(this.crlEntryExtensions.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tuserCertificate: this.userCertificate.toJSON(),\r\n\t\t\trevocationDate: this.revocationDate.toJSON\r\n\t\t};\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\tobject.crlEntryExtensions = this.crlEntryExtensions.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
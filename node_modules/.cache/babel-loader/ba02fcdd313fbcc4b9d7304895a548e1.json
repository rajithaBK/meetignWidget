{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from https://docs.microsoft.com/en-us/windows/desktop/seccrypto/certification-authority-renewal\n */\n\nexport default class CAVersion {\n  //**********************************************************************************\n\n  /**\n   * Constructor for CAVersion class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {number}\n     * @desc certificateIndex\n     */\n    this.certificateIndex = getParametersValue(parameters, \"certificateIndex\", CAVersion.defaultValues(\"certificateIndex\"));\n    /**\n     * @type {number}\n     * @desc keyIndex\n     */\n\n    this.keyIndex = getParametersValue(parameters, \"keyIndex\", CAVersion.defaultValues(\"keyIndex\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"certificateIndex\":\n      case \"keyIndex\":\n        return 0;\n\n      default:\n        throw new Error(`Invalid member name for CAVersion class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * CAVersion ::= INTEGER\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new asn1js.Integer();\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Check the schema is valid\n    if (schema.constructor.blockName() !== asn1js.Integer.blockName()) throw new Error(\"Object's schema was not verified against input data for CAVersion\"); //endregion\n    //region Check length of the input value and correct it if needed\n\n    let value = schema.valueBlock.valueHex.slice(0);\n    const valueView = new Uint8Array(value);\n\n    switch (true) {\n      case value.byteLength < 4:\n        {\n          const tempValue = new ArrayBuffer(4);\n          const tempValueView = new Uint8Array(tempValue);\n          tempValueView.set(valueView, 4 - value.byteLength);\n          value = tempValue.slice(0);\n        }\n        break;\n\n      case value.byteLength > 4:\n        {\n          const tempValue = new ArrayBuffer(4);\n          const tempValueView = new Uint8Array(tempValue);\n          tempValueView.set(valueView.slice(0, 4));\n          value = tempValue.slice(0);\n        }\n        break;\n\n      default:\n    } //endregion\n    //region Get internal properties from parsed schema\n\n\n    const keyIndexBuffer = value.slice(0, 2);\n    const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n    let temp = keyIndexView8[0];\n    keyIndexView8[0] = keyIndexView8[1];\n    keyIndexView8[1] = temp;\n    const keyIndexView16 = new Uint16Array(keyIndexBuffer);\n    this.keyIndex = keyIndexView16[0];\n    const certificateIndexBuffer = value.slice(2);\n    const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n    temp = certificateIndexView8[0];\n    certificateIndexView8[0] = certificateIndexView8[1];\n    certificateIndexView8[1] = temp;\n    const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n    this.certificateIndex = certificateIndexView16[0]; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Create raw values\n    const certificateIndexBuffer = new ArrayBuffer(2);\n    const certificateIndexView = new Uint16Array(certificateIndexBuffer);\n    certificateIndexView[0] = this.certificateIndex;\n    const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n    let temp = certificateIndexView8[0];\n    certificateIndexView8[0] = certificateIndexView8[1];\n    certificateIndexView8[1] = temp;\n    const keyIndexBuffer = new ArrayBuffer(2);\n    const keyIndexView = new Uint16Array(keyIndexBuffer);\n    keyIndexView[0] = this.keyIndex;\n    const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n    temp = keyIndexView8[0];\n    keyIndexView8[0] = keyIndexView8[1];\n    keyIndexView8[1] = temp; //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Integer({\n      valueHex: utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    return {\n      certificateIndex: this.certificateIndex,\n      keyIndex: this.keyIndex\n    };\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CAVersion.js"],"names":["asn1js","getParametersValue","utilConcatBuf","CAVersion","constructor","parameters","certificateIndex","defaultValues","keyIndex","fromSchema","schema","memberName","Error","Integer","blockName","value","valueBlock","valueHex","slice","valueView","Uint8Array","byteLength","tempValue","ArrayBuffer","tempValueView","set","keyIndexBuffer","keyIndexView8","temp","keyIndexView16","Uint16Array","certificateIndexBuffer","certificateIndexView8","certificateIndexView16","toSchema","certificateIndexView","keyIndexView","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from https://docs.microsoft.com/en-us/windows/desktop/seccrypto/certification-authority-renewal\n */\nexport default class CAVersion\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CAVersion class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc certificateIndex\n\t\t */\n\t\tthis.certificateIndex = getParametersValue(parameters, \"certificateIndex\", CAVersion.defaultValues(\"certificateIndex\"));\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc keyIndex\n\t\t */\n\t\tthis.keyIndex = getParametersValue(parameters, \"keyIndex\", CAVersion.defaultValues(\"keyIndex\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"certificateIndex\":\n\t\t\tcase \"keyIndex\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CAVersion class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CAVersion ::= INTEGER\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\treturn (new asn1js.Integer());\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif(schema.constructor.blockName() !== asn1js.Integer.blockName())\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CAVersion\");\n\t\t//endregion\n\n\t\t//region Check length of the input value and correct it if needed\n\t\tlet value = schema.valueBlock.valueHex.slice(0);\n\t\tconst valueView = new Uint8Array(value);\n\n\t\tswitch(true)\n\t\t{\n\t\t\tcase (value.byteLength < 4):\n\t\t\t\t{\n\t\t\t\t\tconst tempValue = new ArrayBuffer(4);\n\t\t\t\t\tconst tempValueView = new Uint8Array(tempValue);\n\n\t\t\t\t\ttempValueView.set(valueView, 4 - value.byteLength);\n\n\t\t\t\t\tvalue = tempValue.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (value.byteLength > 4):\n\t\t\t\t{\n\t\t\t\t\tconst tempValue = new ArrayBuffer(4);\n\t\t\t\t\tconst tempValueView = new Uint8Array(tempValue);\n\n\t\t\t\t\ttempValueView.set(valueView.slice(0, 4));\n\n\t\t\t\t\tvalue = tempValue.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tconst keyIndexBuffer = value.slice(0, 2);\n\t\tconst keyIndexView8 = new Uint8Array(keyIndexBuffer);\n\t\tlet temp = keyIndexView8[0];\n\t\tkeyIndexView8[0] = keyIndexView8[1];\n\t\tkeyIndexView8[1] = temp;\n\n\t\tconst keyIndexView16 = new Uint16Array(keyIndexBuffer);\n\n\t\tthis.keyIndex = keyIndexView16[0];\n\n\t\tconst certificateIndexBuffer = value.slice(2);\n\t\tconst certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n\t\ttemp = certificateIndexView8[0];\n\t\tcertificateIndexView8[0] = certificateIndexView8[1];\n\t\tcertificateIndexView8[1] = temp;\n\n\t\tconst certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n\n\t\tthis.certificateIndex = certificateIndexView16[0];\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create raw values\n\t\tconst certificateIndexBuffer = new ArrayBuffer(2);\n\t\tconst certificateIndexView = new Uint16Array(certificateIndexBuffer);\n\n\t\tcertificateIndexView[0] = this.certificateIndex;\n\n\t\tconst certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n\t\tlet temp = certificateIndexView8[0];\n\t\tcertificateIndexView8[0] = certificateIndexView8[1];\n\t\tcertificateIndexView8[1] = temp;\n\n\t\tconst keyIndexBuffer = new ArrayBuffer(2);\n\t\tconst keyIndexView = new Uint16Array(keyIndexBuffer);\n\n\t\tkeyIndexView[0] = this.keyIndex;\n\n\t\tconst keyIndexView8 = new Uint8Array(keyIndexBuffer);\n\t\ttemp = keyIndexView8[0];\n\t\tkeyIndexView8[0] = keyIndexView8[1];\n\t\tkeyIndexView8[1] = temp;\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Integer({\n\t\t\tvalueHex: utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tcertificateIndex: this.certificateIndex,\n\t\t\tkeyIndex: this.keyIndex\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertID from \"./CertID.js\";\nimport Extension from \"./Extension.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar SingleResponse = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for SingleResponse class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function SingleResponse() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SingleResponse);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {CertID}\r\n     * @desc certID\r\n     */\n    this.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\n    /**\r\n     * @type {Object}\r\n     * @desc certStatus\r\n     */\n\n    this.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\n    /**\r\n     * @type {Date}\r\n     * @desc thisUpdate\r\n     */\n\n    this.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\n    if (\"nextUpdate\" in parameters)\n      /**\r\n       * @type {Date}\r\n       * @desc nextUpdate\r\n       */\n      this.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\n    if (\"singleExtensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc singleExtensions\r\n       */\n      this.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(SingleResponse, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"certID\", \"certStatus\", \"thisUpdate\", \"nextUpdate\", \"singleExtensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, SingleResponse.schema({\n        names: {\n          certID: {\n            names: {\n              blockName: \"certID\"\n            }\n          },\n          certStatus: \"certStatus\",\n          thisUpdate: \"thisUpdate\",\n          nextUpdate: \"nextUpdate\",\n          singleExtensions: {\n            names: {\n              blockName: \"singleExtensions\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for SingleResponse\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.certID = new CertID({\n        schema: asn1.result.certID\n      });\n      this.certStatus = asn1.result.certStatus;\n      this.thisUpdate = asn1.result.thisUpdate.toDate();\n      if (\"nextUpdate\" in asn1.result) this.nextUpdate = asn1.result.nextUpdate.toDate();\n      if (\"singleExtensions\" in asn1.result) this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create value array for output sequence\n      var outputArray = [];\n      outputArray.push(this.certID.toSchema());\n      outputArray.push(this.certStatus);\n      outputArray.push(new asn1js.GeneralizedTime({\n        valueDate: this.thisUpdate\n      }));\n\n      if (\"nextUpdate\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.GeneralizedTime({\n            valueDate: this.nextUpdate\n          })]\n        }));\n      }\n\n      if (\"singleExtensions\" in this) {\n        outputArray.push(new asn1js.Sequence({\n          value: Array.from(this.singleExtensions, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        certID: this.certID.toJSON(),\n        certStatus: this.certStatus.toJSON(),\n        thisUpdate: this.thisUpdate\n      };\n      if (\"nextUpdate\" in this) _object.nextUpdate = this.nextUpdate;\n      if (\"singleExtensions\" in this) _object.singleExtensions = Array.from(this.singleExtensions, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"certID\":\n          return new CertID();\n\n        case \"certStatus\":\n          return {};\n\n        case \"thisUpdate\":\n        case \"nextUpdate\":\n          return new Date(0, 0, 0);\n\n        case \"singleExtensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for SingleResponse class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"certID\":\n          // noinspection OverlyComplexBooleanExpressionJS\n          return CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm) && CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash) && CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash) && CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber);\n\n        case \"certStatus\":\n          return Object.keys(memberValue).length === 0;\n\n        case \"thisUpdate\":\n        case \"nextUpdate\":\n          return memberValue === SingleResponse.defaultValues(memberName);\n\n        default:\n          throw new Error(\"Invalid member name for SingleResponse class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * SingleResponse ::= SEQUENCE {\r\n     *    certID                       CertID,\r\n     *    certStatus                   CertStatus,\r\n     *    thisUpdate                   GeneralizedTime,\r\n     *    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n     *    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n     *\r\n     * CertStatus ::= CHOICE {\r\n     *    good        [0]     IMPLICIT NULL,\r\n     *    revoked     [1]     IMPLICIT RevokedInfo,\r\n     *    unknown     [2]     IMPLICIT UnknownInfo }\r\n     *\r\n     * RevokedInfo ::= SEQUENCE {\r\n     *    revocationTime              GeneralizedTime,\r\n     *    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n     *\r\n     * UnknownInfo ::= NULL\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [certID]\r\n       * @property {string} [certStatus]\r\n       * @property {string} [thisUpdate]\r\n       * @property {string} [nextUpdate]\r\n       * @property {string} [singleExtensions]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [CertID.schema(names.certID || {}), new asn1js.Choice({\n          value: [new asn1js.Primitive({\n            name: names.certStatus || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            lenBlockLength: 1 // The length contains one byte 0x00\n\n          }), // IMPLICIT NULL (no \"valueBlock\")\n          new asn1js.Constructed({\n            name: names.certStatus || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [new asn1js.GeneralizedTime(), new asn1js.Constructed({\n              optional: true,\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 0 // [0]\n\n              },\n              value: [new asn1js.Enumerated()]\n            })]\n          }), new asn1js.Primitive({\n            name: names.certStatus || \"\",\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 2 // [2]\n\n            },\n            lenBlock: {\n              length: 1\n            }\n          }) // IMPLICIT NULL (no \"valueBlock\")\n          ]\n        }), new asn1js.GeneralizedTime({\n          name: names.thisUpdate || \"\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.GeneralizedTime({\n            name: names.nextUpdate || \"\"\n          })]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [Extensions.schema(names.singleExtensions || {})]\n        }) // EXPLICIT SEQUENCE value\n        ]\n      });\n    }\n  }]);\n\n  return SingleResponse;\n}(); //**************************************************************************************\n\n\nexport { SingleResponse as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/SingleResponse.js"],"names":["asn1js","getParametersValue","clearProps","CertID","Extension","Extensions","SingleResponse","parameters","certID","defaultValues","certStatus","thisUpdate","nextUpdate","singleExtensions","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","toDate","Array","from","valueBlock","value","element","outputArray","push","toSchema","GeneralizedTime","valueDate","Constructed","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","memberName","Date","memberValue","compareWithDefault","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","Object","keys","length","name","Choice","Primitive","lenBlockLength","optional","Enumerated","lenBlock"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SingleResponse ::= SEQUENCE {\r\n\t *    certID                       CertID,\r\n\t *    certStatus                   CertStatus,\r\n\t *    thisUpdate                   GeneralizedTime,\r\n\t *    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t *    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t *\r\n\t * CertStatus ::= CHOICE {\r\n\t *    good        [0]     IMPLICIT NULL,\r\n\t *    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t *    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t *\r\n\t * RevokedInfo ::= SEQUENCE {\r\n\t *    revocationTime              GeneralizedTime,\r\n\t *    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t *\r\n\t * UnknownInfo ::= NULL\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certID\",\r\n\t\t\t\"certStatus\",\r\n\t\t\t\"thisUpdate\",\r\n\t\t\t\"nextUpdate\",\r\n\t\t\t\"singleExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
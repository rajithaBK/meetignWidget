{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar MediaSharesUtils = {};\n/**\n * parses the relevant values for mediaShares: contentId, disposition\n * @param {Object} mediaShares\n * @returns {undefined}\n */\n\nMediaSharesUtils.parse = function (mediaShares) {\n  if (mediaShares) {\n    return {\n      content: {\n        beneficiaryId: MediaSharesUtils.getContentBeneficiaryId(mediaShares),\n        disposition: MediaSharesUtils.getContentDisposition(mediaShares)\n      },\n      whiteboard: {\n        beneficiaryId: MediaSharesUtils.getWhiteboardBeneficiaryId(mediaShares),\n        disposition: MediaSharesUtils.getWhiteboardDisposition(mediaShares),\n        resourceUrl: MediaSharesUtils.getWhiteboardResourceUrl(mediaShares)\n      }\n    };\n  }\n\n  return null;\n};\n/**\n * get the previous and current mediaShares values parsed, as well as the boolean updates\n * @param {Object} oldShare\n * @param {Object} newShare\n * @returns {Object}\n * previous: {Object} old share, current: {Object} new share,\n */\n\n\nMediaSharesUtils.getMediaShares = function (oldShare, newShare) {\n  var previous = oldShare && MediaSharesUtils.parse(oldShare);\n  var current = newShare && MediaSharesUtils.parse(newShare);\n  return {\n    previous: previous,\n    current: current\n  };\n};\n/**\n * get the content floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\n\n\nMediaSharesUtils.getContentDisposition = function (mediaShares) {\n  var contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n  return contentFloor ? contentFloor.disposition : null;\n};\n/**\n * get the whiteboard floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\n\n\nMediaSharesUtils.getWhiteboardDisposition = function (mediaShares) {\n  var whiteboardFloor = MediaSharesUtils.extractWhiteboardFloor(mediaShares);\n  return whiteboardFloor ? whiteboardFloor.disposition : null;\n};\n/**\n * extract the content property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractContent = function (mediaShares) {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find(function (share) {\n    return share.name === _constants.CONTENT;\n  }) || null;\n};\n/**\n * extract the whiteboard property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractWhiteboard = function (mediaShares) {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find(function (share) {\n    return share.name === _constants.WHITEBOARD;\n  }) || null;\n};\n/**\n * extract the media stream floor property from content object\n * @param {Object} mediaStream\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractFloor = function (mediaStream) {\n  if (!mediaStream) {\n    return null;\n  }\n\n  return mediaStream.floor;\n};\n/**\n * extract the content's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractContentFloor = function (mediaShares) {\n  var content = MediaSharesUtils.extractContent(mediaShares);\n  return MediaSharesUtils.extractFloor(content);\n};\n/**\n * extract the whiteboard's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.extractWhiteboardFloor = function (mediaShares) {\n  var whiteboard = MediaSharesUtils.extractWhiteboard(mediaShares);\n  return MediaSharesUtils.extractFloor(whiteboard);\n};\n/**\n * get who is sharing from media shares (content)\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.getContentBeneficiaryId = function (mediaShares) {\n  var contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  if (!contentFloor || !contentFloor.beneficiary) {\n    return null;\n  }\n\n  return contentFloor.beneficiary.id;\n};\n/**\n * get who is sharing from media shares (whiteboard)\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.getWhiteboardBeneficiaryId = function (mediaShares) {\n  var whiteboardFloor = MediaSharesUtils.extractWhiteboardFloor(mediaShares);\n\n  if (!whiteboardFloor || !whiteboardFloor.beneficiary) {\n    return null;\n  }\n\n  return whiteboardFloor.beneficiary.id;\n};\n/**\n * get the which whiteboard is being shared via resource url\n * @param {Object} mediaShares\n * @returns {Object}\n */\n\n\nMediaSharesUtils.getWhiteboardResourceUrl = function (mediaShares) {\n  var whiteboard = MediaSharesUtils.extractWhiteboard(mediaShares);\n\n  if (!whiteboard || !whiteboard.resourceUrl) {\n    return null;\n  }\n\n  return whiteboard.resourceUrl;\n};\n\nvar _default = MediaSharesUtils;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["MediaSharesUtils","parse","mediaShares","content","beneficiaryId","getContentBeneficiaryId","disposition","getContentDisposition","whiteboard","getWhiteboardBeneficiaryId","getWhiteboardDisposition","resourceUrl","getWhiteboardResourceUrl","getMediaShares","oldShare","newShare","previous","current","contentFloor","extractContentFloor","whiteboardFloor","extractWhiteboardFloor","extractContent","length","find","share","name","CONTENT","extractWhiteboard","WHITEBOARD","extractFloor","mediaStream","floor","beneficiary","id"],"sources":["mediaSharesUtils.js"],"sourcesContent":["import {CONTENT, WHITEBOARD} from '../constants';\n\nconst MediaSharesUtils = {};\n\n/**\n * parses the relevant values for mediaShares: contentId, disposition\n * @param {Object} mediaShares\n * @returns {undefined}\n */\nMediaSharesUtils.parse = (mediaShares) => {\n  if (mediaShares) {\n    return {\n      content: {\n        beneficiaryId: MediaSharesUtils.getContentBeneficiaryId(mediaShares),\n        disposition: MediaSharesUtils.getContentDisposition(mediaShares)\n      },\n      whiteboard: {\n        beneficiaryId: MediaSharesUtils.getWhiteboardBeneficiaryId(mediaShares),\n        disposition: MediaSharesUtils.getWhiteboardDisposition(mediaShares),\n        resourceUrl: MediaSharesUtils.getWhiteboardResourceUrl(mediaShares)\n      }\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current mediaShares values parsed, as well as the boolean updates\n * @param {Object} oldShare\n * @param {Object} newShare\n * @returns {Object}\n * previous: {Object} old share, current: {Object} new share,\n */\nMediaSharesUtils.getMediaShares = (oldShare, newShare) => {\n  const previous = oldShare && MediaSharesUtils.parse(oldShare);\n  const current = newShare && MediaSharesUtils.parse(newShare);\n\n  return {\n    previous,\n    current\n  };\n};\n\n/**\n * get the content floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\nMediaSharesUtils.getContentDisposition = (mediaShares) => {\n  const contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  return contentFloor ? contentFloor.disposition : null;\n};\n\n/**\n * get the whiteboard floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\nMediaSharesUtils.getWhiteboardDisposition = (mediaShares) => {\n  const whiteboardFloor = MediaSharesUtils.extractWhiteboardFloor(mediaShares);\n\n  return whiteboardFloor ? whiteboardFloor.disposition : null;\n};\n\n/**\n * extract the content property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractContent = (mediaShares) => {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find((share) => share.name === CONTENT) || null;\n};\n\n/**\n * extract the whiteboard property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractWhiteboard = (mediaShares) => {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find((share) => share.name === WHITEBOARD) || null;\n};\n\n/**\n * extract the media stream floor property from content object\n * @param {Object} mediaStream\n * @returns {Object}\n */\nMediaSharesUtils.extractFloor = (mediaStream) => {\n  if (!mediaStream) {\n    return null;\n  }\n\n  return mediaStream.floor;\n};\n\n/**\n * extract the content's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractContentFloor = (mediaShares) => {\n  const content = MediaSharesUtils.extractContent(mediaShares);\n\n  return MediaSharesUtils.extractFloor(content);\n};\n\n/**\n * extract the whiteboard's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractWhiteboardFloor = (mediaShares) => {\n  const whiteboard = MediaSharesUtils.extractWhiteboard(mediaShares);\n\n  return MediaSharesUtils.extractFloor(whiteboard);\n};\n\n/**\n * get who is sharing from media shares (content)\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.getContentBeneficiaryId = (mediaShares) => {\n  const contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  if (!contentFloor || !contentFloor.beneficiary) {\n    return null;\n  }\n\n  return contentFloor.beneficiary.id;\n};\n\n/**\n * get who is sharing from media shares (whiteboard)\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.getWhiteboardBeneficiaryId = (mediaShares) => {\n  const whiteboardFloor = MediaSharesUtils.extractWhiteboardFloor(mediaShares);\n\n  if (!whiteboardFloor || !whiteboardFloor.beneficiary) {\n    return null;\n  }\n\n  return whiteboardFloor.beneficiary.id;\n};\n\n/**\n * get the which whiteboard is being shared via resource url\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.getWhiteboardResourceUrl = (mediaShares) => {\n  const whiteboard = MediaSharesUtils.extractWhiteboard(mediaShares);\n\n  if (!whiteboard || !whiteboard.resourceUrl) {\n    return null;\n  }\n\n  return whiteboard.resourceUrl;\n};\n\nexport default MediaSharesUtils;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var AttCertValidityPeriod = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttCertValidityPeriod class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function AttCertValidityPeriod() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AttCertValidityPeriod);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {GeneralizedTime}\n     * @desc notBeforeTime\n     */\n    this.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\n    /**\n     * @type {GeneralizedTime}\n     * @desc notAfterTime\n     */\n\n    this.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(AttCertValidityPeriod, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"notBeforeTime\", \"notAfterTime\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AttCertValidityPeriod.schema({\n        names: {\n          notBeforeTime: \"notBeforeTime\",\n          notAfterTime: \"notAfterTime\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.notBeforeTime = asn1.result.notBeforeTime.toDate();\n      this.notAfterTime = asn1.result.notAfterTime.toDate(); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.GeneralizedTime({\n          valueDate: this.notBeforeTime\n        }), new asn1js.GeneralizedTime({\n          valueDate: this.notAfterTime\n        })]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        notBeforeTime: this.notBeforeTime,\n        notAfterTime: this.notAfterTime\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"notBeforeTime\":\n        case \"notAfterTime\":\n          return new Date(0, 0, 0);\n\n        default:\n          throw new Error(\"Invalid member name for AttCertValidityPeriod class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * AttCertValidityPeriod  ::= SEQUENCE {\n     *   notBeforeTime  GeneralizedTime,\n     *   notAfterTime   GeneralizedTime\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [notBeforeTime]\n       * @property {string} [notAfterTime]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.GeneralizedTime({\n          name: names.notBeforeTime || \"\"\n        }), new asn1js.GeneralizedTime({\n          name: names.notAfterTime || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return AttCertValidityPeriod;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var IssuerSerial = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for IssuerSerial class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function IssuerSerial() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, IssuerSerial);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {RelativeDistinguishedNames}\n     * @desc issuer\n     */\n    this.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\n    /**\n     * @type {Integer}\n     * @desc serialNumber\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\n    if (\"issuerUID\" in parameters)\n      /**\n       * @type {BitString}\n       * @desc issuerUID\n       */\n      this.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(IssuerSerial, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"issuer\", \"serialNumber\", \"issuerUID\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, IssuerSerial.schema({\n        names: {\n          issuer: {\n            names: {\n              blockName: \"issuer\"\n            }\n          },\n          serialNumber: \"serialNumber\",\n          issuerUID: \"issuerUID\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for IssuerSerial\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.issuer = new GeneralNames({\n        schema: asn1.result.issuer\n      });\n      this.serialNumber = asn1.result.serialNumber;\n      if (\"issuerUID\" in asn1.result) this.issuerUID = asn1.result.issuerUID; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var result = new asn1js.Sequence({\n        value: [this.issuer.toSchema(), this.serialNumber]\n      });\n      if (\"issuerUID\" in this) result.valueBlock.value.push(this.issuerUID); //region Construct and return new ASN.1 schema for this object\n\n      return result; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var result = {\n        issuer: this.issuer.toJSON(),\n        serialNumber: this.serialNumber.toJSON()\n      };\n      if (\"issuerUID\" in this) result.issuerUID = this.issuerUID.toJSON();\n      return result;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"issuer\":\n          return new GeneralNames();\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        case \"issuerUID\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for IssuerSerial class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * IssuerSerial  ::=  SEQUENCE {\n     *   \tissuer         GeneralNames,\n     * \t\tserial         CertificateSerialNumber,\n     * \t\tissuerUID      UniqueIdentifier OPTIONAL\n     * }\n     *\n     * CertificateSerialNumber ::= INTEGER\n     * UniqueIdentifier  ::=  BIT STRING\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [issuer]\n       * @property {string} [serialNumber]\n       * @property {string} [issuerUID]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [GeneralNames.schema(names.issuer || {}), new asn1js.Integer({\n          name: names.serialNumber || \"\"\n        }), new asn1js.BitString({\n          optional: true,\n          name: names.issuerUID || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return IssuerSerial;\n}(); //**************************************************************************************\n\n/**\n * Class from RFC5755\n */\n\nexport var AttributeCertificateInfoV1 = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttributeCertificateInfoV1 class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function AttributeCertificateInfoV1() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AttributeCertificateInfoV1);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {Number}\n     * @desc version\n     */\n    this.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\n    if (\"baseCertificateID\" in parameters)\n      /**\n       * @type {IssuerSerial}\n       * @desc baseCertificateID\n       */\n      this.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\n    if (\"subjectName\" in parameters)\n      /**\n       * @type {GeneralNames}\n       * @desc subjectName\n       */\n      this.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\n    /**\n     * @type {GeneralNames}\n     * @desc issuer\n     */\n\n    this.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc signature\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\n    /**\n     * @type {Integer}\n     * @desc serialNumber\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\n    /**\n     * @type {AttCertValidityPeriod}\n     * @desc attrCertValidityPeriod\n     */\n\n    this.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\n    /**\n     * @type {Array.<Attribute>}\n     * @desc attributes\n     */\n\n    this.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\n    if (\"issuerUniqueID\" in parameters)\n      /**\n       * @type {BitString}\n       * @desc issuerUniqueID\n       */\n      this.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\n    if (\"extensions\" in parameters)\n      /**\n       * @type {Extensions}\n       * @desc extensions\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(AttributeCertificateInfoV1, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"baseCertificateID\", \"subjectName\", \"issuer\", \"signature\", \"serialNumber\", \"attrCertValidityPeriod\", \"attributes\", \"issuerUniqueID\", \"extensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\n        names: {\n          version: \"version\",\n          baseCertificateID: \"baseCertificateID\",\n          subjectName: \"subjectName\",\n          issuer: \"issuer\",\n          signature: {\n            names: {\n              blockName: \"signature\"\n            }\n          },\n          serialNumber: \"serialNumber\",\n          attrCertValidityPeriod: {\n            names: {\n              blockName: \"attrCertValidityPeriod\"\n            }\n          },\n          attributes: \"attributes\",\n          issuerUniqueID: \"issuerUniqueID\",\n          extensions: {\n            names: {\n              blockName: \"extensions\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n\n      if (\"baseCertificateID\" in asn1.result) {\n        this.baseCertificateID = new IssuerSerial({\n          schema: new asn1js.Sequence({\n            value: asn1.result.baseCertificateID.valueBlock.value\n          })\n        });\n      }\n\n      if (\"subjectName\" in asn1.result) {\n        this.subjectName = new GeneralNames({\n          schema: new asn1js.Sequence({\n            value: asn1.result.subjectName.valueBlock.value\n          })\n        });\n      }\n\n      this.issuer = asn1.result.issuer;\n      this.signature = new AlgorithmIdentifier({\n        schema: asn1.result.signature\n      });\n      this.serialNumber = asn1.result.serialNumber;\n      this.attrCertValidityPeriod = new AttCertValidityPeriod({\n        schema: asn1.result.attrCertValidityPeriod\n      });\n      this.attributes = Array.from(asn1.result.attributes.valueBlock.value, function (element) {\n        return new Attribute({\n          schema: element\n        });\n      });\n      if (\"issuerUniqueID\" in asn1.result) this.issuerUniqueID = asn1.result.issuerUniqueID;\n      if (\"extensions\" in asn1.result) this.extensions = new Extensions({\n        schema: asn1.result.extensions\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var result = new asn1js.Sequence({\n        value: [new asn1js.Integer({\n          value: this.version\n        })]\n      });\n\n      if (\"baseCertificateID\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 0 // [0]\n\n          },\n          value: this.baseCertificateID.toSchema().valueBlock.value\n        }));\n      }\n\n      if (\"subjectName\" in this) {\n        result.valueBlock.value.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            tagNumber: 1 // [1]\n\n          },\n          value: this.subjectName.toSchema().valueBlock.value\n        }));\n      }\n\n      result.valueBlock.value.push(this.issuer.toSchema());\n      result.valueBlock.value.push(this.signature.toSchema());\n      result.valueBlock.value.push(this.serialNumber);\n      result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n      result.valueBlock.value.push(new asn1js.Sequence({\n        value: Array.from(this.attributes, function (element) {\n          return element.toSchema();\n        })\n      }));\n      if (\"issuerUniqueID\" in this) result.valueBlock.value.push(this.issuerUniqueID);\n      if (\"extensions\" in this) result.valueBlock.value.push(this.extensions.toSchema());\n      return result;\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var result = {\n        version: this.version\n      };\n      if (\"baseCertificateID\" in this) result.baseCertificateID = this.baseCertificateID.toJSON();\n      if (\"subjectName\" in this) result.subjectName = this.subjectName.toJSON();\n      result.issuer = this.issuer.toJSON();\n      result.signature = this.signature.toJSON();\n      result.serialNumber = this.serialNumber.toJSON();\n      result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n      result.attributes = Array.from(this.attributes, function (element) {\n        return element.toJSON();\n      });\n      if (\"issuerUniqueID\" in this) result.issuerUniqueID = this.issuerUniqueID.toJSON();\n      if (\"extensions\" in this) result.extensions = this.extensions.toJSON();\n      return result;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"baseCertificateID\":\n          return new IssuerSerial();\n\n        case \"subjectName\":\n          return new GeneralNames();\n\n        case \"issuer\":\n          return {};\n\n        case \"signature\":\n          return new AlgorithmIdentifier();\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        case \"attrCertValidityPeriod\":\n          return new AttCertValidityPeriod();\n\n        case \"attributes\":\n          return [];\n\n        case \"issuerUniqueID\":\n          return new asn1js.BitString();\n\n        case \"extensions\":\n          return new Extensions();\n\n        default:\n          throw new Error(\"Invalid member name for AttributeCertificateInfoV1 class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * AttributeCertificateInfo ::= SEQUENCE {\n     * \tversion Version DEFAULT v1,\n     * \tsubject CHOICE {\n     * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\n     * \t\tsubjectName [1] GeneralNames }, -- associated with a name\n     * \tissuer GeneralNames, -- CA issuing the attribute certificate\n     * \tsignature AlgorithmIdentifier,\n     * \tserialNumber CertificateSerialNumber,\n     * \tattrCertValidityPeriod AttCertValidityPeriod,\n     * \tattributes SEQUENCE OF Attribute,\n     * \tissuerUniqueID UniqueIdentifier OPTIONAL,\n     * \textensions Extensions OPTIONAL\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [issuer]\n       * @property {string} [serialNumber]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), new asn1js.Choice({\n          value: [new asn1js.Constructed({\n            name: names.baseCertificateID || \"\",\n            idBlock: {\n              tagClass: 3,\n              tagNumber: 0 // [0]\n\n            },\n            value: IssuerSerial.schema().valueBlock.value\n          }), new asn1js.Constructed({\n            name: names.subjectName || \"\",\n            idBlock: {\n              tagClass: 3,\n              tagNumber: 1 // [2]\n\n            },\n            value: GeneralNames.schema().valueBlock.value\n          })]\n        }), GeneralNames.schema({\n          names: {\n            blockName: names.issuer || \"\"\n          }\n        }), AlgorithmIdentifier.schema(names.signature || {}), new asn1js.Integer({\n          name: names.serialNumber || \"\"\n        }), AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}), new asn1js.Sequence({\n          name: names.attributes || \"\",\n          value: [new asn1js.Repeated({\n            value: Attribute.schema()\n          })]\n        }), new asn1js.BitString({\n          optional: true,\n          name: names.issuerUniqueID || \"\"\n        }), Extensions.schema(names.extensions || {}, true)]\n      });\n    }\n  }]);\n\n  return AttributeCertificateInfoV1;\n}(); //**************************************************************************************\n\n/**\n * Class from X.509:1997\n */\n\nvar AttributeCertificateV1 = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for AttributeCertificateV1 class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function AttributeCertificateV1() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AttributeCertificateV1);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {AttributeCertificateInfoV1}\n     * @desc acinfo\n     */\n    this.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc signatureAlgorithm\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\n    /**\n     * @type {BitString}\n     * @desc signatureValue\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(AttributeCertificateV1, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"acinfo\", \"signatureValue\", \"signatureAlgorithm\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV1.schema({\n        names: {\n          acinfo: {\n            names: {\n              blockName: \"acinfo\"\n            }\n          },\n          signatureAlgorithm: {\n            names: {\n              blockName: \"signatureAlgorithm\"\n            }\n          },\n          signatureValue: \"signatureValue\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.acinfo = new AttributeCertificateInfoV1({\n        schema: asn1.result.acinfo\n      });\n      this.signatureAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.signatureAlgorithm\n      });\n      this.signatureValue = asn1.result.signatureValue; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      return new asn1js.Sequence({\n        value: [this.acinfo.toSchema(), this.signatureAlgorithm.toSchema(), this.signatureValue]\n      });\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        acinfo: this.acinfo.toJSON(),\n        signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n        signatureValue: this.signatureValue.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"acinfo\":\n          return new AttributeCertificateInfoV1();\n\n        case \"signatureAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signatureValue\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for AttributeCertificateV1 class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * AttributeCertificate ::= SEQUENCE {\n     *   acinfo               AttributeCertificateInfoV1,\n     *   signatureAlgorithm   AlgorithmIdentifier,\n     *   signatureValue       BIT STRING\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {Object} [acinfo]\n       * @property {Object} [signatureAlgorithm]\n       * @property {string} [signatureValue]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AttributeCertificateInfoV1.schema(names.acinfo || {}), AlgorithmIdentifier.schema(names.signatureAlgorithm || {}), new asn1js.BitString({\n          name: names.signatureValue || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return AttributeCertificateV1;\n}(); //**************************************************************************************\n\n\nexport { AttributeCertificateV1 as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AttributeCertificateV1.js"],"names":["asn1js","getParametersValue","clearProps","GeneralNames","AlgorithmIdentifier","Attribute","Extensions","AttCertValidityPeriod","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","toDate","Sequence","value","GeneralizedTime","valueDate","memberName","Date","name","blockName","IssuerSerial","issuer","serialNumber","issuerUID","toSchema","valueBlock","push","toJSON","Integer","BitString","optional","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","valueDec","Array","from","element","Constructed","idBlock","tagClass","tagNumber","Choice","Repeated","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttCertValidityPeriod\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttCertValidityPeriod class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {GeneralizedTime}\n\t\t * @desc notBeforeTime\n\t\t */\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\n\t\t/**\n\t\t * @type {GeneralizedTime}\n\t\t * @desc notAfterTime\n\t\t */\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"notBeforeTime\":\n\t\t\tcase \"notAfterTime\":\n\t\t\t\treturn new Date(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttCertValidityPeriod  ::= SEQUENCE {\n\t *   notBeforeTime  GeneralizedTime,\n\t *   notAfterTime   GeneralizedTime\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [notBeforeTime]\n\t\t * @property {string} [notAfterTime]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"notBeforeTime\",\n\t\t\t\"notAfterTime\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttCertValidityPeriod.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\n\t\t\t]\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tnotBeforeTime: this.notBeforeTime,\n\t\t\tnotAfterTime: this.notAfterTime\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class IssuerSerial\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for IssuerSerial class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {RelativeDistinguishedNames}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\n\t\t\n\t\tif(\"issuerUID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUID\n\t\t\t */\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuer\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"issuerUID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * IssuerSerial  ::=  SEQUENCE {\n\t *   \tissuer         GeneralNames,\n\t * \t\tserial         CertificateSerialNumber,\n\t * \t\tissuerUID      UniqueIdentifier OPTIONAL\n\t * }\n\t *\n\t * CertificateSerialNumber ::= INTEGER\n\t * UniqueIdentifier  ::=  BIT STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t * @property {string} [issuerUID]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUID || \"\")\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuer\",\n\t\t\t\"serialNumber\",\n\t\t\t\"issuerUID\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tIssuerSerial.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuer: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"issuer\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tissuerUID: \"issuerUID\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\t\n\t\tif(\"issuerUID\" in asn1.result)\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.issuer.toSchema(),\n\t\t\t\tthis.serialNumber\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON()\n\t\t};\n\t\t\n\t\tif(\"issuerUID\" in this)\n\t\t\tresult.issuerUID = this.issuerUID.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV1\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV1 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"subjectName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc subjectName\n\t\t\t */\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\n\n\t\t/**\n\t\t * @type {GeneralNames}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\n\t\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"subjectName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfo ::= SEQUENCE {\n\t * \tversion Version DEFAULT v1,\n\t * \tsubject CHOICE {\n\t * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\n\t * \t\tsubjectName [1] GeneralNames }, -- associated with a name\n\t * \tissuer GeneralNames, -- CA issuing the attribute certificate\n\t * \tsignature AlgorithmIdentifier,\n\t * \tserialNumber CertificateSerialNumber,\n\t * \tattrCertValidityPeriod AttCertValidityPeriod,\n\t * \tattributes SEQUENCE OF Attribute,\n\t * \tissuerUniqueID UniqueIdentifier OPTIONAL,\n\t * \textensions Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t\t\t}),\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"subjectName\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV1.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tsubjectName: \"subjectName\",\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"subjectName\" in asn1.result)\n\t\t{\n\t\t\tthis.subjectName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.subjectName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tthis.issuer = asn1.result.issuer;\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\n\t\t});\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"subjectName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\n\t\tresult.valueBlock.value.push(this.serialNumber);\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t}));\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version\n\t\t};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"subjectName\" in this)\n\t\t\tresult.subjectName = this.subjectName.toJSON();\n\n\t\tresult.issuer = this.issuer.toJSON();\n\t\tresult.signature = this.signature.toJSON();\n\t\tresult.serialNumber = this.serialNumber.toJSON();\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from X.509:1997\n */\nexport default class AttributeCertificateV1\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV1 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV1}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV1();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV1,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureValue\",\n\t\t\t\"signatureAlgorithm\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV1.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\nimport AltName from \"./AltName.js\";\nimport BasicConstraints from \"./BasicConstraints.js\";\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport NameConstraints from \"./NameConstraints.js\";\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\nimport CertificatePolicies from \"./CertificatePolicies.js\";\nimport PolicyMappings from \"./PolicyMappings.js\";\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\nimport PolicyConstraints from \"./PolicyConstraints.js\";\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\nimport InfoAccess from \"./InfoAccess.js\";\nimport SignedCertificateTimestampList from \"./SignedCertificateTimestampList.js\";\nimport CertificateTemplate from \"./CertificateTemplate.js\";\nimport CAVersion from \"./CAVersion.js\";\nimport QCStatements from \"./QCStatements.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nvar Extension = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for Extension class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function Extension() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Extension);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     * @desc extnID\n     */\n    this.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\n    /**\n     * @type {boolean}\n     * @desc critical\n     */\n\n    this.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\n    /**\n     * @type {OctetString}\n     * @desc extnValue\n     */\n\n    if (\"extnValue\" in parameters) this.extnValue = new asn1js.OctetString({\n      valueHex: parameters.extnValue\n    });else this.extnValue = Extension.defaultValues(\"extnValue\");\n    if (\"parsedValue\" in parameters)\n      /**\n       * @type {Object}\n       * @desc parsedValue\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(Extension, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"extnID\", \"critical\", \"extnValue\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Extension.schema({\n        names: {\n          extnID: \"extnID\",\n          critical: \"critical\",\n          extnValue: \"extnValue\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Extension\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.extnID = asn1.result.extnID.valueBlock.toString();\n      if (\"critical\" in asn1.result) this.critical = asn1.result.critical.valueBlock.value;\n      this.extnValue = asn1.result.extnValue; //region Get \"parsedValue\" for well-known extensions\n\n      asn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\n      if (asn1.offset === -1) return;\n\n      switch (this.extnID) {\n        case \"2.5.29.9\":\n          // SubjectDirectoryAttributes\n          try {\n            this.parsedValue = new SubjectDirectoryAttributes({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new SubjectDirectoryAttributes();\n            this.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\n          }\n\n          break;\n\n        case \"2.5.29.14\":\n          // SubjectKeyIdentifier\n          this.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\n\n          break;\n\n        case \"2.5.29.15\":\n          // KeyUsage\n          this.parsedValue = asn1.result; // Should be just a simple BITSTRING\n\n          break;\n\n        case \"2.5.29.16\":\n          // PrivateKeyUsagePeriod\n          try {\n            this.parsedValue = new PrivateKeyUsagePeriod({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new PrivateKeyUsagePeriod();\n            this.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\n          }\n\n          break;\n\n        case \"2.5.29.17\": // SubjectAltName\n\n        case \"2.5.29.18\":\n          // IssuerAltName\n          try {\n            this.parsedValue = new AltName({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new AltName();\n            this.parsedValue.parsingError = \"Incorrectly formated AltName\";\n          }\n\n          break;\n\n        case \"2.5.29.19\":\n          // BasicConstraints\n          try {\n            this.parsedValue = new BasicConstraints({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new BasicConstraints();\n            this.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\n          }\n\n          break;\n\n        case \"2.5.29.20\": // CRLNumber\n\n        case \"2.5.29.27\":\n          // BaseCRLNumber (delta CRL indicator)\n          this.parsedValue = asn1.result; // Should be just a simple INTEGER\n\n          break;\n\n        case \"2.5.29.21\":\n          // CRLReason\n          this.parsedValue = asn1.result; // Should be just a simple ENUMERATED\n\n          break;\n\n        case \"2.5.29.24\":\n          // InvalidityDate\n          this.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\n\n          break;\n\n        case \"2.5.29.28\":\n          // IssuingDistributionPoint\n          try {\n            this.parsedValue = new IssuingDistributionPoint({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new IssuingDistributionPoint();\n            this.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\n          }\n\n          break;\n\n        case \"2.5.29.29\":\n          // CertificateIssuer\n          try {\n            this.parsedValue = new GeneralNames({\n              schema: asn1.result\n            }); // Should be just a simple\n          } catch (ex) {\n            this.parsedValue = new GeneralNames();\n            this.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\n          }\n\n          break;\n\n        case \"2.5.29.30\":\n          // NameConstraints\n          try {\n            this.parsedValue = new NameConstraints({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new NameConstraints();\n            this.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\n          }\n\n          break;\n\n        case \"2.5.29.31\": // CRLDistributionPoints\n\n        case \"2.5.29.46\":\n          // FreshestCRL\n          try {\n            this.parsedValue = new CRLDistributionPoints({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new CRLDistributionPoints();\n            this.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\n          }\n\n          break;\n\n        case \"2.5.29.32\": // CertificatePolicies\n\n        case \"1.3.6.1.4.1.311.21.10\":\n          // szOID_APPLICATION_CERT_POLICIES - Microsoft-specific OID\n          try {\n            this.parsedValue = new CertificatePolicies({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new CertificatePolicies();\n            this.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n          }\n\n          break;\n\n        case \"2.5.29.33\":\n          // PolicyMappings\n          try {\n            this.parsedValue = new PolicyMappings({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new PolicyMappings();\n            this.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n          }\n\n          break;\n\n        case \"2.5.29.35\":\n          // AuthorityKeyIdentifier\n          try {\n            this.parsedValue = new AuthorityKeyIdentifier({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new AuthorityKeyIdentifier();\n            this.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\n          }\n\n          break;\n\n        case \"2.5.29.36\":\n          // PolicyConstraints\n          try {\n            this.parsedValue = new PolicyConstraints({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new PolicyConstraints();\n            this.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\n          }\n\n          break;\n\n        case \"2.5.29.37\":\n          // ExtKeyUsage\n          try {\n            this.parsedValue = new ExtKeyUsage({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new ExtKeyUsage();\n            this.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\n          }\n\n          break;\n\n        case \"2.5.29.54\":\n          // InhibitAnyPolicy\n          this.parsedValue = asn1.result; // Should be just a simple INTEGER\n\n          break;\n\n        case \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\n\n        case \"1.3.6.1.5.5.7.1.11\":\n          // SubjectInfoAccess\n          try {\n            this.parsedValue = new InfoAccess({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new InfoAccess();\n            this.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\n          }\n\n          break;\n\n        case \"1.3.6.1.4.1.11129.2.4.2\":\n          // SignedCertificateTimestampList\n          try {\n            this.parsedValue = new SignedCertificateTimestampList({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new SignedCertificateTimestampList();\n            this.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\n          }\n\n          break;\n\n        case \"1.3.6.1.4.1.311.20.2\":\n          // szOID_ENROLL_CERTTYPE_EXTENSION - Microsoft-specific extension\n          this.parsedValue = asn1.result; // Used to be simple Unicode string\n\n          break;\n\n        case \"1.3.6.1.4.1.311.21.2\":\n          // szOID_CERTSRV_PREVIOUS_CERT_HASH - Microsoft-specific extension\n          this.parsedValue = asn1.result; // Used to be simple OctetString\n\n          break;\n\n        case \"1.3.6.1.4.1.311.21.7\":\n          // szOID_CERTIFICATE_TEMPLATE - Microsoft-specific extension\n          try {\n            this.parsedValue = new CertificateTemplate({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new CertificateTemplate();\n            this.parsedValue.parsingError = \"Incorrectly formated CertificateTemplate\";\n          }\n\n          break;\n\n        case \"1.3.6.1.4.1.311.21.1\":\n          // szOID_CERTSRV_CA_VERSION - Microsoft-specific extension\n          try {\n            this.parsedValue = new CAVersion({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new CAVersion();\n            this.parsedValue.parsingError = \"Incorrectly formated CAVersion\";\n          }\n\n          break;\n\n        case \"1.3.6.1.5.5.7.1.3\":\n          // QCStatements\n          try {\n            this.parsedValue = new QCStatements({\n              schema: asn1.result\n            });\n          } catch (ex) {\n            this.parsedValue = new QCStatements();\n            this.parsedValue.parsingError = \"Incorrectly formated QCStatements\";\n          }\n\n          break;\n\n        default:\n      } //endregion\n      //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.extnID\n      }));\n      if (this.critical !== Extension.defaultValues(\"critical\")) outputArray.push(new asn1js.Boolean({\n        value: this.critical\n      }));\n      outputArray.push(this.extnValue); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        extnID: this.extnID,\n        extnValue: this.extnValue.toJSON()\n      };\n      if (this.critical !== Extension.defaultValues(\"critical\")) object.critical = this.critical;\n\n      if (\"parsedValue\" in this) {\n        if (\"toJSON\" in this.parsedValue) object.parsedValue = this.parsedValue.toJSON();\n      }\n\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"extnID\":\n          return \"\";\n\n        case \"critical\":\n          return false;\n\n        case \"extnValue\":\n          return new asn1js.OctetString();\n\n        case \"parsedValue\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for Extension class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * Extension  ::=  SEQUENCE  {\n     *    extnID      OBJECT IDENTIFIER,\n     *    critical    BOOLEAN DEFAULT FALSE,\n     *    extnValue   OCTET STRING\n     * }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [extnID]\n       * @property {string} [critical]\n       * @property {string} [extnValue]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.extnID || \"\"\n        }), new asn1js.Boolean({\n          name: names.critical || \"\",\n          optional: true\n        }), new asn1js.OctetString({\n          name: names.extnValue || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return Extension;\n}(); //**************************************************************************************\n\n\nexport { Extension as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Extension.js"],"names":["asn1js","getParametersValue","clearProps","SubjectDirectoryAttributes","PrivateKeyUsagePeriod","AltName","BasicConstraints","IssuingDistributionPoint","GeneralNames","NameConstraints","CRLDistributionPoints","CertificatePolicies","PolicyMappings","AuthorityKeyIdentifier","PolicyConstraints","ExtKeyUsage","InfoAccess","SignedCertificateTimestampList","CertificateTemplate","CAVersion","QCStatements","Extension","parameters","extnID","defaultValues","critical","extnValue","OctetString","valueHex","parsedValue","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","value","fromBER","offset","ex","parsingError","outputArray","push","ObjectIdentifier","Boolean","Sequence","object","toJSON","memberName","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\nimport AltName from \"./AltName.js\";\nimport BasicConstraints from \"./BasicConstraints.js\";\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport NameConstraints from \"./NameConstraints.js\";\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\nimport CertificatePolicies from \"./CertificatePolicies.js\";\nimport PolicyMappings from \"./PolicyMappings.js\";\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\nimport PolicyConstraints from \"./PolicyConstraints.js\";\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\nimport InfoAccess from \"./InfoAccess.js\";\nimport SignedCertificateTimestampList from \"./SignedCertificateTimestampList.js\";\nimport CertificateTemplate from \"./CertificateTemplate.js\";\nimport CAVersion from \"./CAVersion.js\";\nimport QCStatements from \"./QCStatements.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class Extension\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Extension class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc extnID\n\t\t */\n\t\tthis.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc critical\n\t\t */\n\t\tthis.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc extnValue\n\t\t */\n\t\tif(\"extnValue\" in parameters)\n\t\t\tthis.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\n\t\telse\n\t\t\tthis.extnValue = Extension.defaultValues(\"extnValue\");\n\n\t\tif(\"parsedValue\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Object}\n\t\t\t * @desc parsedValue\n\t\t\t */\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"extnID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"critical\":\n\t\t\t\treturn false;\n\t\t\tcase \"extnValue\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"parsedValue\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Extension class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Extension  ::=  SEQUENCE  {\n\t *    extnID      OBJECT IDENTIFIER,\n\t *    critical    BOOLEAN DEFAULT FALSE,\n\t *    extnValue   OCTET STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [extnID]\n\t\t * @property {string} [critical]\n\t\t * @property {string} [extnValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.extnID || \"\") }),\n\t\t\t\tnew asn1js.Boolean({\n\t\t\t\t\tname: (names.critical || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t\tnew asn1js.OctetString({ name: (names.extnValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"extnID\",\n\t\t\t\"critical\",\n\t\t\t\"extnValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tExtension.schema({\n\t\t\t\tnames: {\n\t\t\t\t\textnID: \"extnID\",\n\t\t\t\t\tcritical: \"critical\",\n\t\t\t\t\textnValue: \"extnValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extension\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.extnID = asn1.result.extnID.valueBlock.toString();\n\t\tif(\"critical\" in asn1.result)\n\t\t\tthis.critical = asn1.result.critical.valueBlock.value;\n\t\tthis.extnValue = asn1.result.extnValue;\n\n\t\t//region Get \"parsedValue\" for well-known extensions\n\t\tasn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\n\t\tif(asn1.offset === (-1))\n\t\t\treturn;\n\n\t\tswitch(this.extnID)\n\t\t{\n\t\t\tcase \"2.5.29.9\": // SubjectDirectoryAttributes\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.14\": // SubjectKeyIdentifier\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.15\": // KeyUsage\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple BITSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.16\": // PrivateKeyUsagePeriod\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.17\": // SubjectAltName\n\t\t\tcase \"2.5.29.18\": // IssuerAltName\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AltName({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AltName();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AltName\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.19\": // BasicConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new BasicConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new BasicConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.20\": // CRLNumber\n\t\t\tcase \"2.5.29.27\": // BaseCRLNumber (delta CRL indicator)\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.21\": // CRLReason\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple ENUMERATED\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.24\": // InvalidityDate\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.28\": // IssuingDistributionPoint\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.29\": // CertificateIssuer\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new GeneralNames({ schema: asn1.result }); // Should be just a simple\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new GeneralNames();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.30\": // NameConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new NameConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new NameConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\n\t\t\tcase \"2.5.29.46\": // FreshestCRL\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.32\": // CertificatePolicies\n\t\t\tcase \"1.3.6.1.4.1.311.21.10\": // szOID_APPLICATION_CERT_POLICIES - Microsoft-specific OID\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.33\": // PolicyMappings\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyMappings({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyMappings();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.35\": // AuthorityKeyIdentifier\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.36\": // PolicyConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.37\": // ExtKeyUsage\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.54\": // InhibitAnyPolicy\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\n\t\t\tcase \"1.3.6.1.5.5.7.1.11\": // SubjectInfoAccess\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new InfoAccess({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new InfoAccess();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\": // SignedCertificateTimestampList\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.20.2\": // szOID_ENROLL_CERTTYPE_EXTENSION - Microsoft-specific extension\n\t\t\t\tthis.parsedValue = asn1.result; // Used to be simple Unicode string\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.2\": // szOID_CERTSRV_PREVIOUS_CERT_HASH - Microsoft-specific extension\n\t\t\t\tthis.parsedValue = asn1.result; // Used to be simple OctetString\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.7\": // szOID_CERTIFICATE_TEMPLATE - Microsoft-specific extension\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificateTemplate({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificateTemplate();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificateTemplate\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.1\": // szOID_CERTSRV_CA_VERSION - Microsoft-specific extension\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CAVersion({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CAVersion();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CAVersion\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.3\": // QCStatements\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new QCStatements({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new QCStatements();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated QCStatements\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\n\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.critical }));\n\n\t\toutputArray.push(this.extnValue);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\textnID: this.extnID,\n\t\t\textnValue: this.extnValue.toJSON()\n\t\t};\n\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\n\t\t\tobject.critical = this.critical;\n\n\t\tif(\"parsedValue\" in this)\n\t\t{\n\t\t\tif(\"toJSON\" in this.parsedValue)\n\t\t\t\tobject.parsedValue = this.parsedValue.toJSON();\n\t\t}\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
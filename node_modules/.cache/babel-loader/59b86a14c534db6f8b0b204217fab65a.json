{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getCrypto } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport ECPublicKey from \"./ECPublicKey.js\";\nimport RSAPublicKey from \"./RSAPublicKey.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nvar PublicKeyInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\n   * Constructor for PublicKeyInfo class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  function PublicKeyInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PublicKeyInfo);\n\n    //region Internal properties of the object\n\n    /**\n     * @type {AlgorithmIdentifier}\n     * @desc Algorithm identifier\n     */\n    this.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\n    /**\n     * @type {BitString}\n     * @desc Subject public key value\n     */\n\n    this.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\n    if (\"parsedKey\" in parameters)\n      /**\n       * @type {ECPublicKey|RSAPublicKey}\n       * @desc Parsed public key value\n       */\n      this.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  _createClass(PublicKeyInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\n     * Convert parsed asn1js object into current class\n     * @param {!Object} schema\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"algorithm\", \"subjectPublicKey\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PublicKeyInfo.schema({\n        names: {\n          algorithm: {\n            names: {\n              blockName: \"algorithm\"\n            }\n          },\n          subjectPublicKey: \"subjectPublicKey\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PublicKeyInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.algorithm = new AlgorithmIdentifier({\n        schema: asn1.result.algorithm\n      });\n      this.subjectPublicKey = asn1.result.subjectPublicKey;\n\n      switch (this.algorithm.algorithmId) {\n        case \"1.2.840.10045.2.1\":\n          // ECDSA\n          if (\"algorithmParams\" in this.algorithm) {\n            if (this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName()) {\n              try {\n                this.parsedKey = new ECPublicKey({\n                  namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n                  schema: this.subjectPublicKey.valueBlock.valueHex\n                });\n              } catch (ex) {} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\n            }\n          }\n\n          break;\n\n        case \"1.2.840.113549.1.1.1\":\n          // RSA\n          {\n            var publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\n\n            if (publicKeyASN1.offset !== -1) {\n              try {\n                this.parsedKey = new RSAPublicKey({\n                  schema: publicKeyASN1.result\n                });\n              } catch (ex) {} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\n            }\n          }\n          break;\n\n        default:\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\n     * Convert current object to asn1js object and set correct values\n     * @returns {Object} asn1js object\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.algorithm.toSchema(), this.subjectPublicKey]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convertion for the class to JSON object\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      //region Return common value in case we do not have enough info fo making JWK\n      if (\"parsedKey\" in this === false) {\n        return {\n          algorithm: this.algorithm.toJSON(),\n          subjectPublicKey: this.subjectPublicKey.toJSON()\n        };\n      } //endregion\n      //region Making JWK\n\n\n      var jwk = {};\n\n      switch (this.algorithm.algorithmId) {\n        case \"1.2.840.10045.2.1\":\n          // ECDSA\n          jwk.kty = \"EC\";\n          break;\n\n        case \"1.2.840.113549.1.1.1\":\n          // RSA\n          jwk.kty = \"RSA\";\n          break;\n\n        default:\n      }\n\n      var publicKeyJWK = this.parsedKey.toJSON();\n\n      for (var _i = 0, _Object$keys = Object.keys(publicKeyJWK); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        jwk[key] = publicKeyJWK[key];\n      }\n\n      return jwk; //endregion\n    } //**********************************************************************************\n\n    /**\n     * Convert JSON value into current object\n     * @param {Object} json\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (\"kty\" in json) {\n        switch (json.kty.toUpperCase()) {\n          case \"EC\":\n            this.parsedKey = new ECPublicKey({\n              json: json\n            });\n            this.algorithm = new AlgorithmIdentifier({\n              algorithmId: \"1.2.840.10045.2.1\",\n              algorithmParams: new asn1js.ObjectIdentifier({\n                value: this.parsedKey.namedCurve\n              })\n            });\n            break;\n\n          case \"RSA\":\n            this.parsedKey = new RSAPublicKey({\n              json: json\n            });\n            this.algorithm = new AlgorithmIdentifier({\n              algorithmId: \"1.2.840.113549.1.1.1\",\n              algorithmParams: new asn1js.Null()\n            });\n            break;\n\n          default:\n            throw new Error(\"Invalid value for \\\"kty\\\" parameter: \".concat(json.kty));\n        }\n\n        this.subjectPublicKey = new asn1js.BitString({\n          valueHex: this.parsedKey.toSchema().toBER(false)\n        });\n      }\n    } //**********************************************************************************\n\n  }, {\n    key: \"importKey\",\n    value: function importKey(publicKey) {\n      //region Initial variables\n      var sequence = Promise.resolve();\n\n      var _this = this; //endregion\n      //region Initial check\n\n\n      if (typeof publicKey === \"undefined\") return Promise.reject(\"Need to provide publicKey input parameter\"); //endregion\n      //region Get a \"crypto\" extension\n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n      //region Export public key\n\n      sequence = sequence.then(function () {\n        return crypto.exportKey(\"spki\", publicKey);\n      }); //endregion\n      //region Initialize internal variables by parsing exported value\n\n      sequence = sequence.then(\n      /**\n       * @param {ArrayBuffer} exportedKey\n       */\n      function (exportedKey) {\n        var asn1 = asn1js.fromBER(exportedKey);\n\n        try {\n          _this.fromSchema(asn1.result);\n        } catch (exception) {\n          return Promise.reject(\"Error during initializing object from schema\");\n        }\n\n        return undefined;\n      }, function (error) {\n        return Promise.reject(\"Error during exporting public key: \".concat(error));\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"algorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"subjectPublicKey\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for PublicKeyInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\n     * Return value of pre-defined ASN.1 schema for current class\n     *\n     * ASN.1 schema:\n     * ```asn1\n     * SubjectPublicKeyInfo  ::=  Sequence  {\n     *    algorithm            AlgorithmIdentifier,\n     *    subjectPublicKey     BIT STRING  }\n     * ```\n     *\n     * @param {Object} parameters Input parameters for the schema\n     * @returns {Object} asn1js schema object\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\n       * @type {Object}\n       * @property {string} [blockName]\n       * @property {string} [algorithm]\n       * @property {string} [subjectPublicKey]\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AlgorithmIdentifier.schema(names.algorithm || {}), new asn1js.BitString({\n          name: names.subjectPublicKey || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return PublicKeyInfo;\n}(); //**************************************************************************************\n\n\nexport { PublicKeyInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PublicKeyInfo.js"],"names":["asn1js","getParametersValue","clearProps","getCrypto","AlgorithmIdentifier","ECPublicKey","RSAPublicKey","PublicKeyInfo","parameters","algorithm","defaultValues","subjectPublicKey","parsedKey","fromSchema","schema","fromJSON","json","asn1","compareSchema","names","blockName","verified","Error","result","algorithmId","algorithmParams","constructor","ObjectIdentifier","namedCurve","valueBlock","toString","valueHex","ex","publicKeyASN1","fromBER","offset","Sequence","value","toSchema","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","BitString","toBER","publicKey","sequence","Promise","resolve","_this","reject","crypto","then","exportKey","exportedKey","exception","undefined","error","memberName","name"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,YAAP,MAAyB,mBAAzB,C,CACA;;AACA;AACA;AACA;;IACqBC,a;AAEpB;;AACA;AACD;AACA;AACA;AACA;AACC,2BACA;AAAA,QADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,SAAL,GAAiBR,kBAAkB,CAACO,UAAD,EAAa,WAAb,EAA0BD,aAAa,CAACG,aAAd,CAA4B,WAA5B,CAA1B,CAAnC;AACA;AACF;AACA;AACA;;AACE,SAAKC,gBAAL,GAAwBV,kBAAkB,CAACO,UAAD,EAAa,kBAAb,EAAiCD,aAAa,CAACG,aAAd,CAA4B,kBAA5B,CAAjC,CAA1C;AAEA,QAAG,eAAeF,UAAlB;AACC;AACH;AACA;AACA;AACG,WAAKI,SAAL,GAAiBX,kBAAkB,CAACO,UAAD,EAAa,WAAb,EAA0BD,aAAa,CAACG,aAAd,CAA4B,WAA5B,CAA1B,CAAnC,CAlBF,CAmBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,UAAU,CAACM,MAA3B,EAvBF,CAwBC;AACA;;AACA,QAAG,UAAUN,UAAb,EACC,KAAKO,QAAL,CAAcP,UAAU,CAACQ,IAAzB,EA3BF,CA4BC;AACA,G,CACD;;AACA;AACD;AACA;AACA;;;;;WA6CC;;AACA;AACD;AACA;AACA;AACC,wBAAWF,MAAX,EACA;AACC;AACAZ,MAAAA,UAAU,CAACY,MAAD,EAAS,CAClB,WADkB,EAElB,kBAFkB,CAAT,CAAV,CAFD,CAMC;AAEA;;AACA,UAAMG,IAAI,GAAGjB,MAAM,CAACkB,aAAP,CAAqBJ,MAArB,EACZA,MADY,EAEZP,aAAa,CAACO,MAAd,CAAqB;AACpBK,QAAAA,KAAK,EAAE;AACNV,UAAAA,SAAS,EAAE;AACVU,YAAAA,KAAK,EAAE;AACNC,cAAAA,SAAS,EAAE;AADL;AADG,WADL;AAMNT,UAAAA,gBAAgB,EAAE;AANZ;AADa,OAArB,CAFY,CAAb;AAcA,UAAGM,IAAI,CAACI,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,uEAAV,CAAN,CAxBF,CAyBC;AAEA;;AACA,WAAKb,SAAL,GAAiB,IAAIL,mBAAJ,CAAwB;AAAEU,QAAAA,MAAM,EAAEG,IAAI,CAACM,MAAL,CAAYd;AAAtB,OAAxB,CAAjB;AACA,WAAKE,gBAAL,GAAwBM,IAAI,CAACM,MAAL,CAAYZ,gBAApC;;AAEA,cAAO,KAAKF,SAAL,CAAee,WAAtB;AAEC,aAAK,mBAAL;AAA0B;AACzB,cAAG,qBAAqB,KAAKf,SAA7B,EACA;AACC,gBAAG,KAAKA,SAAL,CAAegB,eAAf,CAA+BC,WAA/B,CAA2CN,SAA3C,OAA2DpB,MAAM,CAAC2B,gBAAP,CAAwBP,SAAxB,EAA9D,EACA;AACC,kBACA;AACC,qBAAKR,SAAL,GAAiB,IAAIP,WAAJ,CAAgB;AAChCuB,kBAAAA,UAAU,EAAE,KAAKnB,SAAL,CAAegB,eAAf,CAA+BI,UAA/B,CAA0CC,QAA1C,EADoB;AAEhChB,kBAAAA,MAAM,EAAE,KAAKH,gBAAL,CAAsBkB,UAAtB,CAAiCE;AAFT,iBAAhB,CAAjB;AAIA,eAND,CAOA,OAAMC,EAAN,EAAS,CAAE,CARZ,CAQa;;AACZ;AACD;;AACD;;AACD,aAAK,sBAAL;AAA6B;AAC5B;AACC,gBAAMC,aAAa,GAAGjC,MAAM,CAACkC,OAAP,CAAe,KAAKvB,gBAAL,CAAsBkB,UAAtB,CAAiCE,QAAhD,CAAtB;;AACA,gBAAGE,aAAa,CAACE,MAAd,KAA0B,CAAC,CAA9B,EACA;AACC,kBACA;AACC,qBAAKvB,SAAL,GAAiB,IAAIN,YAAJ,CAAiB;AAAEQ,kBAAAA,MAAM,EAAEmB,aAAa,CAACV;AAAxB,iBAAjB,CAAjB;AACA,eAHD,CAIA,OAAMS,EAAN,EAAS,CAAE,CALZ,CAKa;;AACZ;AACD;AACD;;AACD;AA/BD,OA/BD,CAgEC;;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,oBACA;AACC;AACA,aAAQ,IAAIhC,MAAM,CAACoC,QAAX,CAAoB;AAC3BC,QAAAA,KAAK,EAAE,CACN,KAAK5B,SAAL,CAAe6B,QAAf,EADM,EAEN,KAAK3B,gBAFC;AADoB,OAApB,CAAR,CAFD,CAQC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBACA;AACC;AACA,UAAI,eAAe,IAAhB,KAA0B,KAA7B,EACA;AACC,eAAO;AACNF,UAAAA,SAAS,EAAE,KAAKA,SAAL,CAAe8B,MAAf,EADL;AAEN5B,UAAAA,gBAAgB,EAAE,KAAKA,gBAAL,CAAsB4B,MAAtB;AAFZ,SAAP;AAIA,OARF,CASC;AAEA;;;AACA,UAAMC,GAAG,GAAG,EAAZ;;AAEA,cAAO,KAAK/B,SAAL,CAAee,WAAtB;AAEC,aAAK,mBAAL;AAA0B;AACzBgB,UAAAA,GAAG,CAACC,GAAJ,GAAU,IAAV;AACA;;AACD,aAAK,sBAAL;AAA6B;AAC5BD,UAAAA,GAAG,CAACC,GAAJ,GAAU,KAAV;AACA;;AACD;AARD;;AAWA,UAAMC,YAAY,GAAG,KAAK9B,SAAL,CAAe2B,MAAf,EAArB;;AAEA,sCAAiBI,MAAM,CAACC,IAAP,CAAYF,YAAZ,CAAjB;AAAI,YAAMG,GAAG,mBAAT;AACHL,QAAAA,GAAG,CAACK,GAAD,CAAH,GAAWH,YAAY,CAACG,GAAD,CAAvB;AADD;;AAGA,aAAOL,GAAP,CA9BD,CA+BC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBAASxB,IAAT,EACA;AACC,UAAG,SAASA,IAAZ,EACA;AACC,gBAAOA,IAAI,CAACyB,GAAL,CAASK,WAAT,EAAP;AAEC,eAAK,IAAL;AACC,iBAAKlC,SAAL,GAAiB,IAAIP,WAAJ,CAAgB;AAAEW,cAAAA,IAAI,EAAJA;AAAF,aAAhB,CAAjB;AAEA,iBAAKP,SAAL,GAAiB,IAAIL,mBAAJ,CAAwB;AACxCoB,cAAAA,WAAW,EAAE,mBAD2B;AAExCC,cAAAA,eAAe,EAAE,IAAIzB,MAAM,CAAC2B,gBAAX,CAA4B;AAAEU,gBAAAA,KAAK,EAAE,KAAKzB,SAAL,CAAegB;AAAxB,eAA5B;AAFuB,aAAxB,CAAjB;AAIA;;AACD,eAAK,KAAL;AACC,iBAAKhB,SAAL,GAAiB,IAAIN,YAAJ,CAAiB;AAAEU,cAAAA,IAAI,EAAJA;AAAF,aAAjB,CAAjB;AAEA,iBAAKP,SAAL,GAAiB,IAAIL,mBAAJ,CAAwB;AACxCoB,cAAAA,WAAW,EAAE,sBAD2B;AAExCC,cAAAA,eAAe,EAAE,IAAIzB,MAAM,CAAC+C,IAAX;AAFuB,aAAxB,CAAjB;AAIA;;AACD;AACC,kBAAM,IAAIzB,KAAJ,gDAAgDN,IAAI,CAACyB,GAArD,EAAN;AAnBF;;AAsBA,aAAK9B,gBAAL,GAAwB,IAAIX,MAAM,CAACgD,SAAX,CAAqB;AAAEjB,UAAAA,QAAQ,EAAE,KAAKnB,SAAL,CAAe0B,QAAf,GAA0BW,KAA1B,CAAgC,KAAhC;AAAZ,SAArB,CAAxB;AACA;AACD,K,CACD;;;;WACA,mBAAUC,SAAV,EACA;AACC;AACA,UAAIC,QAAQ,GAAGC,OAAO,CAACC,OAAR,EAAf;;AACA,UAAMC,KAAK,GAAG,IAAd,CAHD,CAIC;AAEA;;;AACA,UAAG,OAAOJ,SAAP,KAAqB,WAAxB,EACC,OAAOE,OAAO,CAACG,MAAR,CAAe,2CAAf,CAAP,CARF,CASC;AAEA;;AACA,UAAMC,MAAM,GAAGrD,SAAS,EAAxB;AACA,UAAG,OAAOqD,MAAP,KAAkB,WAArB,EACC,OAAOJ,OAAO,CAACG,MAAR,CAAe,mCAAf,CAAP,CAdF,CAeC;AAEA;;AACAJ,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc;AAAA,eACxBD,MAAM,CAACE,SAAP,CAAiB,MAAjB,EAAyBR,SAAzB,CADwB;AAAA,OAAd,CAAX,CAlBD,CAoBC;AAEA;;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT;AACV;AACH;AACA;AACG,gBAAAE,WAAW,EACX;AACC,YAAM1C,IAAI,GAAGjB,MAAM,CAACkC,OAAP,CAAeyB,WAAf,CAAb;;AACA,YACA;AACCL,UAAAA,KAAK,CAACzC,UAAN,CAAiBI,IAAI,CAACM,MAAtB;AACA,SAHD,CAIA,OAAMqC,SAAN,EACA;AACC,iBAAOR,OAAO,CAACG,MAAR,CAAe,8CAAf,CAAP;AACA;;AAED,eAAOM,SAAP;AACA,OAjBS,EAkBV,UAAAC,KAAK;AAAA,eAAIV,OAAO,CAACG,MAAR,8CAAqDO,KAArD,EAAJ;AAAA,OAlBK,CAAX,CAvBD,CA2CC;;AAEA,aAAOX,QAAP;AACA,K,CACD;;;;WA9PA,uBAAqBY,UAArB,EACA;AACC,cAAOA,UAAP;AAEC,aAAK,WAAL;AACC,iBAAO,IAAI3D,mBAAJ,EAAP;;AACD,aAAK,kBAAL;AACC,iBAAO,IAAIJ,MAAM,CAACgD,SAAX,EAAP;;AACD;AACC,gBAAM,IAAI1B,KAAJ,wDAA0DyC,UAA1D,EAAN;AAPF;AASA,K,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBACA;AAAA,UADcvD,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACE,UAAMW,KAAK,GAAGlB,kBAAkB,CAACO,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,aAAQ,IAAIR,MAAM,CAACoC,QAAX,CAAoB;AAC3B4B,QAAAA,IAAI,EAAG7C,KAAK,CAACC,SAAN,IAAmB,EADC;AAE3BiB,QAAAA,KAAK,EAAE,CACNjC,mBAAmB,CAACU,MAApB,CAA2BK,KAAK,CAACV,SAAN,IAAmB,EAA9C,CADM,EAEN,IAAIT,MAAM,CAACgD,SAAX,CAAqB;AAAEgB,UAAAA,IAAI,EAAG7C,KAAK,CAACR,gBAAN,IAA0B;AAAnC,SAArB,CAFM;AAFoB,OAApB,CAAR;AAOA;;;;KAqNF;;;SA5SqBJ,a","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getCrypto } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport ECPublicKey from \"./ECPublicKey.js\";\nimport RSAPublicKey from \"./RSAPublicKey.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class PublicKeyInfo \n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for PublicKeyInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc Algorithm identifier\n\t\t */\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc Subject public key value\n\t\t */\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\n\t\t\n\t\tif(\"parsedKey\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\n\t\t\t * @desc Parsed public key value\n\t\t\t */\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif(\"json\" in parameters)\n\t\t\tthis.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"algorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"subjectPublicKey\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * SubjectPublicKeyInfo  ::=  Sequence  {\n\t *    algorithm            AlgorithmIdentifier,\n\t *    subjectPublicKey     BIT STRING  }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [algorithm]\n\t\t * @property {string} [subjectPublicKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"algorithm\",\n\t\t\t\"subjectPublicKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tPublicKeyInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"algorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\n\t\t\n\t\tswitch(this.algorithm.algorithmId)\n\t\t{\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\n\t\t\t\t{\n\t\t\t\t\tif(this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName())\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\n\t\t\t\t{\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.algorithm.toSchema(),\n\t\t\t\tthis.subjectPublicKey\n\t\t\t]\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\t//region Return common value in case we do not have enough info fo making JWK\n\t\tif((\"parsedKey\" in this) === false)\n\t\t{\n\t\t\treturn {\n\t\t\t\talgorithm: this.algorithm.toJSON(),\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\n\t\t\t};\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Making JWK\n\t\tconst jwk = {};\n\t\t\n\t\tswitch(this.algorithm.algorithmId)\n\t\t{\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\n\t\t\t\tjwk.kty = \"EC\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\n\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\n\t\t\n\t\tfor(const key of Object.keys(publicKeyJWK))\n\t\t\tjwk[key] = publicKeyJWK[key];\n\t\t\n\t\treturn jwk;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert JSON value into current object\n\t * @param {Object} json\n\t */\n\tfromJSON(json)\n\t{\n\t\tif(\"kty\" in json)\n\t\t{\n\t\t\tswitch(json.kty.toUpperCase())\n\t\t\t{\n\t\t\t\tcase \"EC\":\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\n\t\t\t\t\t\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"RSA\":\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\n\t\t\t\t\t\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n\t\t\t}\n\t\t\t\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n\t\t}\n\t}\n\t//**********************************************************************************\n\timportKey(publicKey)\n\t{\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\t\tconst _this = this;\n\t\t//endregion\n\t\t\n\t\t//region Initial check\n\t\tif(typeof publicKey === \"undefined\")\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\n\t\t//endregion\n\t\t\n\t\t//region Get a \"crypto\" extension\n\t\tconst crypto = getCrypto();\n\t\tif(typeof crypto === \"undefined\")\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\n\t\t//endregion\n\t\t\n\t\t//region Export public key\n\t\tsequence = sequence.then(() =>\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\n\t\t//endregion\n\t\t\n\t\t//region Initialize internal variables by parsing exported value\n\t\tsequence = sequence.then(\n\t\t\t/**\n\t\t\t * @param {ArrayBuffer} exportedKey\n\t\t\t */\n\t\t\texportedKey =>\n\t\t\t{\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t_this.fromSchema(asn1.result);\n\t\t\t\t}\n\t\t\t\tcatch(exception)\n\t\t\t\t{\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\terror => Promise.reject(`Error during exporting public key: ${error}`)\n\t\t);\n\t\t//endregion\n\t\t\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { stringPrep } from \"./common.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar AttributeTypeAndValue = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AttributeTypeAndValue class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function AttributeTypeAndValue() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AttributeTypeAndValue);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc type\r\n     */\n    this.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\n    /**\r\n     * @type {Object}\r\n     * @desc Value of the AttributeTypeAndValue class\r\n     */\n\n    this.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(AttributeTypeAndValue, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"type\", \"typeValue\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n        names: {\n          type: \"type\",\n          value: \"typeValue\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.type = asn1.result.type.valueBlock.toString(); // noinspection JSUnresolvedVariable\n\n      this.value = asn1.result.typeValue; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.type\n        }), this.value]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        type: this.type\n      };\n      if (Object.keys(this.value).length !== 0) _object.value = this.value.toJSON();else _object.value = this.value;\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n     * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(compareTo) {\n      var stringBlockNames = [asn1js.Utf8String.blockName(), asn1js.BmpString.blockName(), asn1js.UniversalString.blockName(), asn1js.NumericString.blockName(), asn1js.PrintableString.blockName(), asn1js.TeletexString.blockName(), asn1js.VideotexString.blockName(), asn1js.IA5String.blockName(), asn1js.GraphicString.blockName(), asn1js.VisibleString.blockName(), asn1js.GeneralString.blockName(), asn1js.CharacterString.blockName()];\n\n      if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\n        if (this.type !== compareTo.type) return false; //region Check we do have both strings\n\n        var isString = [false, false];\n        var thisName = this.value.constructor.blockName();\n\n        var _iterator = _createForOfIteratorHelper(stringBlockNames),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var name = _step.value;\n\n            if (thisName === name) {\n              isString[0] = true;\n            }\n\n            if (compareTo.value.constructor.blockName() === name) {\n              isString[1] = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (isString[0] ^ isString[1]) return false;\n        isString = isString[0] && isString[1]; //endregion\n\n        if (isString) {\n          var value1 = stringPrep(this.value.valueBlock.value);\n          var value2 = stringPrep(compareTo.value.valueBlock.value);\n          if (value1.localeCompare(value2) !== 0) return false;\n        } else // Comparing as two ArrayBuffers\n          {\n            if (isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false) return false;\n          }\n\n        return true;\n      }\n\n      if (compareTo instanceof ArrayBuffer) return isEqualBuffer(this.value.valueBeforeDecode, compareTo);\n      return false;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"type\":\n          return \"\";\n\n        case \"value\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for AttributeTypeAndValue class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * AttributeTypeAndValue ::= Sequence {\r\n     *    type     AttributeType,\r\n     *    value    AttributeValue }\r\n     *\r\n     * AttributeType ::= OBJECT IDENTIFIER\r\n     *\r\n     * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName] Name for entire block\r\n       * @property {string} [type] Name for \"type\" element\r\n       * @property {string} [value] Name for \"value\" element\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.type || \"\"\n        }), new asn1js.Any({\n          name: names.value || \"\"\n        })]\n      });\n    } //**********************************************************************************\n\n  }, {\n    key: \"blockName\",\n    value: function blockName() {\n      return \"AttributeTypeAndValue\";\n    }\n  }]);\n\n  return AttributeTypeAndValue;\n}(); //**************************************************************************************\n\n\nexport { AttributeTypeAndValue as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AttributeTypeAndValue.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","stringPrep","AttributeTypeAndValue","parameters","type","defaultValues","value","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","typeValue","Sequence","ObjectIdentifier","_object","Object","keys","length","toJSON","compareTo","stringBlockNames","Utf8String","blockName","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","constructor","isString","thisName","name","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer","memberName","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeTypeAndValue ::= Sequence {\r\n\t *    type     AttributeType,\r\n\t *    value    AttributeValue }\r\n\t *\r\n\t * AttributeType ::= OBJECT IDENTIFIER\r\n\t *\r\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"AttributeTypeAndValue\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tconst stringBlockNames = [\r\n\t\t\tasn1js.Utf8String.blockName(),\r\n\t\t\tasn1js.BmpString.blockName(),\r\n\t\t\tasn1js.UniversalString.blockName(),\r\n\t\t\tasn1js.NumericString.blockName(),\r\n\t\t\tasn1js.PrintableString.blockName(),\r\n\t\t\tasn1js.TeletexString.blockName(),\r\n\t\t\tasn1js.VideotexString.blockName(),\r\n\t\t\tasn1js.IA5String.blockName(),\r\n\t\t\tasn1js.GraphicString.blockName(),\r\n\t\t\tasn1js.VisibleString.blockName(),\r\n\t\t\tasn1js.GeneralString.blockName(),\r\n\t\t\tasn1js.CharacterString.blockName()\r\n\t\t];\r\n\r\n\t\tif(compareTo.constructor.blockName() === AttributeTypeAndValue.blockName())\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t//region Check we do have both strings\r\n\t\t\tlet isString = [false, false];\r\n\t\t\tconst thisName = this.value.constructor.blockName();\r\n\t\t\tfor(const name of stringBlockNames)\r\n\t\t\t{\r\n\t\t\t\tif(thisName === name)\r\n\t\t\t\t{\r\n\t\t\t\t\tisString[0] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(compareTo.value.constructor.blockName() === name)\r\n\t\t\t\t{\r\n\t\t\t\t\tisString[1] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(isString[0] ^ isString[1])\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tisString = (isString[0] && isString[1]);\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(isString)\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
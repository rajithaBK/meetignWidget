{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _apply = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/apply\"));\n\nvar _deleteProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/delete-property\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _cloneDeep2 = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _common = require(\"@webex/common\");\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _verbToType;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar verbToType = (_verbToType = {}, (0, _defineProperty2.default)(_verbToType, _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED), (0, _defineProperty2.default)(_verbToType, _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED), (0, _defineProperty2.default)(_verbToType, _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED), _verbToType);\n\nvar getRoomType = function getRoomType(roomTags) {\n  return roomTags.includes(_common.SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ? _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT : _common.SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n};\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\n\n\nvar Messages = _webexCore.WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply.default)(_webexCore.WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`);\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.webex, _common.SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.webex.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.webex.internal.mercury, _common.SDK_EVENT.INTERNAL.WEBEX_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create: function create(message) {\n    var key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      (0, _deleteProperty.default)(message, 'file');\n    }\n\n    if ((0, _isArray2.default)(message.files) && message.files.reduce(function (type, file) {\n      return type || typeof file !== 'string';\n    }, false)) {\n      key = 'formData';\n    }\n\n    var options = (0, _defineProperty2.default)({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages'\n    }, key, message);\n    return this.request(options).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get: function get(message) {\n    var id = message.id || message;\n    return this.request({\n      service: 'hydra',\n      resource: \"messages/\".concat(id)\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list: function list(options) {\n    var _this2 = this;\n\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    }).then(function (res) {\n      return new _webexCore.Page(res, _this2.webex);\n    });\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove: function remove(message) {\n    var id = message.id || message;\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: \"messages/\".concat(id)\n    }).then(function (res) {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Curry the 'trigger' method\n   * @private\n   * @memberof Messages\n   * @param {string} type the type of event to fire\n   * @returns {function} takes event and triggers it\n   */\n  fire: function fire(type) {\n    var _this3 = this;\n\n    return function (event) {\n      return _this3.trigger(type, event);\n    };\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @param {Object} event.data contains the data of the event\n   * @param {Object} event.data.activity the activity that triggered the event\n   * @returns {void}\n   */\n  onWebexApiEvent: function onWebexApiEvent(_ref) {\n    var activity = _ref.data.activity;\n    var type = verbToType[activity.verb];\n\n    if (!type) {\n      return;\n    }\n\n    this.getMessageEvent(activity, type).then(this.fire(type));\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {String} type the type of event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent: function getMessageEvent(activity, type) {\n    var id = activity.id,\n        _activity$actor = activity.actor,\n        actorId = _activity$actor.entryUUID,\n        emailAddress = _activity$actor.emailAddress,\n        objectId = activity.object.id,\n        _activity$target = activity.target,\n        roomId = _activity$target.id,\n        roomUrl = _activity$target.url,\n        roomTags = _activity$target.tags;\n    var cluster = (0, _common.getHydraClusterString)(this.webex, roomUrl);\n    var combinedEvent = (0, _cloneDeep2.default)(this.eventEnvelope);\n    combinedEvent.event = type;\n\n    if (type === _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n      // Cannot fetch since the message is deleted\n      // Convert the Mercury event to a Hydra event\n      var personId = (0, _common.buildHydraPersonId)(actorId, cluster);\n      return _promise.default.resolve(_objectSpread(_objectSpread({}, combinedEvent), {}, {\n        actorId: personId,\n        data: {\n          id: (0, _common.buildHydraMessageId)(objectId, cluster),\n          personEmail: emailAddress || actorId,\n          personId: personId,\n          roomId: (0, _common.buildHydraRoomId)(roomId, cluster),\n          roomType: getRoomType(roomTags)\n        }\n      }));\n    }\n\n    return this.get((0, _common.buildHydraMessageId)(id, cluster)).then(function (data) {\n      return _objectSpread(_objectSpread({}, combinedEvent), {}, {\n        actorId: data.personId,\n        data: data\n      });\n    });\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = Messages;\nexports.default = _default;","map":{"version":3,"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,KAzIkC,eAyI9Bf,OAzI8B,EAyIrB;AACX,QAAMgB,EAAE,GAAGhB,OAAO,CAACgB,EAARhB,IAAcA,OAAzB;AAEA,WAAO,KAAKY,OAAL,CAAa;AAClBF,aAAO,EAAE,OADS;AAElBC,cAAQ,qBAAcK,EAAd;AAFU,KAAb,EAIJ5B,IAJI,CAIC,UAACyB,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJD,CAASI,KAATJ,IAAkBA,GAAG,CAACC,IAA/B;AAJD,MAAP;AA5IgC;;AAmJlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEI,MA1LkC,gBA0L7BV,OA1L6B,EA0LpB;AAAA;;AACZ,WAAO,KAAKI,OAAL,CAAa;AAClBF,aAAO,EAAE,OADS;AAElBC,cAAQ,EAAE,UAFQ;AAGlBQ,QAAE,EAAEX;AAHc,KAAb,EAKJpB,IALI,CAKC,UAACyB,GAAD;AAAA,aAAS,IAAIO,eAAJ,CAASP,GAAT,EAAcQ,MAAI,CAACpC,KAAnB,CAAT;AALD,MAAP;AA3LgC;;AAmMlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEqC,QA3OkC,kBA2O3BtB,OA3O2B,EA2OlB;AACd,QAAMgB,EAAE,GAAGhB,OAAO,CAACgB,EAARhB,IAAcA,OAAzB;AAEA,WAAO,KAAKY,OAAL,CAAa;AAClBH,YAAM,EAAE,QADU;AAElBC,aAAO,EAAE,OAFS;AAGlBC,cAAQ,qBAAcK,EAAd;AAHU,KAAb,EAKJ5B,IALI,CAKC,UAACyB,GAAD,EAAS;AACb;AACA;AACA,UAAIA,GAAG,CAACU,UAAJV,KAAmB,GAAvB,EAA4B;AAC1B,eAAOW,SAAP;AACD;;AAED,aAAOX,GAAG,CAACC,IAAX;AAZG,MAAP;AA9OgC;;AA8PlC;AACF;AACA;AACA;AACA;AACA;AACA;AACEW,MArQkC,gBAqQ7BlB,IArQ6B,EAqQvB;AAAA;;AACT,WAAO,UAACV,KAAD;AAAA,aAAW6B,MAAI,CAACC,OAAL,CAAapB,IAAb,EAAmBV,KAAnB,CAAX;AAAP;AAtQgC;;AAyQlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,iBApRkC,iCAoRE;AAAA,QAAZ8B,QAAY,QAAnBC,IAAmB,CAAZD,QAAY;AAClC,QAAMrB,IAAI,GAAGjD,UAAU,CAACsE,QAAQ,CAACE,IAAV,CAAvB;;AAEA,QAAI,CAACvB,IAAL,EAAW;AACT;AACD;;AAED,SAAKwB,eAAL,CAAqBH,QAArB,EAA+BrB,IAA/B,EACGnB,IADH,CACQ,KAAKqC,IAAL,CAAUlB,IAAV,CADR;AA3RgC;;AA+RlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEwB,iBAzSkC,2BAySlBH,QAzSkB,EAySRrB,IAzSQ,EAySF;AAC9B,QACES,EADF,GAKIY,QALJ,CACEZ,EADF;AAAA,0BAKIY,QALJ,CAEEI,KAFF;AAAA,QAEqBC,OAFrB,mBAEUC,SAFV;AAAA,QAE8BC,YAF9B,mBAE8BA,YAF9B;AAAA,QAGeC,QAHf,GAKIR,QALJ,CAGES,MAEET,CAFOZ,EAHX;AAAA,2BAKIY,QALJ,CAIEU,MAJF;AAAA,QAIeC,MAJf,oBAIWvB,EAJX;AAAA,QAI4BwB,OAJ5B,oBAIuBC,GAJvB;AAAA,QAI2CvE,QAJ3C,oBAIqCwE,IAJrC;AAOA,QAAMC,OAAO,GAAG,mCAAsB,KAAK1D,KAA3B,EAAkCuD,OAAlC,CAAhB;AACA,QAAMI,aAAa,GAAG,yBAAU,KAAKrD,aAAf,CAAtB;AAEAqD,iBAAa,CAAC/C,KAAd+C,GAAsBrC,IAAtBqC;;AACA,QAAIrC,IAAI,KAAKhD,kBAAUI,QAAVJ,CAAmBK,UAAnBL,CAA8BS,OAA3C,EAAoD;AAClD;AACA;AACA,UAAM6E,QAAQ,GAAG,gCAAmBZ,OAAnB,EAA4BU,OAA5B,CAAjB;AAEA,aAAOG,iBAAQC,OAAR,iCACFH,aADE;AAELX,eAAO,EAAEY,QAFJ;AAGLhB,YAAI,EAAE;AACJb,YAAE,EAAE,iCAAoBoB,QAApB,EAA8BO,OAA9B,CADA;AAEJK,qBAAW,EAAEb,YAAY,IAAIF,OAFzB;AAGJY,kBAAQ,EAARA,QAHI;AAIJN,gBAAM,EAAE,8BAAiBA,MAAjB,EAAyBI,OAAzB,CAJJ;AAKJM,kBAAQ,EAAEhF,WAAW,CAACC,QAAD;AALjB;AAHD,SAAP;AAWD;;AAED,WAAO,KAAK6C,GAAL,CAAS,iCAAoBC,EAApB,EAAwB2B,OAAxB,CAAT,EACJvD,IADI,CACC,UAACyC,IAAD;AAAA,6CACDe,aADC;AAEJX,eAAO,EAAEJ,IAAI,CAACgB,QAFV;AAGJhB,YAAI,EAAJA;AAHI;AADD,MAAP;AAvUgC;AAAAqB;AAAA,CAAnBxE,CAAjB;;eAgVeD","names":["verbToType","SDK_EVENT","INTERNAL","ACTIVITY_VERB","SHARE","EXTERNAL","EVENT_TYPE","CREATED","POST","DELETE","DELETED","getRoomType","roomTags","includes","ACTIVITY_TAG","ONE_ON_ONE","SPACE_TYPE","DIRECT","GROUP","Messages","WebexPlugin","extend","initialize","args","arguments","prototype","listen","webex","RESOURCE","MESSAGES","then","envelope","_this","eventEnvelope","internal","mercury","connect","listenTo","WEBEX_ACTIVITY","event","onWebexApiEvent","create","message","key","file","logger","warn","files","reduce","type","options","method","service","resource","request","res","body","get","id","items","list","qs","Page","_this2","remove","statusCode","undefined","fire","_this3","trigger","activity","data","verb","getMessageEvent","actor","actorId","entryUUID","emailAddress","objectId","object","target","roomId","roomUrl","url","tags","cluster","combinedEvent","personId","_promise","resolve","personEmail","roomType","version"],"sources":["messages.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  buildHydraMessageId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  createEventEnvelope,\n  getHydraClusterString\n} from '@webex/common';\nimport {\n  Page,\n  WebexPlugin\n} from '@webex/webex-core';\nimport {cloneDeep, isArray} from 'lodash';\n\nconst verbToType = {\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE]:\n    SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED,\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST]:\n    SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED,\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE]:\n    SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED\n};\n\nconst getRoomType = (roomTags) =>\n  (roomTags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ?\n    SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT :\n    SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP);\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`);\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Curry the 'trigger' method\n   * @private\n   * @memberof Messages\n   * @param {string} type the type of event to fire\n   * @returns {function} takes event and triggers it\n   */\n  fire(type) {\n    return (event) => this.trigger(type, event);\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @param {Object} event.data contains the data of the event\n   * @param {Object} event.data.activity the activity that triggered the event\n   * @returns {void}\n   */\n  onWebexApiEvent({data: {activity}}) {\n    const type = verbToType[activity.verb];\n\n    if (!type) {\n      return;\n    }\n\n    this.getMessageEvent(activity, type)\n      .then(this.fire(type));\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {String} type the type of event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent(activity, type) {\n    const {\n      id,\n      actor: {entryUUID: actorId, emailAddress},\n      object: {id: objectId},\n      target: {id: roomId, url: roomUrl, tags: roomTags}\n    } = activity;\n\n    const cluster = getHydraClusterString(this.webex, roomUrl);\n    const combinedEvent = cloneDeep(this.eventEnvelope);\n\n    combinedEvent.event = type;\n    if (type === SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n      // Cannot fetch since the message is deleted\n      // Convert the Mercury event to a Hydra event\n      const personId = buildHydraPersonId(actorId, cluster);\n\n      return Promise.resolve({\n        ...combinedEvent,\n        actorId: personId,\n        data: {\n          id: buildHydraMessageId(objectId, cluster),\n          personEmail: emailAddress || actorId,\n          personId,\n          roomId: buildHydraRoomId(roomId, cluster),\n          roomType: getRoomType(roomTags)\n        }\n      });\n    }\n\n    return this.get(buildHydraMessageId(id, cluster))\n      .then((data) => ({\n        ...combinedEvent,\n        actorId: data.personId,\n        data\n      }));\n  }\n});\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"script"}
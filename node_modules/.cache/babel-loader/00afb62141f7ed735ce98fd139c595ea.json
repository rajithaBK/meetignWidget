{"ast":null,"code":"import _slicedToArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\nimport ContentInfo from \"./ContentInfo.js\";\nimport SafeContents from \"./SafeContents.js\";\nimport EnvelopedData from \"./EnvelopedData.js\";\nimport EncryptedData from \"./EncryptedData.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar AuthenticatedSafe = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for AuthenticatedSafe class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function AuthenticatedSafe() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AuthenticatedSafe);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<ContentInfo>}\r\n     * @desc safeContents\r\n     */\n    this.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(AuthenticatedSafe, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"contentInfos\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, AuthenticatedSafe.schema({\n        names: {\n          contentInfos: \"contentInfos\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.safeContents = Array.from(asn1.result.contentInfos, function (element) {\n        return new ContentInfo({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: Array.from(this.safeContents, function (element) {\n          return element.toSchema();\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        safeContents: Array.from(this.safeContents, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }, {\n    key: \"parseInternalValues\",\n    value: function parseInternalValues(parameters) {\n      var _this = this;\n\n      //region Check input data from \"parameters\" \n      if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n      if (\"safeContents\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\n      if (parameters.safeContents instanceof Array === false) return Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\n      if (parameters.safeContents.length !== this.safeContents.length) return Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\"); //endregion \n      //region Initial variables \n\n      var sequence = Promise.resolve(); //endregion\n      //region Create value for \"this.parsedValue.authenticatedSafe\" \n\n      this.parsedValue = {\n        safeContents: []\n      };\n\n      var _iterator = _createForOfIteratorHelper(this.safeContents.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              index = _step$value[0],\n              content = _step$value[1];\n\n          switch (content.contentType) {\n            //region data \n            case \"1.2.840.113549.1.7.1\":\n              {\n                //region Check that we do have OCTETSTRING as \"content\"\n                if (content.content instanceof asn1js.OctetString === false) return Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\"); //endregion\n                //region Check we have \"constructive encoding\" for AuthSafe content\n\n                var authSafeContent = new ArrayBuffer(0);\n\n                if (content.content.valueBlock.isConstructed) {\n                  var _iterator2 = _createForOfIteratorHelper(content.content.valueBlock.value),\n                      _step2;\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var contentValue = _step2.value;\n                      authSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                } else authSafeContent = content.content.valueBlock.valueHex; //endregion\n                //region Parse internal ASN.1 data\n\n\n                var asn1 = asn1js.fromBER(authSafeContent);\n                if (asn1.offset === -1) return Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\"); //endregion\n                //region Finilly initialize initial values of \"SafeContents\" type\n\n                this.parsedValue.safeContents.push({\n                  privacyMode: 0,\n                  // No privacy, clear data\n                  value: new SafeContents({\n                    schema: asn1.result\n                  })\n                }); //endregion\n              }\n              break;\n            //endregion \n            //region envelopedData \n\n            case \"1.2.840.113549.1.7.3\":\n              {\n                var _ret = function () {\n                  //region Initial variables\n                  var cmsEnveloped = new EnvelopedData({\n                    schema: content.content\n                  }); //endregion\n                  //region Check mandatory parameters\n\n                  if (\"recipientCertificate\" in parameters.safeContents[index] === false) return {\n                    v: Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\")\n                  };\n                  var recipientCertificate = parameters.safeContents[index].recipientCertificate;\n                  if (\"recipientKey\" in parameters.safeContents[index] === false) return {\n                    v: Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\")\n                  }; // noinspection JSUnresolvedVariable\n\n                  var recipientKey = parameters.safeContents[index].recipientKey; //endregion\n                  //region Decrypt CMS EnvelopedData using first recipient information\n\n                  sequence = sequence.then(function () {\n                    return cmsEnveloped.decrypt(0, {\n                      recipientCertificate: recipientCertificate,\n                      recipientPrivateKey: recipientKey\n                    });\n                  });\n                  sequence = sequence.then(\n                  /**\r\n                   * @param {ArrayBuffer} result\r\n                   */\n                  function (result) {\n                    var asn1 = asn1js.fromBER(result);\n                    if (asn1.offset === -1) return Promise.reject(\"Error during parsing of decrypted data\");\n\n                    _this.parsedValue.safeContents.push({\n                      privacyMode: 2,\n                      // Public-key privacy mode\n                      value: new SafeContents({\n                        schema: asn1.result\n                      })\n                    });\n\n                    return Promise.resolve();\n                  }); //endregion\n                }();\n\n                if (typeof _ret === \"object\") return _ret.v;\n              }\n              break;\n            //endregion   \n            //region encryptedData \n\n            case \"1.2.840.113549.1.7.6\":\n              {\n                var _ret2 = function () {\n                  //region Initial variables\n                  var cmsEncrypted = new EncryptedData({\n                    schema: content.content\n                  }); //endregion\n                  //region Check mandatory parameters\n\n                  if (\"password\" in parameters.safeContents[index] === false) return {\n                    v: Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\")\n                  };\n                  var password = parameters.safeContents[index].password; //endregion\n                  //region Decrypt CMS EncryptedData using password\n\n                  sequence = sequence.then(function () {\n                    return cmsEncrypted.decrypt({\n                      password: password\n                    });\n                  }, function (error) {\n                    return Promise.reject(error);\n                  }); //endregion\n                  //region Initialize internal data\n\n                  sequence = sequence.then(\n                  /**\r\n                   * @param {ArrayBuffer} result\r\n                   */\n                  function (result) {\n                    var asn1 = asn1js.fromBER(result);\n                    if (asn1.offset === -1) return Promise.reject(\"Error during parsing of decrypted data\");\n\n                    _this.parsedValue.safeContents.push({\n                      privacyMode: 1,\n                      // Password-based privacy mode\n                      value: new SafeContents({\n                        schema: asn1.result\n                      })\n                    });\n\n                    return Promise.resolve();\n                  }, function (error) {\n                    return Promise.reject(error);\n                  }); //endregion\n                }();\n\n                if (typeof _ret2 === \"object\") return _ret2.v;\n              }\n              break;\n            //endregion   \n            //region default \n\n            default:\n              throw new Error(\"Unknown \\\"contentType\\\" for AuthenticatedSafe: \\\" \".concat(content.contentType));\n            //endregion \n          }\n        } //endregion \n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return sequence;\n    } //**********************************************************************************\n\n  }, {\n    key: \"makeInternalValues\",\n    value: function makeInternalValues(parameters) {\n      var _this2 = this;\n\n      //region Check data in \"parsedValue\" \n      if (\"parsedValue\" in this === false) return Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\n      if (this.parsedValue instanceof Object === false) return Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\n      if (this.parsedValue.safeContents instanceof Array === false) return Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\"); //endregion \n      //region Check input data from \"parameters\" \n\n      if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n      if (\"safeContents\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\n      if (parameters.safeContents instanceof Array === false) return Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\n      if (parameters.safeContents.length !== this.parsedValue.safeContents.length) return Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\"); //endregion \n      //region Initial variables \n\n      var sequence = Promise.resolve(); //endregion\n      //region Create internal values from already parsed values \n\n      this.safeContents = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this.parsedValue.safeContents.entries()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              index = _step3$value[0],\n              content = _step3$value[1];\n\n          //region Check current \"content\" value\n          if (\"privacyMode\" in content === false) return Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\n          if (\"value\" in content === false) return Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\n          if (content.value instanceof SafeContents === false) return Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\"); //endregion \n\n          switch (content.privacyMode) {\n            //region No privacy \n            case 0:\n              {\n                (function () {\n                  var contentBuffer = content.value.toSchema().toBER(false);\n                  sequence = sequence.then(function () {\n                    _this2.safeContents.push(new ContentInfo({\n                      contentType: \"1.2.840.113549.1.7.1\",\n                      content: new asn1js.OctetString({\n                        valueHex: contentBuffer\n                      })\n                    }));\n                  });\n                })();\n              }\n              break;\n            //endregion \n            //region Privacy with password\n\n            case 1:\n              {\n                (function () {\n                  //region Initial variables\n                  var cmsEncrypted = new EncryptedData();\n                  var currentParameters = parameters.safeContents[index];\n                  currentParameters.contentToEncrypt = content.value.toSchema().toBER(false); //endregion\n                  //region Encrypt CMS EncryptedData using password\n\n                  sequence = sequence.then(function () {\n                    return cmsEncrypted.encrypt(currentParameters);\n                  }, function (error) {\n                    return Promise.reject(error);\n                  }); //endregion\n                  //region Store result content in CMS_CONTENT_INFO type\n\n                  sequence = sequence.then(function () {\n                    _this2.safeContents.push(new ContentInfo({\n                      contentType: \"1.2.840.113549.1.7.6\",\n                      content: cmsEncrypted.toSchema()\n                    }));\n                  }, function (error) {\n                    return Promise.reject(error);\n                  }); //endregion\n                })();\n              }\n              break;\n            //endregion \n            //region Privacy with public key\n\n            case 2:\n              {\n                var _ret3 = function () {\n                  //region Initial variables\n                  var cmsEnveloped = new EnvelopedData();\n                  var contentToEncrypt = content.value.toSchema().toBER(false); //endregion\n                  //region Check mandatory parameters\n\n                  if (\"encryptingCertificate\" in parameters.safeContents[index] === false) return {\n                    v: Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\")\n                  };\n                  if (\"encryptionAlgorithm\" in parameters.safeContents[index] === false) return {\n                    v: Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\")\n                  };\n\n                  switch (true) {\n                    case parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\":\n                    case parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\":\n                      break;\n\n                    default:\n                      return {\n                        v: Promise.reject(\"Incorrect parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\": \".concat(parameters.safeContents[index].encryptionAlgorithm))\n                      };\n                  }\n\n                  switch (true) {\n                    case parameters.safeContents[index].encryptionAlgorithm.length === 128:\n                    case parameters.safeContents[index].encryptionAlgorithm.length === 192:\n                    case parameters.safeContents[index].encryptionAlgorithm.length === 256:\n                      break;\n\n                    default:\n                      return {\n                        v: Promise.reject(\"Incorrect parameter \\\"encryptionAlgorithm.length\\\" in \\\"parameters.safeContents[i]\\\": \".concat(parameters.safeContents[index].encryptionAlgorithm.length))\n                      };\n                  } //endregion\n                  //region Making correct \"encryptionAlgorithm\" variable\n\n\n                  var encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm; //endregion\n                  //region Append recipient for enveloped data\n\n                  cmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate); //endregion\n                  //region Making encryption\n\n                  sequence = sequence.then(function () {\n                    return cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt);\n                  });\n                  sequence = sequence.then(function () {\n                    _this2.safeContents.push(new ContentInfo({\n                      contentType: \"1.2.840.113549.1.7.3\",\n                      content: cmsEnveloped.toSchema()\n                    }));\n                  }); //endregion\n                }();\n\n                if (typeof _ret3 === \"object\") return _ret3.v;\n              }\n              break;\n            //endregion \n            //region default \n\n            default:\n              return Promise.reject(\"Incorrect value for \\\"content.privacyMode\\\": \".concat(content.privacyMode));\n            //endregion \n          }\n        } //endregion \n        //region Return result of the function \n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return sequence.then(function () {\n        return _this2;\n      }, function (error) {\n        return Promise.reject(\"Error during parsing: \".concat(error));\n      }); //endregion   \n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"safeContents\":\n          return [];\n\n        case \"parsedValue\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for AuthenticatedSafe class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"safeContents\":\n          return memberValue.length === 0;\n\n        case \"parsedValue\":\n          return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for AuthenticatedSafe class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n     * -- Data if unencrypted\r\n     * -- EncryptedData if password-encrypted\r\n     * -- EnvelopedData if public key-encrypted\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [contentInfos]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.contentInfos || \"\",\n          value: ContentInfo.schema()\n        })]\n      });\n    }\n  }]);\n\n  return AuthenticatedSafe;\n}(); //**************************************************************************************\n\n\nexport { AuthenticatedSafe as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/AuthenticatedSafe.js"],"names":["asn1js","getParametersValue","utilConcatBuf","clearProps","ContentInfo","SafeContents","EnvelopedData","EncryptedData","AuthenticatedSafe","parameters","safeContents","defaultValues","parsedValue","fromSchema","schema","asn1","compareSchema","names","contentInfos","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","Object","Promise","reject","length","sequence","resolve","entries","index","content","contentType","OctetString","authSafeContent","ArrayBuffer","valueBlock","isConstructed","contentValue","valueHex","fromBER","offset","push","privacyMode","cmsEnveloped","recipientCertificate","recipientKey","then","decrypt","recipientPrivateKey","cmsEncrypted","password","error","contentBuffer","toBER","currentParameters","contentToEncrypt","encrypt","encryptionAlgorithm","name","toLowerCase","addRecipientByCertificate","encryptingCertificate","memberName","memberValue","keys","blockName","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\nimport EnvelopedData from \"./EnvelopedData.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class AuthenticatedSafe\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthenticatedSafe class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<ContentInfo>}\r\n\t\t * @desc safeContents\r\n\t\t */\r\n\t\tthis.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n\t * -- Data if unencrypted\r\n\t * -- EncryptedData if password-encrypted\r\n\t * -- EnvelopedData if public key-encrypted\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.contentInfos || \"\"),\r\n\t\t\t\t\tvalue: ContentInfo.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthenticatedSafe.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentInfos: \"contentInfos\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeContents, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeContents: Array.from(this.safeContents, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" \r\n\t\tthis.parsedValue = {\r\n\t\t\tsafeContents: []\r\n\t\t};\r\n\t\t\r\n\t\tfor(const [index, content] of this.safeContents.entries())\r\n\t\t{\r\n\t\t\tswitch(content.contentType)\r\n\t\t\t{\r\n\t\t\t\t//region data \r\n\t\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\t\tif((content.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(content.content.valueBlock.isConstructed)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const contentValue of content.content.valueBlock.value)\r\n\t\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tauthSafeContent = content.content.valueBlock.valueHex;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Finilly initialize initial values of \"SafeContents\" type\r\n\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\tprivacyMode: 0, // No privacy, clear data\r\n\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region envelopedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.3\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"recipientCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst recipientCertificate = parameters.safeContents[index].recipientCertificate;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"recipientKey\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\t\t\tconst recipientKey = parameters.safeContents[index].recipientKey;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EnvelopedData using first recipient information\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.decrypt(0, {\r\n\t\t\t\t\t\t\t\trecipientCertificate,\r\n\t\t\t\t\t\t\t\trecipientPrivateKey: recipientKey\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 2, // Public-key privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region encryptedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.6\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"password\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst password = parameters.safeContents[index].password;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.decrypt({\r\n\t\t\t\t\t\t\t\tpassword\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initialize internal data\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 1, // Password-based privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check data in \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\r\n\t\t\r\n\t\tif((this.parsedValue instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((this.parsedValue.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.parsedValue.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create internal values from already parsed values \r\n\t\tthis.safeContents = [];\r\n\t\t\r\n\t\tfor(const [index, content] of this.parsedValue.safeContents.entries())\r\n\t\t{\r\n\t\t\t//region Check current \"content\" value\r\n\t\t\tif((\"privacyMode\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((\"value\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((content.value instanceof SafeContents) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\");\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tswitch(content.privacyMode)\r\n\t\t\t{\r\n\t\t\t\t//region No privacy \r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst contentBuffer = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: contentBuffer })\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with password\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst currentParameters = parameters.safeContents[index];\r\n\t\t\t\t\t\tcurrentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Encrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.encrypt(currentParameters),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Store result content in CMS_CONTENT_INFO type\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.6\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEncrypted.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with public key\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData();\r\n\t\t\t\t\t\tconst contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"encryptingCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"encryptionAlgorithm\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 128):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 192):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 256):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm.length}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making correct \"encryptionAlgorithm\" variable\r\n\t\t\t\t\t\tconst encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Append recipient for enveloped data\r\n\t\t\t\t\t\tcmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making encryption\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.3\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEnveloped.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
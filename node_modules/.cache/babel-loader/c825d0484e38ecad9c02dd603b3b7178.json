{"ast":null,"code":"\"use strict\";\n/**\r\n * Module convert fs functions to promise based functions\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readFile = exports.writeFileSync = exports.writeFile = exports.read = exports.open = exports.close = exports.stat = exports.createReadStream = exports.pathExists = void 0;\n\nconst fs = require(\"fs\");\n\nexports.pathExists = fs.existsSync;\nexports.createReadStream = fs.createReadStream;\n\nasync function stat(path) {\n  return new Promise((resolve, reject) => {\n    fs.stat(path, (err, stats) => {\n      if (err) reject(err);else resolve(stats);\n    });\n  });\n}\n\nexports.stat = stat;\n\nasync function close(fd) {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, err => {\n      if (err) reject(err);else resolve();\n    });\n  });\n}\n\nexports.close = close;\n\nasync function open(path, mode) {\n  return new Promise((resolve, reject) => {\n    fs.open(path, mode, (err, fd) => {\n      if (err) reject(err);else resolve(fd);\n    });\n  });\n}\n\nexports.open = open;\n\nasync function read(fd, buffer, offset, length, position) {\n  return new Promise((resolve, reject) => {\n    fs.read(fd, buffer, offset, length, position, (err, bytesRead, _buffer) => {\n      if (err) reject(err);else resolve({\n        bytesRead,\n        buffer: _buffer\n      });\n    });\n  });\n}\n\nexports.read = read;\n\nasync function writeFile(path, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(path, data, err => {\n      if (err) reject(err);else resolve();\n    });\n  });\n}\n\nexports.writeFile = writeFile;\n\nfunction writeFileSync(path, data) {\n  fs.writeFileSync(path, data);\n}\n\nexports.writeFileSync = writeFileSync;\n\nasync function readFile(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, buffer) => {\n      if (err) reject(err);else resolve(buffer);\n    });\n  });\n}\n\nexports.readFile = readFile;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/strtok3/lib/FsPromise.js"],"names":["Object","defineProperty","exports","value","readFile","writeFileSync","writeFile","read","open","close","stat","createReadStream","pathExists","fs","require","existsSync","path","Promise","resolve","reject","err","stats","fd","mode","buffer","offset","length","position","bytesRead","_buffer","data"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Module convert fs functions to promise based functions\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.readFile = exports.writeFileSync = exports.writeFile = exports.read = exports.open = exports.close = exports.stat = exports.createReadStream = exports.pathExists = void 0;\r\nconst fs = require(\"fs\");\r\nexports.pathExists = fs.existsSync;\r\nexports.createReadStream = fs.createReadStream;\r\nasync function stat(path) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.stat(path, (err, stats) => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve(stats);\r\n        });\r\n    });\r\n}\r\nexports.stat = stat;\r\nasync function close(fd) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.close(fd, err => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve();\r\n        });\r\n    });\r\n}\r\nexports.close = close;\r\nasync function open(path, mode) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.open(path, mode, (err, fd) => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve(fd);\r\n        });\r\n    });\r\n}\r\nexports.open = open;\r\nasync function read(fd, buffer, offset, length, position) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.read(fd, buffer, offset, length, position, (err, bytesRead, _buffer) => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve({ bytesRead, buffer: _buffer });\r\n        });\r\n    });\r\n}\r\nexports.read = read;\r\nasync function writeFile(path, data) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.writeFile(path, data, err => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve();\r\n        });\r\n    });\r\n}\r\nexports.writeFile = writeFile;\r\nfunction writeFileSync(path, data) {\r\n    fs.writeFileSync(path, data);\r\n}\r\nexports.writeFileSync = writeFileSync;\r\nasync function readFile(path) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(path, (err, buffer) => {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve(buffer);\r\n        });\r\n    });\r\n}\r\nexports.readFile = readFile;\r\n"]},"metadata":{},"sourceType":"script"}
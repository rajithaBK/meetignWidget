{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _constants = require(\"../constants\");\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @class PersonalMeetingRoom\n */\n\n\nvar PersonalMeetingRoom = /*#__PURE__*/function (_StatelessWebexPlugin) {\n  (0, _inherits2.default)(PersonalMeetingRoom, _StatelessWebexPlugin);\n\n  var _super = _createSuper(PersonalMeetingRoom);\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n\n\n  function PersonalMeetingRoom(attrs, options) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PersonalMeetingRoom);\n    _this = _super.call(this, {}, options);\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"namespace\", _constants.MEETINGS);\n    _this.pmr = null;\n    /**\n     * The pmr sip Uri\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.sipUri = null;\n    /**\n     * The pmr link\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.link = null;\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.userId = null;\n    /**\n     * The pmr name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.name = null;\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {MeetingInfo}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.meetingInfo = attrs.meetingInfo;\n    /**\n     * The pmr server request interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n\n    _this.personalMeetingRoomRequest = new _request.default({}, options);\n    return _this;\n  }\n  /**\n   * claims a pmr and updates the cached PMR values\n   * @param {String} link\n   * @param {String} pin\n   * @param {Boolean} [preferred] defaults to true to set this claimed PMR as the preferred\n   * @returns {Promise}\n   * @public\n   * @memberof PersonalMeetingRoom\n   */\n\n\n  (0, _createClass2.default)(PersonalMeetingRoom, [{\n    key: \"claim\",\n    value: function claim(link, pin) {\n      var _this2 = this;\n\n      var preferred = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var options = {\n        userId: this.webex.internal.device.userId,\n        passcode: pin,\n        meetingAddress: link,\n        preferred: preferred\n      };\n      return this.personalMeetingRoomRequest.claimPmr(options).then(function (pmr) {\n        if (pmr && pmr.body) {\n          _this2.set(pmr.body);\n        } else {\n          return _promise.default.reject(new _parameter.default('No PMR body provided. PMR values not updated.'));\n        }\n\n        return pmr.body;\n      });\n    }\n    /**\n     * @param {Object} body the response body from meeting info request\n     * @returns {undefined}\n     * @private\n     * @memberof PersonalMeetingRoom\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(body) {\n      this.pmr = body;\n      this.sipUri = body.sipMeetingUri;\n      this.meetingLink = body.webExMeetingLink || body.meetingLink;\n      this.userId = body.owner;\n      this.name = body.meetingName;\n      this.number = body.meetingNumber;\n    }\n    /**\n     * TODO: implement TTL for syncing and caching so to not request again and again\n     * @param {Object} options\n     * @returns {Promise}\n     * @public\n     * @memberof PersonalMeetingRoom\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this3 = this;\n\n      var options = {\n        type: _constants._PERSONAL_ROOM_\n      };\n      return this.meetingInfo.fetchMeetingInfo(options).then(function (pmr) {\n        if (pmr && pmr.body && pmr.body.isPmr) {\n          _this3.set(pmr.body);\n        } else {\n          return _promise.default.reject(new TypeError('The PMR requested is NOT a PMR. PMR values not set.'));\n        }\n\n        return pmr.body;\n      });\n    }\n  }]);\n  return PersonalMeetingRoom;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = PersonalMeetingRoom;","map":{"version":3,"mappings":"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","names":["PersonalMeetingRoom","attrs","options","_this","MEETINGS","pmr","sipUri","link","userId","name","meetingInfo","personalMeetingRoomRequest","PersonalMeetingRoomRequest","pin","preferred","webex","internal","device","passcode","meetingAddress","claimPmr","then","body","_this2","set","_promise","reject","ParameterError","sipMeetingUri","meetingLink","webExMeetingLink","owner","meetingName","number","meetingNumber","type","_PERSONAL_ROOM_","fetchMeetingInfo","isPmr","_this3","TypeError","StatelessWebexPlugin"],"sources":["index.js"],"sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS, _PERSONAL_ROOM_} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport PersonalMeetingRoomRequest from './request';\n\n\n/**\n * @class PersonalMeetingRoom\n */\nexport default class PersonalMeetingRoom extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.pmr = null;\n    /**\n     * The pmr sip Uri\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.sipUri = null;\n    /**\n     * The pmr link\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.link = null;\n    /**\n     * The pmr server object\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.userId = null;\n    /**\n     * The pmr name\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof PersonalMeetingRoom\n    */\n    this.name = null;\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {MeetingInfo}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n    this.meetingInfo = attrs.meetingInfo;\n    /**\n     * The pmr server request interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof PersonalMeetingRoom\n    */\n    this.personalMeetingRoomRequest = new PersonalMeetingRoomRequest({}, options);\n  }\n\n  /**\n   * claims a pmr and updates the cached PMR values\n   * @param {String} link\n   * @param {String} pin\n   * @param {Boolean} [preferred] defaults to true to set this claimed PMR as the preferred\n   * @returns {Promise}\n   * @public\n   * @memberof PersonalMeetingRoom\n   */\n  claim(link, pin, preferred = true) {\n    const options = {\n      userId: this.webex.internal.device.userId,\n      passcode: pin,\n      meetingAddress: link,\n      preferred\n    };\n\n    return this.personalMeetingRoomRequest.claimPmr(options).then((pmr) => {\n      if (pmr && pmr.body) {\n        this.set(pmr.body);\n      }\n      else {\n        return Promise.reject(new ParameterError('No PMR body provided. PMR values not updated.'));\n      }\n\n      return pmr.body;\n    });\n  }\n\n  /**\n   * @param {Object} body the response body from meeting info request\n   * @returns {undefined}\n   * @private\n   * @memberof PersonalMeetingRoom\n   */\n  set(body) {\n    this.pmr = body;\n    this.sipUri = body.sipMeetingUri;\n    this.meetingLink = body.webExMeetingLink || body.meetingLink;\n    this.userId = body.owner;\n    this.name = body.meetingName;\n    this.number = body.meetingNumber;\n  }\n\n  /**\n   * TODO: implement TTL for syncing and caching so to not request again and again\n   * @param {Object} options\n   * @returns {Promise}\n   * @public\n   * @memberof PersonalMeetingRoom\n   */\n  get() {\n    const options = {\n      type: _PERSONAL_ROOM_\n\n    };\n\n    return this.meetingInfo.fetchMeetingInfo(options).then((pmr) => {\n      if (pmr && pmr.body && pmr.body.isPmr) {\n        this.set(pmr.body);\n      }\n      else {\n        return Promise.reject(new TypeError('The PMR requested is NOT a PMR. PMR values not set.'));\n      }\n\n      return pmr.body;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
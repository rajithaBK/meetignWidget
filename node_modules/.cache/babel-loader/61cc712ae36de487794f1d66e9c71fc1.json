{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar PolicyQualifierInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PolicyQualifierInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PolicyQualifierInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PolicyQualifierInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc policyQualifierId\r\n     */\n    this.policyQualifierId = getParametersValue(parameters, \"policyQualifierId\", PolicyQualifierInfo.defaultValues(\"policyQualifierId\"));\n    /**\r\n     * @type {Object}\r\n     * @desc qualifier\r\n     */\n\n    this.qualifier = getParametersValue(parameters, \"qualifier\", PolicyQualifierInfo.defaultValues(\"qualifier\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PolicyQualifierInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"policyQualifierId\", \"qualifier\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PolicyQualifierInfo.schema({\n        names: {\n          policyQualifierId: \"policyQualifierId\",\n          qualifier: \"qualifier\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyQualifierInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\n      this.qualifier = asn1.result.qualifier; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.policyQualifierId\n        }), this.qualifier]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        policyQualifierId: this.policyQualifierId,\n        qualifier: this.qualifier.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"policyQualifierId\":\n          return \"\";\n\n        case \"qualifier\":\n          return new asn1js.Any();\n\n        default:\n          throw new Error(\"Invalid member name for PolicyQualifierInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PolicyQualifierInfo ::= SEQUENCE {\r\n     *    policyQualifierId  PolicyQualifierId,\r\n     *    qualifier          ANY DEFINED BY policyQualifierId }\r\n     *\r\n     * id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }\r\n     * id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\r\n     * id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\r\n     *\r\n     * PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [policyQualifierId]\r\n       * @property {string} [qualifier]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.policyQualifierId || \"\"\n        }), new asn1js.Any({\n          name: names.qualifier || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return PolicyQualifierInfo;\n}(); //**************************************************************************************\n\n\nexport { PolicyQualifierInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PolicyQualifierInfo.js"],"names":["asn1js","getParametersValue","clearProps","PolicyQualifierInfo","parameters","policyQualifierId","defaultValues","qualifier","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","toJSON","memberName","Any","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyQualifierInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyQualifierInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyQualifierId\r\n\t\t */\r\n\t\tthis.policyQualifierId = getParametersValue(parameters, \"policyQualifierId\", PolicyQualifierInfo.defaultValues(\"policyQualifierId\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc qualifier\r\n\t\t */\r\n\t\tthis.qualifier = getParametersValue(parameters, \"qualifier\", PolicyQualifierInfo.defaultValues(\"qualifier\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyQualifierId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"qualifier\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyQualifierInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyQualifierInfo ::= SEQUENCE {\r\n\t *    policyQualifierId  PolicyQualifierId,\r\n\t *    qualifier          ANY DEFINED BY policyQualifierId }\r\n\t *\r\n\t * id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }\r\n\t * id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\r\n\t * id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\r\n\t *\r\n\t * PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyQualifierId]\r\n\t\t * @property {string} [qualifier]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyQualifierId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.qualifier || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyQualifierId\",\r\n\t\t\t\"qualifier\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyQualifierInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyQualifierId: \"policyQualifierId\",\r\n\t\t\t\t\tqualifier: \"qualifier\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyQualifierInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\r\n\t\tthis.qualifier = asn1.result.qualifier;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.policyQualifierId }),\r\n\t\t\t\tthis.qualifier\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tpolicyQualifierId: this.policyQualifierId,\r\n\t\t\tqualifier: this.qualifier.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
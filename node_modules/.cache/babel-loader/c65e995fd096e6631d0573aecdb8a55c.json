{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _batcher = _interopRequireDefault(require(\"./batcher\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar CallDiagnosticEventsBatcher = _batcher.default.extend({\n  namespace: 'Metrics',\n\n  /**\n   * @param {string} webClientDomain\n   * @returns {string}\n  */\n  getBuildType: function getBuildType(webClientDomain) {\n    if (webClientDomain !== null && webClientDomain !== void 0 && webClientDomain.includes('teams.webex.com') || webClientDomain !== null && webClientDomain !== void 0 && webClientDomain.includes('localhost') || webClientDomain !== null && webClientDomain !== void 0 && webClientDomain.includes('127.0.0.1') || process.env.NODE_ENV !== 'production') {\n      return 'test';\n    }\n\n    return process.env.NODE_ENV === 'production' ? 'prod' : 'test';\n  },\n  prepareItem: function prepareItem(item) {\n    var _item$event, _item$event$eventData; // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n\n\n    var origin = {\n      buildType: this.getBuildType((_item$event = item.event) === null || _item$event === void 0 ? void 0 : (_item$event$eventData = _item$event.eventData) === null || _item$event$eventData === void 0 ? void 0 : _item$event$eventData.webClientDomain),\n      networkType: 'unknown'\n    };\n    item.eventPayload.origin = (0, _assign.default)(origin, item.eventPayload.origin);\n    return _promise.default.resolve(item);\n  },\n  prepareRequest: function prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach(function (item) {\n      item.eventPayload.originTime = item.eventPayload.originTime || {};\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n    return _promise.default.resolve(queue);\n  },\n  submitHttpRequest: function submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n\nvar _default = CallDiagnosticEventsBatcher;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAIA;AAJA;AACA;AACA;;;AAIA,IAAMA,2BAA2B,GAAGC,iBAAQC,MAARD,CAAe;AACjDE,WAAS,EAAE,SADsC;;AAGjD;AACF;AACA;AACA;AACEC,cAPiD,wBAOpCC,eAPoC,EAOnB;AAC5B,QACEA,eAAe,SAAfA,mBAAe,WAAfA,mBAAe,CAAEC,QAAjBD,CAA0B,iBAA1BA,KACAA,eADA,SACAA,mBADA,WACAA,mBAAe,CAAEC,QAAjBD,CAA0B,WAA1BA,CADAA,IAEAA,eAFA,SAEAA,mBAFA,WAEAA,mBAAe,CAAEC,QAAjBD,CAA0B,WAA1BA,CAFAA,IAGAE,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAJ3B,EAKE;AACA,aAAO,MAAP;AACD;;AAED,WAAOA,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAAzBA,GAAwC,MAAxCA,GAAiD,MAAxD;AAjB+C;AAoBjDG,aApBiD,uBAoBrCC,IApBqC,EAoB/B;AAAA,4CAChB;AACA;;;AACA,QAAMC,MAAM,GAAG;AACbC,eAAS,EAAE,KAAKT,YAAL,gBAAkBO,IAAI,CAACG,KAAvB,yEAAkBC,YAAYC,SAA9B,0DAAkBC,sBAAuBZ,eAAzC,CADE;AAEba,iBAAW,EAAE;AAFA,KAAf;AAKAP,QAAI,CAACQ,YAALR,CAAkBC,MAAlBD,GAA2B,qBAAcC,MAAd,EAAsBD,IAAI,CAACQ,YAALR,CAAkBC,MAAxC,CAA3BD;AAEA,WAAOS,iBAAQC,OAAR,CAAgBV,IAAhB,CAAP;AA9B+C;AAiCjDW,gBAjCiD,0BAiClCC,KAjCkC,EAiC3B;AACpB;AACAA,SAAK,CAACC,OAAND,CAAc,UAACZ,IAAD,EAAU;AACtBA,UAAI,CAACQ,YAALR,CAAkBc,UAAlBd,GAA+BA,IAAI,CAACQ,YAALR,CAAkBc,UAAlBd,IAAgC,EAA/DA;AACAA,UAAI,CAACQ,YAALR,CAAkBc,UAAlBd,CAA6Be,IAA7Bf,GAAoC,IAAIgB,IAAJ,GAAWC,WAAX,EAApCjB;AAFF;AAKA,WAAOS,iBAAQC,OAAR,CAAgBE,KAAhB,CAAP;AAxC+C;AA2CjDM,mBA3CiD,6BA2C/BC,OA3C+B,EA2CtB;AACzB,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,MADgB;AAExBC,aAAO,EAAE,SAFe;AAGxBC,cAAQ,EAAE,eAHc;AAIxBC,UAAI,EAAE;AACJC,eAAO,EAAEP;AADL;AAJkB,KAAnB,CAAP;AAQD;AApDgD,CAAf7B,CAApC;;eAuDeD","names":["CallDiagnosticEventsBatcher","Batcher","extend","namespace","getBuildType","webClientDomain","includes","process","env","NODE_ENV","prepareItem","item","origin","buildType","event","_item$event","eventData","_item$event$eventData","networkType","eventPayload","_promise","resolve","prepareRequest","queue","forEach","originTime","sent","Date","toISOString","submitHttpRequest","payload","webex","request","method","service","resource","body","metrics"],"sources":["call-diagnostic-events-batcher.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport Batcher from './batcher';\n\nconst CallDiagnosticEventsBatcher = Batcher.extend({\n  namespace: 'Metrics',\n\n  /**\n   * @param {string} webClientDomain\n   * @returns {string}\n  */\n  getBuildType(webClientDomain) {\n    if (\n      webClientDomain?.includes('teams.webex.com') ||\n      webClientDomain?.includes('localhost') ||\n      webClientDomain?.includes('127.0.0.1') ||\n      process.env.NODE_ENV !== 'production'\n    ) {\n      return 'test';\n    }\n\n    return process.env.NODE_ENV === 'production' ? 'prod' : 'test';\n  },\n\n  prepareItem(item) {\n    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n    const origin = {\n      buildType: this.getBuildType(item.event?.eventData?.webClientDomain),\n      networkType: 'unknown'\n    };\n\n    item.eventPayload.origin = Object.assign(origin, item.eventPayload.origin);\n\n    return Promise.resolve(item);\n  },\n\n  prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach((item) => {\n      item.eventPayload.originTime = item.eventPayload.originTime || {};\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n\n    return Promise.resolve(queue);\n  },\n\n  submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n\nexport default CallDiagnosticEventsBatcher;\n"]},"metadata":{},"sourceType":"script"}
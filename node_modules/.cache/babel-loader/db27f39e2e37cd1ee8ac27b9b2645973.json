{"ast":null,"code":"'use strict';\n\nconst Token = require('token-types');\n\nconst strtok3 = require('strtok3/lib/core');\n\nconst {\n  stringToBytes,\n  tarHeaderChecksumMatches,\n  uint32SyncSafeToken\n} = require('./util');\n\nconst supported = require('./supported');\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\n\nasync function fromStream(stream) {\n  const tokenizer = await strtok3.fromStream(stream);\n\n  try {\n    return await fromTokenizer(tokenizer);\n  } finally {\n    await tokenizer.close();\n  }\n}\n\nasync function fromBuffer(input) {\n  if (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n    throw new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n  }\n\n  const buffer = input instanceof Buffer ? input : Buffer.from(input);\n\n  if (!(buffer && buffer.length > 1)) {\n    return;\n  }\n\n  const tokenizer = strtok3.fromBuffer(buffer);\n  return fromTokenizer(tokenizer);\n}\n\nfunction _check(buffer, headers, options) {\n  options = {\n    offset: 0,\n    ...options\n  };\n\n  for (const [index, header] of headers.entries()) {\n    // If a bitmask is set\n    if (options.mask) {\n      // If header doesn't equal `buf` with bits masked off\n      if (header !== (options.mask[index] & buffer[index + options.offset])) {\n        return false;\n      }\n    } else if (header !== buffer[index + options.offset]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nasync function fromTokenizer(tokenizer) {\n  try {\n    return _fromTokenizer(tokenizer);\n  } catch (error) {\n    if (!(error instanceof strtok3.EndOfStreamError)) {\n      throw error;\n    }\n  }\n}\n\nasync function _fromTokenizer(tokenizer) {\n  let buffer = Buffer.alloc(minimumBytes);\n  const bytesRead = 12;\n\n  const check = (header, options) => _check(buffer, header, options);\n\n  const checkString = (header, options) => check(stringToBytes(header), options); // Keep reading until EOF if the file size is unknown.\n\n\n  if (!tokenizer.fileInfo.size) {\n    tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n  }\n\n  await tokenizer.peekBuffer(buffer, {\n    length: bytesRead,\n    mayBeLess: true\n  }); // -- 2-byte signatures --\n\n  if (check([0x42, 0x4D])) {\n    return {\n      ext: 'bmp',\n      mime: 'image/bmp'\n    };\n  }\n\n  if (check([0x0B, 0x77])) {\n    return {\n      ext: 'ac3',\n      mime: 'audio/vnd.dolby.dd-raw'\n    };\n  }\n\n  if (check([0x78, 0x01])) {\n    return {\n      ext: 'dmg',\n      mime: 'application/x-apple-diskimage'\n    };\n  }\n\n  if (check([0x4D, 0x5A])) {\n    return {\n      ext: 'exe',\n      mime: 'application/x-msdownload'\n    };\n  }\n\n  if (check([0x25, 0x21])) {\n    await tokenizer.peekBuffer(buffer, {\n      length: 24,\n      mayBeLess: true\n    });\n\n    if (checkString('PS-Adobe-', {\n      offset: 2\n    }) && checkString(' EPSF-', {\n      offset: 14\n    })) {\n      return {\n        ext: 'eps',\n        mime: 'application/eps'\n      };\n    }\n\n    return {\n      ext: 'ps',\n      mime: 'application/postscript'\n    };\n  }\n\n  if (check([0x1F, 0xA0]) || check([0x1F, 0x9D])) {\n    return {\n      ext: 'Z',\n      mime: 'application/x-compress'\n    };\n  } // -- 3-byte signatures --\n\n\n  if (check([0xFF, 0xD8, 0xFF])) {\n    return {\n      ext: 'jpg',\n      mime: 'image/jpeg'\n    };\n  }\n\n  if (check([0x49, 0x49, 0xBC])) {\n    return {\n      ext: 'jxr',\n      mime: 'image/vnd.ms-photo'\n    };\n  }\n\n  if (check([0x1F, 0x8B, 0x8])) {\n    return {\n      ext: 'gz',\n      mime: 'application/gzip'\n    };\n  }\n\n  if (check([0x42, 0x5A, 0x68])) {\n    return {\n      ext: 'bz2',\n      mime: 'application/x-bzip2'\n    };\n  }\n\n  if (checkString('ID3')) {\n    await tokenizer.ignore(6); // Skip ID3 header until the header size\n\n    const id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n\n    if (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n      // Guess file type based on ID3 header for backward compatibility\n      return {\n        ext: 'mp3',\n        mime: 'audio/mpeg'\n      };\n    }\n\n    await tokenizer.ignore(id3HeaderLen);\n    return fromTokenizer(tokenizer); // Skip ID3 header, recursion\n  } // Musepack, SV7\n\n\n  if (checkString('MP+')) {\n    return {\n      ext: 'mpc',\n      mime: 'audio/x-musepack'\n    };\n  }\n\n  if ((buffer[0] === 0x43 || buffer[0] === 0x46) && check([0x57, 0x53], {\n    offset: 1\n  })) {\n    return {\n      ext: 'swf',\n      mime: 'application/x-shockwave-flash'\n    };\n  } // -- 4-byte signatures --\n\n\n  if (check([0x47, 0x49, 0x46])) {\n    return {\n      ext: 'gif',\n      mime: 'image/gif'\n    };\n  }\n\n  if (checkString('FLIF')) {\n    return {\n      ext: 'flif',\n      mime: 'image/flif'\n    };\n  }\n\n  if (checkString('8BPS')) {\n    return {\n      ext: 'psd',\n      mime: 'image/vnd.adobe.photoshop'\n    };\n  }\n\n  if (checkString('WEBP', {\n    offset: 8\n  })) {\n    return {\n      ext: 'webp',\n      mime: 'image/webp'\n    };\n  } // Musepack, SV8\n\n\n  if (checkString('MPCK')) {\n    return {\n      ext: 'mpc',\n      mime: 'audio/x-musepack'\n    };\n  }\n\n  if (checkString('FORM')) {\n    return {\n      ext: 'aif',\n      mime: 'audio/aiff'\n    };\n  }\n\n  if (checkString('icns', {\n    offset: 0\n  })) {\n    return {\n      ext: 'icns',\n      mime: 'image/icns'\n    };\n  } // Zip-based file formats\n  // Need to be before the `zip` check\n\n\n  if (check([0x50, 0x4B, 0x3, 0x4])) {\n    // Local file header signature\n    try {\n      while (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n        await tokenizer.readBuffer(buffer, {\n          length: 30\n        }); // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\n        const zipHeader = {\n          compressedSize: buffer.readUInt32LE(18),\n          uncompressedSize: buffer.readUInt32LE(22),\n          filenameLength: buffer.readUInt16LE(26),\n          extraFieldLength: buffer.readUInt16LE(28)\n        };\n        zipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n        await tokenizer.ignore(zipHeader.extraFieldLength); // Assumes signed `.xpi` from addons.mozilla.org\n\n        if (zipHeader.filename === 'META-INF/mozilla.rsa') {\n          return {\n            ext: 'xpi',\n            mime: 'application/x-xpinstall'\n          };\n        }\n\n        if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n          const type = zipHeader.filename.split('/')[0];\n\n          switch (type) {\n            case '_rels':\n              break;\n\n            case 'word':\n              return {\n                ext: 'docx',\n                mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n              };\n\n            case 'ppt':\n              return {\n                ext: 'pptx',\n                mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n              };\n\n            case 'xl':\n              return {\n                ext: 'xlsx',\n                mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n              };\n\n            default:\n              break;\n          }\n        }\n\n        if (zipHeader.filename.startsWith('xl/')) {\n          return {\n            ext: 'xlsx',\n            mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          };\n        }\n\n        if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n          return {\n            ext: '3mf',\n            mime: 'model/3mf'\n          };\n        } // The docx, xlsx and pptx file types extend the Office Open XML file format:\n        // https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n        // We look for:\n        // - one entry named '[Content_Types].xml' or '_rels/.rels',\n        // - one entry indicating specific type of file.\n        // MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\n\n        if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n          const mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n          switch (mimeType) {\n            case 'application/epub+zip':\n              return {\n                ext: 'epub',\n                mime: 'application/epub+zip'\n              };\n\n            case 'application/vnd.oasis.opendocument.text':\n              return {\n                ext: 'odt',\n                mime: 'application/vnd.oasis.opendocument.text'\n              };\n\n            case 'application/vnd.oasis.opendocument.spreadsheet':\n              return {\n                ext: 'ods',\n                mime: 'application/vnd.oasis.opendocument.spreadsheet'\n              };\n\n            case 'application/vnd.oasis.opendocument.presentation':\n              return {\n                ext: 'odp',\n                mime: 'application/vnd.oasis.opendocument.presentation'\n              };\n\n            default:\n          }\n        } // Try to find next header manually when current one is corrupted\n\n\n        if (zipHeader.compressedSize === 0) {\n          let nextHeaderIndex = -1;\n\n          while (nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size) {\n            await tokenizer.peekBuffer(buffer, {\n              mayBeLess: true\n            });\n            nextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex'); // Move position to the next header if found, skip the whole buffer otherwise\n\n            await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n          }\n        } else {\n          await tokenizer.ignore(zipHeader.compressedSize);\n        }\n      }\n    } catch (error) {\n      if (!(error instanceof strtok3.EndOfStreamError)) {\n        throw error;\n      }\n    }\n\n    return {\n      ext: 'zip',\n      mime: 'application/zip'\n    };\n  }\n\n  if (checkString('OggS')) {\n    // This is an OGG container\n    await tokenizer.ignore(28);\n    const type = Buffer.alloc(8);\n    await tokenizer.readBuffer(type); // Needs to be before `ogg` check\n\n    if (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n      return {\n        ext: 'opus',\n        mime: 'audio/opus'\n      };\n    } // If ' theora' in header.\n\n\n    if (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n      return {\n        ext: 'ogv',\n        mime: 'video/ogg'\n      };\n    } // If '\\x01video' in header.\n\n\n    if (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n      return {\n        ext: 'ogm',\n        mime: 'video/ogg'\n      };\n    } // If ' FLAC' in header  https://xiph.org/flac/faq.html\n\n\n    if (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n      return {\n        ext: 'oga',\n        mime: 'audio/ogg'\n      };\n    } // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\n\n    if (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n      return {\n        ext: 'spx',\n        mime: 'audio/ogg'\n      };\n    } // If '\\x01vorbis' in header\n\n\n    if (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n      return {\n        ext: 'ogg',\n        mime: 'audio/ogg'\n      };\n    } // Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\n\n    return {\n      ext: 'ogx',\n      mime: 'application/ogg'\n    };\n  }\n\n  if (check([0x50, 0x4B]) && (buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) && (buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)) {\n    return {\n      ext: 'zip',\n      mime: 'application/zip'\n    };\n  } //\n  // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n  // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n  // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n  // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\n\n  if (checkString('ftyp', {\n    offset: 4\n  }) && (buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n  ) {\n    // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n    // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n    const brandMajor = buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\n    switch (brandMajor) {\n      case 'avif':\n        return {\n          ext: 'avif',\n          mime: 'image/avif'\n        };\n\n      case 'mif1':\n        return {\n          ext: 'heic',\n          mime: 'image/heif'\n        };\n\n      case 'msf1':\n        return {\n          ext: 'heic',\n          mime: 'image/heif-sequence'\n        };\n\n      case 'heic':\n      case 'heix':\n        return {\n          ext: 'heic',\n          mime: 'image/heic'\n        };\n\n      case 'hevc':\n      case 'hevx':\n        return {\n          ext: 'heic',\n          mime: 'image/heic-sequence'\n        };\n\n      case 'qt':\n        return {\n          ext: 'mov',\n          mime: 'video/quicktime'\n        };\n\n      case 'M4V':\n      case 'M4VH':\n      case 'M4VP':\n        return {\n          ext: 'm4v',\n          mime: 'video/x-m4v'\n        };\n\n      case 'M4P':\n        return {\n          ext: 'm4p',\n          mime: 'video/mp4'\n        };\n\n      case 'M4B':\n        return {\n          ext: 'm4b',\n          mime: 'audio/mp4'\n        };\n\n      case 'M4A':\n        return {\n          ext: 'm4a',\n          mime: 'audio/x-m4a'\n        };\n\n      case 'F4V':\n        return {\n          ext: 'f4v',\n          mime: 'video/mp4'\n        };\n\n      case 'F4P':\n        return {\n          ext: 'f4p',\n          mime: 'video/mp4'\n        };\n\n      case 'F4A':\n        return {\n          ext: 'f4a',\n          mime: 'audio/mp4'\n        };\n\n      case 'F4B':\n        return {\n          ext: 'f4b',\n          mime: 'audio/mp4'\n        };\n\n      case 'crx':\n        return {\n          ext: 'cr3',\n          mime: 'image/x-canon-cr3'\n        };\n\n      default:\n        if (brandMajor.startsWith('3g')) {\n          if (brandMajor.startsWith('3g2')) {\n            return {\n              ext: '3g2',\n              mime: 'video/3gpp2'\n            };\n          }\n\n          return {\n            ext: '3gp',\n            mime: 'video/3gpp'\n          };\n        }\n\n        return {\n          ext: 'mp4',\n          mime: 'video/mp4'\n        };\n    }\n  }\n\n  if (checkString('MThd')) {\n    return {\n      ext: 'mid',\n      mime: 'audio/midi'\n    };\n  }\n\n  if (checkString('wOFF') && (check([0x00, 0x01, 0x00, 0x00], {\n    offset: 4\n  }) || checkString('OTTO', {\n    offset: 4\n  }))) {\n    return {\n      ext: 'woff',\n      mime: 'font/woff'\n    };\n  }\n\n  if (checkString('wOF2') && (check([0x00, 0x01, 0x00, 0x00], {\n    offset: 4\n  }) || checkString('OTTO', {\n    offset: 4\n  }))) {\n    return {\n      ext: 'woff2',\n      mime: 'font/woff2'\n    };\n  }\n\n  if (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n    return {\n      ext: 'pcap',\n      mime: 'application/vnd.tcpdump.pcap'\n    };\n  } // Sony DSD Stream File (DSF)\n\n\n  if (checkString('DSD ')) {\n    return {\n      ext: 'dsf',\n      mime: 'audio/x-dsf' // Non-standard\n\n    };\n  }\n\n  if (checkString('LZIP')) {\n    return {\n      ext: 'lz',\n      mime: 'application/x-lzip'\n    };\n  }\n\n  if (checkString('fLaC')) {\n    return {\n      ext: 'flac',\n      mime: 'audio/x-flac'\n    };\n  }\n\n  if (check([0x42, 0x50, 0x47, 0xFB])) {\n    return {\n      ext: 'bpg',\n      mime: 'image/bpg'\n    };\n  }\n\n  if (checkString('wvpk')) {\n    return {\n      ext: 'wv',\n      mime: 'audio/wavpack'\n    };\n  }\n\n  if (checkString('%PDF')) {\n    await tokenizer.ignore(1350);\n    const maxBufferSize = 10 * 1024 * 1024;\n    const buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n    await tokenizer.readBuffer(buffer, {\n      mayBeLess: true\n    }); // Check if this is an Adobe Illustrator file\n\n    if (buffer.includes(Buffer.from('AIPrivateData'))) {\n      return {\n        ext: 'ai',\n        mime: 'application/postscript'\n      };\n    } // Assume this is just a normal PDF\n\n\n    return {\n      ext: 'pdf',\n      mime: 'application/pdf'\n    };\n  }\n\n  if (check([0x00, 0x61, 0x73, 0x6D])) {\n    return {\n      ext: 'wasm',\n      mime: 'application/wasm'\n    };\n  } // TIFF, little-endian type\n\n\n  if (check([0x49, 0x49, 0x2A, 0x0])) {\n    if (checkString('CR', {\n      offset: 8\n    })) {\n      return {\n        ext: 'cr2',\n        mime: 'image/x-canon-cr2'\n      };\n    }\n\n    if (check([0x1C, 0x00, 0xFE, 0x00], {\n      offset: 8\n    }) || check([0x1F, 0x00, 0x0B, 0x00], {\n      offset: 8\n    })) {\n      return {\n        ext: 'nef',\n        mime: 'image/x-nikon-nef'\n      };\n    }\n\n    if (check([0x08, 0x00, 0x00, 0x00], {\n      offset: 4\n    }) && (check([0x2D, 0x00, 0xFE, 0x00], {\n      offset: 8\n    }) || check([0x27, 0x00, 0xFE, 0x00], {\n      offset: 8\n    }))) {\n      return {\n        ext: 'dng',\n        mime: 'image/x-adobe-dng'\n      };\n    }\n\n    buffer = Buffer.alloc(24);\n    await tokenizer.peekBuffer(buffer);\n\n    if ((check([0x10, 0xFB, 0x86, 0x01], {\n      offset: 4\n    }) || check([0x08, 0x00, 0x00, 0x00], {\n      offset: 4\n    })) && // This pattern differentiates ARW from other TIFF-ish file types:\n    check([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {\n      offset: 9\n    })) {\n      return {\n        ext: 'arw',\n        mime: 'image/x-sony-arw'\n      };\n    }\n\n    return {\n      ext: 'tif',\n      mime: 'image/tiff'\n    };\n  } // TIFF, big-endian type\n\n\n  if (check([0x4D, 0x4D, 0x0, 0x2A])) {\n    return {\n      ext: 'tif',\n      mime: 'image/tiff'\n    };\n  }\n\n  if (checkString('MAC ')) {\n    return {\n      ext: 'ape',\n      mime: 'audio/ape'\n    };\n  } // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\n\n  if (check([0x1A, 0x45, 0xDF, 0xA3])) {\n    // Root element: EBML\n    async function readField() {\n      const msb = await tokenizer.peekNumber(Token.UINT8);\n      let mask = 0x80;\n      let ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n\n      while ((msb & mask) === 0) {\n        ++ic;\n        mask >>= 1;\n      }\n\n      const id = Buffer.alloc(ic + 1);\n      await tokenizer.readBuffer(id);\n      return id;\n    }\n\n    async function readElement() {\n      const id = await readField();\n      const lenField = await readField();\n      lenField[0] ^= 0x80 >> lenField.length - 1;\n      const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n\n      return {\n        id: id.readUIntBE(0, id.length),\n        len: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n      };\n    }\n\n    async function readChildren(level, children) {\n      while (children > 0) {\n        const e = await readElement();\n\n        if (e.id === 0x4282) {\n          return tokenizer.readToken(new Token.StringType(e.len, 'utf-8')); // Return DocType\n        }\n\n        await tokenizer.ignore(e.len); // ignore payload\n\n        --children;\n      }\n    }\n\n    const re = await readElement();\n    const docType = await readChildren(1, re.len);\n\n    switch (docType) {\n      case 'webm':\n        return {\n          ext: 'webm',\n          mime: 'video/webm'\n        };\n\n      case 'matroska':\n        return {\n          ext: 'mkv',\n          mime: 'video/x-matroska'\n        };\n\n      default:\n        return;\n    }\n  } // RIFF file format which might be AVI, WAV, QCP, etc\n\n\n  if (check([0x52, 0x49, 0x46, 0x46])) {\n    if (check([0x41, 0x56, 0x49], {\n      offset: 8\n    })) {\n      return {\n        ext: 'avi',\n        mime: 'video/vnd.avi'\n      };\n    }\n\n    if (check([0x57, 0x41, 0x56, 0x45], {\n      offset: 8\n    })) {\n      return {\n        ext: 'wav',\n        mime: 'audio/vnd.wave'\n      };\n    } // QLCM, QCP file\n\n\n    if (check([0x51, 0x4C, 0x43, 0x4D], {\n      offset: 8\n    })) {\n      return {\n        ext: 'qcp',\n        mime: 'audio/qcelp'\n      };\n    }\n  }\n\n  if (checkString('SQLi')) {\n    return {\n      ext: 'sqlite',\n      mime: 'application/x-sqlite3'\n    };\n  }\n\n  if (check([0x4E, 0x45, 0x53, 0x1A])) {\n    return {\n      ext: 'nes',\n      mime: 'application/x-nintendo-nes-rom'\n    };\n  }\n\n  if (checkString('Cr24')) {\n    return {\n      ext: 'crx',\n      mime: 'application/x-google-chrome-extension'\n    };\n  }\n\n  if (checkString('MSCF') || checkString('ISc(')) {\n    return {\n      ext: 'cab',\n      mime: 'application/vnd.ms-cab-compressed'\n    };\n  }\n\n  if (check([0xED, 0xAB, 0xEE, 0xDB])) {\n    return {\n      ext: 'rpm',\n      mime: 'application/x-rpm'\n    };\n  }\n\n  if (check([0xC5, 0xD0, 0xD3, 0xC6])) {\n    return {\n      ext: 'eps',\n      mime: 'application/eps'\n    };\n  }\n\n  if (check([0x28, 0xB5, 0x2F, 0xFD])) {\n    return {\n      ext: 'zst',\n      mime: 'application/zstd'\n    };\n  } // -- 5-byte signatures --\n\n\n  if (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n    return {\n      ext: 'otf',\n      mime: 'font/otf'\n    };\n  }\n\n  if (checkString('#!AMR')) {\n    return {\n      ext: 'amr',\n      mime: 'audio/amr'\n    };\n  }\n\n  if (checkString('{\\\\rtf')) {\n    return {\n      ext: 'rtf',\n      mime: 'application/rtf'\n    };\n  }\n\n  if (check([0x46, 0x4C, 0x56, 0x01])) {\n    return {\n      ext: 'flv',\n      mime: 'video/x-flv'\n    };\n  }\n\n  if (checkString('IMPM')) {\n    return {\n      ext: 'it',\n      mime: 'audio/x-it'\n    };\n  }\n\n  if (checkString('-lh0-', {\n    offset: 2\n  }) || checkString('-lh1-', {\n    offset: 2\n  }) || checkString('-lh2-', {\n    offset: 2\n  }) || checkString('-lh3-', {\n    offset: 2\n  }) || checkString('-lh4-', {\n    offset: 2\n  }) || checkString('-lh5-', {\n    offset: 2\n  }) || checkString('-lh6-', {\n    offset: 2\n  }) || checkString('-lh7-', {\n    offset: 2\n  }) || checkString('-lzs-', {\n    offset: 2\n  }) || checkString('-lz4-', {\n    offset: 2\n  }) || checkString('-lz5-', {\n    offset: 2\n  }) || checkString('-lhd-', {\n    offset: 2\n  })) {\n    return {\n      ext: 'lzh',\n      mime: 'application/x-lzh-compressed'\n    };\n  } // MPEG program stream (PS or MPEG-PS)\n\n\n  if (check([0x00, 0x00, 0x01, 0xBA])) {\n    //  MPEG-PS, MPEG-1 Part 1\n    if (check([0x21], {\n      offset: 4,\n      mask: [0xF1]\n    })) {\n      return {\n        ext: 'mpg',\n        // May also be .ps, .mpeg\n        mime: 'video/MP1S'\n      };\n    } // MPEG-PS, MPEG-2 Part 1\n\n\n    if (check([0x44], {\n      offset: 4,\n      mask: [0xC4]\n    })) {\n      return {\n        ext: 'mpg',\n        // May also be .mpg, .m2p, .vob or .sub\n        mime: 'video/MP2P'\n      };\n    }\n  }\n\n  if (checkString('ITSF')) {\n    return {\n      ext: 'chm',\n      mime: 'application/vnd.ms-htmlhelp'\n    };\n  } // -- 6-byte signatures --\n\n\n  if (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n    return {\n      ext: 'xz',\n      mime: 'application/x-xz'\n    };\n  }\n\n  if (checkString('<?xml ')) {\n    return {\n      ext: 'xml',\n      mime: 'application/xml'\n    };\n  }\n\n  if (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n    return {\n      ext: '7z',\n      mime: 'application/x-7z-compressed'\n    };\n  }\n\n  if (check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) && (buffer[6] === 0x0 || buffer[6] === 0x1)) {\n    return {\n      ext: 'rar',\n      mime: 'application/x-rar-compressed'\n    };\n  }\n\n  if (checkString('solid ')) {\n    return {\n      ext: 'stl',\n      mime: 'model/stl'\n    };\n  } // -- 7-byte signatures --\n\n\n  if (checkString('BLENDER')) {\n    return {\n      ext: 'blend',\n      mime: 'application/x-blender'\n    };\n  }\n\n  if (checkString('!<arch>')) {\n    await tokenizer.ignore(8);\n    const str = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\n    if (str === 'debian-binary') {\n      return {\n        ext: 'deb',\n        mime: 'application/x-deb'\n      };\n    }\n\n    return {\n      ext: 'ar',\n      mime: 'application/x-unix-archive'\n    };\n  } // -- 8-byte signatures --\n\n\n  if (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n    // APNG format (https://wiki.mozilla.org/APNG_Specification)\n    // 1. Find the first IDAT (image data) chunk (49 44 41 54)\n    // 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n    // Offset calculated as follows:\n    // - 8 bytes: PNG signature\n    // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n    await tokenizer.ignore(8); // ignore PNG signature\n\n    async function readChunkHeader() {\n      return {\n        length: await tokenizer.readToken(Token.INT32_BE),\n        type: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n      };\n    }\n\n    do {\n      const chunk = await readChunkHeader();\n\n      if (chunk.length < 0) {\n        return; // Invalid chunk length\n      }\n\n      switch (chunk.type) {\n        case 'IDAT':\n          return {\n            ext: 'png',\n            mime: 'image/png'\n          };\n\n        case 'acTL':\n          return {\n            ext: 'apng',\n            mime: 'image/apng'\n          };\n\n        default:\n          await tokenizer.ignore(chunk.length + 4);\n        // Ignore chunk-data + CRC\n      }\n    } while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n    return {\n      ext: 'png',\n      mime: 'image/png'\n    };\n  }\n\n  if (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n    return {\n      ext: 'arrow',\n      mime: 'application/x-apache-arrow'\n    };\n  }\n\n  if (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n    return {\n      ext: 'glb',\n      mime: 'model/gltf-binary'\n    };\n  } // `mov` format variants\n\n\n  if (check([0x66, 0x72, 0x65, 0x65], {\n    offset: 4\n  }) || // `free`\n  check([0x6D, 0x64, 0x61, 0x74], {\n    offset: 4\n  }) || // `mdat` MJPEG\n  check([0x6D, 0x6F, 0x6F, 0x76], {\n    offset: 4\n  }) || // `moov`\n  check([0x77, 0x69, 0x64, 0x65], {\n    offset: 4\n  }) // `wide`\n  ) {\n    return {\n      ext: 'mov',\n      mime: 'video/quicktime'\n    };\n  } // -- 9-byte signatures --\n\n\n  if (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n    return {\n      ext: 'orf',\n      mime: 'image/x-olympus-orf'\n    };\n  }\n\n  if (checkString('gimp xcf ')) {\n    return {\n      ext: 'xcf',\n      mime: 'image/x-xcf'\n    };\n  } // -- 12-byte signatures --\n\n\n  if (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n    return {\n      ext: 'rw2',\n      mime: 'image/x-panasonic-rw2'\n    };\n  } // ASF_Header_Object first 80 bytes\n\n\n  if (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n    async function readHeader() {\n      const guid = Buffer.alloc(16);\n      await tokenizer.readBuffer(guid);\n      return {\n        id: guid,\n        size: Number(await tokenizer.readToken(Token.UINT64_LE))\n      };\n    }\n\n    await tokenizer.ignore(30); // Search for header should be in first 1KB of file.\n\n    while (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n      const header = await readHeader();\n      let payload = header.size - 24;\n\n      if (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n        // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n        const typeId = Buffer.alloc(16);\n        payload -= await tokenizer.readBuffer(typeId);\n\n        if (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n          // Found audio:\n          return {\n            ext: 'asf',\n            mime: 'audio/x-ms-asf'\n          };\n        }\n\n        if (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n          // Found video:\n          return {\n            ext: 'asf',\n            mime: 'video/x-ms-asf'\n          };\n        }\n\n        break;\n      }\n\n      await tokenizer.ignore(payload);\n    } // Default to ASF generic extension\n\n\n    return {\n      ext: 'asf',\n      mime: 'application/vnd.ms-asf'\n    };\n  }\n\n  if (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n    return {\n      ext: 'ktx',\n      mime: 'image/ktx'\n    };\n  }\n\n  if ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {\n    offset: 4\n  })) {\n    return {\n      ext: 'mie',\n      mime: 'application/x-mie'\n    };\n  }\n\n  if (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {\n    offset: 2\n  })) {\n    return {\n      ext: 'shp',\n      mime: 'application/x-esri-shape'\n    };\n  }\n\n  if (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n    // JPEG-2000 family\n    await tokenizer.ignore(20);\n    const type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\n    switch (type) {\n      case 'jp2 ':\n        return {\n          ext: 'jp2',\n          mime: 'image/jp2'\n        };\n\n      case 'jpx ':\n        return {\n          ext: 'jpx',\n          mime: 'image/jpx'\n        };\n\n      case 'jpm ':\n        return {\n          ext: 'jpm',\n          mime: 'image/jpm'\n        };\n\n      case 'mjp2':\n        return {\n          ext: 'mj2',\n          mime: 'image/mj2'\n        };\n\n      default:\n        return;\n    }\n  }\n\n  if (check([0xFF, 0x0A]) || check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n    return {\n      ext: 'jxl',\n      mime: 'image/jxl'\n    };\n  } // -- Unsafe signatures --\n\n\n  if (check([0x0, 0x0, 0x1, 0xBA]) || check([0x0, 0x0, 0x1, 0xB3])) {\n    return {\n      ext: 'mpg',\n      mime: 'video/mpeg'\n    };\n  }\n\n  if (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n    return {\n      ext: 'ttf',\n      mime: 'font/ttf'\n    };\n  }\n\n  if (check([0x00, 0x00, 0x01, 0x00])) {\n    return {\n      ext: 'ico',\n      mime: 'image/x-icon'\n    };\n  }\n\n  if (check([0x00, 0x00, 0x02, 0x00])) {\n    return {\n      ext: 'cur',\n      mime: 'image/x-icon'\n    };\n  }\n\n  if (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n    // Detected Microsoft Compound File Binary File (MS-CFB) Format.\n    return {\n      ext: 'cfb',\n      mime: 'application/x-cfb'\n    };\n  } // Increase sample size from 12 to 256.\n\n\n  await tokenizer.peekBuffer(buffer, {\n    length: Math.min(256, tokenizer.fileInfo.size),\n    mayBeLess: true\n  }); // -- 15-byte signatures --\n\n  if (checkString('BEGIN:')) {\n    if (checkString('VCARD', {\n      offset: 6\n    })) {\n      return {\n        ext: 'vcf',\n        mime: 'text/vcard'\n      };\n    }\n\n    if (checkString('VCALENDAR', {\n      offset: 6\n    })) {\n      return {\n        ext: 'ics',\n        mime: 'text/calendar'\n      };\n    }\n  } // `raf` is here just to keep all the raw image detectors together.\n\n\n  if (checkString('FUJIFILMCCD-RAW')) {\n    return {\n      ext: 'raf',\n      mime: 'image/x-fujifilm-raf'\n    };\n  }\n\n  if (checkString('Extended Module:')) {\n    return {\n      ext: 'xm',\n      mime: 'audio/x-xm'\n    };\n  }\n\n  if (checkString('Creative Voice File')) {\n    return {\n      ext: 'voc',\n      mime: 'audio/x-voc'\n    };\n  }\n\n  if (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) {\n    // Rough & quick check Pickle/ASAR\n    const jsonSize = buffer.readUInt32LE(12);\n\n    if (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n      try {\n        const header = buffer.slice(16, jsonSize + 16).toString();\n        const json = JSON.parse(header); // Check if Pickle is ASAR\n\n        if (json.files) {\n          // Final check, assuring Pickle/ASAR format\n          return {\n            ext: 'asar',\n            mime: 'application/x-asar'\n          };\n        }\n      } catch (_) {}\n    }\n  }\n\n  if (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n    return {\n      ext: 'mxf',\n      mime: 'application/mxf'\n    };\n  }\n\n  if (checkString('SCRM', {\n    offset: 44\n  })) {\n    return {\n      ext: 's3m',\n      mime: 'audio/x-s3m'\n    };\n  }\n\n  if (check([0x47], {\n    offset: 4\n  }) && (check([0x47], {\n    offset: 192\n  }) || check([0x47], {\n    offset: 196\n  }))) {\n    return {\n      ext: 'mts',\n      mime: 'video/mp2t'\n    };\n  }\n\n  if (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {\n    offset: 60\n  })) {\n    return {\n      ext: 'mobi',\n      mime: 'application/x-mobipocket-ebook'\n    };\n  }\n\n  if (check([0x44, 0x49, 0x43, 0x4D], {\n    offset: 128\n  })) {\n    return {\n      ext: 'dcm',\n      mime: 'application/dicom'\n    };\n  }\n\n  if (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n    return {\n      ext: 'lnk',\n      mime: 'application/x.ms.shortcut' // Invented by us\n\n    };\n  }\n\n  if (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n    return {\n      ext: 'alias',\n      mime: 'application/x.apple.alias' // Invented by us\n\n    };\n  }\n\n  if (check([0x4C, 0x50], {\n    offset: 34\n  }) && (check([0x00, 0x00, 0x01], {\n    offset: 8\n  }) || check([0x01, 0x00, 0x02], {\n    offset: 8\n  }) || check([0x02, 0x00, 0x02], {\n    offset: 8\n  }))) {\n    return {\n      ext: 'eot',\n      mime: 'application/vnd.ms-fontobject'\n    };\n  }\n\n  if (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n    return {\n      ext: 'indd',\n      mime: 'application/x-indesign'\n    };\n  } // Increase sample size from 256 to 512\n\n\n  await tokenizer.peekBuffer(buffer, {\n    length: Math.min(512, tokenizer.fileInfo.size),\n    mayBeLess: true\n  }); // Requires a buffer size of 512 bytes\n\n  if (tarHeaderChecksumMatches(buffer)) {\n    return {\n      ext: 'tar',\n      mime: 'application/x-tar'\n    };\n  }\n\n  if (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n    return {\n      ext: 'skp',\n      mime: 'application/vnd.sketchup.skp'\n    };\n  }\n\n  if (checkString('-----BEGIN PGP MESSAGE-----')) {\n    return {\n      ext: 'pgp',\n      mime: 'application/pgp-encrypted'\n    };\n  } // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\n\n  if (buffer.length >= 2 && check([0xFF, 0xE0], {\n    offset: 0,\n    mask: [0xFF, 0xE0]\n  })) {\n    if (check([0x10], {\n      offset: 1,\n      mask: [0x16]\n    })) {\n      // Check for (ADTS) MPEG-2\n      if (check([0x08], {\n        offset: 1,\n        mask: [0x08]\n      })) {\n        return {\n          ext: 'aac',\n          mime: 'audio/aac'\n        };\n      } // Must be (ADTS) MPEG-4\n\n\n      return {\n        ext: 'aac',\n        mime: 'audio/aac'\n      };\n    } // MPEG 1 or 2 Layer 3 header\n    // Check for MPEG layer 3\n\n\n    if (check([0x02], {\n      offset: 1,\n      mask: [0x06]\n    })) {\n      return {\n        ext: 'mp3',\n        mime: 'audio/mpeg'\n      };\n    } // Check for MPEG layer 2\n\n\n    if (check([0x04], {\n      offset: 1,\n      mask: [0x06]\n    })) {\n      return {\n        ext: 'mp2',\n        mime: 'audio/mpeg'\n      };\n    } // Check for MPEG layer 1\n\n\n    if (check([0x06], {\n      offset: 1,\n      mask: [0x06]\n    })) {\n      return {\n        ext: 'mp1',\n        mime: 'audio/mpeg'\n      };\n    }\n  }\n}\n\nconst stream = readableStream => new Promise((resolve, reject) => {\n  // Using `eval` to work around issues when bundling with Webpack\n  const stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n  readableStream.on('error', reject);\n  readableStream.once('readable', async () => {\n    // Set up output stream\n    const pass = new stream.PassThrough();\n    let outputStream;\n\n    if (stream.pipeline) {\n      outputStream = stream.pipeline(readableStream, pass, () => {});\n    } else {\n      outputStream = readableStream.pipe(pass);\n    } // Read the input stream and detect the filetype\n\n\n    const chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n\n    try {\n      const fileType = await fromBuffer(chunk);\n      pass.fileType = fileType;\n    } catch (error) {\n      reject(error);\n    }\n\n    resolve(outputStream);\n  });\n});\n\nconst fileType = {\n  fromStream,\n  fromTokenizer,\n  fromBuffer,\n  stream\n};\nObject.defineProperty(fileType, 'extensions', {\n  get() {\n    return new Set(supported.extensions);\n  }\n\n});\nObject.defineProperty(fileType, 'mimeTypes', {\n  get() {\n    return new Set(supported.mimeTypes);\n  }\n\n});\nmodule.exports = fileType;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/file-type/core.js"],"names":["Token","require","strtok3","stringToBytes","tarHeaderChecksumMatches","uint32SyncSafeToken","supported","minimumBytes","fromStream","stream","tokenizer","fromTokenizer","close","fromBuffer","input","Uint8Array","ArrayBuffer","Buffer","isBuffer","TypeError","buffer","from","length","_check","headers","options","offset","index","header","entries","mask","_fromTokenizer","error","EndOfStreamError","alloc","bytesRead","check","checkString","fileInfo","size","Number","MAX_SAFE_INTEGER","peekBuffer","mayBeLess","ext","mime","ignore","id3HeaderLen","readToken","position","readBuffer","zipHeader","compressedSize","readUInt32LE","uncompressedSize","filenameLength","readUInt16LE","extraFieldLength","filename","StringType","endsWith","type","split","startsWith","mimeType","nextHeaderIndex","indexOf","brandMajor","toString","replace","trim","maxBufferSize","Math","min","includes","readField","msb","peekNumber","UINT8","ic","id","readElement","lenField","nrLen","readUIntBE","len","readChildren","level","children","e","re","docType","str","readChunkHeader","INT32_BE","chunk","readHeader","guid","UINT64_LE","payload","typeId","jsonSize","slice","json","JSON","parse","files","_","readableStream","Promise","resolve","reject","eval","on","once","pass","PassThrough","outputStream","pipeline","pipe","read","fileType","Object","defineProperty","get","Set","extensions","mimeTypes","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Token = require('token-types');\nconst strtok3 = require('strtok3/lib/core');\nconst {\n\tstringToBytes,\n\ttarHeaderChecksumMatches,\n\tuint32SyncSafeToken\n} = require('./util');\nconst supported = require('./supported');\n\nconst minimumBytes = 4100; // A fair amount of file-types are detectable within this range\n\nasync function fromStream(stream) {\n\tconst tokenizer = await strtok3.fromStream(stream);\n\ttry {\n\t\treturn await fromTokenizer(tokenizer);\n\t} finally {\n\t\tawait tokenizer.close();\n\t}\n}\n\nasync function fromBuffer(input) {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buffer = input instanceof Buffer ? input : Buffer.from(input);\n\n\tif (!(buffer && buffer.length > 1)) {\n\t\treturn;\n\t}\n\n\tconst tokenizer = strtok3.fromBuffer(buffer);\n\treturn fromTokenizer(tokenizer);\n}\n\nfunction _check(buffer, headers, options) {\n\toptions = {\n\t\toffset: 0,\n\t\t...options\n\t};\n\n\tfor (const [index, header] of headers.entries()) {\n\t\t// If a bitmask is set\n\t\tif (options.mask) {\n\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (header !== buffer[index + options.offset]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function fromTokenizer(tokenizer) {\n\ttry {\n\t\treturn _fromTokenizer(tokenizer);\n\t} catch (error) {\n\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nasync function _fromTokenizer(tokenizer) {\n\tlet buffer = Buffer.alloc(minimumBytes);\n\tconst bytesRead = 12;\n\tconst check = (header, options) => _check(buffer, header, options);\n\tconst checkString = (header, options) => check(stringToBytes(header), options);\n\n\t// Keep reading until EOF if the file size is unknown.\n\tif (!tokenizer.fileInfo.size) {\n\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\n\t}\n\n\tawait tokenizer.peekBuffer(buffer, {length: bytesRead, mayBeLess: true});\n\n\t// -- 2-byte signatures --\n\n\tif (check([0x42, 0x4D])) {\n\t\treturn {\n\t\t\text: 'bmp',\n\t\t\tmime: 'image/bmp'\n\t\t};\n\t}\n\n\tif (check([0x0B, 0x77])) {\n\t\treturn {\n\t\t\text: 'ac3',\n\t\t\tmime: 'audio/vnd.dolby.dd-raw'\n\t\t};\n\t}\n\n\tif (check([0x78, 0x01])) {\n\t\treturn {\n\t\t\text: 'dmg',\n\t\t\tmime: 'application/x-apple-diskimage'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x5A])) {\n\t\treturn {\n\t\t\text: 'exe',\n\t\t\tmime: 'application/x-msdownload'\n\t\t};\n\t}\n\n\tif (check([0x25, 0x21])) {\n\t\tawait tokenizer.peekBuffer(buffer, {length: 24, mayBeLess: true});\n\n\t\tif (checkString('PS-Adobe-', {offset: 2}) &&\n\t\t\tcheckString(' EPSF-', {offset: 14})) {\n\t\t\treturn {\n\t\t\t\text: 'eps',\n\t\t\t\tmime: 'application/eps'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ps',\n\t\t\tmime: 'application/postscript'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x1F, 0xA0]) ||\n\t\tcheck([0x1F, 0x9D])\n\t) {\n\t\treturn {\n\t\t\text: 'Z',\n\t\t\tmime: 'application/x-compress'\n\t\t};\n\t}\n\n\t// -- 3-byte signatures --\n\n\tif (check([0xFF, 0xD8, 0xFF])) {\n\t\treturn {\n\t\t\text: 'jpg',\n\t\t\tmime: 'image/jpeg'\n\t\t};\n\t}\n\n\tif (check([0x49, 0x49, 0xBC])) {\n\t\treturn {\n\t\t\text: 'jxr',\n\t\t\tmime: 'image/vnd.ms-photo'\n\t\t};\n\t}\n\n\tif (check([0x1F, 0x8B, 0x8])) {\n\t\treturn {\n\t\t\text: 'gz',\n\t\t\tmime: 'application/gzip'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x5A, 0x68])) {\n\t\treturn {\n\t\t\text: 'bz2',\n\t\t\tmime: 'application/x-bzip2'\n\t\t};\n\t}\n\n\tif (checkString('ID3')) {\n\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\n\t\tconst id3HeaderLen = await tokenizer.readToken(uint32SyncSafeToken);\n\t\tif (tokenizer.position + id3HeaderLen > tokenizer.fileInfo.size) {\n\t\t\t// Guess file type based on ID3 header for backward compatibility\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(id3HeaderLen);\n\t\treturn fromTokenizer(tokenizer); // Skip ID3 header, recursion\n\t}\n\n\t// Musepack, SV7\n\tif (checkString('MP+')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (\n\t\t(buffer[0] === 0x43 || buffer[0] === 0x46) &&\n\t\tcheck([0x57, 0x53], {offset: 1})\n\t) {\n\t\treturn {\n\t\t\text: 'swf',\n\t\t\tmime: 'application/x-shockwave-flash'\n\t\t};\n\t}\n\n\t// -- 4-byte signatures --\n\n\tif (check([0x47, 0x49, 0x46])) {\n\t\treturn {\n\t\t\text: 'gif',\n\t\t\tmime: 'image/gif'\n\t\t};\n\t}\n\n\tif (checkString('FLIF')) {\n\t\treturn {\n\t\t\text: 'flif',\n\t\t\tmime: 'image/flif'\n\t\t};\n\t}\n\n\tif (checkString('8BPS')) {\n\t\treturn {\n\t\t\text: 'psd',\n\t\t\tmime: 'image/vnd.adobe.photoshop'\n\t\t};\n\t}\n\n\tif (checkString('WEBP', {offset: 8})) {\n\t\treturn {\n\t\t\text: 'webp',\n\t\t\tmime: 'image/webp'\n\t\t};\n\t}\n\n\t// Musepack, SV8\n\tif (checkString('MPCK')) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (checkString('FORM')) {\n\t\treturn {\n\t\t\text: 'aif',\n\t\t\tmime: 'audio/aiff'\n\t\t};\n\t}\n\n\tif (checkString('icns', {offset: 0})) {\n\t\treturn {\n\t\t\text: 'icns',\n\t\t\tmime: 'image/icns'\n\t\t};\n\t}\n\n\t// Zip-based file formats\n\t// Need to be before the `zip` check\n\tif (check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\n\t\ttry {\n\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\n\t\t\t\tawait tokenizer.readBuffer(buffer, {length: 30});\n\n\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\n\t\t\t\tconst zipHeader = {\n\t\t\t\t\tcompressedSize: buffer.readUInt32LE(18),\n\t\t\t\t\tuncompressedSize: buffer.readUInt32LE(22),\n\t\t\t\t\tfilenameLength: buffer.readUInt16LE(26),\n\t\t\t\t\textraFieldLength: buffer.readUInt16LE(28)\n\t\t\t\t};\n\n\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\n\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\n\n\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xpi',\n\t\t\t\t\t\tmime: 'application/x-xpinstall'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\n\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase '_rels':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'word':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'ppt':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'xl':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: '3mf',\n\t\t\t\t\t\tmime: 'model/3mf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t\t\t// We look for:\n\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t\t\t// - one entry indicating specific type of file.\n\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\n\t\t\t\t\tconst mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\n\n\t\t\t\t\tswitch (mimeType) {\n\t\t\t\t\t\tcase 'application/epub+zip':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'epub',\n\t\t\t\t\t\t\t\tmime: 'application/epub+zip'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odt',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'ods',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\text: 'odp',\n\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try to find next header manually when current one is corrupted\n\t\t\t\tif (zipHeader.compressedSize === 0) {\n\t\t\t\t\tlet nextHeaderIndex = -1;\n\n\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\n\t\t\t\t\t\tawait tokenizer.peekBuffer(buffer, {mayBeLess: true});\n\n\t\t\t\t\t\tnextHeaderIndex = buffer.indexOf('504B0304', 0, 'hex');\n\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\n\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : buffer.length);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\tif (checkString('OggS')) {\n\t\t// This is an OGG container\n\t\tawait tokenizer.ignore(28);\n\t\tconst type = Buffer.alloc(8);\n\t\tawait tokenizer.readBuffer(type);\n\n\t\t// Needs to be before `ogg` check\n\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\n\t\t\treturn {\n\t\t\t\text: 'opus',\n\t\t\t\tmime: 'audio/opus'\n\t\t\t};\n\t\t}\n\n\t\t// If ' theora' in header.\n\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\n\t\t\treturn {\n\t\t\t\text: 'ogv',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01video' in header.\n\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\n\t\t\treturn {\n\t\t\t\text: 'ogm',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\n\t\t\treturn {\n\t\t\t\text: 'oga',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\n\t\t\treturn {\n\t\t\t\text: 'spx',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01vorbis' in header\n\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\n\t\t\treturn {\n\t\t\t\text: 'ogg',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\treturn {\n\t\t\text: 'ogx',\n\t\t\tmime: 'application/ogg'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x50, 0x4B]) &&\n\t\t(buffer[2] === 0x3 || buffer[2] === 0x5 || buffer[2] === 0x7) &&\n\t\t(buffer[3] === 0x4 || buffer[3] === 0x6 || buffer[3] === 0x8)\n\t) {\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\t//\n\n\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\n\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\n\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\n\tif (\n\t\tcheckString('ftyp', {offset: 4}) &&\n\t\t(buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\n\t) {\n\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\n\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\n\t\tconst brandMajor = buffer.toString('binary', 8, 12).replace('\\0', ' ').trim();\n\t\tswitch (brandMajor) {\n\t\t\tcase 'avif':\n\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\n\t\t\tcase 'mif1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\n\t\t\tcase 'msf1':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\n\t\t\tcase 'heic':\n\t\t\tcase 'heix':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\n\t\t\tcase 'hevc':\n\t\t\tcase 'hevx':\n\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\n\t\t\tcase 'qt':\n\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\n\t\t\tcase 'M4V':\n\t\t\tcase 'M4VH':\n\t\t\tcase 'M4VP':\n\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\n\t\t\tcase 'M4P':\n\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\n\t\t\tcase 'M4B':\n\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\n\t\t\tcase 'M4A':\n\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\n\t\t\tcase 'F4V':\n\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\n\t\t\tcase 'F4P':\n\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\n\t\t\tcase 'F4A':\n\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\n\t\t\tcase 'F4B':\n\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\n\t\t\tcase 'crx':\n\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\n\t\t\tdefault:\n\t\t\t\tif (brandMajor.startsWith('3g')) {\n\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\n\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\n\t\t\t\t}\n\n\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\n\t\t}\n\t}\n\n\tif (checkString('MThd')) {\n\t\treturn {\n\t\t\text: 'mid',\n\t\t\tmime: 'audio/midi'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOFF') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff',\n\t\t\tmime: 'font/woff'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('wOF2') &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheckString('OTTO', {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff2',\n\t\t\tmime: 'font/woff2'\n\t\t};\n\t}\n\n\tif (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\treturn {\n\t\t\text: 'pcap',\n\t\t\tmime: 'application/vnd.tcpdump.pcap'\n\t\t};\n\t}\n\n\t// Sony DSD Stream File (DSF)\n\tif (checkString('DSD ')) {\n\t\treturn {\n\t\t\text: 'dsf',\n\t\t\tmime: 'audio/x-dsf' // Non-standard\n\t\t};\n\t}\n\n\tif (checkString('LZIP')) {\n\t\treturn {\n\t\t\text: 'lz',\n\t\t\tmime: 'application/x-lzip'\n\t\t};\n\t}\n\n\tif (checkString('fLaC')) {\n\t\treturn {\n\t\t\text: 'flac',\n\t\t\tmime: 'audio/x-flac'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x50, 0x47, 0xFB])) {\n\t\treturn {\n\t\t\text: 'bpg',\n\t\t\tmime: 'image/bpg'\n\t\t};\n\t}\n\n\tif (checkString('wvpk')) {\n\t\treturn {\n\t\t\text: 'wv',\n\t\t\tmime: 'audio/wavpack'\n\t\t};\n\t}\n\n\tif (checkString('%PDF')) {\n\t\tawait tokenizer.ignore(1350);\n\t\tconst maxBufferSize = 10 * 1024 * 1024;\n\t\tconst buffer = Buffer.alloc(Math.min(maxBufferSize, tokenizer.fileInfo.size));\n\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\n\n\t\t// Check if this is an Adobe Illustrator file\n\t\tif (buffer.includes(Buffer.from('AIPrivateData'))) {\n\t\t\treturn {\n\t\t\t\text: 'ai',\n\t\t\t\tmime: 'application/postscript'\n\t\t\t};\n\t\t}\n\n\t\t// Assume this is just a normal PDF\n\t\treturn {\n\t\t\text: 'pdf',\n\t\t\tmime: 'application/pdf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x61, 0x73, 0x6D])) {\n\t\treturn {\n\t\t\text: 'wasm',\n\t\t\tmime: 'application/wasm'\n\t\t};\n\t}\n\n\t// TIFF, little-endian type\n\tif (check([0x49, 0x49, 0x2A, 0x0])) {\n\t\tif (checkString('CR', {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'cr2',\n\t\t\t\tmime: 'image/x-canon-cr2'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || check([0x1F, 0x00, 0x0B, 0x00], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'nef',\n\t\t\t\tmime: 'image/x-nikon-nef'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0x08, 0x00, 0x00, 0x00], {offset: 4}) &&\n\t\t\t(check([0x2D, 0x00, 0xFE, 0x00], {offset: 8}) ||\n\t\t\t\tcheck([0x27, 0x00, 0xFE, 0x00], {offset: 8}))\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'dng',\n\t\t\t\tmime: 'image/x-adobe-dng'\n\t\t\t};\n\t\t}\n\n\t\tbuffer = Buffer.alloc(24);\n\t\tawait tokenizer.peekBuffer(buffer);\n\t\tif (\n\t\t\t(check([0x10, 0xFB, 0x86, 0x01], {offset: 4}) || check([0x08, 0x00, 0x00, 0x00], {offset: 4})) &&\n\t\t\t// This pattern differentiates ARW from other TIFF-ish file types:\n\t\t\tcheck([0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01], {offset: 9})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'arw',\n\t\t\t\tmime: 'image/x-sony-arw'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\t// TIFF, big-endian type\n\tif (check([0x4D, 0x4D, 0x0, 0x2A])) {\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\tif (checkString('MAC ')) {\n\t\treturn {\n\t\t\text: 'ape',\n\t\t\tmime: 'audio/ape'\n\t\t};\n\t}\n\n\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\tif (check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\n\t\tasync function readField() {\n\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\n\t\t\tlet mask = 0x80;\n\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\n\n\t\t\twhile ((msb & mask) === 0) {\n\t\t\t\t++ic;\n\t\t\t\tmask >>= 1;\n\t\t\t}\n\n\t\t\tconst id = Buffer.alloc(ic + 1);\n\t\t\tawait tokenizer.readBuffer(id);\n\t\t\treturn id;\n\t\t}\n\n\t\tasync function readElement() {\n\t\t\tconst id = await readField();\n\t\t\tconst lenField = await readField();\n\t\t\tlenField[0] ^= 0x80 >> (lenField.length - 1);\n\t\t\tconst nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n\t\t\treturn {\n\t\t\t\tid: id.readUIntBE(0, id.length),\n\t\t\t\tlen: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n\t\t\t};\n\t\t}\n\n\t\tasync function readChildren(level, children) {\n\t\t\twhile (children > 0) {\n\t\t\t\tconst e = await readElement();\n\t\t\t\tif (e.id === 0x4282) {\n\t\t\t\t\treturn tokenizer.readToken(new Token.StringType(e.len, 'utf-8')); // Return DocType\n\t\t\t\t}\n\n\t\t\t\tawait tokenizer.ignore(e.len); // ignore payload\n\t\t\t\t--children;\n\t\t\t}\n\t\t}\n\n\t\tconst re = await readElement();\n\t\tconst docType = await readChildren(1, re.len);\n\n\t\tswitch (docType) {\n\t\t\tcase 'webm':\n\t\t\t\treturn {\n\t\t\t\t\text: 'webm',\n\t\t\t\t\tmime: 'video/webm'\n\t\t\t\t};\n\n\t\t\tcase 'matroska':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mkv',\n\t\t\t\t\tmime: 'video/x-matroska'\n\t\t\t\t};\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t// RIFF file format which might be AVI, WAV, QCP, etc\n\tif (check([0x52, 0x49, 0x46, 0x46])) {\n\t\tif (check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'avi',\n\t\t\t\tmime: 'video/vnd.avi'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'wav',\n\t\t\t\tmime: 'audio/vnd.wave'\n\t\t\t};\n\t\t}\n\n\t\t// QLCM, QCP file\n\t\tif (check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'qcp',\n\t\t\t\tmime: 'audio/qcelp'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('SQLi')) {\n\t\treturn {\n\t\t\text: 'sqlite',\n\t\t\tmime: 'application/x-sqlite3'\n\t\t};\n\t}\n\n\tif (check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\treturn {\n\t\t\text: 'nes',\n\t\t\tmime: 'application/x-nintendo-nes-rom'\n\t\t};\n\t}\n\n\tif (checkString('Cr24')) {\n\t\treturn {\n\t\t\text: 'crx',\n\t\t\tmime: 'application/x-google-chrome-extension'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('MSCF') ||\n\t\tcheckString('ISc(')\n\t) {\n\t\treturn {\n\t\t\text: 'cab',\n\t\t\tmime: 'application/vnd.ms-cab-compressed'\n\t\t};\n\t}\n\n\tif (check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\treturn {\n\t\t\text: 'rpm',\n\t\t\tmime: 'application/x-rpm'\n\t\t};\n\t}\n\n\tif (check([0xC5, 0xD0, 0xD3, 0xC6])) {\n\t\treturn {\n\t\t\text: 'eps',\n\t\t\tmime: 'application/eps'\n\t\t};\n\t}\n\n\tif (check([0x28, 0xB5, 0x2F, 0xFD])) {\n\t\treturn {\n\t\t\text: 'zst',\n\t\t\tmime: 'application/zstd'\n\t\t};\n\t}\n\n\t// -- 5-byte signatures --\n\n\tif (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\treturn {\n\t\t\text: 'otf',\n\t\t\tmime: 'font/otf'\n\t\t};\n\t}\n\n\tif (checkString('#!AMR')) {\n\t\treturn {\n\t\t\text: 'amr',\n\t\t\tmime: 'audio/amr'\n\t\t};\n\t}\n\n\tif (checkString('{\\\\rtf')) {\n\t\treturn {\n\t\t\text: 'rtf',\n\t\t\tmime: 'application/rtf'\n\t\t};\n\t}\n\n\tif (check([0x46, 0x4C, 0x56, 0x01])) {\n\t\treturn {\n\t\t\text: 'flv',\n\t\t\tmime: 'video/x-flv'\n\t\t};\n\t}\n\n\tif (checkString('IMPM')) {\n\t\treturn {\n\t\t\text: 'it',\n\t\t\tmime: 'audio/x-it'\n\t\t};\n\t}\n\n\tif (\n\t\tcheckString('-lh0-', {offset: 2}) ||\n\t\tcheckString('-lh1-', {offset: 2}) ||\n\t\tcheckString('-lh2-', {offset: 2}) ||\n\t\tcheckString('-lh3-', {offset: 2}) ||\n\t\tcheckString('-lh4-', {offset: 2}) ||\n\t\tcheckString('-lh5-', {offset: 2}) ||\n\t\tcheckString('-lh6-', {offset: 2}) ||\n\t\tcheckString('-lh7-', {offset: 2}) ||\n\t\tcheckString('-lzs-', {offset: 2}) ||\n\t\tcheckString('-lz4-', {offset: 2}) ||\n\t\tcheckString('-lz5-', {offset: 2}) ||\n\t\tcheckString('-lhd-', {offset: 2})\n\t) {\n\t\treturn {\n\t\t\text: 'lzh',\n\t\t\tmime: 'application/x-lzh-compressed'\n\t\t};\n\t}\n\n\t// MPEG program stream (PS or MPEG-PS)\n\tif (check([0x00, 0x00, 0x01, 0xBA])) {\n\t\t//  MPEG-PS, MPEG-1 Part 1\n\t\tif (check([0x21], {offset: 4, mask: [0xF1]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .ps, .mpeg\n\t\t\t\tmime: 'video/MP1S'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG-PS, MPEG-2 Part 1\n\t\tif (check([0x44], {offset: 4, mask: [0xC4]})) {\n\t\t\treturn {\n\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\n\t\t\t\tmime: 'video/MP2P'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (checkString('ITSF')) {\n\t\treturn {\n\t\t\text: 'chm',\n\t\t\tmime: 'application/vnd.ms-htmlhelp'\n\t\t};\n\t}\n\n\t// -- 6-byte signatures --\n\n\tif (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\treturn {\n\t\t\text: 'xz',\n\t\t\tmime: 'application/x-xz'\n\t\t};\n\t}\n\n\tif (checkString('<?xml ')) {\n\t\treturn {\n\t\t\text: 'xml',\n\t\t\tmime: 'application/xml'\n\t\t};\n\t}\n\n\tif (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\treturn {\n\t\t\text: '7z',\n\t\t\tmime: 'application/x-7z-compressed'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&\n\t\t(buffer[6] === 0x0 || buffer[6] === 0x1)\n\t) {\n\t\treturn {\n\t\t\text: 'rar',\n\t\t\tmime: 'application/x-rar-compressed'\n\t\t};\n\t}\n\n\tif (checkString('solid ')) {\n\t\treturn {\n\t\t\text: 'stl',\n\t\t\tmime: 'model/stl'\n\t\t};\n\t}\n\n\t// -- 7-byte signatures --\n\n\tif (checkString('BLENDER')) {\n\t\treturn {\n\t\t\text: 'blend',\n\t\t\tmime: 'application/x-blender'\n\t\t};\n\t}\n\n\tif (checkString('!<arch>')) {\n\t\tawait tokenizer.ignore(8);\n\t\tconst str = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\n\t\tif (str === 'debian-binary') {\n\t\t\treturn {\n\t\t\t\text: 'deb',\n\t\t\t\tmime: 'application/x-deb'\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\text: 'ar',\n\t\t\tmime: 'application/x-unix-archive'\n\t\t};\n\t}\n\n\t// -- 8-byte signatures --\n\n\tif (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\n\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\n\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\n\n\t\t// Offset calculated as follows:\n\t\t// - 8 bytes: PNG signature\n\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\n\n\t\tawait tokenizer.ignore(8); // ignore PNG signature\n\n\t\tasync function readChunkHeader() {\n\t\t\treturn {\n\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\n\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'binary'))\n\t\t\t};\n\t\t}\n\n\t\tdo {\n\t\t\tconst chunk = await readChunkHeader();\n\t\t\tif (chunk.length < 0) {\n\t\t\t\treturn; // Invalid chunk length\n\t\t\t}\n\n\t\t\tswitch (chunk.type) {\n\t\t\t\tcase 'IDAT':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'png',\n\t\t\t\t\t\tmime: 'image/png'\n\t\t\t\t\t};\n\t\t\t\tcase 'acTL':\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'apng',\n\t\t\t\t\t\tmime: 'image/apng'\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\n\t\t\t}\n\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\n\n\t\treturn {\n\t\t\text: 'png',\n\t\t\tmime: 'image/png'\n\t\t};\n\t}\n\n\tif (check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'arrow',\n\t\t\tmime: 'application/x-apache-arrow'\n\t\t};\n\t}\n\n\tif (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'glb',\n\t\t\tmime: 'model/gltf-binary'\n\t\t};\n\t}\n\n\t// `mov` format variants\n\tif (\n\t\tcheck([0x66, 0x72, 0x65, 0x65], {offset: 4}) || // `free`\n\t\tcheck([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // `mdat` MJPEG\n\t\tcheck([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) || // `moov`\n\t\tcheck([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\n\t) {\n\t\treturn {\n\t\t\text: 'mov',\n\t\t\tmime: 'video/quicktime'\n\t\t};\n\t}\n\n\t// -- 9-byte signatures --\n\n\tif (check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\n\t\treturn {\n\t\t\text: 'orf',\n\t\t\tmime: 'image/x-olympus-orf'\n\t\t};\n\t}\n\n\tif (checkString('gimp xcf ')) {\n\t\treturn {\n\t\t\text: 'xcf',\n\t\t\tmime: 'image/x-xcf'\n\t\t};\n\t}\n\n\t// -- 12-byte signatures --\n\n\tif (check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\n\t\treturn {\n\t\t\text: 'rw2',\n\t\t\tmime: 'image/x-panasonic-rw2'\n\t\t};\n\t}\n\n\t// ASF_Header_Object first 80 bytes\n\tif (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\tasync function readHeader() {\n\t\t\tconst guid = Buffer.alloc(16);\n\t\t\tawait tokenizer.readBuffer(guid);\n\t\t\treturn {\n\t\t\t\tid: guid,\n\t\t\t\tsize: Number(await tokenizer.readToken(Token.UINT64_LE))\n\t\t\t};\n\t\t}\n\n\t\tawait tokenizer.ignore(30);\n\t\t// Search for header should be in first 1KB of file.\n\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\n\t\t\tconst header = await readHeader();\n\t\t\tlet payload = header.size - 24;\n\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\n\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\tconst typeId = Buffer.alloc(16);\n\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\n\n\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found audio:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'audio/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\n\t\t\t\t\t// Found video:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asf',\n\t\t\t\t\t\tmime: 'video/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tawait tokenizer.ignore(payload);\n\t\t}\n\n\t\t// Default to ASF generic extension\n\t\treturn {\n\t\t\text: 'asf',\n\t\t\tmime: 'application/vnd.ms-asf'\n\t\t};\n\t}\n\n\tif (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\treturn {\n\t\t\text: 'ktx',\n\t\t\tmime: 'image/ktx'\n\t\t};\n\t}\n\n\tif ((check([0x7E, 0x10, 0x04]) || check([0x7E, 0x18, 0x04])) && check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\n\t\treturn {\n\t\t\text: 'mie',\n\t\t\tmime: 'application/x-mie'\n\t\t};\n\t}\n\n\tif (check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\n\t\treturn {\n\t\t\text: 'shp',\n\t\t\tmime: 'application/x-esri-shape'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t// JPEG-2000 family\n\n\t\tawait tokenizer.ignore(20);\n\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\n\t\tswitch (type) {\n\t\t\tcase 'jp2 ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jp2',\n\t\t\t\t\tmime: 'image/jp2'\n\t\t\t\t};\n\t\t\tcase 'jpx ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpx',\n\t\t\t\t\tmime: 'image/jpx'\n\t\t\t\t};\n\t\t\tcase 'jpm ':\n\t\t\t\treturn {\n\t\t\t\t\text: 'jpm',\n\t\t\t\t\tmime: 'image/jpm'\n\t\t\t\t};\n\t\t\tcase 'mjp2':\n\t\t\t\treturn {\n\t\t\t\t\text: 'mj2',\n\t\t\t\t\tmime: 'image/mj2'\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tif (\n\t\tcheck([0xFF, 0x0A]) ||\n\t\tcheck([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\n\t) {\n\t\treturn {\n\t\t\text: 'jxl',\n\t\t\tmime: 'image/jxl'\n\t\t};\n\t}\n\n\t// -- Unsafe signatures --\n\n\tif (\n\t\tcheck([0x0, 0x0, 0x1, 0xBA]) ||\n\t\tcheck([0x0, 0x0, 0x1, 0xB3])\n\t) {\n\t\treturn {\n\t\t\text: 'mpg',\n\t\t\tmime: 'video/mpeg'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'ttf',\n\t\t\tmime: 'font/ttf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x01, 0x00])) {\n\t\treturn {\n\t\t\text: 'ico',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x02, 0x00])) {\n\t\treturn {\n\t\t\text: 'cur',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\n\t\treturn {\n\t\t\text: 'cfb',\n\t\t\tmime: 'application/x-cfb'\n\t\t};\n\t}\n\n\t// Increase sample size from 12 to 256.\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// -- 15-byte signatures --\n\n\tif (checkString('BEGIN:')) {\n\t\tif (checkString('VCARD', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'vcf',\n\t\t\t\tmime: 'text/vcard'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('VCALENDAR', {offset: 6})) {\n\t\t\treturn {\n\t\t\t\text: 'ics',\n\t\t\t\tmime: 'text/calendar'\n\t\t\t};\n\t\t}\n\t}\n\n\t// `raf` is here just to keep all the raw image detectors together.\n\tif (checkString('FUJIFILMCCD-RAW')) {\n\t\treturn {\n\t\t\text: 'raf',\n\t\t\tmime: 'image/x-fujifilm-raf'\n\t\t};\n\t}\n\n\tif (checkString('Extended Module:')) {\n\t\treturn {\n\t\t\text: 'xm',\n\t\t\tmime: 'audio/x-xm'\n\t\t};\n\t}\n\n\tif (checkString('Creative Voice File')) {\n\t\treturn {\n\t\t\text: 'voc',\n\t\t\tmime: 'audio/x-voc'\n\t\t};\n\t}\n\n\tif (check([0x04, 0x00, 0x00, 0x00]) && buffer.length >= 16) { // Rough & quick check Pickle/ASAR\n\t\tconst jsonSize = buffer.readUInt32LE(12);\n\t\tif (jsonSize > 12 && buffer.length >= jsonSize + 16) {\n\t\t\ttry {\n\t\t\t\tconst header = buffer.slice(16, jsonSize + 16).toString();\n\t\t\t\tconst json = JSON.parse(header);\n\t\t\t\t// Check if Pickle is ASAR\n\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'asar',\n\t\t\t\t\t\tmime: 'application/x-asar'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (_) {\n\t\t\t}\n\t\t}\n\t}\n\n\tif (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\treturn {\n\t\t\text: 'mxf',\n\t\t\tmime: 'application/mxf'\n\t\t};\n\t}\n\n\tif (checkString('SCRM', {offset: 44})) {\n\t\treturn {\n\t\t\text: 's3m',\n\t\t\tmime: 'audio/x-s3m'\n\t\t};\n\t}\n\n\tif (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {\n\t\treturn {\n\t\t\text: 'mts',\n\t\t\tmime: 'video/mp2t'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\treturn {\n\t\t\text: 'mobi',\n\t\t\tmime: 'application/x-mobipocket-ebook'\n\t\t};\n\t}\n\n\tif (check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\treturn {\n\t\t\text: 'dcm',\n\t\t\tmime: 'application/dicom'\n\t\t};\n\t}\n\n\tif (check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\n\t\treturn {\n\t\t\text: 'lnk',\n\t\t\tmime: 'application/x.ms.shortcut' // Invented by us\n\t\t};\n\t}\n\n\tif (check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'alias',\n\t\t\tmime: 'application/x.apple.alias' // Invented by us\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x4C, 0x50], {offset: 34}) &&\n\t\t(\n\t\t\tcheck([0x00, 0x00, 0x01], {offset: 8}) ||\n\t\t\tcheck([0x01, 0x00, 0x02], {offset: 8}) ||\n\t\t\tcheck([0x02, 0x00, 0x02], {offset: 8})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'eot',\n\t\t\tmime: 'application/vnd.ms-fontobject'\n\t\t};\n\t}\n\n\tif (check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\n\t\treturn {\n\t\t\text: 'indd',\n\t\t\tmime: 'application/x-indesign'\n\t\t};\n\t}\n\n\t// Increase sample size from 256 to 512\n\tawait tokenizer.peekBuffer(buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\n\n\t// Requires a buffer size of 512 bytes\n\tif (tarHeaderChecksumMatches(buffer)) {\n\t\treturn {\n\t\t\text: 'tar',\n\t\t\tmime: 'application/x-tar'\n\t\t};\n\t}\n\n\tif (check([0xFF, 0xFE, 0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00])) {\n\t\treturn {\n\t\t\text: 'skp',\n\t\t\tmime: 'application/vnd.sketchup.skp'\n\t\t};\n\t}\n\n\tif (checkString('-----BEGIN PGP MESSAGE-----')) {\n\t\treturn {\n\t\t\text: 'pgp',\n\t\t\tmime: 'application/pgp-encrypted'\n\t\t};\n\t}\n\n\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\n\tif (buffer.length >= 2 && check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\n\t\tif (check([0x10], {offset: 1, mask: [0x16]})) {\n\t\t\t// Check for (ADTS) MPEG-2\n\t\t\tif (check([0x08], {offset: 1, mask: [0x08]})) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'aac',\n\t\t\t\t\tmime: 'audio/aac'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Must be (ADTS) MPEG-4\n\t\t\treturn {\n\t\t\t\text: 'aac',\n\t\t\t\tmime: 'audio/aac'\n\t\t\t};\n\t\t}\n\n\t\t// MPEG 1 or 2 Layer 3 header\n\t\t// Check for MPEG layer 3\n\t\tif (check([0x02], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 2\n\t\tif (check([0x04], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp2',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\t// Check for MPEG layer 1\n\t\tif (check([0x06], {offset: 1, mask: [0x06]})) {\n\t\t\treturn {\n\t\t\t\text: 'mp1',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\t}\n}\n\nconst stream = readableStream => new Promise((resolve, reject) => {\n\t// Using `eval` to work around issues when bundling with Webpack\n\tconst stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n\treadableStream.on('error', reject);\n\treadableStream.once('readable', async () => {\n\t\t// Set up output stream\n\t\tconst pass = new stream.PassThrough();\n\t\tlet outputStream;\n\t\tif (stream.pipeline) {\n\t\t\toutputStream = stream.pipeline(readableStream, pass, () => {\n\t\t\t});\n\t\t} else {\n\t\t\toutputStream = readableStream.pipe(pass);\n\t\t}\n\n\t\t// Read the input stream and detect the filetype\n\t\tconst chunk = readableStream.read(minimumBytes) || readableStream.read() || Buffer.alloc(0);\n\t\ttry {\n\t\t\tconst fileType = await fromBuffer(chunk);\n\t\t\tpass.fileType = fileType;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\n\t\tresolve(outputStream);\n\t});\n});\n\nconst fileType = {\n\tfromStream,\n\tfromTokenizer,\n\tfromBuffer,\n\tstream\n};\n\nObject.defineProperty(fileType, 'extensions', {\n\tget() {\n\t\treturn new Set(supported.extensions);\n\t}\n});\n\nObject.defineProperty(fileType, 'mimeTypes', {\n\tget() {\n\t\treturn new Set(supported.mimeTypes);\n\t}\n});\n\nmodule.exports = fileType;\n"]},"metadata":{},"sourceType":"script"}
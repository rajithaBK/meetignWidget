{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _loggerConfig = _interopRequireDefault(require(\"./logger-config\"));\n\nvar LoggerProxy = {\n  logger: {\n    info: function info() {\n      console.error('LoggerProxy->info#NO LOGGER DEFINED');\n    },\n    log: function log() {\n      console.error('LoggerProxy->log#NO LOGGER DEFINED');\n    },\n    error: function error() {\n      console.error('LoggerProxy->error#NO LOGGER DEFINED');\n    },\n    warn: function warn() {\n      console.error('LoggerProxy->warn#NO LOGGER DEFINED');\n    },\n    trace: function trace() {\n      console.error('LoggerProxy->trace#NO LOGGER DEFINED');\n    },\n    debug: function debug() {\n      console.error('LoggerProxy->debug#NO LOGGER DEFINED');\n    }\n  }\n};\n\nLoggerProxy.set = function (logger) {\n  if (!_loggerConfig.default.enable) {\n    LoggerProxy.logger = {\n      info: function info() {},\n      log: function log() {},\n      error: function error() {},\n      warn: function warn() {},\n      trace: function trace() {},\n      debug: function debug() {}\n    };\n  }\n\n  LoggerProxy.logger = logger;\n};\n\nLoggerProxy.get = function () {\n  return LoggerProxy.logger;\n};\n\nvar _default = LoggerProxy;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AAEA,IAAMA,WAAW,GAAG;AAClBC,QAAM,EAAE;AACNC,QAAI,EAAE,gBAAM;AAAEC,aAAO,CAACC,KAARD,CAAc,qCAAdA;AADR;AAENE,OAAG,EAAE,eAAM;AAAEF,aAAO,CAACC,KAARD,CAAc,oCAAdA;AAFP;AAGNC,SAAK,EAAE,iBAAM;AAAED,aAAO,CAACC,KAARD,CAAc,sCAAdA;AAHT;AAING,QAAI,EAAE,gBAAM;AAAEH,aAAO,CAACC,KAARD,CAAc,qCAAdA;AAJR;AAKNI,SAAK,EAAE,iBAAM;AAAEJ,aAAO,CAACC,KAARD,CAAc,sCAAdA;AALT;AAMNK,SAAK,EAAE,iBAAM;AAAEL,aAAO,CAACC,KAARD,CAAc,sCAAdA;AAAwD;AANjE;AADU,CAApB;;AAWAH,WAAW,CAACS,GAAZT,GAAkB,UAACC,MAAD,EAAY;AAC5B,MAAI,CAACS,sBAAaC,MAAlB,EAA0B;AACxBX,eAAW,CAACC,MAAZD,GAAqB;AACnBE,UAAI,EAAE,gBAAM,CADO;AAEnBG,SAAG,EAAE,eAAM,CAFQ;AAGnBD,WAAK,EAAE,iBAAM,CAHM;AAInBE,UAAI,EAAE,gBAAM,CAJO;AAKnBC,WAAK,EAAE,iBAAM,CALM;AAMnBC,WAAK,EAAE,iBAAM,CAAE;AANI,KAArBR;AAQD;;AACDA,aAAW,CAACC,MAAZD,GAAqBC,MAArBD;AAXF;;AAcAA,WAAW,CAACY,GAAZZ,GAAkB;AAAA,SAAMA,WAAW,CAACC,MAAlB;AAAlB;;eAEeD","names":["LoggerProxy","logger","info","console","error","log","warn","trace","debug","set","LoggerConfig","enable","get"],"sources":["logger-proxy.js"],"sourcesContent":["import LoggerConfig from './logger-config';\n\nconst LoggerProxy = {\n  logger: {\n    info: () => { console.error('LoggerProxy->info#NO LOGGER DEFINED'); },\n    log: () => { console.error('LoggerProxy->log#NO LOGGER DEFINED'); },\n    error: () => { console.error('LoggerProxy->error#NO LOGGER DEFINED'); },\n    warn: () => { console.error('LoggerProxy->warn#NO LOGGER DEFINED'); },\n    trace: () => { console.error('LoggerProxy->trace#NO LOGGER DEFINED'); },\n    debug: () => { console.error('LoggerProxy->debug#NO LOGGER DEFINED'); }\n  }\n};\n\nLoggerProxy.set = (logger) => {\n  if (!LoggerConfig.enable) {\n    LoggerProxy.logger = {\n      info: () => {},\n      log: () => {},\n      error: () => {},\n      warn: () => {},\n      trace: () => {},\n      debug: () => {}\n    };\n  }\n  LoggerProxy.logger = logger;\n};\n\nLoggerProxy.get = () => LoggerProxy.logger;\n\nexport default LoggerProxy;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getEngine } from \"./common.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport Attribute from \"./Attribute.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar EncryptedData = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EncryptedData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function EncryptedData() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, EncryptedData);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\n    /**\r\n     * @type {EncryptedContentInfo}\r\n     * @desc encryptedContentInfo\r\n     */\n\n    this.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\n    if (\"unprotectedAttrs\" in parameters)\n      /**\r\n       * @type {Array.<Attribute>}\r\n       * @desc unprotectedAttrs\r\n       */\n      this.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(EncryptedData, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"encryptedContentInfo\", \"unprotectedAttrs\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, EncryptedData.schema({\n        names: {\n          version: \"version\",\n          encryptedContentInfo: {\n            names: {\n              blockName: \"encryptedContentInfo\"\n            }\n          },\n          unprotectedAttrs: \"unprotectedAttrs\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncryptedData\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.encryptedContentInfo = new EncryptedContentInfo({\n        schema: asn1.result.encryptedContentInfo\n      });\n      if (\"unprotectedAttrs\" in asn1.result) this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, function (element) {\n        return new Attribute({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(this.encryptedContentInfo.toSchema());\n\n      if (\"unprotectedAttrs\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: Array.from(this.unprotectedAttrs, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        version: this.version,\n        encryptedContentInfo: this.encryptedContentInfo.toJSON()\n      };\n      if (\"unprotectedAttrs\" in this) _object.unprotectedAttrs = Array.from(this.unprotectedAttrs, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Create a new CMS Encrypted Data content\r\n     * @param {Object} parameters Parameters neccessary for encryption\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(parameters) {\n      var _this = this;\n\n      //region Check for input parameters\n      if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\"); //endregion\n      //region Get cryptographic engine\n\n      var engine = getEngine();\n      if (typeof engine === \"undefined\") return Promise.reject(\"Unable to initialize cryptographic engine\"); //endregion\n      //region Set \"contentType\" parameter\n\n      parameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\n      //endregion\n\n      if (\"encryptEncryptedContentInfo\" in engine.subtle) {\n        return engine.subtle.encryptEncryptedContentInfo(parameters).then(function (result) {\n          _this.encryptedContentInfo = result;\n        });\n      }\n\n      return Promise.reject(\"No support for \\\"encryptEncryptedContentInfo\\\" in current crypto engine \".concat(engine.name));\n    } //**********************************************************************************\n\n    /**\r\n     * Create a new CMS Encrypted Data content\r\n     * @param {Object} parameters Parameters neccessary for encryption\r\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(parameters) {\n      //region Check for input parameters\n      if (parameters instanceof Object === false) return Promise.reject(\"Parameters must have type \\\"Object\\\"\"); //endregion\n      //region Get cryptographic engine\n\n      var engine = getEngine();\n      if (typeof engine === \"undefined\") return Promise.reject(\"Unable to initialize cryptographic engine\"); //endregion\n      //region Set \"encryptedContentInfo\" value\n\n      parameters.encryptedContentInfo = this.encryptedContentInfo; //endregion\n\n      if (\"decryptEncryptedContentInfo\" in engine.subtle) return engine.subtle.decryptEncryptedContentInfo(parameters);\n      return Promise.reject(\"No support for \\\"decryptEncryptedContentInfo\\\" in current crypto engine \".concat(engine.name));\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"encryptedContentInfo\":\n          return new EncryptedContentInfo();\n\n        case \"unprotectedAttrs\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for EncryptedData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === 0;\n\n        case \"encryptedContentInfo\":\n          return EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType) && EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) && EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent);\n\n        case \"unprotectedAttrs\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for EncryptedData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * EncryptedData ::= SEQUENCE {\r\n     *    version CMSVersion,\r\n     *    encryptedContentInfo EncryptedContentInfo,\r\n     *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [encryptedContentInfo]\r\n       * @property {string} [unprotectedAttrs]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), EncryptedContentInfo.schema(names.encryptedContentInfo || {}), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.unprotectedAttrs || \"\",\n            value: Attribute.schema()\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return EncryptedData;\n}(); //**************************************************************************************\n\n\nexport { EncryptedData as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/EncryptedData.js"],"names":["asn1js","getParametersValue","clearProps","getEngine","EncryptedContentInfo","Attribute","EncryptedData","parameters","version","defaultValues","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","Array","from","element","outputArray","push","Integer","value","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","Object","Promise","reject","engine","contentType","subtle","encryptEncryptedContentInfo","then","name","decryptEncryptedContentInfo","memberName","memberValue","compareWithDefault","contentEncryptionAlgorithm","encryptedContent","length","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"contentType\" parameter\r\n\t\tparameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"encryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t{\r\n\t\t\treturn engine.subtle.encryptEncryptedContentInfo(parameters).then(result =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptedContentInfo = result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"encryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"encryptedContentInfo\" value\r\n\t\tparameters.encryptedContentInfo = this.encryptedContentInfo;\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"decryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t\treturn engine.subtle.decryptEncryptedContentInfo(parameters);\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"decryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\n * Class from \"[MS-WCCE]: Windows Client Certificate Enrollment Protocol\"\n */\n\nexport default class CertificateTemplate {\n  //**********************************************************************************\n\n  /**\n   * Constructor for CertificateTemplate class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n\n    /**\n     * @type {string}\n     * @desc templateID\n     */\n    this.templateID = getParametersValue(parameters, \"templateID\", CertificateTemplate.defaultValues(\"templateID\"));\n    if (\"templateMajorVersion\" in parameters)\n      /**\n       * @type {number}\n       * @desc templateMajorVersion\n       */\n      this.templateMajorVersion = getParametersValue(parameters, \"templateMajorVersion\", CertificateTemplate.defaultValues(\"templateMajorVersion\"));\n    if (\"templateMinorVersion\" in parameters)\n      /**\n       * @type {number}\n       * @desc templateMinorVersion\n       */\n      this.templateMinorVersion = getParametersValue(parameters, \"templateMinorVersion\", CertificateTemplate.defaultValues(\"templateMinorVersion\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"templateID\":\n        return \"\";\n\n      case \"templateMajorVersion\":\n      case \"templateMinorVersion\":\n        return 0;\n\n      default:\n        throw new Error(`Invalid member name for CertificateTemplate class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * CertificateTemplateOID ::= SEQUENCE {\n      *    templateID              OBJECT IDENTIFIER,\n      *    templateMajorVersion    INTEGER (0..4294967295) OPTIONAL,\n      *    templateMinorVersion    INTEGER (0..4294967295) OPTIONAL\n      * }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [templateID]\n     * @property {string} [templateMajorVersion]\n     * @property {string} [templateMinorVersion]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.ObjectIdentifier({\n        name: names.templateID || \"\"\n      }), new asn1js.Integer({\n        name: names.templateMajorVersion || \"\",\n        optional: true\n      }), new asn1js.Integer({\n        name: names.templateMinorVersion || \"\",\n        optional: true\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"templateID\", \"templateMajorVersion\", \"templateMinorVersion\"]); //endregion\n    //region Check the schema is valid\n\n    let asn1 = asn1js.compareSchema(schema, schema, CertificateTemplate.schema({\n      names: {\n        templateID: \"templateID\",\n        templateMajorVersion: \"templateMajorVersion\",\n        templateMinorVersion: \"templateMinorVersion\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertificateTemplate\"); //endregion\n    //region Get internal properties from parsed schema\n\n    this.templateID = asn1.result.templateID.valueBlock.toString();\n    if (\"templateMajorVersion\" in asn1.result) this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n    if (\"templateMinorVersion\" in asn1.result) this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec; //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n    outputArray.push(new asn1js.ObjectIdentifier({\n      value: this.templateID\n    }));\n    if (\"templateMajorVersion\" in this) outputArray.push(new asn1js.Integer({\n      value: this.templateMajorVersion\n    }));\n    if (\"templateMinorVersion\" in this) outputArray.push(new asn1js.Integer({\n      value: this.templateMinorVersion\n    })); //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const object = {\n      extnID: this.templateID\n    };\n    if (\"templateMajorVersion\" in this) object.templateMajorVersion = this.templateMajorVersion;\n    if (\"templateMinorVersion\" in this) object.templateMinorVersion = this.templateMinorVersion;\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertificateTemplate.js"],"names":["asn1js","getParametersValue","clearProps","CertificateTemplate","constructor","parameters","templateID","defaultValues","templateMajorVersion","templateMinorVersion","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","ObjectIdentifier","Integer","optional","asn1","compareSchema","verified","result","valueBlock","toString","valueDec","toSchema","outputArray","push","toJSON","object","extnID"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from \"[MS-WCCE]: Windows Client Certificate Enrollment Protocol\"\n */\nexport default class CertificateTemplate\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CertificateTemplate class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc templateID\n\t\t */\n\t\tthis.templateID = getParametersValue(parameters, \"templateID\", CertificateTemplate.defaultValues(\"templateID\"));\n\n\t\tif(\"templateMajorVersion\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc templateMajorVersion\n\t\t\t */\n\t\t\tthis.templateMajorVersion = getParametersValue(parameters, \"templateMajorVersion\", CertificateTemplate.defaultValues(\"templateMajorVersion\"));\n\n\t\tif(\"templateMinorVersion\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc templateMinorVersion\n\t\t\t */\n\t\t\tthis.templateMinorVersion = getParametersValue(parameters, \"templateMinorVersion\", CertificateTemplate.defaultValues(\"templateMinorVersion\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"templateID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"templateMajorVersion\":\n\t\t\tcase \"templateMinorVersion\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CertificateTemplate class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CertificateTemplateOID ::= SEQUENCE {\n     *    templateID              OBJECT IDENTIFIER,\n     *    templateMajorVersion    INTEGER (0..4294967295) OPTIONAL,\n     *    templateMinorVersion    INTEGER (0..4294967295) OPTIONAL\n     * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [templateID]\n\t\t * @property {string} [templateMajorVersion]\n\t\t * @property {string} [templateMinorVersion]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.templateID || \"\") }),\n\t\t\t\tnew asn1js.Integer({\n\t\t\t\t\tname: (names.templateMajorVersion || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Integer({\n\t\t\t\t\tname: (names.templateMinorVersion || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"templateID\",\n\t\t\t\"templateMajorVersion\",\n\t\t\t\"templateMinorVersion\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tCertificateTemplate.schema({\n\t\t\t\tnames: {\n\t\t\t\t\ttemplateID: \"templateID\",\n\t\t\t\t\ttemplateMajorVersion: \"templateMajorVersion\",\n\t\t\t\t\ttemplateMinorVersion: \"templateMinorVersion\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateTemplate\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.templateID = asn1.result.templateID.valueBlock.toString();\n\n\t\tif(\"templateMajorVersion\" in asn1.result)\n\t\t\tthis.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n\n\t\tif(\"templateMinorVersion\" in asn1.result)\n\t\t\tthis.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.templateID }));\n\n\t\tif(\"templateMajorVersion\" in this)\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.templateMajorVersion }));\n\n\t\tif(\"templateMinorVersion\" in this)\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.templateMinorVersion }));\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\textnID: this.templateID\n\t\t};\n\n\t\tif(\"templateMajorVersion\" in this)\n\t\t\tobject.templateMajorVersion = this.templateMajorVersion;\n\n\t\tif(\"templateMinorVersion\" in this)\n\t\t\tobject.templateMinorVersion = this.templateMinorVersion;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
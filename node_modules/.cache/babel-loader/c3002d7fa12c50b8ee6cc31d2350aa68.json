{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar Extensions = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Extensions class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function Extensions() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Extensions);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<Extension>}\r\n     * @desc type\r\n     */\n    this.extensions = getParametersValue(parameters, \"extensions\", Extensions.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(Extensions, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"extensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Extensions.schema({\n        names: {\n          extensions: \"extensions\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Extensions\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.extensions = Array.from(asn1.result.extensions, function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: Array.from(this.extensions, function (element) {\n          return element.toSchema();\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        extensions: Array.from(this.extensions, function (element) {\n          return element.toJSON();\n        })\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"extensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for Extensions class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @param {boolean} optional Flag that current schema should be optional\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [extensions]\r\n       * @property {string} [extension]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        optional: optional,\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.extensions || \"\",\n          value: Extension.schema(names.extension || {})\n        })]\n      });\n    }\n  }]);\n\n  return Extensions;\n}(); //**************************************************************************************\n\n\nexport { Extensions as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Extensions.js"],"names":["asn1js","getParametersValue","clearProps","Extension","Extensions","parameters","extensions","defaultValues","fromSchema","schema","asn1","compareSchema","names","verified","Error","Array","from","result","element","Sequence","value","toSchema","toJSON","memberName","optional","name","blockName","Repeated","extension"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Extensions\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extensions class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Extension>}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Extensions.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extensions class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [extension]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.extensions || \"\"),\r\n\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtensions.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textensions: \"extensions\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extensions\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\textensions: Array.from(this.extensions, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
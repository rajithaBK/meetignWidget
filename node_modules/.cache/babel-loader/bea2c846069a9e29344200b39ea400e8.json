{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _omit2 = _interopRequireDefault(require(\"lodash/omit\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nvar _constants = require(\"../constants\"); // TODO: Break this up a bit more, so that consumers aren't calling data.data.getData()\n\n/**\n * @class WebRTCData\n */\n\n\nvar WebRTCData = /*#__PURE__*/function () {\n  /**\n   * @param {Object} data\n   */\n  function WebRTCData(data) {\n    (0, _classCallCheck2.default)(this, WebRTCData);\n    this.data = data;\n    this.id = _uuid.default.v4();\n  }\n  /**\n   * get omitted rtc/rtcp/rtp/track/transport/candidate data with omitted data (default)\n   * @returns {Object}\n   */\n\n\n  (0, _createClass2.default)(WebRTCData, [{\n    key: \"omit\",\n    value: function omit() {\n      var _this = this;\n\n      var flat = {};\n      (0, _keys.default)(this.data).forEach(function (key) {\n        flat[key] = (0, _omit2.default)(_this.data[key], _constants.DEFAULT_OMISSION_DATA_KEYS);\n      });\n      return flat;\n    }\n    /**\n     * returns if the data is empty\n     * @returns {Boolean};\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return (0, _isEmpty2.default)(this.data);\n    }\n    /**\n     * get the unique id for this specific stat pull\n     * @returns {String};\n     */\n\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.id;\n    }\n    /**\n     * get the transformed data\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.data;\n    }\n  }]);\n  return WebRTCData;\n}();\n\nexports.default = WebRTCData;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA,yC,CAEA;;AACA;AACA;AACA;;;IACqBA,U;AACnB;AACF;AACA;AACE,sBAAYC,IAAZ,EAAkB;AAAA;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUC,cAAKC,EAALD,EAAV;AACD;AAED;AACF;AACA;AACA;;;;;WACE,gBAAO;AAAA;;AACL,UAAME,IAAI,GAAG,EAAb;AAEA,yBAAY,KAAKJ,IAAjB,EAAuBK,OAAvB,CAA+B,UAACC,GAAD,EAAS;AACtCF,YAAI,CAACE,GAAD,CAAJF,GAAY,oBAAKG,KAAI,CAACP,IAAL,CAAUM,GAAV,CAAL,EAAqBE,qCAArB,CAAZJ;AADF;AAIA,aAAOA,IAAP;AACD;AAED;AACF;AACA;AACA;;;;WACE,mBAAU;AACR,aAAO,uBAAQ,KAAKJ,IAAb,CAAP;AACD;AAED;AACF;AACA;AACA;;;;WACE,iBAAQ;AACN,aAAO,KAAKC,EAAZ;AACD;AAED;AACF;AACA;AACA;;;;WACE,mBAAU;AACR,aAAO,KAAKD,IAAZ;AACD","names":["WebRTCData","data","id","uuid","v4","flat","forEach","key","_this","DEFAULT_OMISSION_DATA_KEYS"],"sources":["data.js"],"sourcesContent":["import uuid from 'uuid';\nimport {isEmpty, omit} from 'lodash';\n\nimport {DEFAULT_OMISSION_DATA_KEYS} from '../constants';\n\n// TODO: Break this up a bit more, so that consumers aren't calling data.data.getData()\n/**\n * @class WebRTCData\n */\nexport default class WebRTCData {\n  /**\n   * @param {Object} data\n   */\n  constructor(data) {\n    this.data = data;\n    this.id = uuid.v4();\n  }\n\n  /**\n   * get omitted rtc/rtcp/rtp/track/transport/candidate data with omitted data (default)\n   * @returns {Object}\n   */\n  omit() {\n    const flat = {};\n\n    Object.keys(this.data).forEach((key) => {\n      flat[key] = omit(this.data[key], DEFAULT_OMISSION_DATA_KEYS);\n    });\n\n    return flat;\n  }\n\n  /**\n   * returns if the data is empty\n   * @returns {Boolean};\n   */\n  isEmpty() {\n    return isEmpty(this.data);\n  }\n\n  /**\n   * get the unique id for this specific stat pull\n   * @returns {String};\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * get the transformed data\n   * @returns {Object}\n   */\n  getData() {\n    return this.data;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
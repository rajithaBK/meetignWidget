{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getEngine } from \"./common.js\";\nimport TBSRequest from \"./TBSRequest.js\";\nimport Signature from \"./Signature.js\";\nimport Request from \"./Request.js\";\nimport CertID from \"./CertID.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar OCSPRequest = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OCSPRequest class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function OCSPRequest() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OCSPRequest);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {TBSRequest}\r\n     * @desc tbsRequest\r\n     */\n    this.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\n    if (\"optionalSignature\" in parameters)\n      /**\r\n       * @type {Signature}\r\n       * @desc optionalSignature\r\n       */\n      this.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(OCSPRequest, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"tbsRequest\", \"optionalSignature\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, OCSPRequest.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OCSPRequest\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.tbsRequest = new TBSRequest({\n        schema: asn1.result.tbsRequest\n      });\n      if (\"optionalSignature\" in asn1.result) this.optionalSignature = new Signature({\n        schema: asn1.result.optionalSignature\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.tbsRequest.toSchema(encodeFlag));\n      if (\"optionalSignature\" in this) outputArray.push(new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.optionalSignature.toSchema()]\n      })); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        tbsRequest: this.tbsRequest.toJSON()\n      };\n      if (\"optionalSignature\" in this) _object.optionalSignature = this.optionalSignature.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Making OCSP Request for specific certificate\r\n     * @param {Certificate} certificate Certificate making OCSP Request for\r\n     * @param {Object} parameters Additional parameters\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"createForCertificate\",\n    value: function createForCertificate(certificate, parameters) {\n      var _this = this;\n\n      //region Initial variables\n      var sequence = Promise.resolve();\n      var certID = new CertID(); //endregion\n      //region Create OCSP certificate identifier for the certificate\n\n      sequence = sequence.then(function () {\n        return certID.createForCertificate(certificate, parameters);\n      }); //endregion\n      //region Make final request data\n\n      sequence = sequence.then(function () {\n        _this.tbsRequest = new TBSRequest({\n          requestList: [new Request({\n            reqCert: certID\n          })]\n        });\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Make signature for current OCSP Request\r\n     * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n     * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey) {\n      var _this2 = this;\n\n      var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"SHA-1\";\n      //region Initial checking\n      //region Check private key\n      if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n      //region Check that \"optionalSignature\" exists in the current request\n\n      if (\"optionalSignature\" in this === false) return Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\"); //endregion\n      //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve();\n      var parameters;\n      var tbs;\n      var engine = getEngine(); //endregion\n      //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n      sequence = sequence.then(function () {\n        return engine.subtle.getSignatureParameters(privateKey, hashAlgorithm);\n      });\n      sequence = sequence.then(function (result) {\n        parameters = result.parameters;\n        _this2.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\n      }); //endregion\n      //region Create TBS data for signing\n\n      sequence = sequence.then(function () {\n        tbs = _this2.tbsRequest.toSchema(true).toBER(false);\n      }); //endregion\n      //region Signing TBS data on provided private key\n\n      sequence = sequence.then(function () {\n        return engine.subtle.signWithPrivateKey(tbs, privateKey, parameters);\n      });\n      sequence = sequence.then(function (result) {\n        _this2.optionalSignature.signature = new asn1js.BitString({\n          valueHex: result\n        });\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }, {\n    key: \"verify\",\n    value: function verify() {// TODO: Create the function\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"tbsRequest\":\n          return new TBSRequest();\n\n        case \"optionalSignature\":\n          return new Signature();\n\n        default:\n          throw new Error(\"Invalid member name for OCSPRequest class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"tbsRequest\":\n          // noinspection OverlyComplexBooleanExpressionJS\n          return TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs) && TBSRequest.compareWithDefault(\"version\", memberValue.version) && TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName) && TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList) && TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions);\n\n        case \"optionalSignature\":\n          return Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm) && Signature.compareWithDefault(\"signature\", memberValue.signature) && Signature.compareWithDefault(\"certs\", memberValue.certs);\n\n        default:\n          throw new Error(\"Invalid member name for OCSPRequest class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * OCSPRequest     ::=     SEQUENCE {\r\n     *    tbsRequest                  TBSRequest,\r\n     *    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [tbsRequest]\r\n       * @property {string} [optionalSignature]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"OCSPRequest\",\n        value: [TBSRequest.schema(names.tbsRequest || {\n          names: {\n            blockName: \"tbsRequest\"\n          }\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [Signature.schema(names.optionalSignature || {\n            names: {\n              blockName: \"optionalSignature\"\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return OCSPRequest;\n}(); //**************************************************************************************\n\n\nexport { OCSPRequest as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OCSPRequest.js"],"names":["asn1js","getParametersValue","clearProps","getEngine","TBSRequest","Signature","Request","CertID","OCSPRequest","parameters","tbsRequest","defaultValues","optionalSignature","fromSchema","schema","asn1","compareSchema","verified","Error","result","encodeFlag","outputArray","push","toSchema","Constructed","optional","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","certificate","sequence","Promise","resolve","certID","then","createForCertificate","requestList","reqCert","error","reject","privateKey","hashAlgorithm","tbs","engine","subtle","getSignatureParameters","signatureAlgorithm","toBER","signWithPrivateKey","signature","BitString","valueHex","memberName","memberValue","compareWithDefault","version","requestorName","requestExtensions","certs","names","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport TBSRequest from \"./TBSRequest.js\";\r\nimport Signature from \"./Signature.js\";\r\nimport Request from \"./Request.js\";\r\nimport CertID from \"./CertID.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPRequest \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @desc tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\t\t\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @desc optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPRequest     ::=     SEQUENCE {\r\n\t *    tbsRequest                  TBSRequest,\r\n\t *    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsRequest\",\r\n\t\t\t\"optionalSignature\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tthis.optionalSignature.toSchema()\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tlet tbs;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\ttbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
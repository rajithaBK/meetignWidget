{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _btoa = _interopRequireDefault(require(\"btoa\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _collection = _interopRequireDefault(require(\"./collection\"));\n\nvar _constants = require(\"./constants\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n   * Calendar Item Create Event\n   * Emitted when a calendar item has been added\n   * @event calendar:meeting:create\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been updated\n   * @event calendar:meeting:update\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been deleted\n   * @event calendar:meeting:delete\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:registered\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:unregistered\n * @instance\n * @memberof Calendar\n */\n\n\nvar Calendar = _webexCore.WebexPlugin.extend({\n  namespace: 'Calendar',\n\n  /**\n   * registered value indicating events registration is successful\n   * @instance\n   * @type {Boolean}\n   * @memberof Calendar\n   */\n  registered: false,\n\n  /**\n   * Explicitly sets up the calendar plugin by registering\n   * the device, connecting to mercury, and listening for calendar events.\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  register: function register() {\n    var _this = this;\n\n    if (!this.webex.canAuthorize) {\n      this.logger.error('calendar->register#ERROR, Unable to register, SDK cannot authorize');\n      return _promise.default.reject(new Error('SDK cannot authorize'));\n    }\n\n    if (this.registered) {\n      this.logger.info('calendar->register#INFO, Calendar plugin already registered');\n      return _promise.default.resolve();\n    }\n\n    return this.webex.internal.device.register().then(function () {\n      return _this.webex.internal.mercury.connect();\n    }).then(function () {\n      _this.listenForEvents();\n\n      _this.trigger(_constants.CALENDAR_REGISTERED);\n\n      _this.registered = true;\n    }).catch(function (error) {\n      _this.logger.error(\"calendar->register#ERROR, Unable to register, \".concat(error.message));\n\n      return _promise.default.reject(error);\n    });\n  },\n\n  /**\n   * Explicitly tears down the calendar plugin by deregistering\n   * the device, disconnecting from mercury, and stops listening to calendar events\n   *\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  unregister: function unregister() {\n    var _this2 = this;\n\n    if (!this.registered) {\n      this.logger.info('calendar->unregister#INFO, Calendar plugin already unregistered');\n      return _promise.default.resolve();\n    }\n\n    this.stopListeningForEvents();\n    return this.webex.internal.mercury.disconnect().then(function () {\n      return _this2.webex.internal.device.unregister();\n    }).then(function () {\n      _this2.trigger(_constants.CALENDAR_UNREGISTERED);\n\n      _this2.registered = false;\n    });\n  },\n\n  /**\n   * registers for calendar events through mercury\n   * @returns {undefined}\n   * @private\n   */\n  listenForEvents: function listenForEvents() {\n    var _this3 = this; // Calendar mercury events listener\n\n\n    this.webex.internal.mercury.on('event:calendar.meeting.create', function (envelope) {\n      _this3._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update', function (envelope) {\n      _this3._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', function (envelope) {\n      _this3._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', function (envelope) {\n      _this3._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.delete', function (envelope) {\n      _this3._handleDelete(envelope.data);\n    });\n  },\n\n  /**\n   * unregisteres all the calendar events from mercury\n   * @returns {undefined}\n   * @private\n   */\n  stopListeningForEvents: function stopListeningForEvents() {\n    this.webex.internal.mercury.off('event:calendar.meeting.create');\n    this.webex.internal.mercury.off('event:calendar.meeting.create.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.update');\n    this.webex.internal.mercury.off('event:calendar.meeting.update.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.delete');\n  },\n\n  /**\n   * handles update events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleUpdate: function _handleUpdate(data) {\n    var id = _collection.default.set(data.calendarMeetingExternal);\n\n    this.trigger(_constants.CALENDAR_UPDATED, _collection.default.get(id));\n  },\n\n  /**\n   * handles create events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleCreate: function _handleCreate(data) {\n    var id = _collection.default.set(data.calendarMeetingExternal);\n\n    this.trigger(_constants.CALENDAR_CREATE, _collection.default.get(id));\n  },\n\n  /**\n   * handles delete events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleDelete: function _handleDelete(data) {\n    var item = _collection.default.remove(data.calendarMeetingExternal.id);\n\n    this.trigger(_constants.CALENDAR_DELETE, item);\n  },\n\n  /**\n   * Retrieves a collection of calendars based on the request parameters\n   * Defaults to 1 day before and 7 days ahead\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of calendars\n   */\n  syncCalendar: function syncCalendar() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromDate: this.config.fromDate,\n      toDate: this.config.toDate\n    };\n    return this.list({\n      fromDate: options.fromDate,\n      toDate: options.toDate\n    }).then(function (res) {\n      _collection.default.setAll(res);\n\n      return _collection.default.getAll();\n    });\n  },\n\n  /**\n   * get the calendar item that has a matching value\n   * @param {String} key meeting property\n   * @param {Any} value the meeting property to match\n   * @returns {Object}\n   */\n  getByType: function getByType(key, value) {\n    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {\n      return _collection.default.getBy(key, value);\n    }\n\n    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');\n  },\n\n  /**\n   * gets all the calendar items that have been populated\n   * @returns {Object}\n   */\n  getAll: function getAll() {\n    return _collection.default.getAll();\n  },\n\n  /**\n   * Decrypts an encrypted incoming calendar event\n   * @param {Object} event\n   * @returns {Promise} Resolves with a decrypted calendar event\n   */\n  processMeetingEvent: function processMeetingEvent(event) {\n    return this.webex.transform('inbound', event).then(function () {\n      return event;\n    });\n  },\n\n  /**\n   * Retrieves an array of meeting participants for the meeting id\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting participants\n   */\n  getParticipants: function getParticipants(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: \"calendarEvents/\".concat((0, _btoa.default)(id), \"/participants\")\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting notes\n   */\n  getNotes: function getNotes(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: \"calendarEvents/\".concat((0, _btoa.default)(id), \"/notes\")\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of meetings\n   */\n  list: function list(options) {\n    var _this4 = this;\n\n    options = options || {};\n    return this.webex.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents',\n      qs: options\n    }).then(function (res) {\n      var meetingObjects = res.body.items;\n      var promises = [];\n      meetingObjects.forEach(function (meeting) {\n        if (!meeting.encryptedNotes) {\n          promises.push(_this4.getNotes(meeting.id).then(function (notesResponse) {\n            meeting.encryptedNotes = notesResponse.body && notesResponse.body.encryptedNotes;\n          }));\n        }\n\n        if (!meeting.encryptedParticipants) {\n          promises.push(_this4.getParticipants(meeting.id).then(function (notesResponse) {\n            meeting.encryptedParticipants = notesResponse.body.encryptedParticipants;\n          }));\n        }\n      });\n      return _promise.default.all(promises).then(function () {\n        return meetingObjects;\n      });\n    });\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = Calendar;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Calendar","WebexPlugin","extend","namespace","registered","register","webex","canAuthorize","logger","error","_promise","reject","Error","info","resolve","internal","device","then","_this","mercury","connect","listenForEvents","trigger","CALENDAR_REGISTERED","catch","message","unregister","stopListeningForEvents","disconnect","_this2","CALENDAR_UNREGISTERED","on","envelope","_this3","_handleCreate","data","_handleUpdate","_handleDelete","off","id","CalendarCollection","set","calendarMeetingExternal","CALENDAR_UPDATED","get","CALENDAR_CREATE","item","remove","CALENDAR_DELETE","syncCalendar","options","fromDate","config","toDate","list","res","setAll","getAll","getByType","key","value","includes","getBy","processMeetingEvent","event","transform","getParticipants","request","method","service","resource","getNotes","qs","meetingObjects","body","items","promises","forEach","meeting","encryptedNotes","push","_this4","notesResponse","encryptedParticipants","all","version"],"sources":["calendar.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n   * Calendar Item Create Event\n   * Emitted when a calendar item has been added\n   * @event calendar:meeting:create\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been updated\n   * @event calendar:meeting:update\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been deleted\n   * @event calendar:meeting:delete\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:registered\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:unregistered\n * @instance\n * @memberof Calendar\n */\n\nimport btoa from 'btoa';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport CalendarCollection from './collection';\nimport {CALENDAR_REGISTERED, CALENDAR_UNREGISTERED, CALENDAR_DELETE, CALENDAR_CREATE, CALENDAR_UPDATED} from './constants';\n\nconst Calendar = WebexPlugin.extend({\n  namespace: 'Calendar',\n\n  /**\n   * registered value indicating events registration is successful\n   * @instance\n   * @type {Boolean}\n   * @memberof Calendar\n   */\n  registered: false,\n\n  /**\n   * Explicitly sets up the calendar plugin by registering\n   * the device, connecting to mercury, and listening for calendar events.\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  register() {\n    if (!this.webex.canAuthorize) {\n      this.logger.error('calendar->register#ERROR, Unable to register, SDK cannot authorize');\n\n      return Promise.reject(new Error('SDK cannot authorize'));\n    }\n\n    if (this.registered) {\n      this.logger.info('calendar->register#INFO, Calendar plugin already registered');\n\n      return Promise.resolve();\n    }\n\n    return this.webex.internal.device.register()\n      .then(() => this.webex.internal.mercury.connect())\n      .then(() => {\n        this.listenForEvents();\n        this.trigger(CALENDAR_REGISTERED);\n        this.registered = true;\n      })\n      .catch((error) => {\n        this.logger.error(`calendar->register#ERROR, Unable to register, ${error.message}`);\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * Explicitly tears down the calendar plugin by deregistering\n   * the device, disconnecting from mercury, and stops listening to calendar events\n   *\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  unregister() {\n    if (!this.registered) {\n      this.logger.info('calendar->unregister#INFO, Calendar plugin already unregistered');\n\n      return Promise.resolve();\n    }\n\n    this.stopListeningForEvents();\n\n    return this.webex.internal.mercury.disconnect()\n      .then(() => this.webex.internal.device.unregister())\n      .then(() => {\n        this.trigger(CALENDAR_UNREGISTERED);\n        this.registered = false;\n      });\n  },\n\n  /**\n   * registers for calendar events through mercury\n   * @returns {undefined}\n   * @private\n   */\n  listenForEvents() {\n    // Calendar mercury events listener\n    this.webex.internal.mercury.on('event:calendar.meeting.create', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.delete', (envelope) => {\n      this._handleDelete(envelope.data);\n    });\n  },\n\n  /**\n   * unregisteres all the calendar events from mercury\n   * @returns {undefined}\n   * @private\n   */\n  stopListeningForEvents() {\n    this.webex.internal.mercury.off('event:calendar.meeting.create');\n    this.webex.internal.mercury.off('event:calendar.meeting.create.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.update');\n    this.webex.internal.mercury.off('event:calendar.meeting.update.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.delete');\n  },\n\n  /**\n   * handles update events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleUpdate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_UPDATED, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles create events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleCreate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_CREATE, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles delete events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleDelete(data) {\n    const item = CalendarCollection.remove(data.calendarMeetingExternal.id);\n\n    this.trigger(CALENDAR_DELETE, item);\n  },\n\n  /**\n   * Retrieves a collection of calendars based on the request parameters\n   * Defaults to 1 day before and 7 days ahead\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of calendars\n   */\n  syncCalendar(options = {fromDate: this.config.fromDate, toDate: this.config.toDate}) {\n    return this.list({fromDate: options.fromDate, toDate: options.toDate}).then((res) => {\n      CalendarCollection.setAll(res);\n\n      return CalendarCollection.getAll();\n    });\n  },\n  /**\n   * get the calendar item that has a matching value\n   * @param {String} key meeting property\n   * @param {Any} value the meeting property to match\n   * @returns {Object}\n   */\n  getByType(key, value) {\n    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {\n      return CalendarCollection.getBy(key, value);\n    }\n    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');\n  },\n\n  /**\n   * gets all the calendar items that have been populated\n   * @returns {Object}\n   */\n  getAll() {\n    return CalendarCollection.getAll();\n  },\n\n  /**\n   * Decrypts an encrypted incoming calendar event\n   * @param {Object} event\n   * @returns {Promise} Resolves with a decrypted calendar event\n   */\n  processMeetingEvent(event) {\n    return this.webex.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Retrieves an array of meeting participants for the meeting id\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting participants\n   */\n  getParticipants(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${btoa(id)}/participants`\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting notes\n   */\n  getNotes(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${btoa(id)}/notes`\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of meetings\n   */\n  list(options) {\n    options = options || {};\n\n    return this.webex.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents',\n      qs: options\n    })\n      .then((res) => {\n        const meetingObjects = res.body.items;\n        const promises = [];\n\n        meetingObjects.forEach((meeting) => {\n          if (!meeting.encryptedNotes) {\n            promises.push(\n              this.getNotes(meeting.id)\n                .then((notesResponse) => {\n                  meeting.encryptedNotes = notesResponse.body && notesResponse.body.encryptedNotes;\n                })\n            );\n          }\n\n          if (!meeting.encryptedParticipants) {\n            promises.push(\n              this.getParticipants(meeting.id)\n                .then((notesResponse) => {\n                  meeting.encryptedParticipants = notesResponse.body.encryptedParticipants;\n                })\n            );\n          }\n        });\n\n        return Promise.all(promises)\n          .then(() => meetingObjects);\n      });\n  }\n});\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"script"}
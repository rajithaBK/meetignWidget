{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport EncryptedData from \"./EncryptedData.js\";\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar PKCS8ShroudedKeyBag = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PKCS8ShroudedKeyBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PKCS8ShroudedKeyBag() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PKCS8ShroudedKeyBag);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc encryptionAlgorithm\r\n     */\n    this.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc encryptedData\r\n     */\n\n    this.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PKCS8ShroudedKeyBag, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"encryptionAlgorithm\", \"encryptedData\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\n        names: {\n          encryptionAlgorithm: {\n            names: {\n              blockName: \"encryptionAlgorithm\"\n            }\n          },\n          encryptedData: \"encryptedData\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.encryptionAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.encryptionAlgorithm\n      });\n      this.encryptedData = asn1.result.encryptedData; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.encryptionAlgorithm.toSchema(), this.encryptedData]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\n        encryptedData: this.encryptedData.toJSON()\n      };\n    } //**********************************************************************************\n\n  }, {\n    key: \"parseInternalValues\",\n    value: function parseInternalValues(parameters) {\n      var _this = this;\n\n      //region Initial variables \n      var sequence = Promise.resolve();\n      var cmsEncrypted = new EncryptedData({\n        encryptedContentInfo: new EncryptedContentInfo({\n          contentEncryptionAlgorithm: this.encryptionAlgorithm,\n          encryptedContent: this.encryptedData\n        })\n      }); //endregion \n      //region Decrypt internal data \n\n      sequence = sequence.then(function () {\n        return cmsEncrypted.decrypt(parameters);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion \n      //region Initialize \"parsedValue\" with decrypted PKCS#8 private key \n\n      sequence = sequence.then(\n      /**\r\n       * @param {ArrayBuffer} result\r\n       */\n      function (result) {\n        var asn1 = asn1js.fromBER(result);\n        if (asn1.offset === -1) return Promise.reject(\"Error during parsing ASN.1 data\");\n        _this.parsedValue = new PrivateKeyInfo({\n          schema: asn1.result\n        });\n        return Promise.resolve();\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion \n\n      return sequence;\n    } //**********************************************************************************\n\n  }, {\n    key: \"makeInternalValues\",\n    value: function makeInternalValues(parameters) {\n      var _this2 = this;\n\n      //region Check that we do have \"parsedValue\" \n      if (\"parsedValue\" in this === false) return Promise.reject(\"Please initialize \\\"parsedValue\\\" first\"); //endregion \n      //region Initial variables \n\n      var sequence = Promise.resolve();\n      var cmsEncrypted = new EncryptedData(); //endregion \n      //region Encrypt internal data \n\n      sequence = sequence.then(function () {\n        parameters.contentToEncrypt = _this2.parsedValue.toSchema().toBER(false);\n        return cmsEncrypted.encrypt(parameters);\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion \n      //region Initialize internal values \n\n      sequence = sequence.then(function () {\n        _this2.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\n        _this2.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\n      }); //endregion \n\n      return sequence;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"encryptionAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"encryptedData\":\n          return new asn1js.OctetString();\n\n        case \"parsedValue\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for PKCS8ShroudedKeyBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"encryptionAlgorithm\":\n          return AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId) && \"algorithmParams\" in memberValue === false;\n\n        case \"encryptedData\":\n          return memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName));\n\n        case \"parsedValue\":\n          return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for PKCS8ShroudedKeyBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n     *\r\n     * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n     *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n     *    encryptedData EncryptedData\r\n     * }\r\n     *\r\n     * EncryptedData ::= OCTET STRING\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [encryptionAlgorithm]\r\n       * @property {string} [encryptedData]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\n          names: {\n            blockName: \"encryptionAlgorithm\"\n          }\n        }), new asn1js.Choice({\n          value: [new asn1js.OctetString({\n            name: names.encryptedData || \"encryptedData\"\n          }), new asn1js.OctetString({\n            idBlock: {\n              isConstructed: true\n            },\n            name: names.encryptedData || \"encryptedData\"\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return PKCS8ShroudedKeyBag;\n}(); //**************************************************************************************\n\n\nexport { PKCS8ShroudedKeyBag as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PKCS8ShroudedKeyBag.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","EncryptedData","EncryptedContentInfo","PrivateKeyInfo","PKCS8ShroudedKeyBag","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","toSchema","toJSON","sequence","Promise","resolve","cmsEncrypted","encryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","error","reject","fromBER","offset","contentToEncrypt","toBER","encrypt","memberName","OctetString","memberValue","compareWithDefault","algorithmId","isEqual","Object","keys","length","name","Choice","idBlock","isConstructed"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t *\r\n\t * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t *    encryptedData EncryptedData\r\n\t * }\r\n\t *\r\n\t * EncryptedData ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"encryptionAlgorithm\",\r\n\t\t\t\"encryptedData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.updateImageOrientation = updateImageOrientation;\nexports.readExifData = readExifData;\nexports.orient = orient;\n\n_Object$defineProperty(exports, \"processImage\", {\n  enumerable: true,\n  get: function get() {\n    return _processImage.default;\n  }\n});\n\n_Object$defineProperty(exports, \"detectFileType\", {\n  enumerable: true,\n  get: function get() {\n    return _detectFiletype.default;\n  }\n});\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _processImage = _interopRequireDefault(require(\"./process-image\"));\n\nvar _detectFiletype = _interopRequireDefault(require(\"./detect-filetype\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n\n/* global Uint8Array, FileReader */\n\n\nvar _require = require('safe-buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('exifr/dist/lite.umd'),\n    parse = _require2.parse;\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @param {Object} options\n* @param {boolean} options.shouldNotAddExifData\n* @returns {Promise<Object>}\n*/\n\n\nfunction updateImageOrientation(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new _promise.default(function (resolve) {\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = function onload() {\n      var arrayBuffer = reader.result;\n      var buf = Buffer.from(arrayBuffer);\n      resolve(buf);\n    };\n  }).then(function (buf) {\n    if (options.shouldNotAddExifData) {\n      return buf;\n    }\n\n    return readExifData(file, buf);\n  });\n}\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\n\n\nfunction readExifData(_x, _x2) {\n  return _readExifData.apply(this, arguments);\n}\n/* eslint-disable complexity */\n\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\n\n\nfunction _readExifData() {\n  _readExifData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(file, buf) {\n    var exifData, Orientation, ExifImageHeight, ExifImageWidth;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(file && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg'))) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return parse(buf, {\n              translateValues: false\n            });\n\n          case 3:\n            exifData = _context.sent;\n\n            if (exifData) {\n              Orientation = exifData.Orientation, ExifImageHeight = exifData.ExifImageHeight, ExifImageWidth = exifData.ExifImageWidth;\n              file.orientation = Orientation;\n              file.exifHeight = ExifImageHeight;\n              file.exifWidth = ExifImageWidth;\n\n              if (file.image) {\n                file.image.orientation = Orientation;\n              }\n            }\n\n          case 5:\n            return _context.abrupt(\"return\", buf);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _readExifData.apply(this, arguments);\n}\n\nfunction orient(options, file) {\n  var width = options.width,\n      height = options.height,\n      ctx = options.ctx,\n      img = options.img,\n      orientation = options.orientation,\n      x = options.x,\n      y = options.y;\n\n  if (file && file.orientation && file.orientation !== 1) {\n    // explanation of orientation:\n    // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images\n    switch (orientation) {\n      case 2:\n        // flip\n        ctx.transform(-1, 0, 0, 1, width, 0);\n        break;\n\n      case 3:\n        // rotateImage180\n        ctx.transform(-1, 0, 0, -1, width, height);\n        break;\n\n      case 4:\n        // rotate180AndFlipImage\n        ctx.transform(1, 0, 0, -1, 0, height);\n        break;\n\n      case 5:\n        // rotate90AndFlipImage\n        ctx.transform(0, 1, 1, 0, 0, 0);\n        break;\n\n      case 6:\n        // rotateImage90\n        ctx.transform(0, 1, -1, 0, height, 0);\n        break;\n\n      case 7:\n        // rotateNeg90AndFlipImage\n        ctx.transform(0, -1, -1, 0, height, width);\n        break;\n\n      case 8:\n        // rotateNeg90\n        ctx.transform(0, -1, 1, 0, 0, width);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  ctx.drawImage(img, x, y, width, height);\n}\n/* eslint-enable complexity */","map":{"version":3,"mappings":"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","names":["require","Buffer","parse","updateImageOrientation","file","options","resolve","reader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","buf","from","then","shouldNotAddExifData","readExifData","type","mimeType","_context","translateValues","exifData","Orientation","ExifImageHeight","ExifImageWidth","orientation","exifHeight","exifWidth","image","orient","width","height","ctx","img","x","y","transform","drawImage"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n/* global Uint8Array, FileReader */\n\nconst {Buffer} = require('safe-buffer');\nconst {parse} = require('exifr/dist/lite.umd');\n\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @param {Object} options\n* @param {boolean} options.shouldNotAddExifData\n* @returns {Promise<Object>}\n*/\nexport function updateImageOrientation(file, options = {}) {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onload = function onload() {\n      const arrayBuffer = reader.result;\n      const buf = Buffer.from(arrayBuffer);\n\n      resolve(buf);\n    };\n  })\n    .then((buf) => {\n      if (options.shouldNotAddExifData) {\n        return buf;\n      }\n\n      return readExifData(file, buf);\n    });\n}\n\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\nexport async function readExifData(file, buf) {\n  // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n  if (\n    file &&\n    (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')\n  ) {\n    const exifData = await parse(buf, {translateValues: false});\n\n    if (exifData) {\n      const {Orientation, ExifImageHeight, ExifImageWidth} = exifData;\n\n      file.orientation = Orientation;\n      file.exifHeight = ExifImageHeight;\n      file.exifWidth = ExifImageWidth;\n\n      if (file.image) {\n        file.image.orientation = Orientation;\n      }\n    }\n  }\n\n  return buf;\n}\n\n/* eslint-disable complexity */\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\nexport function orient(options, file) {\n  const {\n    width, height, ctx, img, orientation, x, y\n  } = options;\n\n  if (file && file.orientation && file.orientation !== 1) {\n    // explanation of orientation:\n    // https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images\n    switch (orientation) {\n      case 2:\n        // flip\n        ctx.transform(-1, 0, 0, 1, width, 0);\n        break;\n      case 3:\n      // rotateImage180\n        ctx.transform(-1, 0, 0, -1, width, height);\n        break;\n      case 4:\n      // rotate180AndFlipImage\n        ctx.transform(1, 0, 0, -1, 0, height);\n        break;\n      case 5:\n      // rotate90AndFlipImage\n        ctx.transform(0, 1, 1, 0, 0, 0);\n        break;\n      case 6:\n      // rotateImage90\n        ctx.transform(0, 1, -1, 0, height, 0);\n        break;\n      case 7:\n      // rotateNeg90AndFlipImage\n        ctx.transform(0, -1, -1, 0, height, width);\n        break;\n      case 8:\n      // rotateNeg90\n        ctx.transform(0, -1, 1, 0, 0, width);\n        break;\n      default:\n        break;\n    }\n  }\n  ctx.drawImage(img, x, y, width, height);\n}\n/* eslint-enable complexity */\n\nexport {default as processImage} from './process-image';\nexport {default as detectFileType} from './detect-filetype';\n"]},"metadata":{},"sourceType":"script"}
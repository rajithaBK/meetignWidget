{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar PolicyMapping = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PolicyMapping class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PolicyMapping() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PolicyMapping);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc issuerDomainPolicy\r\n     */\n    this.issuerDomainPolicy = getParametersValue(parameters, \"issuerDomainPolicy\", PolicyMapping.defaultValues(\"issuerDomainPolicy\"));\n    /**\r\n     * @type {string}\r\n     * @desc subjectDomainPolicy\r\n     */\n\n    this.subjectDomainPolicy = getParametersValue(parameters, \"subjectDomainPolicy\", PolicyMapping.defaultValues(\"subjectDomainPolicy\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PolicyMapping, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"issuerDomainPolicy\", \"subjectDomainPolicy\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PolicyMapping.schema({\n        names: {\n          issuerDomainPolicy: \"issuerDomainPolicy\",\n          subjectDomainPolicy: \"subjectDomainPolicy\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyMapping\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\n      this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString(); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.issuerDomainPolicy\n        }), new asn1js.ObjectIdentifier({\n          value: this.subjectDomainPolicy\n        })]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        issuerDomainPolicy: this.issuerDomainPolicy,\n        subjectDomainPolicy: this.subjectDomainPolicy\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"issuerDomainPolicy\":\n          return \"\";\n\n        case \"subjectDomainPolicy\":\n          return \"\";\n\n        default:\n          throw new Error(\"Invalid member name for PolicyMapping class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PolicyMapping ::= SEQUENCE {\r\n     *    issuerDomainPolicy      CertPolicyId,\r\n     *    subjectDomainPolicy     CertPolicyId }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [issuerDomainPolicy]\r\n       * @property {string} [subjectDomainPolicy]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.issuerDomainPolicy || \"\"\n        }), new asn1js.ObjectIdentifier({\n          name: names.subjectDomainPolicy || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return PolicyMapping;\n}(); //**************************************************************************************\n\n\nexport { PolicyMapping as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PolicyMapping.js"],"names":["asn1js","getParametersValue","clearProps","PolicyMapping","parameters","issuerDomainPolicy","defaultValues","subjectDomainPolicy","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","memberName","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyMapping\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyMapping class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc issuerDomainPolicy\r\n\t\t */\r\n\t\tthis.issuerDomainPolicy = getParametersValue(parameters, \"issuerDomainPolicy\", PolicyMapping.defaultValues(\"issuerDomainPolicy\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc subjectDomainPolicy\r\n\t\t */\r\n\t\tthis.subjectDomainPolicy = getParametersValue(parameters, \"subjectDomainPolicy\", PolicyMapping.defaultValues(\"subjectDomainPolicy\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuerDomainPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"subjectDomainPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMapping class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyMapping ::= SEQUENCE {\r\n\t *    issuerDomainPolicy      CertPolicyId,\r\n\t *    subjectDomainPolicy     CertPolicyId }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerDomainPolicy]\r\n\t\t * @property {string} [subjectDomainPolicy]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.issuerDomainPolicy || \"\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.subjectDomainPolicy || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuerDomainPolicy\",\r\n\t\t\t\"subjectDomainPolicy\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyMapping.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuerDomainPolicy: \"issuerDomainPolicy\",\r\n\t\t\t\t\tsubjectDomainPolicy: \"subjectDomainPolicy\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyMapping\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\r\n\t\tthis.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuerDomainPolicy: this.issuerDomainPolicy,\r\n\t\t\tsubjectDomainPolicy: this.subjectDomainPolicy\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
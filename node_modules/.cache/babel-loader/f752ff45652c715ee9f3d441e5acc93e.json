{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport MessageImprint from \"./MessageImprint.js\";\nimport Extension from \"./Extension.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC3161\r\n */\n\nvar TimeStampReq = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for TimeStampReq class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function TimeStampReq() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TimeStampReq);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", TimeStampReq.defaultValues(\"version\"));\n    /**\r\n     * @type {MessageImprint}\r\n     * @desc messageImprint\r\n     */\n\n    this.messageImprint = getParametersValue(parameters, \"messageImprint\", TimeStampReq.defaultValues(\"messageImprint\"));\n    if (\"reqPolicy\" in parameters)\n      /**\r\n       * @type {string}\r\n       * @desc reqPolicy\r\n       */\n      this.reqPolicy = getParametersValue(parameters, \"reqPolicy\", TimeStampReq.defaultValues(\"reqPolicy\"));\n    if (\"nonce\" in parameters)\n      /**\r\n       * @type {Integer}\r\n       * @desc nonce\r\n       */\n      this.nonce = getParametersValue(parameters, \"nonce\", TimeStampReq.defaultValues(\"nonce\"));\n    if (\"certReq\" in parameters)\n      /**\r\n       * @type {boolean}\r\n       * @desc certReq\r\n       */\n      this.certReq = getParametersValue(parameters, \"certReq\", TimeStampReq.defaultValues(\"certReq\"));\n    if (\"extensions\" in parameters)\n      /**\r\n       * @type {Array.<Extension>}\r\n       * @desc extensions\r\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", TimeStampReq.defaultValues(\"extensions\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(TimeStampReq, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"TimeStampReq.version\", \"TimeStampReq.messageImprint\", \"TimeStampReq.reqPolicy\", \"TimeStampReq.nonce\", \"TimeStampReq.certReq\", \"TimeStampReq.extensions\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, TimeStampReq.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for TimeStampReq\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result[\"TimeStampReq.version\"].valueBlock.valueDec;\n      this.messageImprint = new MessageImprint({\n        schema: asn1.result[\"TimeStampReq.messageImprint\"]\n      });\n      if (\"TimeStampReq.reqPolicy\" in asn1.result) this.reqPolicy = asn1.result[\"TimeStampReq.reqPolicy\"].valueBlock.toString();\n      if (\"TimeStampReq.nonce\" in asn1.result) this.nonce = asn1.result[\"TimeStampReq.nonce\"];\n      if (\"TimeStampReq.certReq\" in asn1.result) this.certReq = asn1.result[\"TimeStampReq.certReq\"].valueBlock.value;\n      if (\"TimeStampReq.extensions\" in asn1.result) this.extensions = Array.from(asn1.result[\"TimeStampReq.extensions\"], function (element) {\n        return new Extension({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(this.messageImprint.toSchema());\n      if (\"reqPolicy\" in this) outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.reqPolicy\n      }));\n      if (\"nonce\" in this) outputArray.push(this.nonce);\n      if (\"certReq\" in this && TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false) outputArray.push(new asn1js.Boolean({\n        value: this.certReq\n      })); //region Create array of extensions\n\n      if (\"extensions\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: Array.from(this.extensions, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        version: this.version,\n        messageImprint: this.messageImprint.toJSON()\n      };\n      if (\"reqPolicy\" in this) _object.reqPolicy = this.reqPolicy;\n      if (\"nonce\" in this) _object.nonce = this.nonce.toJSON();\n      if (\"certReq\" in this && TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false) _object.certReq = this.certReq;\n      if (\"extensions\" in this) _object.extensions = Array.from(this.extensions, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"messageImprint\":\n          return new MessageImprint();\n\n        case \"reqPolicy\":\n          return \"\";\n\n        case \"nonce\":\n          return new asn1js.Integer();\n\n        case \"certReq\":\n          return false;\n\n        case \"extensions\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for TimeStampReq class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n        case \"reqPolicy\":\n        case \"certReq\":\n          return memberValue === TimeStampReq.defaultValues(memberName);\n\n        case \"messageImprint\":\n          return MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm) && MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage);\n\n        case \"nonce\":\n          return memberValue.isEqual(TimeStampReq.defaultValues(memberName));\n\n        case \"extensions\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for TimeStampReq class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * TimeStampReq ::= SEQUENCE  {\r\n     *    version               INTEGER  { v1(1) },\r\n     *    messageImprint        MessageImprint,\r\n     *    reqPolicy             TSAPolicyId              OPTIONAL,\r\n     *    nonce                 INTEGER                  OPTIONAL,\r\n     *    certReq               BOOLEAN                  DEFAULT FALSE,\r\n     *    extensions            [0] IMPLICIT Extensions  OPTIONAL  }\r\n     *\r\n     * TSAPolicyId ::= OBJECT IDENTIFIER\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [type]\r\n       * @property {string} [setName]\r\n       * @property {string} [values]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"TimeStampReq\",\n        value: [new asn1js.Integer({\n          name: names.version || \"TimeStampReq.version\"\n        }), MessageImprint.schema(names.messageImprint || {\n          names: {\n            blockName: \"TimeStampReq.messageImprint\"\n          }\n        }), new asn1js.ObjectIdentifier({\n          name: names.reqPolicy || \"TimeStampReq.reqPolicy\",\n          optional: true\n        }), new asn1js.Integer({\n          name: names.nonce || \"TimeStampReq.nonce\",\n          optional: true\n        }), new asn1js.Boolean({\n          name: names.certReq || \"TimeStampReq.certReq\",\n          optional: true\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.extensions || \"TimeStampReq.extensions\",\n            value: Extension.schema()\n          })]\n        }) // IMPLICIT SEQUENCE value\n        ]\n      });\n    }\n  }]);\n\n  return TimeStampReq;\n}(); //**************************************************************************************\n\n\nexport { TimeStampReq as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/TimeStampReq.js"],"names":["asn1js","getParametersValue","clearProps","MessageImprint","Extension","TimeStampReq","parameters","version","defaultValues","messageImprint","reqPolicy","nonce","certReq","extensions","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","valueDec","toString","value","Array","from","element","outputArray","push","Integer","toSchema","ObjectIdentifier","compareWithDefault","Boolean","Constructed","idBlock","tagClass","tagNumber","Sequence","_object","toJSON","memberName","memberValue","hashAlgorithm","hashedMessage","isEqual","length","names","name","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampReq\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampReq class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TimeStampReq.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @desc messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TimeStampReq.defaultValues(\"messageImprint\"));\r\n\r\n\t\tif(\"reqPolicy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @desc reqPolicy\r\n\t\t\t */\r\n\t\t\tthis.reqPolicy = getParametersValue(parameters, \"reqPolicy\", TimeStampReq.defaultValues(\"reqPolicy\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TimeStampReq.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"certReq\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @desc certReq\r\n\t\t\t */\r\n\t\t\tthis.certReq = getParametersValue(parameters, \"certReq\", TimeStampReq.defaultValues(\"certReq\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TimeStampReq.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"reqPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"certReq\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"reqPolicy\":\r\n\t\t\tcase \"certReq\":\r\n\t\t\t\treturn (memberValue === TimeStampReq.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampReq class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampReq ::= SEQUENCE  {\r\n\t *    version               INTEGER  { v1(1) },\r\n\t *    messageImprint        MessageImprint,\r\n\t *    reqPolicy             TSAPolicyId              OPTIONAL,\r\n\t *    nonce                 INTEGER                  OPTIONAL,\r\n\t *    certReq               BOOLEAN                  DEFAULT FALSE,\r\n\t *    extensions            [0] IMPLICIT Extensions  OPTIONAL  }\r\n\t *\r\n\t * TSAPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampReq\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TimeStampReq.version\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampReq.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({\r\n\t\t\t\t\tname: (names.reqPolicy || \"TimeStampReq.reqPolicy\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TimeStampReq.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.certReq || \"TimeStampReq.certReq\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.extensions || \"TimeStampReq.extensions\"),\r\n\t\t\t\t\t\tvalue: Extension.schema()\r\n\t\t\t\t\t})]\r\n\t\t\t\t}) // IMPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampReq.version\",\r\n\t\t\t\"TimeStampReq.messageImprint\",\r\n\t\t\t\"TimeStampReq.reqPolicy\",\r\n\t\t\t\"TimeStampReq.nonce\",\r\n\t\t\t\"TimeStampReq.certReq\",\r\n\t\t\t\"TimeStampReq.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampReq.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampReq\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TimeStampReq.version\"].valueBlock.valueDec;\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TimeStampReq.messageImprint\"] });\r\n\t\tif(\"TimeStampReq.reqPolicy\" in asn1.result)\r\n\t\t\tthis.reqPolicy = asn1.result[\"TimeStampReq.reqPolicy\"].valueBlock.toString();\r\n\t\tif(\"TimeStampReq.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TimeStampReq.nonce\"];\r\n\t\tif(\"TimeStampReq.certReq\" in asn1.result)\r\n\t\t\tthis.certReq = asn1.result[\"TimeStampReq.certReq\"].valueBlock.value;\r\n\t\tif(\"TimeStampReq.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TimeStampReq.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\tif(\"reqPolicy\" in this)\r\n\t\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif((\"certReq\" in this) && (TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.certReq }));\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"reqPolicy\" in this)\r\n\t\t\t_object.reqPolicy = this.reqPolicy;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif((\"certReq\" in this) && (TimeStampReq.compareWithDefault(\"certReq\", this.certReq) === false))\r\n\t\t\t_object.certReq = this.certReq;\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
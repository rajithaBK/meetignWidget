{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _peerConnectionManager = _interopRequireDefault(require(\"../peer-connection-manager\"));\n\nvar _constants = require(\"../constants\");\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar RoapUtil = {};\n\nvar ROAP_ANSWER = _constants._ANSWER_.toLowerCase();\n\nRoapUtil.shouldHandleMedia = function (meeting) {\n  var offer = meeting.mediaProperties.peerConnection && meeting.mediaProperties.peerConnection.signalingState === _constants.SDP.HAVE_LOCAL_OFFER;\n\n  if (offer) {\n    return false;\n  }\n\n  return true;\n};\n\nRoapUtil.handleError = function (pc) {\n  return _peerConnectionManager.default.rollBackLocalDescription({\n    peerConnection: pc\n  }).then(function () {\n    return _promise.default.resolve(true);\n  }).catch(function (err) {\n    _loggerProxy.default.logger.error(\"Roap:util#handleError --> \".concat(err));\n\n    return _promise.default.reject(err);\n  });\n};\n\nRoapUtil.findError = function (messageType, errorType, type) {\n  return (type === _constants.ROAP.RECEIVE_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG) && messageType === _constants._ERROR_ && errorType === _constants._CONFLICT_;\n};\n\nRoapUtil.ensureMeeting = function (meeting, type) {\n  if (type === _constants.ROAP.RECEIVE_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG || type === _constants.ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nRoapUtil.updatePeerConnection = function (meeting, session) {\n  return _peerConnectionManager.default.updatePeerConnection({\n    offerSdp: session.OFFER.sdps,\n    peerConnection: meeting.mediaProperties.peerConnection\n  }, {\n    meetingId: meeting.id,\n    remoteQualityLevel: meeting.mediaProperties.remoteQualityLevel\n  }).then(function (res) {\n    meeting.roap.lastRoapOffer = session.OFFER.sdps;\n    return res;\n  });\n};\n\nRoapUtil.setRemoteDescription = function (meeting, session) {\n  _loggerProxy.default.logger.info(\"Roap:util#setRemoteDescription --> Transmit WAIT_TX_OK, correlationId: \".concat(meeting.correlationId));\n\n  if (!(meeting && meeting.mediaProperties.peerConnection)) {\n    _loggerProxy.default.logger.error(\"Roap:util#setRemoteDescription --> DANGER no media or screen peer connection, correlationId: \".concat(meeting.correlationId));\n\n    return _promise.default.reject(new _parameter.default('Must provide a media or screen peer connection'));\n  }\n\n  return _peerConnectionManager.default.setRemoteSessionDetails(meeting.mediaProperties.peerConnection, ROAP_ANSWER, session.ANSWER.sdps[0], meeting.id).then(function () {\n    _loggerProxy.default.logger.info(\"Roap:util#setRemoteDescription --> Success for correlationId: \".concat(meeting.correlationId));\n\n    return {\n      seq: session.ANSWER.seq,\n      locusId: meeting.locusId,\n      locusSelfId: meeting.locusInfo.self.id,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId\n    };\n  }).catch(function (err) {\n    _loggerProxy.default.logger.error(\"Roap:util#setRemoteDescription --> \".concat(err));\n\n    throw err;\n  });\n};\n\nvar _default = RoapUtil;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["RoapUtil","ROAP_ANSWER","_ANSWER_","toLowerCase","shouldHandleMedia","meeting","offer","mediaProperties","peerConnection","signalingState","SDP","HAVE_LOCAL_OFFER","handleError","pc","PeerConnectionManager","rollBackLocalDescription","then","_promise","resolve","catch","err","LoggerProxy","logger","error","reject","findError","messageType","errorType","type","ROAP","RECEIVE_ROAP_MSG","SEND_ROAP_MSG","_ERROR_","_CONFLICT_","ensureMeeting","SEND_ROAP_MSG_SUCCESS","updatePeerConnection","session","offerSdp","OFFER","sdps","meetingId","id","remoteQualityLevel","res","roap","lastRoapOffer","setRemoteDescription","info","correlationId","ParameterError","setRemoteSessionDetails","ANSWER","seq","locusId","locusSelfId","locusInfo","self","mediaId"],"sources":["util.js"],"sourcesContent":["\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {\n  _ANSWER_,\n  _ERROR_,\n  _CONFLICT_,\n  ROAP,\n  SDP\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nconst RoapUtil = {};\nconst ROAP_ANSWER = _ANSWER_.toLowerCase();\n\nRoapUtil.shouldHandleMedia = (meeting) => {\n  const offer =\n    meeting.mediaProperties.peerConnection &&\n    meeting.mediaProperties.peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;\n\n  if (offer) {\n    return false;\n  }\n\n  return true;\n};\n\nRoapUtil.handleError = (pc) =>\n  PeerConnectionManager.rollBackLocalDescription({peerConnection: pc})\n    .then(() => Promise.resolve(true))\n    .catch((err) => {\n      LoggerProxy.logger.error(`Roap:util#handleError --> ${err}`);\n\n      return Promise.reject(err);\n    });\n\nRoapUtil.findError = (messageType, errorType, type) =>\n  (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG) && messageType === _ERROR_ && errorType === _CONFLICT_;\n\nRoapUtil.ensureMeeting = (meeting, type) => {\n  if (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG || type === ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nRoapUtil.updatePeerConnection = (meeting, session) => PeerConnectionManager.updatePeerConnection({\n  offerSdp: session.OFFER.sdps,\n  peerConnection: meeting.mediaProperties.peerConnection\n},\n{\n  meetingId: meeting.id,\n  remoteQualityLevel: meeting.mediaProperties.remoteQualityLevel\n})\n  .then((res) => {\n    meeting.roap.lastRoapOffer = session.OFFER.sdps;\n\n    return res;\n  });\n\n\nRoapUtil.setRemoteDescription = (meeting, session) => {\n  LoggerProxy.logger.info(`Roap:util#setRemoteDescription --> Transmit WAIT_TX_OK, correlationId: ${meeting.correlationId}`);\n  if (!(meeting && (meeting.mediaProperties.peerConnection))) {\n    LoggerProxy.logger.error(`Roap:util#setRemoteDescription --> DANGER no media or screen peer connection, correlationId: ${meeting.correlationId}`);\n\n    return Promise.reject(new ParameterError('Must provide a media or screen peer connection'));\n  }\n\n  return PeerConnectionManager.setRemoteSessionDetails(\n    meeting.mediaProperties.peerConnection,\n    ROAP_ANSWER,\n    session.ANSWER.sdps[0],\n    meeting.id\n  ).then(() => {\n    LoggerProxy.logger.info(`Roap:util#setRemoteDescription --> Success for correlationId: ${meeting.correlationId}`);\n\n    return {\n      seq: session.ANSWER.seq,\n      locusId: meeting.locusId,\n      locusSelfId: meeting.locusInfo.self.id,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId\n    };\n  })\n    .catch((err) => {\n      LoggerProxy.logger.error(`Roap:util#setRemoteDescription --> ${err}`);\n      throw err;\n    });\n};\n\nexport default RoapUtil;\n"]},"metadata":{},"sourceType":"script"}
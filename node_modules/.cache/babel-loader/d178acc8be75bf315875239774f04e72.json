{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _eventsScope = _interopRequireDefault(require(\"../common/events/events-scope\"));\n\nvar _constants = require(\"../constants\");\n\nvar _metrics = _interopRequireDefault(require(\"../metrics\"));\n\nvar _config = require(\"../metrics/config\");\n\nvar _infoUtils = _interopRequireDefault(require(\"../locus-info/infoUtils\"));\n\nvar _fullState = _interopRequireDefault(require(\"../locus-info/fullState\"));\n\nvar _selfUtils = _interopRequireDefault(require(\"../locus-info/selfUtils\"));\n\nvar _hostUtils = _interopRequireDefault(require(\"../locus-info/hostUtils\"));\n\nvar _controlsUtils = _interopRequireDefault(require(\"../locus-info/controlsUtils\"));\n\nvar _mediaSharesUtils = _interopRequireDefault(require(\"../locus-info/mediaSharesUtils\"));\n\nvar _parser = _interopRequireDefault(require(\"../locus-info/parser\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @description LocusInfo extends ChildEmitter to convert locusInfo info a private emitter to parent object\n * @export\n * @private\n * @class LocusInfo\n */\n\n\nvar LocusInfo = /*#__PURE__*/function (_EventsScope) {\n  (0, _inherits2.default)(LocusInfo, _EventsScope);\n\n  var _super = _createSuper(LocusInfo);\n\n  function LocusInfo(updateMeeting, webex, meetingId) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, LocusInfo);\n    _this = _super.call(this);\n    _this.parsedLocus = {\n      states: []\n    };\n    _this.webex = webex;\n    _this.emitChange = false;\n    _this.compareAndUpdateFlags = {};\n    _this.meetingId = meetingId;\n    _this.updateMeeting = updateMeeting;\n    _this.locusParser = new _parser.default();\n    return _this;\n  }\n  /**\n   * Apply locus delta data to meeting\n   * @param {string} action Locus delta action\n   * @param {Locus} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   */\n\n\n  (0, _createClass2.default)(LocusInfo, [{\n    key: \"applyLocusDeltaData\",\n    value: function applyLocusDeltaData(action, locus, meeting) {\n      var _this2 = this;\n\n      var _LocusDeltaParser$loc = _parser.default.loci,\n          DESYNC = _LocusDeltaParser$loc.DESYNC,\n          USE_CURRENT = _LocusDeltaParser$loc.USE_CURRENT,\n          USE_INCOMING = _LocusDeltaParser$loc.USE_INCOMING;\n\n      switch (action) {\n        case USE_INCOMING:\n          meeting.locusInfo.onDeltaLocus(locus);\n          break;\n\n        case USE_CURRENT:\n          meeting.locusDesync = false;\n          meeting.needToGetFullLocus = false;\n          break;\n\n        case DESYNC:\n          meeting.meetingRequest.getFullLocus({\n            desync: true,\n            locusUrl: meeting.locusUrl\n          }).then(function (res) {\n            meeting.locusInfo.onFullLocus(res.body); // Notify parser to resume processing delta events\n            // now that we have full locus from DESYNC.\n\n            _this2.locusParser.resume();\n          });\n          break;\n\n        default:\n          _loggerProxy.default.logger.info(\"Locus-info:index#applyLocusDeltaData --> Unknown locus delta action: \".concat(action));\n\n      }\n    }\n    /**\n     * Adds locus delta to parser's queue\n     * and registers a function handler\n     * to recieve parsed actions from queue.\n     * @param {Locus} locus\n     * @param {Meeting} meeting\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"handleLocusDelta\",\n    value: function handleLocusDelta(locus, meeting) {\n      var _this3 = this; // register a function to process delta actions\n\n\n      if (!this.locusParser.onDeltaAction) {\n        // delta action, along with associated loci\n        // is passed into the function.\n        this.locusParser.onDeltaAction = function (action, parsedLoci) {\n          _this3.applyLocusDeltaData(action, parsedLoci, meeting);\n        };\n      } // queue delta event with parser\n\n\n      this.locusParser.onDeltaEvent(locus);\n    }\n    /**\n     * @param {Locus} locus\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var locus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.created = locus.created || null;\n      this.scheduledMeeting = locus.meeting || null;\n      this.participantsUrl = locus.participantsUrl || null;\n      this.replaces = locus.replaces || null;\n      this.aclUrl = locus.aclUrl || null;\n      this.baseSequence = locus.baseSequence || null;\n      this.sequence = locus.sequence || null;\n      this.membership = locus.membership || null;\n      this.identities = locus.identities || null;\n      this.participants = locus.participants || null;\n      /**\n       * Stores the delta values for a changed participant.\n       *\n       * @typedef {Object} DeltaParticipant\n       * @property {Record<string, boolean>} delta - Contains changed streams.\n       * @property {Object} person - Contains person data.\n       */\n\n      /**\n       * Stored participant changes between the last event and the current event.\n       * All previously stored events are overwritten between events.\n       *\n       * @instance\n       * @type {Array<DeltaParticipant>}\n       * @private\n       * @member LocusInfo\n       */\n\n      this.deltaParticipants = []; // above section only updates the locusInfo object\n      // The below section makes sure it updates the locusInfo as well as updates the meeting object\n\n      this.updateParticipants(locus.participants); // For 1:1 space meeting the conversation Url does not exist in locus.conversation\n\n      this.updateConversationUrl(locus.conversationUrl, locus.info);\n      this.updateControls(locus.controls);\n      this.updateLocusUrl(locus.url);\n      this.updateFullState(locus.fullState);\n      this.updateMeetingInfo(locus.info); // self and participants generate sipUrl for 1:1 meeting\n\n      this.updateSelf(locus.self, locus.participants);\n      this.updateHostInfo(locus.host);\n      this.updateMediaShares(locus.mediaShares);\n    }\n    /**\n     * @param {Object} locus\n     * @param {Meeting} meeting\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"initialSetup\",\n    value: function initialSetup(locus, meeting) {\n      // meeting already exisits just do an update\n      if (meeting) {\n        // Its a new delta event fetch the whole meeting object\n        this.locusParser.onDeltaEvent(locus);\n      } else {\n        this.onFullLocus(locus);\n      } // Change it to true after it recives it first locus object\n\n\n      this.emitChange = true;\n    }\n    /**\n     * @param {Meeting} meeting\n     * @param {Object} data\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(meeting, data) {\n      var eventType = data.eventType;\n\n      _loggerProxy.default.logger.info(\"Locus-info:index#parse --> received locus data: \".concat(eventType));\n\n      switch (eventType) {\n        case _constants.LOCUSEVENT.PARTICIPANT_JOIN:\n        case _constants.LOCUSEVENT.PARTICIPANT_LEFT:\n        case _constants.LOCUSEVENT.CONTROLS_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:\n        case _constants.LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:\n        case _constants.LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:\n        case _constants.LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:\n        case _constants.LOCUSEVENT.SELF_CHANGED:\n        case _constants.LOCUSEVENT.PARTICIPANT_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:\n        case _constants.LOCUSEVENT.PARTICIPANT_DECLINED:\n        case _constants.LOCUSEVENT.FLOOR_GRANTED:\n        case _constants.LOCUSEVENT.FLOOR_RELEASED:\n          this.onFullLocus(data.locus, eventType);\n          break;\n\n        case _constants.LOCUSEVENT.DIFFERENCE:\n          this.handleLocusDelta(data.locus, meeting);\n          break;\n\n        default:\n          // Why will there be a event with no eventType ????\n          // we may not need this, we can get full locus\n          this.handleLocusDelta(data.locus, meeting);\n      }\n    }\n    /**\n     * @param {String} scope\n     * @param {String} eventName\n     * @param {Array} args\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"emitScoped\",\n    value: function emitScoped(scope, eventName, args) {\n      return this.emit(scope, eventName, args);\n    }\n    /**\n     * updates the locus with full locus object\n     * @param {object} locus locus object\n     * @param {sting} eventType particulat locus event\n     * @returns {object} null\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"onFullLocus\",\n    value: function onFullLocus(locus, eventType) {\n      if (!locus) {\n        _loggerProxy.default.logger.error('Locus-info:index#onFullLocus --> object passed as argument was invalid, continuing.');\n      }\n\n      this.updateParticipantDeltas(locus.participants);\n      this.scheduledMeeting = locus.meeting || null;\n      this.participants = locus.participants;\n      this.updateLocusInfo(locus);\n      this.updateParticipants(locus.participants);\n      this.isMeetingActive();\n      this.handleOneOnOneEvent(eventType); // set current (working copy) for parser\n\n      this.locusParser.workingCopy = locus;\n    } // used for ringing stops on one on one\n\n    /**\n     * @param {String} eventType\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"handleOneOnOneEvent\",\n    value: function handleOneOnOneEvent(eventType) {\n      if (this.parsedLocus.fullState.type === _constants._CALL_ || this.parsedLocus.fullState.type === _constants._SIP_BRIDGE_) {\n        // for 1:1 bob calls alice and alice declines, notify the meeting state\n        if (eventType === _constants.LOCUSEVENT.PARTICIPANT_DECLINED) {\n          // trigger the event for stop ringing\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          }, _constants.EVENTS.REMOTE_RESPONSE, {\n            remoteDeclined: true,\n            remoteAnswered: false\n          });\n        } // for 1:1 bob calls alice and alice answers, notify the meeting state\n\n\n        if (eventType === _constants.LOCUSEVENT.PARTICIPANT_JOIN) {\n          // trigger the event for stop ringing\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          }, _constants.EVENTS.REMOTE_RESPONSE, {\n            remoteDeclined: false,\n            remoteAnswered: true\n          });\n        }\n      }\n    }\n    /**\n     * @param {Object} locus\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"onDeltaLocus\",\n    value: function onDeltaLocus(locus) {\n      this.updateLocusInfo(locus);\n      this.updateParticipants(locus.participants);\n      this.isMeetingActive();\n    }\n    /**\n     * @param {Object} locus\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateLocusInfo\",\n    value: function updateLocusInfo(locus) {\n      this.updateControls(locus.controls);\n      this.updateConversationUrl(locus.conversationUrl, locus.info);\n      this.updateCreated(locus.created);\n      this.updateFullState(locus.fullState);\n      this.updateHostInfo(locus.host);\n      this.updateMeetingInfo(locus.info, locus.self);\n      this.updateMediaShares(locus.mediaShares);\n      this.updateParticipantsUrl(locus.participantsUrl);\n      this.updateReplace(locus.replace);\n      this.updateSelf(locus.self, locus.participants);\n      this.updateLocusUrl(locus.url);\n      this.updateAclUrl(locus.aclUrl);\n      this.updateBasequence(locus.baseSequence);\n      this.updateSequence(locus.sequence);\n      this.updateMemberShip(locus.membership);\n      this.updateIdentifiers(locus.identities);\n      this.compareAndUpdate(); // update which required to compare different objects from locus\n    }\n    /**\n     * @param {Array} participants\n     * @param {Object} self\n     * @returns {Array}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"getLocusPartner\",\n    value: function getLocusPartner(participants, self) {\n      if (!participants || participants.length === 0) {\n        return null;\n      }\n\n      return participants.find(function (participant) {\n        return self && participant.identity !== self.identity && (participants.length <= 2 || participant.type === _constants._USER_ && !participant.removed);\n      }) || this.partner;\n    } // TODO: all the leave states need to be checked\n\n    /**\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"isMeetingActive\",\n    value: function isMeetingActive() {\n      if (this.parsedLocus.fullState.type === _constants._CALL_ || this.parsedLocus.fullState.type === _constants._SIP_BRIDGE_) {\n        var partner = this.getLocusPartner(this.participants, this.self);\n        this.updateMeeting({\n          partner: partner\n        }); // Check if guest user needs to be checked here\n        // 1) when bob declines call from bob, (bob='DECLINED')\n        // 2) When alice rejects call to bob , (bob='NOTIFIED')\n        // When we dont add MEDIA for condition 2. The state of bob='IDLE'\n\n        if (this.fullState && this.fullState.state === _constants.LOCUS.STATE.INACTIVE) {\n          // TODO: update the meeting state\n          _loggerProxy.default.logger.warn('Locus-info:index#isMeetingActive --> Call Ended, locus state is inactive.');\n\n          _metrics.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.CALL_REMOVED_REASON.CALL_INACTIVE,\n            shouldLeave: false\n          });\n        } else if (partner.state === _constants.MEETING_STATE.STATES.LEFT && this.parsedLocus.self && (this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.DECLINED || this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.NOTIFIED || this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.JOINED)) {\n          _metrics.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.CALL_REMOVED_REASON.PARTNER_LEFT,\n            shouldLeave: this.parsedLocus.self.joinedWith && this.parsedLocus.self.joinedWith.state !== _constants._LEFT_\n          });\n        } else if (this.parsedLocus.self && this.parsedLocus.self.state === _constants.MEETING_STATE.STATES.LEFT && (partner.state === _constants.MEETING_STATE.STATES.LEFT || partner.state === _constants.MEETING_STATE.STATES.DECLINED || partner.state === _constants.MEETING_STATE.STATES.NOTIFIED || partner.state === _constants.MEETING_STATE.STATES.IDLE) // Happens when user just joins and adds no Media\n        ) {\n          _metrics.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.CALL_REMOVED_REASON.SELF_LEFT,\n            shouldLeave: false\n          });\n        }\n      } else if (this.parsedLocus.fullState.type === _constants._MEETING_) {\n        if (this.fullState && (this.fullState.state === _constants.LOCUS.STATE.INACTIVE || this.fullState.state === _constants.LOCUS.STATE.TERMINATING)) {\n          _loggerProxy.default.logger.warn('Locus-info:index#isMeetingActive --> Meeting is ending due to inactive or terminating');\n\n          _metrics.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.MEETING_REMOVED_REASON.MEETING_INACTIVE_TERMINATING,\n            shouldLeave: false\n          });\n        } else if (this.fullState && this.fullState.removed) {\n          // user has been dropped from a meeting\n          _metrics.default.postEvent({\n            event: _config.eventType.REMOTE_ENDED,\n            meetingId: this.meetingId\n          });\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.MEETING_REMOVED_REASON.FULLSTATE_REMOVED,\n            shouldLeave: false\n          });\n        } // If you are  guest and you are removed from the meeting\n        // You wont get any further events\n        else if (this.parsedLocus.self && this.parsedLocus.self.removed) {\n          // Check if we need to send an event\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          }, _constants.EVENTS.DESTROY_MEETING, {\n            reason: _constants.MEETING_REMOVED_REASON.SELF_REMOVED,\n            shouldLeave: false\n          });\n        }\n      } else {\n        _loggerProxy.default.logger.warn('Locus-info:index#isMeetingActive --> Meeting Type is unknown.');\n      }\n    }\n    /**\n     * checks if the host permissions have changed while in the meeting\n     * This would be the case if your role as host or moderator has been updated\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"compareAndUpdate\",\n    value: function compareAndUpdate() {\n      // TODO: check with locus team on host and moderator doc\n      // use host as a validator if needed\n      if (this.compareAndUpdateFlags.compareSelfAndHost || this.compareAndUpdateFlags.compareHostAndSelf) {\n        this.compareSelfAndHost();\n      }\n    }\n    /**\n     * compared the self object to check if the user has host permissions\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"compareSelfAndHost\",\n    value: function compareSelfAndHost() {\n      var _this$parsedLocus$hos; // In some cases the host info is not present but the moderator values changes from null to false so it triggers an update\n\n\n      if (this.parsedLocus.self.selfIdentity === ((_this$parsedLocus$hos = this.parsedLocus.host) === null || _this$parsedLocus$hos === void 0 ? void 0 : _this$parsedLocus$hos.hostId) && this.parsedLocus.self.moderator) {\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        }, _constants.EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, {\n          canAssignHost: true\n        });\n      } else {\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        }, _constants.EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, {\n          canAssignHost: false\n        });\n      }\n    }\n    /**\n     * Update the deltaParticipants property of this object based on a list of\n     * provided participants.\n     *\n     * @param {Array} [participants] - The participants to update against.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateParticipantDeltas\",\n    value: function updateParticipantDeltas() {\n      var _this4 = this;\n\n      var participants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : []; // Used to find a participant within a participants collection.\n\n      var findParticipant = function findParticipant(participant, collection) {\n        return collection.find(function (item) {\n          return item.person.id === participant.person.id;\n        });\n      }; // Generates an object that indicates which state properties have changed.\n\n\n      var generateDelta = function generateDelta() {\n        var prevState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var newState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Setup deltas.\n\n        var deltas = {\n          audioStatus: prevState.audioStatus !== newState.audioStatus,\n          videoSlidesStatus: prevState.videoSlidesStatus !== newState.videoSlidesStatus,\n          videoStatus: prevState.videoStatus !== newState.videoStatus\n        }; // Clean the object\n\n        (0, _keys.default)(deltas).forEach(function (key) {\n          if (deltas[key] !== true) {\n            delete deltas[key];\n          }\n        });\n        return deltas;\n      };\n\n      this.deltaParticipants = participants.reduce(function (collection, participant) {\n        var existingParticipant = findParticipant(participant, _this4.participants || []) || {};\n        var delta = generateDelta(existingParticipant.status, participant.status);\n        var changed = (0, _keys.default)(delta).length > 0;\n\n        if (changed) {\n          collection.push({\n            person: participant.person,\n            delta: delta\n          });\n        }\n\n        return collection;\n      }, []);\n    }\n    /**\n     *\n     * @param {Object} participants new participants object\n     * @param {boolen} deltaParticpantFlag  delta event\n     * @returns {Array} updatedParticipants\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateParticipants\",\n    value: function updateParticipants(participants) {\n      var _this$parsedLocus$con;\n\n      this.emitScoped({\n        file: 'locus-info',\n        function: 'updateParticipants'\n      }, _constants.EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, {\n        participants: participants,\n        recordingId: this.parsedLocus.controls && ((_this$parsedLocus$con = this.parsedLocus.controls.record) === null || _this$parsedLocus$con === void 0 ? void 0 : _this$parsedLocus$con.modifiedBy),\n        selfIdentity: this.parsedLocus.self && this.parsedLocus.self.selfIdentity,\n        selfId: this.parsedLocus.self && this.parsedLocus.self.selfId,\n        hostId: this.parsedLocus.host && this.parsedLocus.host.hostId\n      });\n    }\n    /**\n     * @param {Object} controls\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateControls\",\n    value: function updateControls(controls) {\n      if (controls && !(0, _isEqual2.default)(this.controls, controls)) {\n        this.parsedLocus.controls = _controlsUtils.default.parse(controls);\n\n        var _ControlsUtils$getCon = _controlsUtils.default.getControls(this.controls, controls),\n            _ControlsUtils$getCon2 = _ControlsUtils$getCon.updates,\n            hasRecordingChanged = _ControlsUtils$getCon2.hasRecordingChanged,\n            hasRecordingPausedChanged = _ControlsUtils$getCon2.hasRecordingPausedChanged,\n            current = _ControlsUtils$getCon.current;\n\n        if (hasRecordingChanged || hasRecordingPausedChanged) {\n          var state = null;\n\n          if (hasRecordingPausedChanged) {\n            if (current.record.paused) {\n              state = _constants.RECORDING_STATE.PAUSED;\n            } else {\n              // state will be `IDLE` if the recording is not active, even when there is a `pause` status change.\n              state = current.record.recording ? _constants.RECORDING_STATE.RESUMED : _constants.RECORDING_STATE.IDLE;\n            }\n          } else if (hasRecordingChanged) {\n            state = current.record.recording ? _constants.RECORDING_STATE.RECORDING : _constants.RECORDING_STATE.IDLE;\n          }\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateControls'\n          }, _constants.LOCUSINFO.EVENTS.CONTROLS_RECORDING_UPDATED, {\n            state: state,\n            modifiedBy: current.record.modifiedBy,\n            lastModified: current.record.lastModified\n          });\n        }\n\n        this.controls = controls;\n      }\n    }\n    /**\n     * @param {String} conversationUrl\n     * @param {Object} info\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateConversationUrl\",\n    value: function updateConversationUrl(conversationUrl, info) {\n      if (conversationUrl && !(0, _isEqual2.default)(this.conversationUrl, conversationUrl)) {\n        this.conversationUrl = conversationUrl;\n        this.updateMeeting({\n          conversationUrl: conversationUrl\n        });\n      } else if (info && info.conversationUrl && !(0, _isEqual2.default)(this.conversationUrl, info.conversationUrl)) {\n        this.conversationUrl = info.conversationUrl;\n        this.updateMeeting({\n          conversationUrl: info.conversationUrl\n        });\n      }\n    }\n    /**\n     * @param {Object} created\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateCreated\",\n    value: function updateCreated(created) {\n      if (created && !(0, _isEqual2.default)(this.created, created)) {\n        this.created = created;\n      }\n    }\n    /**\n     * @param {Object} fullState\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateFullState\",\n    value: function updateFullState(fullState) {\n      if (fullState && !(0, _isEqual2.default)(this.fullState, fullState)) {\n        var result = _fullState.default.getFullState(this.fullState, fullState);\n\n        this.updateMeeting(result.current);\n\n        if (result.updates.meetingStateChangedTo) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateFullState'\n          }, _constants.LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, {\n            previousState: result.previous && result.previous.meetingState,\n            currentState: result.current.meetingState\n          });\n        }\n\n        if (result.updates.meetingTypeChangedTo) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateFullState'\n          }, _constants.LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, {\n            type: result.current.type\n          });\n        }\n\n        this.parsedLocus.fullState = result.current;\n        this.fullState = fullState;\n      }\n    }\n    /**\n     * handles when the locus.host is updated\n     * @param {Object} host the locus.host property\n     * @returns {undefined}\n     * @memberof LocusInfo\n     * emits internal event locus_info_update_host\n     */\n\n  }, {\n    key: \"updateHostInfo\",\n    value: function updateHostInfo(host) {\n      if (host && !(0, _isEqual2.default)(this.host, host)) {\n        var parsedHosts = _hostUtils.default.getHosts(this.host, host);\n\n        this.updateMeeting(parsedHosts.current);\n        this.parsedLocus.host = parsedHosts.current;\n\n        if (parsedHosts.updates.isNewHost) {\n          this.compareAndUpdateFlags.compareSelfAndHost = true;\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateHostInfo'\n          }, _constants.EVENTS.LOCUS_INFO_UPDATE_HOST, {\n            newHost: parsedHosts.current,\n            oldHost: parsedHosts.previous\n          });\n        }\n\n        this.host = host;\n      } else {\n        this.compareAndUpdateFlags.compareSelfAndHost = false;\n      }\n    }\n    /**\n     * @param {Object} info\n     * @param {Object} self\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateMeetingInfo\",\n    value: function updateMeetingInfo(info, self) {\n      if (info && (!(0, _isEqual2.default)(this.info, info) || !(0, _isEqual2.default)(_infoUtils.default.parsePolicy(info), _infoUtils.default.parsePolicy(this.info)) || !(0, _isEqual2.default)(_infoUtils.default.parseModerator(info) || _infoUtils.default.parseModerator(info)))) {\n        var parsedInfo = _infoUtils.default.getInfos(this.parsedLocus.info, info);\n\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateMeetingInfo'\n        }, _constants.LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, {\n          info: parsedInfo.current,\n          self: self\n        });\n\n        if (parsedInfo.updates.isLocked) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          }, _constants.LOCUSINFO.EVENTS.MEETING_LOCKED, info);\n        }\n\n        if (parsedInfo.updates.isUnlocked) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          }, _constants.LOCUSINFO.EVENTS.MEETING_UNLOCKED, info);\n        }\n\n        this.info = info;\n        this.parsedLocus.info = parsedInfo.current; // Parses the info and adds necessary values\n\n        this.updateMeeting(parsedInfo.current);\n      }\n    }\n    /**\n     * handles when the locus.mediaShares is updated\n     * @param {Object} mediaShares the locus.mediaShares property\n     * @returns {undefined}\n     * @memberof LocusInfo\n     * emits internal event locus_info_update_media_shares\n     */\n\n  }, {\n    key: \"updateMediaShares\",\n    value: function updateMediaShares(mediaShares) {\n      if (mediaShares && !(0, _isEqual2.default)(this.mediaShares, mediaShares)) {\n        var parsedMediaShares = _mediaSharesUtils.default.getMediaShares(this.mediaShares, mediaShares);\n\n        this.updateMeeting(parsedMediaShares.current);\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateMediaShares'\n        }, _constants.EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, {\n          current: parsedMediaShares.current,\n          previous: parsedMediaShares.previous\n        });\n        this.parsedLocus.mediaShares = parsedMediaShares.current;\n        this.mediaShares = mediaShares;\n      }\n    }\n    /**\n     * @param {String} participantsUrl\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateParticipantsUrl\",\n    value: function updateParticipantsUrl(participantsUrl) {\n      if (participantsUrl && !(0, _isEqual2.default)(this.participantsUrl, participantsUrl)) {\n        this.participantsUrl = participantsUrl;\n      }\n    }\n    /**\n     * @param {Object} replace\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateReplace\",\n    value: function updateReplace(replace) {\n      if (replace && !(0, _isEqual2.default)(this.replace, replace)) {\n        this.replace = replace;\n      }\n    }\n    /**\n     * handles when the locus.self is updated\n     * @param {Object} self the locus.mediaShares property\n     * @param {Array} participants the locus.participants property\n     * @returns {undefined}\n     * @memberof LocusInfo\n     * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self\n     */\n\n  }, {\n    key: \"updateSelf\",\n    value: function updateSelf(self, participants) {\n      if (self && !(0, _isEqual2.default)(this.self, self)) {\n        var parsedSelves = _selfUtils.default.getSelves(this.self, self, this.webex.internal.device.url);\n\n        this.updateMeeting(parsedSelves.current);\n        this.parsedLocus.self = parsedSelves.current;\n        var element = this.parsedLocus.states[this.parsedLocus.states.length - 1];\n\n        if (element !== parsedSelves.current.state) {\n          this.parsedLocus.states.push(parsedSelves.current.state);\n        } // TODO: check if we need to save the sipUri here as well\n        // this.emit(LOCUSINFO.EVENTS.MEETING_UPDATE, SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri));\n\n\n        var result = _selfUtils.default.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri);\n\n        if (result.sipUri) {\n          this.updateMeeting(result);\n        }\n\n        if (parsedSelves.updates.moderatorChanged) {\n          this.compareAndUpdateFlags.compareHostAndSelf = true;\n        } else {\n          this.compareAndUpdateFlags.compareHostAndSelf = false;\n        }\n\n        if (parsedSelves.updates.isMediaInactiveOrReleased) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.DISCONNECT_DUE_TO_INACTIVITY, {\n            reason: self.reason\n          });\n        }\n\n        if (parsedSelves.updates.moderatorChanged) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_MODERATOR_CHANGED, self);\n        }\n\n        if (parsedSelves.updates.localAudioUnmuteRequiredByServer) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.LOCAL_UNMUTE_REQUIRED, {\n            muted: parsedSelves.current.remoteMuted,\n            unmuteAllowed: parsedSelves.current.unmuteAllowed\n          });\n        }\n\n        if (parsedSelves.updates.isMutedByOthersChanged) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_REMOTE_MUTE_STATUS_UPDATED, {\n            muted: parsedSelves.current.remoteMuted,\n            unmuteAllowed: parsedSelves.current.unmuteAllowed\n          });\n        }\n\n        if (parsedSelves.updates.localAudioUnmuteRequestedByServer) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.LOCAL_UNMUTE_REQUESTED, {});\n        }\n\n        if (parsedSelves.updates.isUnadmittedGuest) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, self);\n        }\n\n        if (parsedSelves.updates.isAdmittedGuest) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, self);\n        }\n\n        if (parsedSelves.updates.isMediaInactive) {\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.MEDIA_INACTIVITY, _selfUtils.default.getMediaStatus(self.mediaSessions));\n        }\n\n        if (parsedSelves.updates.audioStateChange || parsedSelves.updates.videoStateChange || parsedSelves.updates.shareStateChange) {\n          var _parsedSelves$current, _parsedSelves$current2, _parsedSelves$current3;\n\n          this.emitScoped({\n            file: 'locus-info',\n            function: 'updateSelf'\n          }, _constants.LOCUSINFO.EVENTS.MEDIA_STATUS_CHANGE, {\n            audioStatus: (_parsedSelves$current = parsedSelves.current.currentMediaStatus) === null || _parsedSelves$current === void 0 ? void 0 : _parsedSelves$current.audio,\n            videoStatus: (_parsedSelves$current2 = parsedSelves.current.currentMediaStatus) === null || _parsedSelves$current2 === void 0 ? void 0 : _parsedSelves$current2.video,\n            shareStatus: (_parsedSelves$current3 = parsedSelves.current.currentMediaStatus) === null || _parsedSelves$current3 === void 0 ? void 0 : _parsedSelves$current3.share\n          });\n        }\n\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateSelf'\n        }, _constants.EVENTS.LOCUS_INFO_UPDATE_SELF, {\n          oldSelf: parsedSelves.previous,\n          newSelf: parsedSelves.current\n        });\n        this.parsedLocus.self = parsedSelves.current;\n        this.self = self;\n      } else {\n        this.compareAndUpdateFlags.compareHostAndSelf = false;\n      }\n    }\n    /**\n     * handles when the locus.url is updated\n     * @param {String} url\n     * @returns {undefined}\n     * emits internal event locus_info_update_url\n     */\n\n  }, {\n    key: \"updateLocusUrl\",\n    value: function updateLocusUrl(url) {\n      if (url && this.url !== url) {\n        this.url = url;\n        this.updateMeeting({\n          locusUrl: url\n        });\n        this.emitScoped({\n          file: 'locus-info',\n          function: 'updateLocusUrl'\n        }, _constants.EVENTS.LOCUS_INFO_UPDATE_URL, url);\n      }\n    }\n    /**\n     * @param {String} aclUrl\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateAclUrl\",\n    value: function updateAclUrl(aclUrl) {\n      if (aclUrl && !(0, _isEqual2.default)(this.aclUrl, aclUrl)) {\n        this.aclUrl = aclUrl;\n      }\n    }\n    /**\n     * @param {Number} baseSequence\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateBasequence\",\n    value: function updateBasequence(baseSequence) {\n      if (baseSequence && !(0, _isEqual2.default)(this.baseSequence, baseSequence)) {\n        this.baseSequence = baseSequence;\n      }\n    }\n    /**\n     * @param {Number} sequence\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateSequence\",\n    value: function updateSequence(sequence) {\n      if (sequence && !(0, _isEqual2.default)(this.sequence, sequence)) {\n        this.sequence = sequence;\n      }\n    }\n    /**\n     * @param {Object} membership\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateMemberShip\",\n    value: function updateMemberShip(membership) {\n      if (membership && !(0, _isEqual2.default)(this.membership, membership)) {\n        this.membership = membership;\n      }\n    }\n    /**\n     * @param {Array} identities\n     * @returns {undefined}\n     * @memberof LocusInfo\n     */\n\n  }, {\n    key: \"updateIdentifiers\",\n    value: function updateIdentifiers(identities) {\n      if (identities && !(0, _isEqual2.default)(this.identities, identities)) {\n        this.identities = identities;\n      }\n    }\n  }]);\n  return LocusInfo;\n}(_eventsScope.default);\n\nexports.default = LocusInfo;","map":{"version":3,"mappings":"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","names":["LocusInfo","updateMeeting","webex","meetingId","_this","parsedLocus","states","emitChange","compareAndUpdateFlags","locusParser","LocusDeltaParser","action","locus","meeting","loci","DESYNC","USE_CURRENT","USE_INCOMING","locusInfo","onDeltaLocus","locusDesync","needToGetFullLocus","meetingRequest","getFullLocus","desync","locusUrl","then","res","onFullLocus","body","_this2","resume","LoggerProxy","logger","info","onDeltaAction","parsedLoci","_this3","applyLocusDeltaData","onDeltaEvent","created","scheduledMeeting","participantsUrl","replaces","aclUrl","baseSequence","sequence","membership","identities","participants","deltaParticipants","updateParticipants","updateConversationUrl","conversationUrl","updateControls","controls","updateLocusUrl","url","updateFullState","fullState","updateMeetingInfo","updateSelf","self","updateHostInfo","host","updateMediaShares","mediaShares","data","eventType","LOCUSEVENT","PARTICIPANT_JOIN","PARTICIPANT_LEFT","CONTROLS_UPDATED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_AUDIO_UNMUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_UNMUTED","SELF_CHANGED","PARTICIPANT_UPDATED","PARTICIPANT_CONTROLS_UPDATED","PARTICIPANT_ROLES_UPDATED","PARTICIPANT_DECLINED","FLOOR_GRANTED","FLOOR_RELEASED","DIFFERENCE","handleLocusDelta","scope","eventName","args","emit","error","updateParticipantDeltas","updateLocusInfo","isMeetingActive","handleOneOnOneEvent","workingCopy","type","_CALL_","_SIP_BRIDGE_","emitScoped","file","function","EVENTS","REMOTE_RESPONSE","remoteDeclined","remoteAnswered","updateCreated","updateParticipantsUrl","updateReplace","replace","updateAclUrl","updateBasequence","updateSequence","updateMemberShip","updateIdentifiers","compareAndUpdate","length","find","participant","identity","_USER_","removed","partner","getLocusPartner","state","LOCUS","STATE","INACTIVE","warn","Metrics","postEvent","event","REMOTE_ENDED","DESTROY_MEETING","reason","CALL_REMOVED_REASON","CALL_INACTIVE","shouldLeave","MEETING_STATE","STATES","LEFT","DECLINED","NOTIFIED","JOINED","PARTNER_LEFT","joinedWith","_LEFT_","IDLE","SELF_LEFT","_MEETING_","TERMINATING","MEETING_REMOVED_REASON","MEETING_INACTIVE_TERMINATING","FULLSTATE_REMOVED","SELF_REMOVED","compareSelfAndHost","compareHostAndSelf","selfIdentity","_this$parsedLocus$hos","hostId","moderator","LOCUS_INFO_CAN_ASSIGN_HOST","canAssignHost","findParticipant","collection","item","person","id","generateDelta","prevState","newState","deltas","audioStatus","videoSlidesStatus","videoStatus","forEach","key","reduce","existingParticipant","_this4","delta","status","changed","push","LOCUS_INFO_UPDATE_PARTICIPANTS","recordingId","record","_this$parsedLocus$con","modifiedBy","selfId","ControlsUtils","parse","getControls","updates","hasRecordingChanged","hasRecordingPausedChanged","current","paused","RECORDING_STATE","PAUSED","recording","RESUMED","RECORDING","LOCUSINFO","CONTROLS_RECORDING_UPDATED","lastModified","result","FullState","getFullState","meetingStateChangedTo","FULL_STATE_MEETING_STATE_CHANGE","previousState","previous","meetingState","currentState","meetingTypeChangedTo","FULL_STATE_TYPE_UPDATE","parsedHosts","HostUtils","getHosts","isNewHost","LOCUS_INFO_UPDATE_HOST","newHost","oldHost","InfoUtils","parsePolicy","parseModerator","parsedInfo","getInfos","MEETING_INFO_UPDATED","isLocked","MEETING_LOCKED","isUnlocked","MEETING_UNLOCKED","parsedMediaShares","MediaSharesUtils","getMediaShares","LOCUS_INFO_UPDATE_MEDIA_SHARES","parsedSelves","SelfUtils","getSelves","internal","device","element","getSipUrl","sipUri","moderatorChanged","isMediaInactiveOrReleased","DISCONNECT_DUE_TO_INACTIVITY","SELF_MODERATOR_CHANGED","localAudioUnmuteRequiredByServer","LOCAL_UNMUTE_REQUIRED","muted","remoteMuted","unmuteAllowed","isMutedByOthersChanged","SELF_REMOTE_MUTE_STATUS_UPDATED","localAudioUnmuteRequestedByServer","LOCAL_UNMUTE_REQUESTED","isUnadmittedGuest","SELF_UNADMITTED_GUEST","isAdmittedGuest","SELF_ADMITTED_GUEST","isMediaInactive","MEDIA_INACTIVITY","getMediaStatus","mediaSessions","audioStateChange","videoStateChange","shareStateChange","MEDIA_STATUS_CHANGE","currentMediaStatus","_parsedSelves$current","audio","_parsedSelves$current2","video","shareStatus","_parsedSelves$current3","share","LOCUS_INFO_UPDATE_SELF","oldSelf","newSelf","LOCUS_INFO_UPDATE_URL","EventsScope"],"sources":["index.js"],"sourcesContent":["import {isEqual} from 'lodash';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport EventsScope from '../common/events/events-scope';\nimport {\n  EVENTS,\n  LOCUSEVENT,\n  _USER_,\n  _CALL_,\n  _SIP_BRIDGE_,\n  MEETING_STATE,\n  _MEETING_,\n  LOCUSINFO,\n  LOCUS,\n  _LEFT_,\n  MEETING_REMOVED_REASON,\n  CALL_REMOVED_REASON,\n  RECORDING_STATE\n} from '../constants';\nimport Metrics from '../metrics';\nimport {eventType} from '../metrics/config';\nimport InfoUtils from '../locus-info/infoUtils';\nimport FullState from '../locus-info/fullState';\nimport SelfUtils from '../locus-info/selfUtils';\nimport HostUtils from '../locus-info/hostUtils';\nimport ControlsUtils from '../locus-info/controlsUtils';\nimport MediaSharesUtils from '../locus-info/mediaSharesUtils';\nimport LocusDeltaParser from '../locus-info/parser';\n\n\n/**\n * @description LocusInfo extends ChildEmitter to convert locusInfo info a private emitter to parent object\n * @export\n * @private\n * @class LocusInfo\n */\nexport default class LocusInfo extends EventsScope {\n  constructor(updateMeeting, webex, meetingId) {\n    super();\n    this.parsedLocus = {\n      states: []\n    };\n    this.webex = webex;\n    this.emitChange = false;\n    this.compareAndUpdateFlags = {};\n    this.meetingId = meetingId;\n    this.updateMeeting = updateMeeting;\n    this.locusParser = new LocusDeltaParser();\n  }\n\n\n  /**\n   * Apply locus delta data to meeting\n   * @param {string} action Locus delta action\n   * @param {Locus} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   */\n  applyLocusDeltaData(action, locus, meeting) {\n    const {DESYNC, USE_CURRENT, USE_INCOMING} = LocusDeltaParser.loci;\n\n    switch (action) {\n      case USE_INCOMING:\n        meeting.locusInfo.onDeltaLocus(locus);\n        break;\n      case USE_CURRENT:\n        meeting.locusDesync = false;\n        meeting.needToGetFullLocus = false;\n        break;\n      case DESYNC:\n        meeting.meetingRequest.getFullLocus({\n          desync: true,\n          locusUrl: meeting.locusUrl\n        }).then((res) => {\n          meeting.locusInfo.onFullLocus(res.body);\n          // Notify parser to resume processing delta events\n          // now that we have full locus from DESYNC.\n          this.locusParser.resume();\n        });\n        break;\n      default:\n        LoggerProxy.logger.info(`Locus-info:index#applyLocusDeltaData --> Unknown locus delta action: ${action}`);\n    }\n  }\n\n\n  /**\n   * Adds locus delta to parser's queue\n   * and registers a function handler\n   * to recieve parsed actions from queue.\n   * @param {Locus} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   */\n  handleLocusDelta(locus, meeting) {\n    // register a function to process delta actions\n    if (!this.locusParser.onDeltaAction) {\n      // delta action, along with associated loci\n      // is passed into the function.\n      this.locusParser.onDeltaAction = (action, parsedLoci) => {\n        this.applyLocusDeltaData(action, parsedLoci, meeting);\n      };\n    }\n    // queue delta event with parser\n    this.locusParser.onDeltaEvent(locus);\n  }\n\n\n  /**\n   * @param {Locus} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  init(locus = {}) {\n    this.created = locus.created || null;\n    this.scheduledMeeting = locus.meeting || null;\n    this.participantsUrl = locus.participantsUrl || null;\n    this.replaces = locus.replaces || null;\n    this.aclUrl = locus.aclUrl || null;\n    this.baseSequence = locus.baseSequence || null;\n    this.sequence = locus.sequence || null;\n    this.membership = locus.membership || null;\n    this.identities = locus.identities || null;\n    this.participants = locus.participants || null;\n\n    /**\n     * Stores the delta values for a changed participant.\n     *\n     * @typedef {Object} DeltaParticipant\n     * @property {Record<string, boolean>} delta - Contains changed streams.\n     * @property {Object} person - Contains person data.\n     */\n\n    /**\n     * Stored participant changes between the last event and the current event.\n     * All previously stored events are overwritten between events.\n     *\n     * @instance\n     * @type {Array<DeltaParticipant>}\n     * @private\n     * @member LocusInfo\n     */\n    this.deltaParticipants = [];\n\n    // above section only updates the locusInfo object\n    // The below section makes sure it updates the locusInfo as well as updates the meeting object\n    this.updateParticipants(locus.participants);\n    // For 1:1 space meeting the conversation Url does not exist in locus.conversation\n    this.updateConversationUrl(locus.conversationUrl, locus.info);\n    this.updateControls(locus.controls);\n    this.updateLocusUrl(locus.url);\n    this.updateFullState(locus.fullState);\n    this.updateMeetingInfo(locus.info);\n    // self and participants generate sipUrl for 1:1 meeting\n    this.updateSelf(locus.self, locus.participants);\n    this.updateHostInfo(locus.host);\n    this.updateMediaShares(locus.mediaShares);\n  }\n\n  /**\n   * @param {Object} locus\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  initialSetup(locus, meeting) {\n    // meeting already exisits just do an update\n    if (meeting) {\n      // Its a new delta event fetch the whole meeting object\n      this.locusParser.onDeltaEvent(locus);\n    }\n    else {\n      this.onFullLocus(locus);\n    }\n\n    // Change it to true after it recives it first locus object\n    this.emitChange = true;\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @param {Object} data\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  parse(meeting, data) {\n    const {eventType} = data;\n\n    LoggerProxy.logger.info(`Locus-info:index#parse --> received locus data: ${eventType}`);\n\n    switch (eventType) {\n      case LOCUSEVENT.PARTICIPANT_JOIN:\n      case LOCUSEVENT.PARTICIPANT_LEFT:\n      case LOCUSEVENT.CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:\n      case LOCUSEVENT.SELF_CHANGED:\n      case LOCUSEVENT.PARTICIPANT_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_DECLINED:\n      case LOCUSEVENT.FLOOR_GRANTED:\n      case LOCUSEVENT.FLOOR_RELEASED:\n        this.onFullLocus(data.locus, eventType);\n        break;\n      case LOCUSEVENT.DIFFERENCE:\n        this.handleLocusDelta(data.locus, meeting);\n        break;\n\n      default:\n        // Why will there be a event with no eventType ????\n        // we may not need this, we can get full locus\n        this.handleLocusDelta(data.locus, meeting);\n    }\n  }\n\n  /**\n   * @param {String} scope\n   * @param {String} eventName\n   * @param {Array} args\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  emitScoped(scope, eventName, args) {\n    return this.emit(scope, eventName, args);\n  }\n\n  /**\n   * updates the locus with full locus object\n   * @param {object} locus locus object\n   * @param {sting} eventType particulat locus event\n   * @returns {object} null\n   * @memberof LocusInfo\n   */\n  onFullLocus(locus, eventType) {\n    if (!locus) {\n      LoggerProxy.logger.error('Locus-info:index#onFullLocus --> object passed as argument was invalid, continuing.');\n    }\n    this.updateParticipantDeltas(locus.participants);\n    this.scheduledMeeting = locus.meeting || null;\n    this.participants = locus.participants;\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n    this.isMeetingActive();\n    this.handleOneOnOneEvent(eventType);\n    // set current (working copy) for parser\n    this.locusParser.workingCopy = locus;\n  }\n\n  // used for ringing stops on one on one\n  /**\n   * @param {String} eventType\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  handleOneOnOneEvent(eventType) {\n    if (this.parsedLocus.fullState.type === _CALL_ || this.parsedLocus.fullState.type === _SIP_BRIDGE_) {\n    // for 1:1 bob calls alice and alice declines, notify the meeting state\n      if (eventType === LOCUSEVENT.PARTICIPANT_DECLINED) {\n      // trigger the event for stop ringing\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          },\n          EVENTS.REMOTE_RESPONSE,\n          {\n            remoteDeclined: true,\n            remoteAnswered: false\n          }\n        );\n      }\n      // for 1:1 bob calls alice and alice answers, notify the meeting state\n      if (eventType === LOCUSEVENT.PARTICIPANT_JOIN) {\n      // trigger the event for stop ringing\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'handleOneonOneEvent'\n          },\n          EVENTS.REMOTE_RESPONSE,\n          {\n            remoteDeclined: false,\n            remoteAnswered: true\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Object} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  onDeltaLocus(locus) {\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n    this.isMeetingActive();\n  }\n\n  /**\n   * @param {Object} locus\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateLocusInfo(locus) {\n    this.updateControls(locus.controls);\n    this.updateConversationUrl(locus.conversationUrl, locus.info);\n    this.updateCreated(locus.created);\n    this.updateFullState(locus.fullState);\n    this.updateHostInfo(locus.host);\n    this.updateMeetingInfo(locus.info, locus.self);\n    this.updateMediaShares(locus.mediaShares);\n    this.updateParticipantsUrl(locus.participantsUrl);\n    this.updateReplace(locus.replace);\n    this.updateSelf(locus.self, locus.participants);\n    this.updateLocusUrl(locus.url);\n    this.updateAclUrl(locus.aclUrl);\n    this.updateBasequence(locus.baseSequence);\n    this.updateSequence(locus.sequence);\n    this.updateMemberShip(locus.membership);\n    this.updateIdentifiers(locus.identities);\n    this.compareAndUpdate();\n    // update which required to compare different objects from locus\n  }\n\n  /**\n   * @param {Array} participants\n   * @param {Object} self\n   * @returns {Array}\n   * @memberof LocusInfo\n   */\n  getLocusPartner(participants, self) {\n    if (!participants || participants.length === 0) {\n      return null;\n    }\n\n    return participants.find((participant) =>\n      (self && participant.identity !== self.identity) &&\n  (participants.length <= 2 || (participant.type === _USER_ && !participant.removed))) || this.partner;\n  }\n\n  // TODO: all the leave states need to be checked\n  /**\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  isMeetingActive() {\n    if ((this.parsedLocus.fullState.type === _CALL_) || (this.parsedLocus.fullState.type === _SIP_BRIDGE_)) {\n      const partner = this.getLocusPartner(this.participants, this.self);\n\n      this.updateMeeting({partner});\n\n      // Check if guest user needs to be checked here\n\n      // 1) when bob declines call from bob, (bob='DECLINED')\n      // 2) When alice rejects call to bob , (bob='NOTIFIED')\n\n      // When we dont add MEDIA for condition 2. The state of bob='IDLE'\n\n      if (this.fullState && this.fullState.state === LOCUS.STATE.INACTIVE) {\n        // TODO: update the meeting state\n        LoggerProxy.logger.warn('Locus-info:index#isMeetingActive --> Call Ended, locus state is inactive.');\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.CALL_INACTIVE,\n            shouldLeave: false\n          }\n        );\n      }\n      else\n      if (partner.state === MEETING_STATE.STATES.LEFT &&\n        this.parsedLocus.self &&\n        (this.parsedLocus.self.state === MEETING_STATE.STATES.DECLINED ||\n        this.parsedLocus.self.state === MEETING_STATE.STATES.NOTIFIED ||\n        this.parsedLocus.self.state === MEETING_STATE.STATES.JOINED)) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.PARTNER_LEFT,\n            shouldLeave: this.parsedLocus.self.joinedWith && this.parsedLocus.self.joinedWith.state !== _LEFT_\n          }\n        );\n      }\n      else\n      if (this.parsedLocus.self &&\n        this.parsedLocus.self.state === MEETING_STATE.STATES.LEFT &&\n      (partner.state === MEETING_STATE.STATES.LEFT ||\n      partner.state === MEETING_STATE.STATES.DECLINED ||\n      partner.state === MEETING_STATE.STATES.NOTIFIED ||\n      partner.state === MEETING_STATE.STATES.IDLE) // Happens when user just joins and adds no Media\n      ) {\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: CALL_REMOVED_REASON.SELF_LEFT,\n            shouldLeave: false\n          }\n        );\n      }\n    }\n    else if (this.parsedLocus.fullState.type === _MEETING_) {\n      if (this.fullState && (this.fullState.state === LOCUS.STATE.INACTIVE || this.fullState.state === LOCUS.STATE.TERMINATING)) {\n        LoggerProxy.logger.warn('Locus-info:index#isMeetingActive --> Meeting is ending due to inactive or terminating');\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.MEETING_INACTIVE_TERMINATING,\n            shouldLeave: false\n          }\n        );\n      }\n      else if (this.fullState && this.fullState.removed) {\n        // user has been dropped from a meeting\n        Metrics.postEvent({\n          event: eventType.REMOTE_ENDED,\n          meetingId: this.meetingId\n        });\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.FULLSTATE_REMOVED,\n            shouldLeave: false\n          }\n        );\n      }\n      // If you are  guest and you are removed from the meeting\n      // You wont get any further events\n      else if (this.parsedLocus.self && this.parsedLocus.self.removed) {\n        // Check if we need to send an event\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'isMeetingActive'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: MEETING_REMOVED_REASON.SELF_REMOVED,\n            shouldLeave: false\n          }\n        );\n      }\n    }\n    else {\n      LoggerProxy.logger.warn('Locus-info:index#isMeetingActive --> Meeting Type is unknown.');\n    }\n  }\n\n  /**\n   * checks if the host permissions have changed while in the meeting\n   * This would be the case if your role as host or moderator has been updated\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  compareAndUpdate() {\n    // TODO: check with locus team on host and moderator doc\n    // use host as a validator if needed\n    if (this.compareAndUpdateFlags.compareSelfAndHost || this.compareAndUpdateFlags.compareHostAndSelf) {\n      this.compareSelfAndHost();\n    }\n  }\n\n  /**\n   * compared the self object to check if the user has host permissions\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  compareSelfAndHost() {\n    // In some cases the host info is not present but the moderator values changes from null to false so it triggers an update\n    if ((this.parsedLocus.self.selfIdentity === this.parsedLocus.host?.hostId) && this.parsedLocus.self.moderator) {\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        },\n        EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST,\n        {\n          canAssignHost: true\n        }\n      );\n    }\n    else {\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'compareSelfAndHost'\n        },\n        EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST,\n        {\n          canAssignHost: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Update the deltaParticipants property of this object based on a list of\n   * provided participants.\n   *\n   * @param {Array} [participants] - The participants to update against.\n   * @returns {void}\n   */\n  updateParticipantDeltas(participants = []) {\n    // Used to find a participant within a participants collection.\n    const findParticipant = (participant, collection) =>\n      collection.find((item) => item.person.id === participant.person.id);\n\n    // Generates an object that indicates which state properties have changed.\n    const generateDelta = (prevState = {}, newState = {}) => {\n      // Setup deltas.\n      const deltas = {\n        audioStatus: prevState.audioStatus !== newState.audioStatus,\n        videoSlidesStatus: prevState.videoSlidesStatus !== newState.videoSlidesStatus,\n        videoStatus: prevState.videoStatus !== newState.videoStatus\n      };\n\n      // Clean the object\n      Object.keys(deltas).forEach(\n        (key) => {\n          if (deltas[key] !== true) {\n            delete deltas[key];\n          }\n        }\n      );\n\n      return deltas;\n    };\n\n    this.deltaParticipants = participants.reduce(\n      (collection, participant) => {\n        const existingParticipant = findParticipant(\n          participant,\n          this.participants || []\n        ) || {};\n\n        const delta = generateDelta(existingParticipant.status, participant.status);\n\n        const changed = (Object.keys(delta).length > 0);\n\n        if (changed) {\n          collection.push({\n            person: participant.person,\n            delta\n          });\n        }\n\n        return collection;\n      }, []\n    );\n  }\n\n  /**\n   *\n   * @param {Object} participants new participants object\n   * @param {boolen} deltaParticpantFlag  delta event\n   * @returns {Array} updatedParticipants\n   * @memberof LocusInfo\n   */\n  updateParticipants(participants) {\n    this.emitScoped(\n      {\n        file: 'locus-info',\n        function: 'updateParticipants'\n      },\n      EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS,\n      {\n        participants,\n        recordingId: this.parsedLocus.controls && this.parsedLocus.controls.record?.modifiedBy,\n        selfIdentity: this.parsedLocus.self && this.parsedLocus.self.selfIdentity,\n        selfId: this.parsedLocus.self && this.parsedLocus.self.selfId,\n        hostId: this.parsedLocus.host && this.parsedLocus.host.hostId\n      }\n    );\n  }\n\n  /**\n   * @param {Object} controls\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateControls(controls) {\n    if (controls && !isEqual(this.controls, controls)) {\n      this.parsedLocus.controls = ControlsUtils.parse(controls);\n      const {updates: {hasRecordingChanged, hasRecordingPausedChanged}, current} = ControlsUtils.getControls(this.controls, controls);\n\n      if (hasRecordingChanged || hasRecordingPausedChanged) {\n        let state = null;\n\n        if (hasRecordingPausedChanged) {\n          if (current.record.paused) {\n            state = RECORDING_STATE.PAUSED;\n          }\n          else {\n            // state will be `IDLE` if the recording is not active, even when there is a `pause` status change.\n            state = current.record.recording ? RECORDING_STATE.RESUMED : RECORDING_STATE.IDLE;\n          }\n        }\n        else if (hasRecordingChanged) {\n          state = current.record.recording ? RECORDING_STATE.RECORDING : RECORDING_STATE.IDLE;\n        }\n\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateControls'\n          },\n          LOCUSINFO.EVENTS.CONTROLS_RECORDING_UPDATED,\n          {\n            state,\n            modifiedBy: current.record.modifiedBy,\n            lastModified: current.record.lastModified\n          }\n        );\n      }\n\n      this.controls = controls;\n    }\n  }\n\n  /**\n   * @param {String} conversationUrl\n   * @param {Object} info\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateConversationUrl(conversationUrl, info) {\n    if (conversationUrl && !isEqual(this.conversationUrl, conversationUrl)) {\n      this.conversationUrl = conversationUrl;\n      this.updateMeeting({conversationUrl});\n    }\n    else if (info && info.conversationUrl && !isEqual(this.conversationUrl, info.conversationUrl)) {\n      this.conversationUrl = info.conversationUrl;\n      this.updateMeeting({conversationUrl: info.conversationUrl});\n    }\n  }\n\n  /**\n   * @param {Object} created\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateCreated(created) {\n    if (created && !isEqual(this.created, created)) {\n      this.created = created;\n    }\n  }\n\n\n  /**\n   * @param {Object} fullState\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateFullState(fullState) {\n    if (fullState && !isEqual(this.fullState, fullState)) {\n      const result = FullState.getFullState(this.fullState, fullState);\n\n      this.updateMeeting(result.current);\n\n      if (result.updates.meetingStateChangedTo) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateFullState'\n          },\n          LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE,\n          {\n            previousState: result.previous && result.previous.meetingState,\n            currentState: result.current.meetingState\n          }\n        );\n      }\n\n      if (result.updates.meetingTypeChangedTo) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateFullState'\n          },\n          LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE,\n          {\n            type: result.current.type\n          }\n        );\n      }\n      this.parsedLocus.fullState = result.current;\n      this.fullState = fullState;\n    }\n  }\n\n  /**\n   * handles when the locus.host is updated\n   * @param {Object} host the locus.host property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_host\n   */\n  updateHostInfo(host) {\n    if (host && !isEqual(this.host, host)) {\n      const parsedHosts = HostUtils.getHosts(this.host, host);\n\n      this.updateMeeting(parsedHosts.current);\n      this.parsedLocus.host = parsedHosts.current;\n      if (parsedHosts.updates.isNewHost) {\n        this.compareAndUpdateFlags.compareSelfAndHost = true;\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateHostInfo'\n          },\n          EVENTS.LOCUS_INFO_UPDATE_HOST,\n          {\n            newHost: parsedHosts.current,\n            oldHost: parsedHosts.previous\n          }\n        );\n      }\n      this.host = host;\n    }\n    else {\n      this.compareAndUpdateFlags.compareSelfAndHost = false;\n    }\n  }\n\n  /**\n   * @param {Object} info\n   * @param {Object} self\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateMeetingInfo(info, self) {\n    if (info && (!isEqual(this.info, info) ||\n    !isEqual(InfoUtils.parsePolicy(info), InfoUtils.parsePolicy(this.info)) ||\n    !isEqual(InfoUtils.parseModerator(info) || InfoUtils.parseModerator(info)))) {\n      const parsedInfo = InfoUtils.getInfos(this.parsedLocus.info, info);\n\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateMeetingInfo'\n        },\n        LOCUSINFO.EVENTS.MEETING_INFO_UPDATED,\n        {info: parsedInfo.current, self}\n      );\n\n      if (parsedInfo.updates.isLocked) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          },\n          LOCUSINFO.EVENTS.MEETING_LOCKED,\n          info\n        );\n      }\n      if (parsedInfo.updates.isUnlocked) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateMeetingInfo'\n          },\n          LOCUSINFO.EVENTS.MEETING_UNLOCKED,\n          info\n        );\n      }\n\n      this.info = info;\n      this.parsedLocus.info = parsedInfo.current;\n      // Parses the info and adds necessary values\n      this.updateMeeting(parsedInfo.current);\n    }\n  }\n\n  /**\n   * handles when the locus.mediaShares is updated\n   * @param {Object} mediaShares the locus.mediaShares property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_media_shares\n   */\n  updateMediaShares(mediaShares) {\n    if (mediaShares && !isEqual(this.mediaShares, mediaShares)) {\n      const parsedMediaShares = MediaSharesUtils.getMediaShares(this.mediaShares, mediaShares);\n\n      this.updateMeeting(parsedMediaShares.current);\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateMediaShares'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES,\n        {\n          current: parsedMediaShares.current,\n          previous: parsedMediaShares.previous\n        }\n      );\n      this.parsedLocus.mediaShares = parsedMediaShares.current;\n      this.mediaShares = mediaShares;\n    }\n  }\n\n  /**\n   * @param {String} participantsUrl\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateParticipantsUrl(participantsUrl) {\n    if (participantsUrl && !isEqual(this.participantsUrl, participantsUrl)) {\n      this.participantsUrl = participantsUrl;\n    }\n  }\n\n  /**\n   * @param {Object} replace\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateReplace(replace) {\n    if (replace && !isEqual(this.replace, replace)) {\n      this.replace = replace;\n    }\n  }\n\n  /**\n   * handles when the locus.self is updated\n   * @param {Object} self the locus.mediaShares property\n   * @param {Array} participants the locus.participants property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self\n   */\n  updateSelf(self, participants) {\n    if (self && !isEqual(this.self, self)) {\n      const parsedSelves = SelfUtils.getSelves(this.self, self, this.webex.internal.device.url);\n\n      this.updateMeeting(parsedSelves.current);\n      this.parsedLocus.self = parsedSelves.current;\n\n      const element = this.parsedLocus.states[this.parsedLocus.states.length - 1];\n\n      if (element !== parsedSelves.current.state) {\n        this.parsedLocus.states.push(parsedSelves.current.state);\n      }\n\n      // TODO: check if we need to save the sipUri here as well\n      // this.emit(LOCUSINFO.EVENTS.MEETING_UPDATE, SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri));\n      const result = SelfUtils.getSipUrl(this.getLocusPartner(participants, self), this.parsedLocus.fullState.type, this.parsedLocus.info.sipUri);\n\n      if (result.sipUri) {\n        this.updateMeeting(result);\n      }\n\n      if (parsedSelves.updates.moderatorChanged) {\n        this.compareAndUpdateFlags.compareHostAndSelf = true;\n      }\n      else {\n        this.compareAndUpdateFlags.compareHostAndSelf = false;\n      }\n\n      if (parsedSelves.updates.isMediaInactiveOrReleased) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.DISCONNECT_DUE_TO_INACTIVITY,\n          {reason: self.reason}\n        );\n      }\n\n      if (parsedSelves.updates.moderatorChanged) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_MODERATOR_CHANGED,\n          self\n        );\n      }\n      if (parsedSelves.updates.localAudioUnmuteRequiredByServer) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.LOCAL_UNMUTE_REQUIRED,\n          {\n            muted: parsedSelves.current.remoteMuted,\n            unmuteAllowed: parsedSelves.current.unmuteAllowed\n          }\n        );\n      }\n      if (parsedSelves.updates.isMutedByOthersChanged) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_REMOTE_MUTE_STATUS_UPDATED,\n          {\n            muted: parsedSelves.current.remoteMuted,\n            unmuteAllowed: parsedSelves.current.unmuteAllowed\n          }\n        );\n      }\n      if (parsedSelves.updates.localAudioUnmuteRequestedByServer) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.LOCAL_UNMUTE_REQUESTED,\n          {}\n        );\n      }\n      if (parsedSelves.updates.isUnadmittedGuest) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST,\n          self\n        );\n      }\n      if (parsedSelves.updates.isAdmittedGuest) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST,\n          self\n        );\n      }\n\n      if (parsedSelves.updates.isMediaInactive) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.MEDIA_INACTIVITY,\n          SelfUtils.getMediaStatus(self.mediaSessions)\n        );\n      }\n\n      if (parsedSelves.updates.audioStateChange || parsedSelves.updates.videoStateChange || parsedSelves.updates.shareStateChange) {\n        this.emitScoped(\n          {\n            file: 'locus-info',\n            function: 'updateSelf'\n          },\n          LOCUSINFO.EVENTS.MEDIA_STATUS_CHANGE,\n          {\n            audioStatus: parsedSelves.current.currentMediaStatus?.audio,\n            videoStatus: parsedSelves.current.currentMediaStatus?.video,\n            shareStatus: parsedSelves.current.currentMediaStatus?.share\n          }\n        );\n      }\n\n\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateSelf'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_SELF,\n        {\n          oldSelf: parsedSelves.previous,\n          newSelf: parsedSelves.current\n        }\n      );\n      this.parsedLocus.self = parsedSelves.current;\n      this.self = self;\n    }\n    else {\n      this.compareAndUpdateFlags.compareHostAndSelf = false;\n    }\n  }\n\n  /**\n   * handles when the locus.url is updated\n   * @param {String} url\n   * @returns {undefined}\n   * emits internal event locus_info_update_url\n   */\n  updateLocusUrl(url) {\n    if (url && this.url !== url) {\n      this.url = url;\n      this.updateMeeting({locusUrl: url});\n      this.emitScoped(\n        {\n          file: 'locus-info',\n          function: 'updateLocusUrl'\n        },\n        EVENTS.LOCUS_INFO_UPDATE_URL,\n        url\n      );\n    }\n  }\n\n  /**\n   * @param {String} aclUrl\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateAclUrl(aclUrl) {\n    if (aclUrl && !isEqual(this.aclUrl, aclUrl)) {\n      this.aclUrl = aclUrl;\n    }\n  }\n\n  /**\n   * @param {Number} baseSequence\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateBasequence(baseSequence) {\n    if (baseSequence && !isEqual(this.baseSequence, baseSequence)) {\n      this.baseSequence = baseSequence;\n    }\n  }\n\n  /**\n   * @param {Number} sequence\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateSequence(sequence) {\n    if (sequence && !isEqual(this.sequence, sequence)) {\n      this.sequence = sequence;\n    }\n  }\n\n  /**\n   * @param {Object} membership\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateMemberShip(membership) {\n    if (membership && !isEqual(this.membership, membership)) {\n      this.membership = membership;\n    }\n  }\n\n  /**\n   * @param {Array} identities\n   * @returns {undefined}\n   * @memberof LocusInfo\n   */\n  updateIdentifiers(identities) {\n    if (identities && !isEqual(this.identities, identities)) {\n      this.identities = identities;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
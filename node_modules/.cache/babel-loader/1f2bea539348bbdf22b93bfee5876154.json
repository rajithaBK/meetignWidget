{"ast":null,"code":"\"use strict\";\n\nvar _Array$from = require(\"@babel/runtime-corejs2/core-js/array/from\");\n\nvar _Symbol = require(\"@babel/runtime-corejs2/core-js/symbol\");\n\nvar _Symbol$iterator = require(\"@babel/runtime-corejs2/core-js/symbol/iterator\");\n\nvar _Array$isArray = require(\"@babel/runtime-corejs2/core-js/array/is-array\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _now = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/parse-int\"));\n\nvar _window = _interopRequireDefault(require(\"global/window\"));\n\nvar _sdpTransform = _interopRequireDefault(require(\"sdp-transform\"));\n\nvar _metrics = _interopRequireDefault(require(\"../metrics\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _config = _interopRequireDefault(require(\"../common/config\"));\n\nvar _constants = require(\"../constants\");\n\nvar _config2 = require(\"../metrics/config\");\n\nvar _media = _interopRequireDefault(require(\"../common/errors/media\"));\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar _webexErrors = require(\"../common/errors/webex-errors\");\n\nvar _browserDetection = _interopRequireDefault(require(\"../common/browser-detection\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && o[_Symbol$iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar _BrowserDetection = (0, _browserDetection.default)(),\n    isBrowser = _BrowserDetection.isBrowser;\n/**\n * @export\n * @public\n */\n\n\nvar pc = {};\n/**\n * munges the bandwidth limit into the sdp\n * @param {String} sdpLines\n * @param {Number} index\n * @returns {String}\n */\n\nvar insertBandwidthLimit = function insertBandwidthLimit(sdpLines, index) {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  var limit;\n  var periodicKeyFrame = '';\n\n  if (sdpLines[index].search(_constants.AUDIO) !== -1) {\n    limit = _config.default.meetings.bandwidth.audio;\n  } else {\n    limit = _config.default.meetings.bandwidth.video;\n    periodicKeyFrame = _constants.SDP.PERIODIC_KEYFRAME;\n    sdpLines.splice(index + 2, 0, periodicKeyFrame);\n  }\n\n  sdpLines.splice(index + 1, 0, \"\".concat(_constants.SDP.B_LINE, \":\").concat(limit));\n  return sdpLines;\n};\n/**\n * needed for calliope max-fs\n * @param {String} sdp\n * @param {String} [level=QUALITY_LEVELS.HIGH] quality level for max-fs\n * @returns {String}\n */\n\n\nvar setMaxFs = function setMaxFs(sdp) {\n  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.QUALITY_LEVELS.HIGH;\n\n  if (!_constants.MAX_FRAMESIZES[level]) {\n    throw new _parameter.default(\"setMaxFs: unable to set max framesize, value for level \\\"\".concat(level, \"\\\" is not defined\"));\n  } // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n\n\n  var replaceSdp = sdp;\n  var maxFsLine = \"\".concat(_constants.SDP.MAX_FS).concat(_constants.MAX_FRAMESIZES[level]);\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*profile-level-id=.*)/gi, \"$1;\".concat(maxFsLine));\n  return replaceSdp;\n};\n\nvar setStartBitrateOnRemoteSdp = function setStartBitrateOnRemoteSdp(sdp) {\n  if (_config.default.meetings.bandwidth.startBitrate) {\n    sdp = sdp.replace(/(\\na=fmtp:(\\d+).*profile-level-id=.*)/gi, \"$1;x-google-start-bitrate=\".concat(_config.default.meetings.bandwidth.startBitrate));\n  }\n\n  return sdp;\n};\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp\n * @returns {boolean}\n */\n\n\nvar checkH264Support = function checkH264Support(sdp) {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  var videoPresent = sdp.match(/\\nm=video.*/g);\n  var h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n\n  if (videoPresent) {\n    return !!h264Present;\n  }\n\n  return true;\n};\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {String}\n */\n\n\nvar isSdpInvalid = function isSdpInvalid(sdp) {\n  var parsedSdp = _sdpTransform.default.parse(sdp);\n\n  var _iterator = _createForOfIteratorHelper(parsedSdp.media),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _mediaLine$candidates;\n\n      var mediaLine = _step.value;\n\n      if (!mediaLine.candidates || ((_mediaLine$candidates = mediaLine.candidates) === null || _mediaLine$candidates === void 0 ? void 0 : _mediaLine$candidates.length) === 0) {\n        _loggerProxy.default.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: Ice candadate never completed');\n\n        return 'iceCandidate: Ice gathering never completed';\n      }\n\n      if (_constants.SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n        _loggerProxy.default.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: Found invalid port number for the ice candidate');\n\n        return 'iceCandidate: Found invalid port number for the ice candidate';\n      }\n\n      if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n        _loggerProxy.default.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: ice ufrag and password not found');\n\n        return 'iceCandidate: ice ufrag and password not found';\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return '';\n};\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp\n * @returns {String}\n */\n\n\nvar limitBandwidth = function limitBandwidth(sdp) {\n  // TODO convert to sdp parser\n  var offerSdp = sdp;\n  var sdpLines = offerSdp.split(_constants.SDP.CARRIAGE_RETURN);\n\n  for (var i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(_constants.SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n\n  offerSdp = sdpLines.join(_constants.SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPc\n * @returns {RTCPeerConnection}\n */\n\n\npc.setContentSlides = function (screenPc) {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += \"\".concat(_constants.SDP.A_CONTENT_SLIDES).concat(_constants.SDP.CARRIAGE_RETURN);\n  }\n\n  return screenPc;\n};\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @param {Object} options\n * @param {String} options.remoteQualityLevel\n * @returns {Promise.RTCPeerConnection}\n */\n\n\npc.iceCandidate = function (peerConnection, _ref) {\n  var remoteQualityLevel = _ref.remoteQualityLevel;\n  return new _promise.default(function (resolve, reject) {\n    var now = (0, _now.default)();\n\n    var doneGatheringIceCandidate = function doneGatheringIceCandidate() {\n      var miliseconds = (0, _parseInt2.default)(Math.abs((0, _now.default)() - now), 4);\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      peerConnection.sdp = _util.default.convertCLineToIpv4(peerConnection.sdp);\n      var invalidSdpPresent = isSdpInvalid(peerConnection.sdp);\n\n      if (invalidSdpPresent) {\n        _loggerProxy.default.logger.error('PeerConnectionManager:index#iceCandidate --> SDP not valid after waiting.');\n\n        reject(new _webexErrors.InvalidSdpError(invalidSdpPresent));\n      }\n\n      _loggerProxy.default.logger.log(\"PeerConnectionManager:index#iceCandidate --> Time to gather ice candidate \".concat(miliseconds, \" miliseconds\"));\n\n      resolve();\n    }; // If ice has already been gathered\n\n\n    if (peerConnection.iceGatheringState === _constants.COMPLETE) {\n      doneGatheringIceCandidate();\n    }\n\n    peerConnection.onIceGatheringStateChange = function () {\n      if (peerConnection.iceGatheringState === _constants.COMPLETE) {\n        doneGatheringIceCandidate(peerConnection);\n      }\n\n      if (peerConnection.iceGatheringState === _constants.GATHERING) {\n        _loggerProxy.default.logger.log('PeerConnectionManager:index#onIceGatheringStateChange --> Ice state changed to gathering');\n      }\n    };\n\n    peerConnection.onicecandidate = function (evt) {\n      if (evt.candidate === null) {\n        doneGatheringIceCandidate(peerConnection);\n      } else {\n        var _evt$candidate, _evt$candidate2, _evt$candidate3, _evt$candidate4;\n\n        _loggerProxy.default.logger.log(\"PeerConnectionManager:index#onicecandidate --> Candidate \".concat((_evt$candidate = evt.candidate) === null || _evt$candidate === void 0 ? void 0 : _evt$candidate.type, \" \").concat((_evt$candidate2 = evt.candidate) === null || _evt$candidate2 === void 0 ? void 0 : _evt$candidate2.protocol, \" \").concat((_evt$candidate3 = evt.candidate) === null || _evt$candidate3 === void 0 ? void 0 : _evt$candidate3.address, \":\").concat((_evt$candidate4 = evt.candidate) === null || _evt$candidate4 === void 0 ? void 0 : _evt$candidate4.port));\n      }\n    };\n\n    peerConnection.onicecandidateerror = function (event) {\n      _loggerProxy.default.logger.error('PeerConnectionManager:index#onicecandidateerror --> Failed to gather ice candidate.', event);\n\n      reject(new _webexErrors.IceGatheringFailed());\n    };\n  });\n};\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\n\n\npc.replaceTrack = function (peerConnection, track) {\n  try {\n    var senders = peerConnection.getSenders();\n\n    if (senders.length > 0) {\n      senders.forEach(function (sender) {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    _loggerProxy.default.logger.error(\"PeerConnectionManager:index#replaceTrack --> Error replacing track, \".concat(err));\n  }\n};\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\n\n\npc.addStream = function (peerConnection, stream) {\n  try {\n    if (stream && !isBrowser('edge')) {\n      var tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find(function (sender) {\n        return sender.track != null;\n      });\n\n      if (tracksPresent) {\n        stream.getTracks().forEach(function (track) {\n          pc.replaceTrack(peerConnection, track);\n        });\n        return;\n      }\n\n      stream.getTracks().forEach(function (track) {\n        peerConnection.addTrack(track, stream);\n      }); // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    } else if (isBrowser('edge')) {\n      peerConnection.addStream(stream);\n    }\n  } catch (err) {\n    _loggerProxy.default.logger.error(\"PeerConnectionManager:index#addStream --> Error adding stream, error: \".concat(_config2.error));\n  }\n};\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\n\n\npc.setRemoteSessionDetails = function (peerConnection, typeStr, remoteSdp, meetingId) {\n  _loggerProxy.default.logger.log(\"PeerConnectionManager:index#setRemoteSessionDetails --> Setting the remote description type: \".concat(typeStr, \"State: \").concat(peerConnection.signalingState));\n\n  var sdp = remoteSdp; // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if (!sdp) {\n    _metrics.default.postEvent({\n      event: _config2.eventType.REMOTE_SDP_RECEIVED,\n      meetingId: meetingId,\n      data: {\n        canProceed: false,\n        errors: [_metrics.default.generateErrorPayload(2001, true, _config2.error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }\n    });\n  }\n\n  if (peerConnection.signalingState === _constants.SDP.HAVE_LOCAL_OFFER || peerConnection.signalingState === _constants.SDP.STABLE && typeStr === _constants.SDP.OFFER) {\n    sdp = setStartBitrateOnRemoteSdp(sdp);\n\n    if (!peerConnection.enableExtmap) {\n      sdp = sdp.replace(/\\na=extmap.*/g, '');\n    }\n\n    return peerConnection.setRemoteDescription(new _window.default.RTCSessionDescription({\n      type: typeStr,\n      sdp: sdp\n    })).then(function () {\n      if (peerConnection.signalingState === _constants.SDP.STABLE) {\n        _metrics.default.postEvent({\n          event: _config2.eventType.REMOTE_SDP_RECEIVED,\n          meetingId: meetingId\n        });\n      }\n    }).catch(function (error) {\n      _loggerProxy.default.logger.error(\"Peer-connection-manager:index#setRemoteDescription --> \".concat(error, \" missing remotesdp\"));\n\n      var metricName = _constants.BEHAVIORAL_METRICS.PEERCONNECTION_FAILURE;\n      var data = {\n        correlation_id: meetingId,\n        reason: error.message,\n        stack: error.stack\n      };\n      var metadata = {\n        type: error.name\n      };\n\n      _metrics.default.sendBehavioralMetric(metricName, data, metadata);\n\n      return _metrics.default.postEvent({\n        event: _config2.eventType.REMOTE_SDP_RECEIVED,\n        meetingId: meetingId,\n        data: {\n          canProceed: false,\n          errors: [_metrics.default.generateErrorPayload(2001, true, error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n        }\n      });\n    });\n  }\n\n  return _promise.default.reject(new _media.default('PeerConnection in wrong state'));\n};\n/**\n * create offer with a valid paramater\n * @param {Object} peerConnection\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @param {string} meetingProperties.enableRtx\n * @param {string} meetingProperties.enableExtmap\n * @returns {RTCPeerConnection}\n */\n\n\npc.createOffer = function (peerConnection, _ref2) {\n  var meetingId = _ref2.meetingId,\n      remoteQualityLevel = _ref2.remoteQualityLevel,\n      enableRtx = _ref2.enableRtx,\n      enableExtmap = _ref2.enableExtmap;\n\n  _loggerProxy.default.logger.log('PeerConnectionManager:index#createOffer --> creating a new offer'); // saving the extMap State to use in setRemoteDescription\n\n\n  peerConnection.enableExtmap = enableExtmap;\n  return peerConnection.createOffer().then(function (description) {\n    // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n    // chrome currently generates RTX line irrespective of weither the server side supports it\n    // we are removing apt as well because its associated with rtx line\n    if (!enableRtx) {\n      description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n      description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n    }\n\n    return peerConnection.setLocalDescription(description);\n  }).then(function () {\n    return pc.iceCandidate(peerConnection, {\n      remoteQualityLevel: remoteQualityLevel\n    });\n  }).then(function () {\n    if (!checkH264Support(peerConnection.sdp)) {\n      throw new _media.default('openH264 is downloading please Wait. Upload logs if not working on second try');\n    }\n\n    if (!enableExtmap) {\n      peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n    }\n\n    pc.setContentSlides(peerConnection);\n\n    _metrics.default.postEvent({\n      event: _config2.eventType.LOCAL_SDP_GENERATED,\n      meetingId: meetingId\n    });\n\n    return peerConnection;\n  }).catch(function (error) {\n    _loggerProxy.default.logger.error(\"Peer-connection-manager:index#createOffer --> \".concat(error));\n\n    if (error instanceof _webexErrors.InvalidSdpError) {\n      _metrics.default.sendBehavioralMetric(_constants.BEHAVIORAL_METRICS.INVALID_ICE_CANDIDATE, {\n        correlation_id: meetingId,\n        code: error.code,\n        reason: error.message\n      });\n    } else {\n      var metricName = _constants.BEHAVIORAL_METRICS.PEERCONNECTION_FAILURE;\n      var data = {\n        correlation_id: meetingId,\n        reason: error.message,\n        stack: error.stack\n      };\n      var metadata = {\n        type: error.name\n      };\n\n      _metrics.default.sendBehavioralMetric(metricName, data, metadata);\n    }\n\n    _metrics.default.postEvent({\n      event: _config2.eventType.LOCAL_SDP_GENERATED,\n      meetingId: meetingId,\n      data: {\n        canProceed: false,\n        errors: [_metrics.default.generateErrorPayload(2001, true, error.name.MEDIA_ENGINE)]\n      }\n    });\n\n    pc.close(peerConnection);\n    throw error;\n  });\n};\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {Promise.RTCPeerConnection}\n */\n\n\npc.rollBackLocalDescription = function (peerConnection) {\n  return peerConnection.setLocalDescription(new RTCSessionDescription({\n    type: _constants.SDP.ROLLBACK\n  })).then(function () {\n    return peerConnection;\n  }).catch(function (err) {\n    _loggerProxy.default.logger.error(\"Peer-connection-manager:index#setLocalDescription --> \".concat(err, \" \"));\n\n    return _promise.default.error(err);\n  });\n};\n/**\n * @param {Object} params {\n * @param {Boolean} params.offerToReceiveAudio\n * @param {Boolean} params.offerToReceiveVideo\n * @param {string} params.offerSdp\n * @param {MediaStream} params.stream\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise.<Array>} [MediaSDP, ScreenSDP]\n */\n\n\npc.updatePeerConnection = function (params, _ref3) {\n  var meetingId = _ref3.meetingId,\n      remoteQualityLevel = _ref3.remoteQualityLevel;\n\n  _loggerProxy.default.logger.log(\"PeerConnectionManager:index#updatePeerConnection --> updating the peerConnection with params: \".concat(params));\n\n  var peerConnection = params.peerConnection,\n      offerSdp = params.offerSdp;\n  return pc.createAnswer({\n    peerConnection: peerConnection,\n    offerSdp: offerSdp[0]\n  }, {\n    meetingId: meetingId,\n    remoteQualityLevel: remoteQualityLevel\n  }).then(function (peerconnection) {\n    // The content slides should also be set when we are sending inactive\n    pc.setContentSlides(peerconnection);\n    return _promise.default.resolve([peerconnection.sdp]);\n  });\n};\n/**\n * @param {Object} params\n * @param {Object} params.peerConnection\n * @param {Object} params.sdpConstraints\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection} peerConnection\n */\n\n\npc.createAnswer = function (params, _ref4) {\n  var meetingId = _ref4.meetingId,\n      remoteQualityLevel = _ref4.remoteQualityLevel;\n  var peerConnection = params.peerConnection; // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n\n  if (peerConnection.signalingState === _constants.SDP.HAVE_REMOTE_OFFER) {\n    return _promise.default.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, _constants.OFFER, params.offerSdp, meetingId).then(function () {\n    return peerConnection.createAnswer(params.sdpConstraints);\n  }).then(function (answer) {\n    return peerConnection.setLocalDescription(answer);\n  }).then(function () {\n    return pc.iceCandidate(peerConnection, {\n      remoteQualityLevel: remoteQualityLevel\n    });\n  }).then(function () {\n    peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n    peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n    peerConnection.sdp = _util.default.convertCLineToIpv4(peerConnection.sdp);\n\n    if (!checkH264Support(peerConnection.sdp)) {\n      throw new _media.default('openH264 is downloading please Wait. Upload logs if not working on second try');\n    }\n\n    return peerConnection;\n  }).catch(function (error) {\n    if (error instanceof _webexErrors.InvalidSdpError) {\n      _metrics.default.sendBehavioralMetric(_constants.BEHAVIORAL_METRICS.INVALID_ICE_CANDIDATE, {\n        correlation_id: meetingId\n      });\n    } else {\n      var metricName = _constants.BEHAVIORAL_METRICS.PEERCONNECTION_FAILURE;\n      var data = {\n        correlation_id: meetingId,\n        reason: error.message,\n        stack: error.stack\n      };\n      var metadata = {\n        type: error.name\n      };\n\n      _metrics.default.sendBehavioralMetric(metricName, data, metadata);\n    }\n\n    _loggerProxy.default.logger.error(\"PeerConnectionManager:index#setRemoteSessionDetails --> Error creating remote session, error: \".concat(error));\n  });\n};\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\n\n\npc.close = function (peerConnection) {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n  _loggerProxy.default.logger.log('PeerConnectionManager:index#close --> pc: close() -> attempting to close the peer connection');\n\n  if (peerConnection && peerConnection.connectionState === _constants.PEER_CONNECTION_STATE.CLOSED) {\n    _loggerProxy.default.logger.log('PeerConnectionManager:index#close --> pc: close() -> connection already closed');\n\n    return _promise.default.resolve();\n  }\n\n  _loggerProxy.default.logger.log('PeerConnectionManager:index#close --> pc: close() -> closing the mediaPeerConnection');\n\n  return _promise.default.resolve().then(function () {\n    if (peerConnection && peerConnection.close) {\n      peerConnection.close();\n    }\n  });\n};\n\npc.setPeerConnectionEvents = function (meeting) {\n  // In case ICE fail\n  var peerConnection = meeting.mediaProperties.peerConnection;\n\n  var connectionFailed = function connectionFailed() {\n    if (meeting.reconnectionManager.iceState.resolve) {\n      // DISCONNECTED state triggers first then it goes to FAILED STATE\n      // sometimes the failed state can happen before 10 seconds (Which is the timer for the reconnect for ice disconnect)\n      meeting.reconnectionManager.iceState.resolve();\n    }\n\n    meeting.reconnect({\n      networkDisconnect: true\n    });\n\n    _metrics.default.postEvent({\n      event: _config2.eventType.ICE_END,\n      meeting: meeting,\n      data: {\n        canProceed: false,\n        errors: [_metrics.default.generateErrorPayload(2004, false, _config2.error.name.MEDIA_ENGINE)]\n      }\n    });\n\n    meeting.uploadLogs({\n      file: 'peer-connection-manager/index',\n      function: 'connectionFailed'\n    });\n\n    _metrics.default.sendBehavioralMetric(_constants.BEHAVIORAL_METRICS.CONNECTION_FAILURE, {\n      correlation_id: meeting.correlationId,\n      locus_id: meeting.locusId\n    });\n  };\n\n  peerConnection.oniceconnectionstatechange = function () {\n    _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHANGE.');\n\n    switch (peerConnection.iceConnectionState) {\n      case _constants.ICE_STATE.CHECKING:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHECKING.');\n\n        _metrics.default.postEvent({\n          event: _config2.eventType.ICE_START,\n          meeting: meeting\n        });\n\n        break;\n\n      case _constants.ICE_STATE.COMPLETED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE COMPLETED.');\n\n        break;\n\n      case _constants.ICE_STATE.CONNECTED:\n        // Ice connection state goes to connected when both client and server sends STUN packets and\n        // Established connected between them. Firefox does not trigger COMPLETED and only trigger CONNECTED\n        _metrics.default.postEvent({\n          event: _config2.eventType.ICE_END,\n          meeting: meeting\n        });\n\n        _metrics.default.sendBehavioralMetric(_constants.BEHAVIORAL_METRICS.CONNECTION_SUCCESS, {\n          correlation_id: meeting.correlationId,\n          locus_id: meeting.locusId\n        });\n\n        meeting.setNetworkStatus(_constants.NETWORK_STATUS.CONNECTED);\n        meeting.reconnectionManager.iceReconnected();\n\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CONNECTED.');\n\n        break;\n\n      case _constants.ICE_STATE.CLOSED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CLOSED.');\n\n        break;\n\n      case _constants.ICE_STATE.DISCONNECTED:\n        meeting.setNetworkStatus(_constants.NETWORK_STATUS.DISCONNECTED);\n        meeting.reconnectionManager.waitForIceReconnect().catch(function () {\n          _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED. Automatic Reconnection Timed Out.');\n\n          connectionFailed();\n        });\n\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED.');\n\n        break;\n\n      case _constants.ICE_STATE.FAILED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE FAILED.'); // notify of ice failure\n        // Ice failure is the only indicator currently for identifying the actual connection drop\n        // Firefox takes sometime 10-15 seconds to go to failed state\n\n\n        connectionFailed();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  peerConnection.onconnectionstatechange = function () {\n    _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CHANGE.');\n\n    switch (peerConnection.connectionState) {\n      case _constants.CONNECTION_STATE.NEW:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE NEW.');\n\n        break;\n\n      case _constants.CONNECTION_STATE.CONNECTING:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTING.');\n\n        break;\n\n      case _constants.CONNECTION_STATE.CONNECTED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTED.');\n\n        break;\n\n      case _constants.CONNECTION_STATE.CLOSED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CLOSED.');\n\n        break;\n\n      case _constants.CONNECTION_STATE.DISCONNECTED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE DISCONNECTED.');\n\n        break;\n\n      case _constants.CONNECTION_STATE.FAILED:\n        _loggerProxy.default.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE FAILED.'); // Special case happens only on chrome where there is no ICE FAILED event\n        // only CONNECTION FAILED event gets triggered\n\n\n        connectionFailed();\n        break;\n\n      default:\n        break;\n    }\n  };\n};\n\nvar _default = pc;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["isBrowser","pc","insertBandwidthLimit","sdpLines","index","limit","periodicKeyFrame","search","AUDIO","StaticConfig","meetings","bandwidth","audio","video","SDP","PERIODIC_KEYFRAME","splice","B_LINE","setMaxFs","sdp","level","QUALITY_LEVELS","HIGH","MAX_FRAMESIZES","ParameterError","replaceSdp","maxFsLine","MAX_FS","replace","setStartBitrateOnRemoteSdp","startBitrate","checkH264Support","videoPresent","match","h264Present","isSdpInvalid","parsedSdp","sdpTransform","parse","media","mediaLine","candidates","length","LoggerProxy","logger","error","BAD_MEDIA_PORTS","includes","port","icePwd","iceUfrag","_iterator","limitBandwidth","offerSdp","split","CARRIAGE_RETURN","i","M_LINE","join","setContentSlides","screenPc","A_CONTENT_SLIDES","iceCandidate","peerConnection","remoteQualityLevel","resolve","reject","now","doneGatheringIceCandidate","miliseconds","Math","abs","localDescription","PeerConnectionUtils","convertCLineToIpv4","invalidSdpPresent","InvalidSdpError","log","iceGatheringState","COMPLETE","onIceGatheringStateChange","GATHERING","onicecandidate","evt","candidate","_evt$candidate","type","_evt$candidate2","protocol","_evt$candidate3","address","_evt$candidate4","onicecandidateerror","event","IceGatheringFailed","replaceTrack","track","senders","getSenders","forEach","sender","kind","err","addStream","stream","tracksPresent","find","getTracks","addTrack","setRemoteSessionDetails","typeStr","remoteSdp","meetingId","signalingState","Metrics","postEvent","eventType","REMOTE_SDP_RECEIVED","data","canProceed","errors","generateErrorPayload","name","MEDIA_ENGINE","HAVE_LOCAL_OFFER","STABLE","OFFER","enableExtmap","setRemoteDescription","window","RTCSessionDescription","then","catch","metricName","BEHAVIORAL_METRICS","PEERCONNECTION_FAILURE","correlation_id","reason","message","stack","metadata","sendBehavioralMetric","_promise","MediaError","createOffer","enableRtx","description","setLocalDescription","LOCAL_SDP_GENERATED","INVALID_ICE_CANDIDATE","code","close","rollBackLocalDescription","ROLLBACK","updatePeerConnection","params","createAnswer","peerconnection","HAVE_REMOTE_OFFER","sdpConstraints","answer","connectionState","PEER_CONNECTION_STATE","CLOSED","setPeerConnectionEvents","meeting","mediaProperties","connectionFailed","reconnectionManager","iceState","reconnect","networkDisconnect","ICE_END","uploadLogs","file","function","CONNECTION_FAILURE","correlationId","locus_id","locusId","oniceconnectionstatechange","info","iceConnectionState","ICE_STATE","CHECKING","ICE_START","COMPLETED","CONNECTED","CONNECTION_SUCCESS","setNetworkStatus","NETWORK_STATUS","iceReconnected","DISCONNECTED","waitForIceReconnect","FAILED","onconnectionstatechange","CONNECTION_STATE","NEW","CONNECTING"],"sources":["index.js"],"sourcesContent":["\n// We need to figure out how to pass a webex logger instance to these util files\n\n/* globals RTCSessionDescription */\n\nimport window from 'global/window';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport Metrics from '../metrics';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport StaticConfig from '../common/config';\nimport {\n  COMPLETE,\n  GATHERING,\n  AUDIO,\n  SDP,\n  ICE_STATE,\n  CONNECTION_STATE,\n  NETWORK_STATUS,\n  PEER_CONNECTION_STATE,\n  OFFER,\n  QUALITY_LEVELS,\n  MAX_FRAMESIZES,\n  BEHAVIORAL_METRICS\n} from '../constants';\nimport {error, eventType} from '../metrics/config';\nimport MediaError from '../common/errors/media';\nimport ParameterError from '../common/errors/parameter';\nimport {InvalidSdpError, IceGatheringFailed} from '../common/errors/webex-errors';\nimport BrowserDetection from '../common/browser-detection';\n\nimport PeerConnectionUtils from './util';\n\nconst {isBrowser} = BrowserDetection();\n\n/**\n * @export\n * @public\n */\nconst pc = {};\n\n/**\n * munges the bandwidth limit into the sdp\n * @param {String} sdpLines\n * @param {Number} index\n * @returns {String}\n */\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  let periodicKeyFrame = '';\n\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = StaticConfig.meetings.bandwidth.audio;\n  }\n  else {\n    limit = StaticConfig.meetings.bandwidth.video;\n    periodicKeyFrame = SDP.PERIODIC_KEYFRAME;\n    sdpLines.splice(index + 2, 0, periodicKeyFrame);\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n\n  return sdpLines;\n};\n\n/**\n * needed for calliope max-fs\n * @param {String} sdp\n * @param {String} [level=QUALITY_LEVELS.HIGH] quality level for max-fs\n * @returns {String}\n */\nconst setMaxFs = (sdp, level = QUALITY_LEVELS.HIGH) => {\n  if (!MAX_FRAMESIZES[level]) {\n    throw new ParameterError(`setMaxFs: unable to set max framesize, value for level \"${level}\" is not defined`);\n  }\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  const maxFsLine = `${SDP.MAX_FS}${MAX_FRAMESIZES[level]}`;\n\n  replaceSdp = replaceSdp.replace(/(\\na=fmtp:(\\d+).*profile-level-id=.*)/gi, `$1;${maxFsLine}`);\n\n  return replaceSdp;\n};\n\n\nconst setStartBitrateOnRemoteSdp = (sdp) => {\n  if (StaticConfig.meetings.bandwidth.startBitrate) {\n    sdp = sdp.replace(/(\\na=fmtp:(\\d+).*profile-level-id=.*)/gi, `$1;x-google-start-bitrate=${StaticConfig.meetings.bandwidth.startBitrate}`);\n  }\n\n  return sdp;\n};\n\n/**\n * checks that sdp has h264 codec in it\n * @param {String} sdp\n * @returns {boolean}\n */\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n\n  if (videoPresent) {\n    return !!h264Present;\n  }\n\n  return true;\n};\n\n/**\n * validates the sdp, checks port, candidates, and ice info\n * @param {String} sdp\n * @returns {String}\n */\nconst isSdpInvalid = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n\n  for (const mediaLine of parsedSdp.media) {\n    if (!mediaLine.candidates || mediaLine.candidates?.length === 0) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: Ice candadate never completed');\n\n      return 'iceCandidate: Ice gathering never completed';\n    }\n\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: Found invalid port number for the ice candidate');\n\n      return 'iceCandidate: Found invalid port number for the ice candidate';\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      LoggerProxy.logger.error('PeerConnectionManager:index#isSdpInvalid --> iceCandidate: ice ufrag and password not found');\n\n      return 'iceCandidate: ice ufrag and password not found';\n    }\n  }\n\n  return '';\n};\n\n/**\n * munges the bandwidth into the sdp\n * @param {String} sdp\n * @returns {String}\n */\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n\n  return offerSdp;\n};\n\n/**\n * makes sure the screen pc sdp has content:slides for server\n * @param {RTCPeerConnection} screenPc\n * @returns {RTCPeerConnection}\n */\npc.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} peerConnection\n * @param {Object} options\n * @param {String} options.remoteQualityLevel\n * @returns {Promise.RTCPeerConnection}\n */\npc.iceCandidate = (peerConnection, {remoteQualityLevel}) =>\n  new Promise((resolve, reject) => {\n    const now = Date.now();\n    const doneGatheringIceCandidate = () => {\n      const miliseconds = parseInt(Math.abs(Date.now() - now), 4);\n\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      peerConnection.sdp = PeerConnectionUtils.convertCLineToIpv4(peerConnection.sdp);\n\n      const invalidSdpPresent = isSdpInvalid(peerConnection.sdp);\n\n      if (invalidSdpPresent) {\n        LoggerProxy.logger.error('PeerConnectionManager:index#iceCandidate --> SDP not valid after waiting.');\n        reject(new InvalidSdpError(invalidSdpPresent));\n      }\n      LoggerProxy.logger.log(`PeerConnectionManager:index#iceCandidate --> Time to gather ice candidate ${miliseconds} miliseconds`);\n\n\n      resolve();\n    };\n\n    // If ice has already been gathered\n    if (peerConnection.iceGatheringState === COMPLETE) {\n      doneGatheringIceCandidate();\n    }\n\n    peerConnection.onIceGatheringStateChange = () => {\n      if (peerConnection.iceGatheringState === COMPLETE) {\n        doneGatheringIceCandidate(peerConnection);\n      }\n      if (peerConnection.iceGatheringState === GATHERING) {\n        LoggerProxy.logger.log('PeerConnectionManager:index#onIceGatheringStateChange --> Ice state changed to gathering');\n      }\n    };\n\n    peerConnection.onicecandidate = (evt) => {\n      if (evt.candidate === null) {\n        doneGatheringIceCandidate(peerConnection);\n      }\n      else {\n        LoggerProxy.logger.log(`PeerConnectionManager:index#onicecandidate --> Candidate ${evt.candidate?.type} ${evt.candidate?.protocol} ${evt.candidate?.address}:${evt.candidate?.port}`);\n      }\n    };\n\n    peerConnection.onicecandidateerror = (event) => {\n      LoggerProxy.logger.error('PeerConnectionManager:index#onicecandidateerror --> Failed to gather ice candidate.', event);\n      reject(new IceGatheringFailed());\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} peerConnection\n * @param {Object} track\n * @returns {undefined}\n */\npc.replaceTrack = (peerConnection, track) => {\n  try {\n    const senders = peerConnection.getSenders();\n\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  }\n  catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager:index#replaceTrack --> Error replacing track, ${err}`);\n  }\n};\n\n/**\n * adding streams to peerConnection\n * @param {Object} peerConnection\n * @param {Object} stream\n * @returns {undefined}\n */\npc.addStream = (peerConnection, stream) => {\n  try {\n    if (stream && !isBrowser('edge')) {\n      const tracksPresent = peerConnection.getSenders && peerConnection.getSenders().find((sender) => sender.track != null);\n\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          pc.replaceTrack(peerConnection, track);\n        });\n\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   peerConnection.addStream(stream);\n    }\n    else if (isBrowser('edge')) {\n      peerConnection.addStream(stream);\n    }\n  }\n  catch (err) {\n    LoggerProxy.logger.error(`PeerConnectionManager:index#addStream --> Error adding stream, error: ${error}`);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} peerConnection\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @param {String} meetingId\n * @returns {undefined}\n */\npc.setRemoteSessionDetails = (\n  peerConnection,\n  typeStr,\n  remoteSdp,\n  meetingId,\n) => {\n  LoggerProxy.logger.log(`PeerConnectionManager:index#setRemoteSessionDetails --> Setting the remote description type: ${typeStr}State: ${peerConnection.signalingState}`);\n  let sdp = remoteSdp;\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n\n  if (!sdp) {\n    Metrics.postEvent({\n      event: eventType.REMOTE_SDP_RECEIVED,\n      meetingId,\n      data: {\n        canProceed: false,\n        errors: [Metrics.generateErrorPayload(2001, true,\n          error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n      }\n    });\n  }\n  if (peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER || (peerConnection.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    sdp = setStartBitrateOnRemoteSdp(sdp);\n\n    if (!peerConnection.enableExtmap) {\n      sdp = sdp.replace(/\\na=extmap.*/g, '');\n    }\n\n\n    return peerConnection.setRemoteDescription(\n      new window.RTCSessionDescription({\n        type: typeStr,\n        sdp\n      })\n    )\n      .then(() => {\n        if (peerConnection.signalingState === SDP.STABLE) {\n          Metrics.postEvent({\n            event: eventType.REMOTE_SDP_RECEIVED,\n            meetingId\n          });\n        }\n      })\n      .catch((error) => {\n        LoggerProxy.logger.error(`Peer-connection-manager:index#setRemoteDescription --> ${error} missing remotesdp`);\n\n\n        const metricName = BEHAVIORAL_METRICS.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendBehavioralMetric(metricName, data, metadata);\n\n        return Metrics.postEvent({\n          event: eventType.REMOTE_SDP_RECEIVED,\n          meetingId,\n          data: {\n            canProceed: false,\n            errors: [Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE, 'missing remoteSdp')]\n          }\n        });\n      });\n  }\n\n  return Promise.reject(new MediaError('PeerConnection in wrong state'));\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} peerConnection\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @param {string} meetingProperties.enableRtx\n * @param {string} meetingProperties.enableExtmap\n * @returns {RTCPeerConnection}\n */\npc.createOffer = (peerConnection, {\n  meetingId,\n  remoteQualityLevel,\n  enableRtx,\n  enableExtmap\n}) => {\n  LoggerProxy.logger.log('PeerConnectionManager:index#createOffer --> creating a new offer');\n\n  // saving the extMap State to use in setRemoteDescription\n\n  peerConnection.enableExtmap = enableExtmap;\n\n  return peerConnection\n    .createOffer()\n    .then((description) => {\n      // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1020642\n      // chrome currently generates RTX line irrespective of weither the server side supports it\n      // we are removing apt as well because its associated with rtx line\n\n      if (!enableRtx) {\n        description.sdp = description.sdp.replace(/\\r\\na=rtpmap:\\d+ rtx\\/\\d+/g, '');\n        description.sdp = description.sdp.replace(/\\r\\na=fmtp:\\d+ apt=\\d+/g, '');\n      }\n\n      return peerConnection.setLocalDescription(description);\n    })\n    .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n    .then(() => {\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      if (!enableExtmap) {\n        peerConnection.sdp = peerConnection.sdp.replace(/\\na=extmap.*/g, '');\n      }\n\n      pc.setContentSlides(peerConnection);\n\n      Metrics.postEvent({\n        event: eventType.LOCAL_SDP_GENERATED,\n        meetingId\n      });\n\n      return peerConnection;\n    })\n    .catch((error) => {\n      LoggerProxy.logger.error(`Peer-connection-manager:index#createOffer --> ${error}`);\n      if (error instanceof InvalidSdpError) {\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.INVALID_ICE_CANDIDATE,\n          {\n            correlation_id: meetingId,\n            code: error.code,\n            reason: error.message\n          }\n        );\n      }\n      else {\n        const metricName = BEHAVIORAL_METRICS.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendBehavioralMetric(metricName, data, metadata);\n      }\n\n      Metrics.postEvent({\n        event: eventType.LOCAL_SDP_GENERATED,\n        meetingId,\n        data: {\n          canProceed: false,\n          errors: [\n            Metrics.generateErrorPayload(2001, true,\n              error.name.MEDIA_ENGINE)]\n        }\n      });\n      pc.close(peerConnection);\n      throw error;\n    });\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} peerConnection\n * @returns {Promise.RTCPeerConnection}\n */\npc.rollBackLocalDescription = (peerConnection) => peerConnection\n  .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n  .then(() => peerConnection)\n  .catch((err) => {\n    LoggerProxy.logger.error(`Peer-connection-manager:index#setLocalDescription --> ${err} `);\n\n    return Promise.error(err);\n  });\n\n/**\n * @param {Object} params {\n * @param {Boolean} params.offerToReceiveAudio\n * @param {Boolean} params.offerToReceiveVideo\n * @param {string} params.offerSdp\n * @param {MediaStream} params.stream\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise.<Array>} [MediaSDP, ScreenSDP]\n */\npc.updatePeerConnection = (params, {meetingId, remoteQualityLevel}) => {\n  LoggerProxy.logger.log(`PeerConnectionManager:index#updatePeerConnection --> updating the peerConnection with params: ${params}`);\n\n  const {peerConnection, offerSdp} = params;\n\n  return pc.createAnswer({\n    peerConnection,\n    offerSdp: offerSdp[0]\n  }, {meetingId, remoteQualityLevel}).then((peerconnection) => {\n    // The content slides should also be set when we are sending inactive\n    pc.setContentSlides(peerconnection);\n\n    return Promise.resolve([peerconnection.sdp]);\n  });\n};\n\n/**\n * @param {Object} params\n * @param {Object} params.peerConnection\n * @param {Object} params.sdpConstraints\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {RTCPeerConnection} peerConnection\n */\npc.createAnswer = (params, {meetingId, remoteQualityLevel}) => {\n  const {peerConnection} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (peerConnection.signalingState === SDP.HAVE_REMOTE_OFFER) {\n    return Promise.resolve(peerConnection);\n  }\n\n  return pc.setRemoteSessionDetails(peerConnection, OFFER, params.offerSdp, meetingId)\n    .then(() => peerConnection.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n\n      peerConnection.setLocalDescription(answer))\n    .then(() => pc.iceCandidate(peerConnection, {remoteQualityLevel}))\n    .then(() => {\n      peerConnection.sdp = limitBandwidth(peerConnection.localDescription.sdp);\n      peerConnection.sdp = setMaxFs(peerConnection.sdp, remoteQualityLevel);\n      peerConnection.sdp = PeerConnectionUtils.convertCLineToIpv4(peerConnection.sdp);\n      if (!checkH264Support(peerConnection.sdp)) {\n        throw new MediaError('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      return peerConnection;\n    })\n    .catch((error) => {\n      if (error instanceof InvalidSdpError) {\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.INVALID_ICE_CANDIDATE,\n          {\n            correlation_id: meetingId\n          }\n        );\n      }\n      else {\n        const metricName = BEHAVIORAL_METRICS.PEERCONNECTION_FAILURE;\n        const data = {\n          correlation_id: meetingId,\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendBehavioralMetric(metricName, data, metadata);\n      }\n\n      LoggerProxy.logger.error(`PeerConnectionManager:index#setRemoteSessionDetails --> Error creating remote session, error: ${error}`);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} peerConnection\n * @returns {undefined}\n */\npc.close = (peerConnection) => {\n  // peerConnection.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n  LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> attempting to close the peer connection');\n\n  if (peerConnection && peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n    LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> connection already closed');\n\n    return Promise.resolve();\n  }\n  LoggerProxy.logger.log('PeerConnectionManager:index#close --> pc: close() -> closing the mediaPeerConnection');\n\n  return Promise.resolve()\n    .then(() => {\n      if (peerConnection && peerConnection.close) {\n        peerConnection.close();\n      }\n    });\n};\n\n\npc.setPeerConnectionEvents = (meeting) => {\n  // In case ICE fail\n  const {peerConnection} = meeting.mediaProperties;\n\n  const connectionFailed = () => {\n    if (meeting.reconnectionManager.iceState.resolve) {\n      // DISCONNECTED state triggers first then it goes to FAILED STATE\n      // sometimes the failed state can happen before 10 seconds (Which is the timer for the reconnect for ice disconnect)\n      meeting.reconnectionManager.iceState.resolve();\n    }\n\n    meeting.reconnect({networkDisconnect: true});\n    Metrics.postEvent({\n      event: eventType.ICE_END,\n      meeting,\n      data: {\n        canProceed: false,\n        errors: [\n          Metrics.generateErrorPayload(\n            2004, false, error.name.MEDIA_ENGINE\n          )]\n      }\n    });\n\n    meeting.uploadLogs({\n      file: 'peer-connection-manager/index',\n      function: 'connectionFailed'\n    });\n\n    Metrics.sendBehavioralMetric(\n      BEHAVIORAL_METRICS.CONNECTION_FAILURE,\n      {\n        correlation_id: meeting.correlationId,\n        locus_id: meeting.locusId\n      }\n    );\n  };\n\n  peerConnection.oniceconnectionstatechange = () => {\n    LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHANGE.');\n    switch (peerConnection.iceConnectionState) {\n      case ICE_STATE.CHECKING:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CHECKING.');\n        Metrics.postEvent({event: eventType.ICE_START, meeting});\n        break;\n      case ICE_STATE.COMPLETED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE COMPLETED.');\n        break;\n      case ICE_STATE.CONNECTED:\n        // Ice connection state goes to connected when both client and server sends STUN packets and\n        // Established connected between them. Firefox does not trigger COMPLETED and only trigger CONNECTED\n        Metrics.postEvent({event: eventType.ICE_END, meeting});\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.CONNECTION_SUCCESS,\n          {\n            correlation_id: meeting.correlationId,\n            locus_id: meeting.locusId\n          }\n        );\n        meeting.setNetworkStatus(NETWORK_STATUS.CONNECTED);\n        meeting.reconnectionManager.iceReconnected();\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CONNECTED.');\n        break;\n      case ICE_STATE.CLOSED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE CLOSED.');\n        break;\n      case ICE_STATE.DISCONNECTED:\n        meeting.setNetworkStatus(NETWORK_STATUS.DISCONNECTED);\n        meeting.reconnectionManager.waitForIceReconnect()\n          .catch(() => {\n            LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED. Automatic Reconnection Timed Out.');\n\n            connectionFailed();\n          });\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE DISCONNECTED.');\n        break;\n      case ICE_STATE.FAILED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> ICE STATE FAILED.');\n        // notify of ice failure\n        // Ice failure is the only indicator currently for identifying the actual connection drop\n        // Firefox takes sometime 10-15 seconds to go to failed state\n        connectionFailed();\n        break;\n      default:\n        break;\n    }\n  };\n\n  peerConnection.onconnectionstatechange = () => {\n    LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CHANGE.');\n    switch (peerConnection.connectionState) {\n      case CONNECTION_STATE.NEW:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE NEW.');\n        break;\n      case CONNECTION_STATE.CONNECTING:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTING.');\n        break;\n      case CONNECTION_STATE.CONNECTED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CONNECTED.');\n        break;\n      case CONNECTION_STATE.CLOSED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE CLOSED.');\n        break;\n      case CONNECTION_STATE.DISCONNECTED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE DISCONNECTED.');\n        break;\n      case CONNECTION_STATE.FAILED:\n        LoggerProxy.logger.info('PeerConnectionManager:index#setPeerConnectionEvents --> CONNECTION STATE FAILED.');\n        // Special case happens only on chrome where there is no ICE FAILED event\n        // only CONNECTION FAILED event gets triggered\n\n        connectionFailed();\n        break;\n      default:\n        break;\n    }\n  };\n};\n\nexport default pc;\n"]},"metadata":{},"sourceType":"script"}
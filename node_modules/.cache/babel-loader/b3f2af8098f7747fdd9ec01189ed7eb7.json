{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport DigestInfo from \"./DigestInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar MacData = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for MacData class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function MacData() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MacData);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {DigestInfo}\r\n     * @desc mac\r\n     */\n    this.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc macSalt\r\n     */\n\n    this.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\n    if (\"iterations\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc iterations\r\n       */\n      this.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(MacData, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"mac\", \"macSalt\", \"iterations\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, MacData.schema({\n        names: {\n          mac: {\n            names: {\n              blockName: \"mac\"\n            }\n          },\n          macSalt: \"macSalt\",\n          iterations: \"iterations\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for MacData\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.mac = new DigestInfo({\n        schema: asn1.result.mac\n      });\n      this.macSalt = asn1.result.macSalt;\n      if (\"iterations\" in asn1.result) this.iterations = asn1.result.iterations.valueBlock.valueDec; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      var outputArray = [this.mac.toSchema(), this.macSalt];\n      if (\"iterations\" in this) outputArray.push(new asn1js.Integer({\n        value: this.iterations\n      }));\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var output = {\n        mac: this.mac.toJSON(),\n        macSalt: this.macSalt.toJSON()\n      };\n      if (\"iterations\" in this) output.iterations = this.iterations.toJSON();\n      return output;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"mac\":\n          return new DigestInfo();\n\n        case \"macSalt\":\n          return new asn1js.OctetString();\n\n        case \"iterations\":\n          return 1;\n\n        default:\n          throw new Error(\"Invalid member name for MacData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"mac\":\n          return DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm) && DigestInfo.compareWithDefault(\"digest\", memberValue.digest);\n\n        case \"macSalt\":\n          return memberValue.isEqual(MacData.defaultValues(memberName));\n\n        case \"iterations\":\n          return memberValue === MacData.defaultValues(memberName);\n\n        default:\n          throw new Error(\"Invalid member name for MacData class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * MacData ::= SEQUENCE {\r\n     *    mac \t\tDigestInfo,\r\n     *    macSalt       OCTET STRING,\r\n     *    iterations\tINTEGER DEFAULT 1\r\n     *    -- Note: The default is for historical reasons and its use is\r\n     *    -- deprecated. A higher value, like 1024 is recommended.\r\n     *    }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [optional]\r\n       * @property {string} [mac]\r\n       * @property {string} [macSalt]\r\n       * @property {string} [iterations]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        optional: names.optional || true,\n        value: [DigestInfo.schema(names.mac || {\n          names: {\n            blockName: \"mac\"\n          }\n        }), new asn1js.OctetString({\n          name: names.macSalt || \"macSalt\"\n        }), new asn1js.Integer({\n          optional: true,\n          name: names.iterations || \"iterations\"\n        })]\n      });\n    }\n  }]);\n\n  return MacData;\n}(); //**************************************************************************************\n\n\nexport { MacData as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/MacData.js"],"names":["asn1js","getParametersValue","clearProps","DigestInfo","MacData","parameters","mac","defaultValues","macSalt","iterations","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","outputArray","toSchema","push","Integer","value","Sequence","output","toJSON","memberName","OctetString","memberValue","compareWithDefault","digestAlgorithm","digest","isEqual","name","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class MacData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MacData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {DigestInfo}\r\n\t\t * @desc mac\r\n\t\t */\r\n\t\tthis.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc macSalt\r\n\t\t */\r\n\t\tthis.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\r\n\t\t\r\n\t\tif(\"iterations\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc iterations\r\n\t\t\t */\r\n\t\t\tthis.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn new DigestInfo();\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n\t\t\t\t(DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn (memberValue === MacData.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MacData ::= SEQUENCE {\r\n\t *    mac \t\tDigestInfo,\r\n\t *    macSalt       OCTET STRING,\r\n\t *    iterations\tINTEGER DEFAULT 1\r\n\t *    -- Note: The default is for historical reasons and its use is\r\n\t *    -- deprecated. A higher value, like 1024 is recommended.\r\n\t *    }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [mac]\r\n\t\t * @property {string} [macSalt]\r\n\t\t * @property {string} [iterations]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tvalue: [\r\n\t\t\t\tDigestInfo.schema(names.mac || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.macSalt || \"macSalt\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.iterations || \"iterations\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mac\",\r\n\t\t\t\"macSalt\",\r\n\t\t\t\"iterations\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMacData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmac: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacSalt: \"macSalt\",\r\n\t\t\t\t\titerations: \"iterations\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MacData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mac = new DigestInfo({ schema: asn1.result.mac });\r\n\t\tthis.macSalt = asn1.result.macSalt;\r\n\t\t\r\n\t\tif(\"iterations\" in asn1.result)\r\n\t\t\tthis.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tthis.mac.toSchema(),\r\n\t\t\tthis.macSalt\r\n\t\t];\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tmac: this.mac.toJSON(),\r\n\t\t\tmacSalt: this.macSalt.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutput.iterations = this.iterations.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar PolicyInformation = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PolicyInformation class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PolicyInformation() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PolicyInformation);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc policyIdentifier\r\n     */\n    this.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\n    if (\"policyQualifiers\" in parameters)\n      /**\r\n       * @type {Array.<PolicyQualifierInfo>}\r\n       * @desc Value of the TIME class\r\n       */\n      this.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PolicyInformation, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"policyIdentifier\", \"policyQualifiers\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({\n        names: {\n          policyIdentifier: \"policyIdentifier\",\n          policyQualifiers: \"policyQualifiers\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PolicyInformation\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n      if (\"policyQualifiers\" in asn1.result) this.policyQualifiers = Array.from(asn1.result.policyQualifiers, function (element) {\n        return new PolicyQualifierInfo({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.policyIdentifier\n      }));\n\n      if (\"policyQualifiers\" in this) {\n        outputArray.push(new asn1js.Sequence({\n          value: Array.from(this.policyQualifiers, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        policyIdentifier: this.policyIdentifier\n      };\n      if (\"policyQualifiers\" in this) object.policyQualifiers = Array.from(this.policyQualifiers, function (element) {\n        return element.toJSON();\n      });\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"policyIdentifier\":\n          return \"\";\n\n        case \"policyQualifiers\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for PolicyInformation class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PolicyInformation ::= SEQUENCE {\r\n     *    policyIdentifier   CertPolicyId,\r\n     *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n     *    PolicyQualifierInfo OPTIONAL }\r\n     *\r\n     * CertPolicyId ::= OBJECT IDENTIFIER\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [policyIdentifier]\r\n       * @property {string} [policyQualifiers]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.policyIdentifier || \"\"\n        }), new asn1js.Sequence({\n          optional: true,\n          value: [new asn1js.Repeated({\n            name: names.policyQualifiers || \"\",\n            value: PolicyQualifierInfo.schema()\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return PolicyInformation;\n}(); //**************************************************************************************\n\n\nexport { PolicyInformation as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PolicyInformation.js"],"names":["asn1js","getParametersValue","clearProps","PolicyQualifierInfo","PolicyInformation","parameters","policyIdentifier","defaultValues","policyQualifiers","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","toString","Array","from","element","outputArray","push","ObjectIdentifier","value","Sequence","toSchema","object","toJSON","memberName","name","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyInformation ::= SEQUENCE {\r\n\t *    policyIdentifier   CertPolicyId,\r\n\t *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t *    PolicyQualifierInfo OPTIONAL }\r\n\t *\r\n\t * CertPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyIdentifier\",\r\n\t\t\t\"policyQualifiers\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _constants = require(\"../constants\");\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _collection = _interopRequireDefault(require(\"./collection\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * @class MeetingInfo\n */\n\n\nvar MeetingInfo = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {WebexSDK} webex\n   */\n  function MeetingInfo(webex) {\n    (0, _classCallCheck2.default)(this, MeetingInfo);\n    this.webex = webex;\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n\n    this.meetingInfoRequest = new _request.default(this.webex);\n    /**\n     * The meeting information collection interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n\n    this.meetingInfoCollection = new _collection.default();\n  }\n  /**\n   * @param {string} id\n   * @returns {object}\n   * @public\n   * @memberof MeetingInfo\n   */\n\n\n  (0, _createClass2.default)(MeetingInfo, [{\n    key: \"getMeetingInfo\",\n    value: function getMeetingInfo(id) {\n      return this.meetingInfoCollection.get(id);\n    }\n    /**\n     * @param {string} id\n     * @param {object} info\n     * @returns {null}\n     * @public\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: \"setMeetingInfo\",\n    value: function setMeetingInfo(id, info) {\n      this.meetingInfoCollection.set(id, info);\n    }\n    /**\n     * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject\n     * @param {Object} options\n     * @returns {Promise}\n     * @private\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: \"requestFetchInfo\",\n    value: function requestFetchInfo(options) {\n      var _this = this;\n\n      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (info) {\n        if (info && info.body) {\n          _this.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);\n        }\n\n        return info;\n      }).catch(function (error) {\n        _loggerProxy.default.logger.error(\"Meeting-info:index#requestFetchInfo -->  \".concat(error, \" fetch meetingInfo\"));\n\n        return _promise.default.reject(error);\n      });\n    }\n    /**\n     * Helper to generate the options for the MeetingInfo request\n     * @param {String} destination\n     * @param {String} type\n     * @returns {Promise}\n     * @private\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: \"fetchInfoOptions\",\n    value: function fetchInfoOptions(destination, type) {\n      return _util.default.generateOptions({\n        destination: destination,\n        type: type,\n        webex: this.webex\n      });\n    }\n    /**\n     * Fetches meeting info from the server\n     * @param {String} destination one of many different types of destinations to look up info for\n     * @param {String} [type] to match up with the destination value\n     * @returns {Promise} returns a meeting info object\n     * @public\n     * @memberof MeetingInfo\n     */\n\n  }, {\n    key: \"fetchMeetingInfo\",\n    value: function fetchMeetingInfo(destination) {\n      var _this2 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (type === _constants._PERSONAL_ROOM_ && !destination) {\n        destination = this.webex.internal.device.userId;\n      }\n\n      return this.fetchInfoOptions(_util.default.extractDestination(destination, type), type).then(function (options) {\n        return (// fetch meeting info\n          _this2.requestFetchInfo(options).catch(function (error) {\n            // if it failed the first time as meeting link\n            if (options.type === _constants._MEETING_LINK_) {\n              // convert the meeting link to sip URI and retry\n              return _this2.requestFetchInfo(_this2.fetchInfoOptions(_util.default.convertLinkToSip(destination), _constants._SIP_URI_));\n            }\n\n            return _promise.default.reject(error);\n          })\n        );\n      });\n    }\n  }]);\n  return MeetingInfo;\n}();\n\nexports.default = MeetingInfo;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAKA;;AAEA;;AACA;;AACA;AAbA;AACA;AACA;;AAaA;AACA;AACA;;;IACqBA,W;AACnB;AACF;AACA;AACA;AACE,uBAAYC,KAAZ,EAAmB;AAAA;AACjB,SAAKA,KAAL,GAAaA,KAAb;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,kBAAL,GAA0B,IAAIC,gBAAJ,CAAuB,KAAKF,KAA5B,CAA1B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKG,qBAAL,GAA6B,IAAIC,mBAAJ,EAA7B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;WACE,wBAAeC,EAAf,EAAmB;AACjB,aAAO,KAAKF,qBAAL,CAA2BG,GAA3B,CAA+BD,EAA/B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,EAAf,EAAmBE,IAAnB,EAAyB;AACvB,WAAKJ,qBAAL,CAA2BK,GAA3B,CAA+BH,EAA/B,EAAmCE,IAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBE,OAAjB,EAA0B;AAAA;;AACxB,aAAO,KAAKR,kBAAL,CAAwBS,gBAAxB,CAAyCD,OAAzC,EAAkDE,IAAlD,CAAuD,UAACJ,IAAD,EAAU;AACtE,YAAIA,IAAI,IAAIA,IAAI,CAACK,IAAjB,EAAuB;AACrBC,eAAI,CAACC,cAAL,CAAoBP,IAAI,CAACK,IAALL,CAAUQ,aAAVR,IAA2BA,IAAI,CAACK,IAALL,CAAUS,WAAzD,EAAsET,IAAI,CAACK,IAA3E;AACD;;AAED,eAAOL,IAAP;AALK,SAMJU,KANI,CAME,UAACC,KAAD,EAAW;AAClBC,6BAAYC,MAAZD,CAAmBD,KAAnBC,oDAAqED,KAArE;;AAEA,eAAOG,iBAAQC,MAAR,CAAeJ,KAAf,CAAP;AATK,QAAP;AAWD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBK,WAAjB,EAA8BC,IAA9B,EAAoC;AAClC,aAAOC,cAAgBC,eAAhBD,CAAgC;AACrCF,mBAAW,EAAXA,WADqC;AAErCC,YAAI,EAAJA,IAFqC;AAGrCxB,aAAK,EAAE,KAAKA;AAHyB,OAAhCyB,CAAP;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBF,WAAjB,EAA2C;AAAA;;AAAA,UAAbC,IAAa,uEAAN,IAAM;;AACzC,UAAIA,IAAI,KAAKG,0BAATH,IAA4B,CAACD,WAAjC,EAA8C;AAC5CA,mBAAW,GAAG,KAAKvB,KAAL,CAAW4B,QAAX,CAAoBC,MAApB,CAA2BC,MAAzCP;AACD;;AAED,aAAO,KAAKQ,gBAAL,CACLN,cAAgBO,kBAAhBP,CAAmCF,WAAnCE,EAAgDD,IAAhDC,CADK,EAELD,IAFK,EAGLb,IAHK,CAGA,UAACF,OAAD;AAAA,eACP;AACEwB,gBAAI,CAACC,gBAAL,CAAsBzB,OAAtB,EAA+BQ,KAA/B,CAAqC,UAACC,KAAD,EAAW;AAChD;AACE,gBAAIT,OAAO,CAACe,IAARf,KAAiB0B,yBAArB,EAAqC;AACrC;AACE,qBAAOF,MAAI,CAACC,gBAAL,CAAsBD,MAAI,CAACF,gBAAL,CAAsBN,cAAgBW,gBAAhBX,CAAiCF,WAAjCE,CAAtB,EAAqEY,oBAArE,CAAtB,CAAP;AACD;;AAED,mBAAOhB,iBAAQC,MAAR,CAAeJ,KAAf,CAAP;AAPF;AAFK;AAHA,QAAP;AAcD","names":["MeetingInfo","webex","meetingInfoRequest","MeetingInfoRequest","meetingInfoCollection","MeetingInfoCollection","id","get","info","set","options","fetchMeetingInfo","then","body","_this","setMeetingInfo","sipMeetingUri","meetingLink","catch","error","LoggerProxy","logger","_promise","reject","destination","type","MeetingInfoUtil","generateOptions","_PERSONAL_ROOM_","internal","device","userId","fetchInfoOptions","extractDestination","_this2","requestFetchInfo","_MEETING_LINK_","convertLinkToSip","_SIP_URI_"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  _MEETING_LINK_,\n  _SIP_URI_,\n  _PERSONAL_ROOM_\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport MeetingInfoCollection from './collection';\nimport MeetingInfoRequest from './request';\nimport MeetingInfoUtil from './util';\n\n/**\n * @class MeetingInfo\n */\nexport default class MeetingInfo {\n  /**\n   *\n   * @param {WebexSDK} webex\n   */\n  constructor(webex) {\n    this.webex = webex;\n\n    /**\n     * The meeting info request server interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoRequest = new MeetingInfoRequest(this.webex);\n    /**\n     * The meeting information collection interface\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof MeetingInfo\n    */\n    this.meetingInfoCollection = new MeetingInfoCollection();\n  }\n\n  /**\n   * @param {string} id\n   * @returns {object}\n   * @public\n   * @memberof MeetingInfo\n   */\n  getMeetingInfo(id) {\n    return this.meetingInfoCollection.get(id);\n  }\n\n  /**\n   * @param {string} id\n   * @param {object} info\n   * @returns {null}\n   * @public\n   * @memberof MeetingInfo\n   */\n  setMeetingInfo(id, info) {\n    this.meetingInfoCollection.set(id, info);\n  }\n\n  /**\n   * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject\n   * @param {Object} options\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  requestFetchInfo(options) {\n    return this.meetingInfoRequest.fetchMeetingInfo(options).then((info) => {\n      if (info && info.body) {\n        this.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);\n      }\n\n      return info;\n    }).catch((error) => {\n      LoggerProxy.logger.error(`Meeting-info:index#requestFetchInfo -->  ${error} fetch meetingInfo`);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Helper to generate the options for the MeetingInfo request\n   * @param {String} destination\n   * @param {String} type\n   * @returns {Promise}\n   * @private\n   * @memberof MeetingInfo\n   */\n  fetchInfoOptions(destination, type) {\n    return MeetingInfoUtil.generateOptions({\n      destination,\n      type,\n      webex: this.webex\n    });\n  }\n\n  /**\n   * Fetches meeting info from the server\n   * @param {String} destination one of many different types of destinations to look up info for\n   * @param {String} [type] to match up with the destination value\n   * @returns {Promise} returns a meeting info object\n   * @public\n   * @memberof MeetingInfo\n   */\n  fetchMeetingInfo(destination, type = null) {\n    if (type === _PERSONAL_ROOM_ && !destination) {\n      destination = this.webex.internal.device.userId;\n    }\n\n    return this.fetchInfoOptions(\n      MeetingInfoUtil.extractDestination(destination, type),\n      type\n    ).then((options) =>\n    // fetch meeting info\n      this.requestFetchInfo(options).catch((error) => {\n      // if it failed the first time as meeting link\n        if (options.type === _MEETING_LINK_) {\n        // convert the meeting link to sip URI and retry\n          return this.requestFetchInfo(this.fetchInfoOptions(MeetingInfoUtil.convertLinkToSip(destination), _SIP_URI_));\n        }\n\n        return Promise.reject(error);\n      }));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\nimport ResponseData from \"./ResponseData.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Certificate from \"./Certificate.js\";\nimport CertID from \"./CertID.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar BasicOCSPResponse = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for BasicOCSPResponse class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function BasicOCSPResponse() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BasicOCSPResponse);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ResponseData}\r\n     * @desc tbsResponseData\r\n     */\n    this.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc signatureAlgorithm\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc signature\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\n    if (\"certs\" in parameters)\n      /**\r\n       * @type {Array.<Certificate>}\r\n       * @desc certs\r\n       */\n      this.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(BasicOCSPResponse, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"BasicOCSPResponse.tbsResponseData\", \"BasicOCSPResponse.signatureAlgorithm\", \"BasicOCSPResponse.signature\", \"BasicOCSPResponse.certs\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, BasicOCSPResponse.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.tbsResponseData = new ResponseData({\n        schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"]\n      });\n      this.signatureAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"]\n      });\n      this.signature = asn1.result[\"BasicOCSPResponse.signature\"];\n      if (\"BasicOCSPResponse.certs\" in asn1.result) this.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], function (element) {\n        return new Certificate({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      outputArray.push(this.tbsResponseData.toSchema());\n      outputArray.push(this.signatureAlgorithm.toSchema());\n      outputArray.push(this.signature); //region Create array of certificates\n\n      if (\"certs\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Sequence({\n            value: Array.from(this.certs, function (element) {\n              return element.toSchema();\n            })\n          })]\n        }));\n      } //endregion\n      //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        tbsResponseData: this.tbsResponseData.toJSON(),\n        signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n        signature: this.signature.toJSON()\n      };\n      if (\"certs\" in this) _object.certs = Array.from(this.certs, function (element) {\n        return element.toJSON();\n      });\n      return _object;\n    } //**********************************************************************************\n\n    /**\r\n     * Get OCSP response status for specific certificate\r\n     * @param {Certificate} certificate Certificate to be checked\r\n     * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"getCertificateStatus\",\n    value: function getCertificateStatus(certificate, issuerCertificate) {\n      var _this2 = this;\n\n      //region Initial variables\n      var sequence = Promise.resolve();\n      var result = {\n        isForCertificate: false,\n        status: 2 // 0 = good, 1 = revoked, 2 = unknown\n\n      };\n      var hashesObject = {};\n      var certIDs = [];\n      var certIDPromises = []; //endregion\n      //region Create all \"certIDs\" for input certificates\n\n      var _iterator = _createForOfIteratorHelper(this.tbsResponseData.responses),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var response = _step.value;\n          var hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\n          if (\"name\" in hashAlgorithm === false) return Promise.reject(\"Wrong CertID hashing algorithm: \".concat(response.certID.hashAlgorithm.algorithmId));\n\n          if (hashAlgorithm.name in hashesObject === false) {\n            hashesObject[hashAlgorithm.name] = 1;\n            var certID = new CertID();\n            certIDs.push(certID);\n            certIDPromises.push(certID.createForCertificate(certificate, {\n              hashAlgorithm: hashAlgorithm.name,\n              issuerCertificate: issuerCertificate\n            }));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      sequence = sequence.then(function () {\n        return Promise.all(certIDPromises);\n      }); //endregion\n      //region Compare all response's \"certIDs\" with identifiers for input certificate\n\n      sequence = sequence.then(function () {\n        var _iterator2 = _createForOfIteratorHelper(_this2.tbsResponseData.responses),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var response = _step2.value;\n\n            var _iterator3 = _createForOfIteratorHelper(certIDs),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var id = _step3.value;\n\n                if (response.certID.isEqual(id)) {\n                  result.isForCertificate = true;\n\n                  try {\n                    switch (response.certStatus.idBlock.isConstructed) {\n                      case true:\n                        if (response.certStatus.idBlock.tagNumber === 1) result.status = 1; // revoked\n\n                        break;\n\n                      case false:\n                        switch (response.certStatus.idBlock.tagNumber) {\n                          case 0:\n                            // good\n                            result.status = 0;\n                            break;\n\n                          case 2:\n                            // unknown\n                            result.status = 2;\n                            break;\n\n                          default:\n                        }\n\n                        break;\n\n                      default:\n                    }\n                  } catch (ex) {}\n\n                  return result;\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return result;\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Make signature for current OCSP Basic Response\r\n     * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n     * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey) {\n      var _this3 = this;\n\n      var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"SHA-1\";\n      //region Initial checking\n      //region Get a private key from function parameter\n      if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n      //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve();\n      var parameters;\n      var engine = getEngine(); //endregion\n      //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n      sequence = sequence.then(function () {\n        return engine.subtle.getSignatureParameters(privateKey, hashAlgorithm);\n      });\n      sequence = sequence.then(function (result) {\n        parameters = result.parameters;\n        _this3.signatureAlgorithm = result.signatureAlgorithm;\n      }); //endregion\n      //region Create TBS data for signing\n\n      sequence = sequence.then(function () {\n        _this3.tbsResponseData.tbs = _this3.tbsResponseData.toSchema(true).toBER(false);\n      }); //endregion\n      //region Signing TBS data on provided private key\n\n      sequence = sequence.then(function () {\n        return engine.subtle.signWithPrivateKey(_this3.tbsResponseData.tbs, privateKey, parameters);\n      });\n      sequence = sequence.then(function (result) {\n        _this3.signature = new asn1js.BitString({\n          valueHex: result\n        });\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n    /**\r\n     * Verify existing OCSP Basic Response\r\n     * @param {Object} parameters Additional parameters\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var _this4 = this;\n\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //region Initial variables\n      var signerCert = null;\n      var certIndex = -1;\n      var sequence = Promise.resolve();\n      var trustedCerts = [];\n\n      var _this = this;\n\n      var engine = getEngine(); //endregion\n      //region Check amount of certificates\n\n      if (\"certs\" in this === false) return Promise.reject(\"No certificates attached to the BasicOCSPResponce\"); //endregion\n      //region Get input values\n\n      if (\"trustedCerts\" in parameters) trustedCerts = parameters.trustedCerts; //endregion\n      //region Aux functions\n\n      /**\r\n       * Check CA flag for the certificate\r\n       * @param {Certificate} cert Certificate to find CA flag for\r\n       * @returns {*}\r\n       */\n\n      function checkCA(cert) {\n        //region Do not include signer's certificate\n        if (cert.issuer.isEqual(signerCert.issuer) === true && cert.serialNumber.isEqual(signerCert.serialNumber) === true) return null; //endregion\n\n        var isCA = false;\n\n        var _iterator4 = _createForOfIteratorHelper(cert.extensions),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var extension = _step4.value;\n\n            if (extension.extnID === \"2.5.29.19\") // BasicConstraints\n              {\n                if (\"cA\" in extension.parsedValue) {\n                  if (extension.parsedValue.cA === true) isCA = true;\n                }\n              }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        if (isCA) return cert;\n        return null;\n      } //endregion\n      //region Get a \"crypto\" extension\n\n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n      //region Find correct value for \"responderID\"\n\n      switch (true) {\n        case this.tbsResponseData.responderID instanceof RelativeDistinguishedNames:\n          // [1] Name\n          sequence = sequence.then(function () {\n            var _iterator5 = _createForOfIteratorHelper(_this.certs.entries()),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _step5$value = _slicedToArray(_step5.value, 2),\n                    index = _step5$value[0],\n                    certificate = _step5$value[1];\n\n                if (certificate.subject.isEqual(_this.tbsResponseData.responderID)) {\n                  certIndex = index;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          });\n          break;\n\n        case this.tbsResponseData.responderID instanceof asn1js.OctetString:\n          // [2] KeyHash\n          sequence = sequence.then(function () {\n            return Promise.all(Array.from(_this.certs, function (element) {\n              return crypto.digest({\n                name: \"sha-1\"\n              }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\n            })).then(function (results) {\n              var _iterator6 = _createForOfIteratorHelper(_this.certs.entries()),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var _step6$value = _slicedToArray(_step6.value, 1),\n                      index = _step6$value[0];\n\n                  if (isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex)) {\n                    certIndex = index;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            });\n          });\n          break;\n\n        default:\n          return Promise.reject(\"Wrong value for responderID\");\n      } //endregion\n      //region Make additional verification for signer's certificate\n\n\n      sequence = sequence.then(function () {\n        if (certIndex === -1) return Promise.reject(\"Correct certificate was not found in OCSP response\");\n        signerCert = _this4.certs[certIndex];\n        return Promise.all(Array.from(_this.certs, function (element) {\n          return checkCA(element);\n        })).then(function (promiseResults) {\n          var additionalCerts = [];\n          additionalCerts.push(signerCert);\n\n          var _iterator7 = _createForOfIteratorHelper(promiseResults),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var promiseResult = _step7.value;\n              if (promiseResult !== null) additionalCerts.push(promiseResult);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          var certChain = new CertificateChainValidationEngine({\n            certs: additionalCerts,\n            trustedCerts: trustedCerts\n          });\n          return certChain.verify().then(function (verificationResult) {\n            if (verificationResult.result === true) return Promise.resolve();\n            return Promise.reject(\"Validation of signer's certificate failed\");\n          }, function (error) {\n            return Promise.reject(\"Validation of signer's certificate failed with error: \".concat(error instanceof Object ? error.resultMessage : error));\n          });\n        }, function (promiseError) {\n          return Promise.reject(\"Error during checking certificates for CA flag: \".concat(promiseError));\n        });\n      }); //endregion\n\n      sequence = sequence.then(function () {\n        return engine.subtle.verifyWithPublicKey(_this4.tbsResponseData.tbs, _this4.signature, _this4.certs[certIndex].subjectPublicKeyInfo, _this4.signatureAlgorithm);\n      });\n      return sequence;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"tbsResponseData\":\n          return new ResponseData();\n\n        case \"signatureAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signature\":\n          return new asn1js.BitString();\n\n        case \"certs\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for BasicOCSPResponse class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"type\":\n          {\n            // noinspection OverlyComplexBooleanExpressionJS\n            var comparisonResult = ResponseData.compareWithDefault(\"tbs\", memberValue.tbs) && ResponseData.compareWithDefault(\"responderID\", memberValue.responderID) && ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt) && ResponseData.compareWithDefault(\"responses\", memberValue.responses);\n            if (\"responseExtensions\" in memberValue) comparisonResult = comparisonResult && ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions);\n            return comparisonResult;\n          }\n\n        case \"signatureAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"signature\":\n          return memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName));\n\n        case \"certs\":\n          return memberValue.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for BasicOCSPResponse class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * BasicOCSPResponse       ::= SEQUENCE {\r\n     *    tbsResponseData      ResponseData,\r\n     *    signatureAlgorithm   AlgorithmIdentifier,\r\n     *    signature            BIT STRING,\r\n     *    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [tbsResponseData]\r\n       * @property {string} [signatureAlgorithm]\r\n       * @property {string} [signature]\r\n       * @property {string} [certs]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"BasicOCSPResponse\",\n        value: [ResponseData.schema(names.tbsResponseData || {\n          names: {\n            blockName: \"BasicOCSPResponse.tbsResponseData\"\n          }\n        }), AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n          names: {\n            blockName: \"BasicOCSPResponse.signatureAlgorithm\"\n          }\n        }), new asn1js.BitString({\n          name: names.signature || \"BasicOCSPResponse.signature\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Sequence({\n            value: [new asn1js.Repeated({\n              name: \"BasicOCSPResponse.certs\",\n              value: Certificate.schema(names.certs || {})\n            })]\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return BasicOCSPResponse;\n}(); //**************************************************************************************\n\n\nexport { BasicOCSPResponse as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/BasicOCSPResponse.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","getAlgorithmByOID","getCrypto","getEngine","ResponseData","AlgorithmIdentifier","Certificate","CertID","RelativeDistinguishedNames","CertificateChainValidationEngine","BasicOCSPResponse","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","asn1","compareSchema","verified","Error","result","Array","from","element","outputArray","push","toSchema","Constructed","idBlock","tagClass","tagNumber","value","Sequence","_object","toJSON","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","responses","response","hashAlgorithm","certID","algorithmId","reject","name","createForCertificate","then","all","id","isEqual","certStatus","isConstructed","ex","privateKey","engine","subtle","getSignatureParameters","tbs","toBER","signWithPrivateKey","BitString","valueHex","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","responderID","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","promiseResults","additionalCerts","promiseResult","certChain","verify","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey","memberName","memberValue","comparisonResult","compareWithDefault","producedAt","responseExtensions","length","names","blockName","optional","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @desc tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicOCSPResponse       ::= SEQUENCE {\r\n\t *    tbsResponseData      ResponseData,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signature            BIT STRING,\r\n\t *    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"BasicOCSPResponse.tbsResponseData\",\r\n\t\t\t\"BasicOCSPResponse.signatureAlgorithm\",\r\n\t\t\t\"BasicOCSPResponse.signature\",\r\n\t\t\t\"BasicOCSPResponse.certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t{\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
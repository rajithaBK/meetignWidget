{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BufferTokenizer = void 0;\n\nconst peek_readable_1 = require(\"peek-readable\");\n\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\n\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\n  /**\r\n   * Construct BufferTokenizer\r\n   * @param uint8Array - Uint8Array to tokenize\r\n   * @param fileInfo - Pass additional file information to the tokenizer\r\n   */\n  constructor(uint8Array, fileInfo) {\n    super(fileInfo);\n    this.uint8Array = uint8Array;\n    this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\n  }\n  /**\r\n   * Read buffer from tokenizer\r\n   * @param uint8Array - Uint8Array to tokenize\r\n   * @param options - Read behaviour options\r\n   * @returns {Promise<number>}\r\n   */\n\n\n  async readBuffer(uint8Array, options) {\n    if (options && options.position) {\n      if (options.position < this.position) {\n        throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n      }\n\n      this.position = options.position;\n    }\n\n    const bytesRead = await this.peekBuffer(uint8Array, options);\n    this.position += bytesRead;\n    return bytesRead;\n  }\n  /**\r\n   * Peek (read ahead) buffer from tokenizer\r\n   * @param uint8Array\r\n   * @param options - Read behaviour options\r\n   * @returns {Promise<number>}\r\n   */\n\n\n  async peekBuffer(uint8Array, options) {\n    const normOptions = this.normalizeOptions(uint8Array, options);\n    const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\n\n    if (!normOptions.mayBeLess && bytes2read < normOptions.length) {\n      throw new peek_readable_1.EndOfStreamError();\n    } else {\n      uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\n      return bytes2read;\n    }\n  }\n\n  async close() {// empty\n  }\n\n}\n\nexports.BufferTokenizer = BufferTokenizer;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/strtok3/lib/BufferTokenizer.js"],"names":["Object","defineProperty","exports","value","BufferTokenizer","peek_readable_1","require","AbstractTokenizer_1","AbstractTokenizer","constructor","uint8Array","fileInfo","size","length","readBuffer","options","position","Error","bytesRead","peekBuffer","normOptions","normalizeOptions","bytes2read","Math","min","mayBeLess","EndOfStreamError","set","subarray","offset","close"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,eAAD,CAA/B;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,qBAAD,CAAnC;;AACA,MAAMF,eAAN,SAA8BG,mBAAmB,CAACC,iBAAlD,CAAoE;AAChE;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuB;AAC9B,UAAMA,QAAN;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,CAAcC,IAAd,GAAqB,KAAKD,QAAL,CAAcC,IAAd,GAAqB,KAAKD,QAAL,CAAcC,IAAnC,GAA0CF,UAAU,CAACG,MAA1E;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACoB,QAAVC,UAAU,CAACJ,UAAD,EAAaK,OAAb,EAAsB;AAClC,QAAIA,OAAO,IAAIA,OAAO,CAACC,QAAvB,EAAiC;AAC7B,UAAID,OAAO,CAACC,QAAR,GAAmB,KAAKA,QAA5B,EAAsC;AAClC,cAAM,IAAIC,KAAJ,CAAU,uEAAV,CAAN;AACH;;AACD,WAAKD,QAAL,GAAgBD,OAAO,CAACC,QAAxB;AACH;;AACD,UAAME,SAAS,GAAG,MAAM,KAAKC,UAAL,CAAgBT,UAAhB,EAA4BK,OAA5B,CAAxB;AACA,SAAKC,QAAL,IAAiBE,SAAjB;AACA,WAAOA,SAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACoB,QAAVC,UAAU,CAACT,UAAD,EAAaK,OAAb,EAAsB;AAClC,UAAMK,WAAW,GAAG,KAAKC,gBAAL,CAAsBX,UAAtB,EAAkCK,OAAlC,CAApB;AACA,UAAMO,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKd,UAAL,CAAgBG,MAAhB,GAAyBO,WAAW,CAACJ,QAA9C,EAAwDI,WAAW,CAACP,MAApE,CAAnB;;AACA,QAAK,CAACO,WAAW,CAACK,SAAd,IAA4BH,UAAU,GAAGF,WAAW,CAACP,MAAzD,EAAiE;AAC7D,YAAM,IAAIR,eAAe,CAACqB,gBAApB,EAAN;AACH,KAFD,MAGK;AACDhB,MAAAA,UAAU,CAACiB,GAAX,CAAe,KAAKjB,UAAL,CAAgBkB,QAAhB,CAAyBR,WAAW,CAACJ,QAArC,EAA+CI,WAAW,CAACJ,QAAZ,GAAuBM,UAAtE,CAAf,EAAkGF,WAAW,CAACS,MAA9G;AACA,aAAOP,UAAP;AACH;AACJ;;AACU,QAALQ,KAAK,GAAG,CACV;AACH;;AA/C+D;;AAiDpE5B,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BufferTokenizer = void 0;\r\nconst peek_readable_1 = require(\"peek-readable\");\r\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\r\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\r\n    /**\r\n     * Construct BufferTokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param fileInfo - Pass additional file information to the tokenizer\r\n     */\r\n    constructor(uint8Array, fileInfo) {\r\n        super(fileInfo);\r\n        this.uint8Array = uint8Array;\r\n        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        if (options && options.position) {\r\n            if (options.position < this.position) {\r\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n            }\r\n            this.position = options.position;\r\n        }\r\n        const bytesRead = await this.peekBuffer(uint8Array, options);\r\n        this.position += bytesRead;\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\r\n        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        else {\r\n            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\r\n            return bytes2read;\r\n        }\r\n    }\r\n    async close() {\r\n        // empty\r\n    }\r\n}\r\nexports.BufferTokenizer = BufferTokenizer;\r\n"]},"metadata":{},"sourceType":"script"}
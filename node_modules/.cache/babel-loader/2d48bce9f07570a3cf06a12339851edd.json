{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC6960\r\n */\n\nvar CertID = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertID class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function CertID() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CertID);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc hashAlgorithm\r\n     */\n    this.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc issuerNameHash\r\n     */\n\n    this.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\n    /**\r\n     * @type {OctetString}\r\n     * @desc issuerKeyHash\r\n     */\n\n    this.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc serialNumber\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(CertID, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"hashAlgorithm\", \"issuerNameHash\", \"issuerKeyHash\", \"serialNumber\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, CertID.schema({\n        names: {\n          hashAlgorithm: \"hashAlgorithm\",\n          issuerNameHash: \"issuerNameHash\",\n          issuerKeyHash: \"issuerKeyHash\",\n          serialNumber: \"serialNumber\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertID\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.hashAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.hashAlgorithm\n      });\n      this.issuerNameHash = asn1.result.issuerNameHash;\n      this.issuerKeyHash = asn1.result.issuerKeyHash;\n      this.serialNumber = asn1.result.serialNumber; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.hashAlgorithm.toSchema(), this.issuerNameHash, this.issuerKeyHash, this.serialNumber]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        hashAlgorithm: this.hashAlgorithm.toJSON(),\n        issuerNameHash: this.issuerNameHash.toJSON(),\n        issuerKeyHash: this.issuerKeyHash.toJSON(),\n        serialNumber: this.serialNumber.toJSON()\n      };\n    } //**********************************************************************************\n\n    /**\r\n     * Check that two \"CertIDs\" are equal\r\n     * @param {CertID} certificateID Identifier of the certificate to be checked\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(certificateID) {\n      //region Check \"hashAlgorithm\"\n      if (!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId) return false; //endregion\n      //region Check \"issuerNameHash\"\n\n      if (isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false) return false; //endregion\n      //region Check \"issuerKeyHash\"\n\n      if (isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false) return false; //endregion\n      //region Check \"serialNumber\"\n\n      if (!this.serialNumber.isEqual(certificateID.serialNumber)) return false; //endregion\n\n      return true;\n    } //**********************************************************************************\n\n    /**\r\n     * Making OCSP certificate identifier for specific certificate\r\n     * @param {Certificate} certificate Certificate making OCSP Request for\r\n     * @param {Object} parameters Additional parameters\r\n     * @returns {Promise}\r\n     */\n\n  }, {\n    key: \"createForCertificate\",\n    value: function createForCertificate(certificate, parameters) {\n      var _this = this;\n\n      //region Initial variables\n      var sequence = Promise.resolve();\n      var issuerCertificate; //endregion\n      //region Get a \"crypto\" extension\n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n      //region Check input parameters\n\n      if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\n      var hashOID = getOIDByAlgorithm({\n        name: parameters.hashAlgorithm\n      });\n      if (hashOID === \"\") return Promise.reject(\"Incorrect \\\"hashAlgorithm\\\": \".concat(this.hashAlgorithm));\n      this.hashAlgorithm = new AlgorithmIdentifier({\n        algorithmId: hashOID,\n        algorithmParams: new asn1js.Null()\n      });\n      if (\"issuerCertificate\" in parameters) issuerCertificate = parameters.issuerCertificate;else return Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\"); //endregion\n      //region Initialize \"serialNumber\" field\n\n      this.serialNumber = certificate.serialNumber; //endregion\n      //region Create \"issuerNameHash\"\n\n      sequence = sequence.then(function () {\n        return crypto.digest({\n          name: parameters.hashAlgorithm\n        }, issuerCertificate.subject.toSchema().toBER(false));\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n      //region Create \"issuerKeyHash\"\n\n      sequence = sequence.then(function (result) {\n        _this.issuerNameHash = new asn1js.OctetString({\n          valueHex: result\n        });\n        var issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\n        return crypto.digest({\n          name: parameters.hashAlgorithm\n        }, issuerKeyBuffer);\n      }, function (error) {\n        return Promise.reject(error);\n      }).then(function (result) {\n        _this.issuerKeyHash = new asn1js.OctetString({\n          valueHex: result\n        });\n      }, function (error) {\n        return Promise.reject(error);\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"hashAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"issuerNameHash\":\n        case \"issuerKeyHash\":\n          return new asn1js.OctetString();\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        default:\n          throw new Error(\"Invalid member name for CertID class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"hashAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"issuerNameHash\":\n        case \"issuerKeyHash\":\n        case \"serialNumber\":\n          return memberValue.isEqual(CertID.defaultValues(memberName));\n\n        default:\n          throw new Error(\"Invalid member name for CertID class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * CertID          ::=     SEQUENCE {\r\n     *    hashAlgorithm       AlgorithmIdentifier,\r\n     *    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n     *    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n     *    serialNumber        CertificateSerialNumber }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [hashAlgorithm]\r\n       * @property {string} [hashAlgorithmObject]\r\n       * @property {string} [issuerNameHash]\r\n       * @property {string} [issuerKeyHash]\r\n       * @property {string} [serialNumber]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\n          names: {\n            blockName: names.hashAlgorithm || \"\"\n          }\n        }), new asn1js.OctetString({\n          name: names.issuerNameHash || \"\"\n        }), new asn1js.OctetString({\n          name: names.issuerKeyHash || \"\"\n        }), new asn1js.Integer({\n          name: names.serialNumber || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return CertID;\n}(); //**************************************************************************************\n\n\nexport { CertID as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertID.js"],"names":["asn1js","getParametersValue","isEqualBuffer","clearProps","getCrypto","getOIDByAlgorithm","AlgorithmIdentifier","CertID","parameters","hashAlgorithm","defaultValues","issuerNameHash","issuerKeyHash","serialNumber","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","Sequence","value","toSchema","toJSON","certificateID","algorithmId","valueBlock","valueHex","isEqual","certificate","sequence","Promise","resolve","issuerCertificate","crypto","reject","hashOID","name","algorithmParams","Null","then","digest","subject","toBER","error","OctetString","issuerKeyBuffer","subjectPublicKeyInfo","subjectPublicKey","memberName","Integer","memberValue","blockName","hashAlgorithmObject"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class CertID \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertID          ::=     SEQUENCE {\r\n\t *    hashAlgorithm       AlgorithmIdentifier,\r\n\t *    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t *    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t *    serialNumber        CertificateSerialNumber }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"issuerNameHash\",\r\n\t\t\t\"issuerKeyHash\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \"hashAlgorithm\": ${this.hashAlgorithm}`);\r\n\t\t\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
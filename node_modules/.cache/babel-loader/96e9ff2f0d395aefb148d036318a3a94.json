{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.transforms = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/array/is-array\"));\n\nvar _isInteger = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/number/is-integer\"));\n\nvar _curry2 = _interopRequireDefault(require(\"lodash/curry\"));\n\nvar _capitalize2 = _interopRequireDefault(require(\"lodash/capitalize\"));\n\nvar _camelCase2 = _interopRequireDefault(require(\"lodash/camelCase\"));\n\nvar _toArray = _interopRequireDefault(require(\"./to-array\"));\n\nvar decryptTextProp = (0, _curry2.default)(function (name, ctx, key, object) {\n  return ctx.transform('decryptTextProp', name, key, object);\n}); // eslint-disable-next-line import/prefer-default-export\n\nvar transforms = (0, _toArray.default)('inbound', {\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject: function decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return _promise.default.resolve();\n    }\n\n    if (!object.objectType) {\n      return _promise.default.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    } // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n\n\n    if (object.objectType === 'transcodedContent') {\n      return _promise.default.all(object.files.items.map(function (item) {\n        return ctx.transform('decryptFile', key, item);\n      }));\n    }\n\n    return ctx.transform(\"decrypt\".concat((0, _capitalize2.default)(object.objectType)), key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit: function decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return _promise.default.resolve();\n    }\n\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs]).then(function (inputs) {\n      object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n    }).catch(function (reason) {\n      ctx.webex.logger.warn(\"plugin-conversation: failed to decrypt attachmentAction.inputs: \".concat(reason));\n      object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n      return _promise.default.resolve(decryptionFailureMessage);\n    });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary: function decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return _promise.default.resolve();\n    }\n\n    return _promise.default.all(object.reactions.map(function (reaction) {\n      return ctx.transform('decryptPropDisplayName', key, reaction);\n    }));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary: function decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return _promise.default.resolve();\n    }\n\n    return _promise.default.all(object.reactions.map(function (reaction) {\n      return ctx.transform('decryptPropDisplayName', key, reaction);\n    }));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2: function decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n  * Decrypt an individual threadObject\n  * @param   {Object} ctx      An object containg a webex instance and a transform\n  * @param   {Object} threadObject An instance of a Webex threadObject (the objects returned by the /conversation/api/v1/threads api)\n  * @returns {Promise}         Returns a ctx.transform promise\n  */\n  decryptThread: function decryptThread(ctx, threadObject) {\n    var promises = [];\n\n    if (threadObject.childActivities && (0, _isArray.default)(threadObject.childActivities)) {\n      promises = threadObject.childActivities.map(function (child) {\n        return ctx.transform('decryptObject', null, child);\n      });\n    }\n\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation: function decryptConversation(ctx, key, conversation) {\n    var promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(_promise.default.all(conversation.activities.items.map(function (item) {\n        return ctx.transform('decryptObject', null, item);\n      })));\n    }\n\n    var usableKey = conversation.encryptionKeyUrl || key;\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation).catch(function (error) {\n        ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n\n        _promise.default.resolve(decryptionFailureMessage);\n      }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    } // TODO (holsted 04/06/19): This was deprecated in favor of .previousValue below. I wanted to remove this entirely\n    // but I wasn't sure if some open source use cases may be reading from cached conversations or not so leaving it for now.\n\n\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n\n    if (conversation.previousValue) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previousValue));\n    }\n\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity: function decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return _promise.default.resolve(activity);\n    }\n\n    var keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n    var promises = []; // iterate and recursively decrypt over children objects\n\n    if (activity.children && (0, _isArray.default)(activity.children)) {\n      promises = activity.children.map(function (child) {\n        return ctx.transform('decryptObject', keyUrl, child.activity);\n      });\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance: function decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n  * Decrypts a comment...\n  * @param {Object} ctx An object containing a webex instance and transform prop\n  * @param {String} key KMS key\n  * @param {Object} comment A comment object with a displayName and content (encrypted)\n  * @returns {Promise} Returns the results of Promise.all on two transforms\n  */\n  decryptComment: function decryptComment(ctx, key, comment) {\n    var promises = [ctx.transform('decryptPropDisplayName', key, comment), ctx.transform('decryptPropContent', key, comment)];\n\n    if (comment.cards && (0, _isArray.default)(comment.cards)) {\n      comment.cards.map(function (item, index) {\n        return promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards));\n      });\n    }\n\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent: function decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles: function decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !(0, _isArray.default)(content.files.items)) {\n      return _promise.default.resolve();\n    }\n\n    var promises = content.files.items.map(function (item) {\n      return ctx.transform('decryptObject', key, item);\n    });\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && (0, _isArray.default)(content.links.items)) {\n      content.links.items.forEach(function (item) {\n        return promises.push(ctx.transform('decryptObject', key, item));\n      });\n    }\n\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks: function decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !(0, _isArray.default)(content.links.items)) {\n      return _promise.default.resolve();\n    }\n\n    var promises = content.links.items.map(function (item) {\n      return ctx.transform('decryptObject', key, item);\n    });\n    promises.push(ctx.transform('decryptComment', key, content));\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent: function decryptEvent(ctx, key, event) {\n    var promises = [ctx.transform('decryptPropDisplayName', key, event)];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return _promise.default.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile: function decryptFile(ctx, key, file) {\n    // using object encryption keyUrl for images instead of activity encryptionKeyUrl\n    if (file.encryptionKeyUrl && file.encryptionKeyUrl !== key) {\n      key = file.encryptionKeyUrl;\n    }\n\n    return _promise.default.all([file.transcodedCollection && _promise.default.all(file.transcodedCollection.items.map(function (item) {\n      return ctx.transform('decryptObject', key, item);\n    })), ctx.transform('decryptPropScr', key, file), ctx.transform('decryptPropDisplayName', key, file), ctx.transform('decryptPropContent', key, file), file.image && ctx.transform('decryptPropScr', key, file.image)]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink: function decryptLink(ctx, key, link) {\n    return _promise.default.all([ctx.transform('decryptPropSslr', key, link), ctx.transform('decryptPropDisplayName', key, link)]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent: function decryptTranscodedContent(ctx, key, transcodedContent) {\n    return _promise.default.all(transcodedContent.files.items.map(function (item) {\n      return ctx.transform('decryptFile', key, item);\n    }));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI: function decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp: function decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return _promise.default.resolve();\n    }\n\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n    return ctx.webex.internal.encryption.decryptText(key, object[name]).then(function (plaintext) {\n      if (ctx.webex.config.conversation.keepEncryptedProperties) {\n        var encryptedPropName = (0, _camelCase2.default)(\"encrypted_\".concat(name));\n        object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n      }\n\n      object[name] = plaintext; // eslint-disable-line no-param-reassign\n    }).catch(function (reason) {\n      ctx.webex.logger.warn(\"plugin-conversation: failed to decrypt \".concat(name, \" \"), reason);\n      object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n      return _promise.default.resolve(decryptionFailureMessage);\n    });\n  },\n\n  /**\n  * Decrypting an element in an Array.\n  * @param {Object} ctx An object containing a webex instance and transform prop\n  * @param {Integer} index Property of an object to be decrypted\n  * @param {String} key KMS key\n  * @param {Array} array An array of Strings to be decrypted\n  * @returns {Promise} Returns a lonely Promise\n  */\n  decryptPropCardItem: function decryptPropCardItem(ctx, index, key, array) {\n    if (!(0, _isInteger.default)(index) || !array || !(0, _isArray.default)(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return _promise.default.resolve();\n    }\n\n    var decryptionFailureMessage = ctx.webex.internal.conversation.config.decryptionFailureMessage;\n    return ctx.webex.internal.encryption.decryptText(key, array[index]).then(function (plaintext) {\n      array[index] = plaintext; // eslint-disable-line no-param-reassign\n    }).catch(function (reason) {\n      ctx.webex.logger.warn(\"plugin-conversation: failed to decrypt card at \".concat(index, \" \"), reason);\n      array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n      return _promise.default.resolve(decryptionFailureMessage);\n    });\n  },\n\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr: function decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr).then(function (scr) {\n      object.scr = scr; // eslint-disable-line no-param-reassign\n    });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr: function decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr).then(function (sslr) {\n      object.sslr = sslr; // eslint-disable-line no-param-reassign\n    });\n  },\n  decryptPropDisplayName: decryptTextProp('displayName'),\n  decryptPropContent: decryptTextProp('content'),\n  decryptPropModel: decryptTextProp('model'),\n  decryptPropLocation: decryptTextProp('location')\n});\nexports.transforms = transforms;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AAEA,IAAMA,eAAe,GAAG,qBAAM,UAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,EAAiBC,MAAjB;AAAA,SAA4BF,GAAG,CAACG,SAAJH,CAAc,iBAAdA,EAAiCD,IAAjCC,EAAuCC,GAAvCD,EAA4CE,MAA5CF,CAA5B;AAAN,EAAxB,C,CAEA;;AACO,IAAMI,UAAU,GAAG,sBAAQ,SAAR,EAAmB;AAE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,eAT2C,yBAS7BL,GAT6B,EASxBC,GATwB,EASnBC,MATmB,EASX;AAC9B,QAAI,CAACA,MAAL,EAAa;AACXA,YAAM,GAAGD,GAATC,CADW,CACG;;AACdD,SAAG,GAAGK,SAANL,CAFW,CAEM;AAClB;;AAED,QAAI,CAACC,MAAL,EAAa;AACX,aAAOK,iBAAQC,OAAR,EAAP;AACD;;AAED,QAAI,CAACN,MAAM,CAACO,UAAZ,EAAwB;AACtB,aAAOF,iBAAQC,OAAR,EAAP;AACD;;AAED,QAAI,CAACP,GAAD,IAAQC,MAAM,CAACQ,gBAAnB,EAAqC;AACnCT,SAAG,GAAGC,MAAM,CAACQ,gBAAbT,CADmC,CACJ;AAfH,MAkB9B;AACA;AACA;;;AACA,QAAIC,MAAM,CAACO,UAAPP,KAAsB,mBAA1B,EAA+C;AAC7C,aAAOK,iBAAQI,GAAR,CAAYT,MAAM,CAACU,KAAPV,CAAaW,KAAbX,CAAmBY,GAAnBZ,CAAuB,UAACa,IAAD;AAAA,eAAUf,GAAG,CAACG,SAAJH,CAAc,aAAdA,EAA6BC,GAA7BD,EAAkCe,IAAlCf,CAAV;AAAvB,QAAZ,CAAP;AACD;;AAED,WAAOA,GAAG,CAACG,SAAJH,kBAAwB,0BAAWE,MAAM,CAACO,UAAlB,CAAxB,GAAyDR,GAAzDD,EAA8DE,MAA9DF,CAAP;AAlCyC;;AAqC3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEgB,eA9C2C,yBA8C7BhB,GA9C6B,EA8CxBC,GA9CwB,EA8CnBC,MA9CmB,EA8CX;AAC9B,QAAI,CAACA,MAAM,CAACe,MAAZ,EAAoB;AAClB,aAAOV,iBAAQC,OAAR,EAAP;AACD;;AACD,QAAOU,wBAAP,GAAmClB,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBqB,YAAnBrB,CAAgCsB,MAAhCtB,CAA5BkB,wBAAP;AAEA,WAAOlB,GAAG,CAACG,SAAJH,CAAc,qBAAdA,EAAqC,CAArCA,EAAwCC,GAAxCD,EAA6C,CAACE,MAAM,CAACe,MAAR,CAA7CjB,EACJuB,IADIvB,CACC,UAACiB,MAAD,EAAY;AAChBf,YAAM,CAACe,MAAPf,GAAgBsB,IAAI,CAACC,KAALD,CAAWP,MAAM,CAAC,CAAD,CAAjBO,CAAhBtB,CADgB,CACuB;AAFpC,OAIJwB,KAJI1B,CAIE,UAAC2B,MAAD,EAAY;AACjB3B,SAAG,CAACmB,KAAJnB,CAAU4B,MAAV5B,CAAiB6B,IAAjB7B,2EAAyF2B,MAAzF;AACAzB,YAAM,CAACe,MAAPf,GAAgBgB,wBAAhBhB,CAFiB,CAEyB;;AAE1C,aAAOK,iBAAQC,OAAR,CAAgBU,wBAAhB,CAAP;AARG,MAAP;AApDyC;;AAgE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEY,yBAzE2C,mCAyEnB9B,GAzEmB,EAyEdC,GAzEc,EAyETC,MAzES,EAyED;AACxC,QAAI,CAACA,MAAM,CAAC6B,SAAZ,EAAuB;AACrB,aAAOxB,iBAAQC,OAAR,EAAP;AACD;;AAED,WAAOD,iBAAQI,GAAR,CAAYT,MAAM,CAAC6B,SAAP7B,CAAiBY,GAAjBZ,CAAqB,UAAC8B,QAAD;AAAA,aAAchC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6CgC,QAA7ChC,CAAd;AAArB,MAAZ,CAAP;AA9EyC;;AAiF3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEiC,6BA5F2C,uCA4FfjC,GA5Fe,EA4FVC,GA5FU,EA4FLC,MA5FK,EA4FG;AAC5C,QAAI,CAACA,MAAM,CAAC6B,SAAZ,EAAuB;AACrB,aAAOxB,iBAAQC,OAAR,EAAP;AACD;;AAED,WAAOD,iBAAQI,GAAR,CAAYT,MAAM,CAAC6B,SAAP7B,CAAiBY,GAAjBZ,CAAqB,UAAC8B,QAAD;AAAA,aAAchC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6CgC,QAA7ChC,CAAd;AAArB,MAAZ,CAAP;AAjGyC;;AAoG3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEkC,kBA7G2C,4BA6G1BlC,GA7G0B,EA6GrBC,GA7GqB,EA6GhBC,MA7GgB,EA6GR;AACjC,WAAOF,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6CE,MAA7CF,CAAP;AA9GyC;;AAiH3C;AACF;AACA;AACA;AACA;AACA;AACEmC,eAvH2C,yBAuH7BnC,GAvH6B,EAuHxBoC,YAvHwB,EAuHV;AAC/B,QAAIC,QAAQ,GAAG,EAAf;;AAEA,QAAID,YAAY,CAACE,eAAbF,IAAgC,sBAAcA,YAAY,CAACE,eAA3B,CAApC,EAAiF;AAC/ED,cAAQ,GAAGD,YAAY,CAACE,eAAbF,CAA6BtB,GAA7BsB,CAAiC,UAACG,KAAD;AAAA,eAAWvC,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+B,IAA/BA,EAAqCuC,KAArCvC,CAAX;AAAjC,QAAXqC;AACD;;AAED,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AA9HyC;;AAkI3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,qBA3I2C,+BA2IvBxC,GA3IuB,EA2IlBC,GA3IkB,EA2IboB,YA3Ia,EA2IC;AAC1C,QAAMgB,QAAQ,GAAG,EAAjB;;AAEA,QAAIhB,YAAY,CAACoB,UAAbpB,CAAwBR,KAA5B,EAAmC;AACjCwB,cAAQ,CAACK,IAATL,CAAc9B,iBAAQI,GAAR,CAAYU,YAAY,CAACoB,UAAbpB,CAAwBR,KAAxBQ,CAA8BP,GAA9BO,CAAkC,UAACN,IAAD;AAAA,eAAUf,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+B,IAA/BA,EAAqCe,IAArCf,CAAV;AAAlC,QAAZ,CAAdqC;AACD;;AAED,QAAMM,SAAS,GAAGtB,YAAY,CAACX,gBAAbW,IAAiCpB,GAAnD;AACA,QAAOiB,wBAAP,GAAmClB,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBqB,YAAnBrB,CAAgCsB,MAAhCtB,CAA5BkB,wBAAP;;AAEA,QAAIyB,SAAJ,EAAe;AACbN,cAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwC2C,SAAxC3C,EAAmDqB,YAAnDrB,EACX0B,KADW1B,CACL,UAAC4C,KAAD,EAAW;AAChB5C,WAAG,CAACmB,KAAJnB,CAAU4B,MAAV5B,CAAiB6B,IAAjB7B,CAAsB,yDAAtBA,EAAiFqB,YAAY,CAACwB,GAA9F7C,EAAmG4C,KAAnG5C;;AACAO,yBAAQC,OAAR,CAAgBU,wBAAhB;AAHU,QAAdmB;AAKAA,cAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,oBAAdA,EAAoC2C,SAApC3C,EAA+CqB,YAA/CrB,CAAdqC;AACD;;AACD,QAAIhB,YAAY,CAACyB,sBAAjB,EAAyC;AACvCT,cAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BqB,YAAY,CAACyB,sBAA5C9C,EAAoEqB,YAAY,CAAC0B,MAAjF/C,CAAdqC;AAnBwC,MAqB1C;AACA;;;AACA,QAAIhB,YAAY,CAAC2B,QAAjB,EAA2B;AACzBX,cAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwC2C,SAAxC3C,EAAmDqB,YAAY,CAAC2B,QAAhEhD,CAAdqC;AACD;;AACD,QAAIhB,YAAY,CAAC4B,aAAjB,EAAgC;AAC9BZ,cAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwC2C,SAAxC3C,EAAmDqB,YAAY,CAAC4B,aAAhEjD,CAAdqC;AACD;;AAED,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AAzKyC;;AA4K3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEa,iBAnL2C,2BAmL3BlD,GAnL2B,EAmLtBC,GAnLsB,EAmLjBkD,QAnLiB,EAmLP;AAClC,QAAI,CAACA,QAAQ,CAACzC,gBAAV,IAA8B,EAAEyC,QAAQ,CAACjD,MAATiD,IAAmBA,QAAQ,CAACjD,MAATiD,CAAgBzC,gBAArC,CAAlC,EAA0F;AACxF,aAAOH,iBAAQC,OAAR,CAAgB2C,QAAhB,CAAP;AACD;;AAED,QAAMC,MAAM,GAAGD,QAAQ,CAACzC,gBAATyC,IAA6BA,QAAQ,CAACjD,MAATiD,CAAgBzC,gBAA7CyC,IAAiElD,GAAhF;AAEA,QAAIoC,QAAQ,GAAG,EAAf,CAPkC,CASlC;;AAEA,QAAIc,QAAQ,CAACE,QAATF,IAAqB,sBAAcA,QAAQ,CAACE,QAAvB,CAAzB,EAA2D;AACzDhB,cAAQ,GAAGc,QAAQ,CAACE,QAATF,CAAkBrC,GAAlBqC,CAAsB,UAACZ,KAAD;AAAA,eAAWvC,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BoD,MAA/BpD,EAAuCuC,KAAK,CAACY,QAA7CnD,CAAX;AAAtB,QAAXqC;AACD;;AAEDA,YAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BoD,MAA/BpD,EAAuCmD,QAAQ,CAACjD,MAAhDF,CAAdqC;AAEA,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AApMyC;;AAuM3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEiB,yBA/M2C,mCA+MnBtD,GA/MmB,EA+MdC,GA/Mc,EA+MTsD,gBA/MS,EA+MS;AAClD,WAAOvD,GAAG,CAACG,SAAJH,CAAc,kBAAdA,EAAkCC,GAAlCD,EAAuCuD,gBAAvCvD,CAAP;AAhNyC;;AAmN3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEwD,gBA1N2C,0BA0N5BxD,GA1N4B,EA0NvBC,GA1NuB,EA0NlBwD,OA1NkB,EA0NT;AAChC,QAAMpB,QAAQ,GAAG,CACfrC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6CyD,OAA7CzD,CADe,EAEfA,GAAG,CAACG,SAAJH,CAAc,oBAAdA,EAAoCC,GAApCD,EAAyCyD,OAAzCzD,CAFe,CAAjB;;AAKA,QAAIyD,OAAO,CAACC,KAARD,IAAiB,sBAAcA,OAAO,CAACC,KAAtB,CAArB,EAAmD;AACjDD,aAAO,CAACC,KAARD,CAAc3C,GAAd2C,CAAkB,UAAC1C,IAAD,EAAO4C,KAAP;AAAA,eAAiBtB,QAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,qBAAdA,EAAqC2D,KAArC3D,EAA4CC,GAA5CD,EAAiDyD,OAAO,CAACC,KAAzD1D,CAAdqC,CAAjB;AAAlB;AACD;;AAED,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AApOyC;;AAuO3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEuB,gBA9O2C,0BA8O5B5D,GA9O4B,EA8OvBC,GA9OuB,EA8OlB4D,OA9OkB,EA8OT;AAChC,QAAIA,OAAO,CAACC,eAARD,KAA4B,OAAhC,EAAyC;AACvC,aAAO7D,GAAG,CAACG,SAAJH,CAAc,qBAAdA,EAAqCC,GAArCD,EAA0C6D,OAA1C7D,CAAP;AACD;;AAED,WAAOA,GAAG,CAACG,SAAJH,CAAc,qBAAdA,EAAqCC,GAArCD,EAA0C6D,OAA1C7D,CAAP;AAnPyC;;AAsP3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE+D,qBA/P2C,+BA+PvB/D,GA/PuB,EA+PlBC,GA/PkB,EA+Pb4D,OA/Pa,EA+PJ;AACrC,QAAI,CAACA,OAAO,CAACjD,KAAT,IAAkB,CAACiD,OAAO,CAACjD,KAARiD,CAAchD,KAAjC,IAA0C,CAAC,sBAAcgD,OAAO,CAACjD,KAARiD,CAAchD,KAA5B,CAA/C,EAAmF;AACjF,aAAON,iBAAQC,OAAR,EAAP;AACD;;AAED,QAAM6B,QAAQ,GAAGwB,OAAO,CAACjD,KAARiD,CAAchD,KAAdgD,CAAoB/C,GAApB+C,CAAwB,UAAC9C,IAAD;AAAA,aAAUf,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BC,GAA/BD,EAAoCe,IAApCf,CAAV;AAAxB,MAAjB;AAEAqC,YAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,gBAAdA,EAAgCC,GAAhCD,EAAqC6D,OAArC7D,CAAdqC;;AAEA,QAAIwB,OAAO,CAACG,KAARH,IAAiBA,OAAO,CAACG,KAARH,CAAchD,KAA/BgD,IAAwC,sBAAcA,OAAO,CAACG,KAARH,CAAchD,KAA5B,CAA5C,EAAgF;AAC9EgD,aAAO,CAACG,KAARH,CAAchD,KAAdgD,CAAoBI,OAApBJ,CAA4B,UAAC9C,IAAD;AAAA,eAAUsB,QAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BC,GAA/BD,EAAoCe,IAApCf,CAAdqC,CAAV;AAA5B;AACD;;AAED,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AA5QyC;;AA+Q3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE6B,qBAvR2C,+BAuRvBlE,GAvRuB,EAuRlBC,GAvRkB,EAuRb4D,OAvRa,EAuRJ;AACrC,QAAI,CAACA,OAAO,CAACG,KAAT,IAAkB,CAACH,OAAO,CAACG,KAARH,CAAchD,KAAjC,IAA0C,CAAC,sBAAcgD,OAAO,CAACG,KAARH,CAAchD,KAA5B,CAA/C,EAAmF;AACjF,aAAON,iBAAQC,OAAR,EAAP;AACD;;AAED,QAAM6B,QAAQ,GAAGwB,OAAO,CAACG,KAARH,CAAchD,KAAdgD,CAAoB/C,GAApB+C,CAAwB,UAAC9C,IAAD;AAAA,aAAUf,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BC,GAA/BD,EAAoCe,IAApCf,CAAV;AAAxB,MAAjB;AAEAqC,YAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,gBAAdA,EAAgCC,GAAhCD,EAAqC6D,OAArC7D,CAAdqC;AAEA,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AAhSyC;;AAmS3C;AACF;AACA;AACA;AACA;AACA;AACA;AACE8B,cA1S2C,wBA0S9BnE,GA1S8B,EA0SzBC,GA1SyB,EA0SpBmE,KA1SoB,EA0Sb;AAC5B,QAAM/B,QAAQ,GAAG,CACfrC,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6CoE,KAA7CpE,CADe,CAAjB;;AAIA,QAAIoE,KAAK,CAACC,QAAND,IAAkBA,KAAK,CAACC,QAAND,CAAeE,KAAfF,CAAqB,GAArBA,EAA0BG,MAA1BH,KAAqC,CAA3D,EAA8D;AAC5D/B,cAAQ,CAACK,IAATL,CAAcrC,GAAG,CAACG,SAAJH,CAAc,qBAAdA,EAAqCC,GAArCD,EAA0CoE,KAA1CpE,CAAdqC;AACD;;AAED,WAAO9B,iBAAQI,GAAR,CAAY0B,QAAZ,CAAP;AAnTyC;;AAsT3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEmC,aA7T2C,uBA6T/BxE,GA7T+B,EA6T1BC,GA7T0B,EA6TrBwE,IA7TqB,EA6Tf;AAC1B;AACA,QAAIA,IAAI,CAAC/D,gBAAL+D,IAAyBA,IAAI,CAAC/D,gBAAL+D,KAA0BxE,GAAvD,EAA4D;AAC1DA,SAAG,GAAGwE,IAAI,CAAC/D,gBAAXT;AACD;;AAED,WAAOM,iBAAQI,GAAR,CAAY,CACjB8D,IAAI,CAACC,oBAALD,IAA6BlE,iBAAQI,GAAR,CAAY8D,IAAI,CAACC,oBAALD,CAA0B5D,KAA1B4D,CAAgC3D,GAAhC2D,CAAoC,UAAC1D,IAAD;AAAA,aAAUf,GAAG,CAACG,SAAJH,CAAc,eAAdA,EAA+BC,GAA/BD,EAAoCe,IAApCf,CAAV;AAApC,MAAZ,CADZ,EAEjBA,GAAG,CAACG,SAAJH,CAAc,gBAAdA,EAAgCC,GAAhCD,EAAqCyE,IAArCzE,CAFiB,EAGjBA,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6CyE,IAA7CzE,CAHiB,EAIjBA,GAAG,CAACG,SAAJH,CAAc,oBAAdA,EAAoCC,GAApCD,EAAyCyE,IAAzCzE,CAJiB,EAKjByE,IAAI,CAACE,KAALF,IAAczE,GAAG,CAACG,SAAJH,CAAc,gBAAdA,EAAgCC,GAAhCD,EAAqCyE,IAAI,CAACE,KAA1C3E,CALG,CAAZ,CAAP;AAnUyC;;AA4U3C;AACF;AACA;AACA;AACA;AACA;AACA;AACE4E,aAnV2C,uBAmV/B5E,GAnV+B,EAmV1BC,GAnV0B,EAmVrB4E,IAnVqB,EAmVf;AAC1B,WAAOtE,iBAAQI,GAAR,CAAY,CACjBX,GAAG,CAACG,SAAJH,CAAc,iBAAdA,EAAiCC,GAAjCD,EAAsC6E,IAAtC7E,CADiB,EAEjBA,GAAG,CAACG,SAAJH,CAAc,wBAAdA,EAAwCC,GAAxCD,EAA6C6E,IAA7C7E,CAFiB,CAAZ,CAAP;AApVyC;;AA0V3C;AACF;AACA;AACA;AACA;AACA;AACA;AACE8E,0BAjW2C,oCAiWlB9E,GAjWkB,EAiWbC,GAjWa,EAiWR8E,iBAjWQ,EAiWW;AACpD,WAAOxE,iBAAQI,GAAR,CAAYoE,iBAAiB,CAACnE,KAAlBmE,CAAwBlE,KAAxBkE,CAA8BjE,GAA9BiE,CAAkC,UAAChE,IAAD;AAAA,aAAUf,GAAG,CAACG,SAAJH,CAAc,aAAdA,EAA6BC,GAA7BD,EAAkCe,IAAlCf,CAAV;AAAlC,MAAZ,CAAP;AAlWyC;;AAqW3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEgF,iBA5W2C,2BA4W3BhF,GA5W2B,EA4WtBC,GA5WsB,EA4WjBgF,QA5WiB,EA4WP;AAClC,WAAOjF,GAAG,CAACG,SAAJH,CAAc,qBAAdA,EAAqCC,GAArCD,EAA0CiF,QAA1CjF,CAAP;AA7WyC;;AAgX3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEF,iBAxX2C,2BAwX3BE,GAxX2B,EAwXtBD,IAxXsB,EAwXhBE,GAxXgB,EAwXXC,MAxXW,EAwXH;AACtC,QAAI,CAACA,MAAM,CAACH,IAAD,CAAX,EAAmB;AACjB,aAAOQ,iBAAQC,OAAR,EAAP;AACD;;AACD,QAAOU,wBAAP,GAAmClB,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBqB,YAAnBrB,CAAgCsB,MAAhCtB,CAA5BkB,wBAAP;AAEA,WAAOlB,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBkF,UAAnBlF,CAA8BmF,WAA9BnF,CAA0CC,GAA1CD,EAA+CE,MAAM,CAACH,IAAD,CAArDC,EACJuB,IADIvB,CACC,UAACoF,SAAD,EAAe;AACnB,UAAIpF,GAAG,CAACmB,KAAJnB,CAAUsB,MAAVtB,CAAiBqB,YAAjBrB,CAA8BqF,uBAAlC,EAA2D;AACzD,YAAMC,iBAAiB,GAAG,6CAAuBvF,IAAvB,EAA1B;AAEAG,cAAM,CAACoF,iBAAD,CAANpF,GAA4BA,MAAM,CAACH,IAAD,CAAlCG,CAHyD,CAGf;AAC3C;;AAEDA,YAAM,CAACH,IAAD,CAANG,GAAekF,SAAflF,CAPmB,CAOO;AARvB,OAUJwB,KAVI1B,CAUE,UAAC2B,MAAD,EAAY;AACjB3B,SAAG,CAACmB,KAAJnB,CAAU4B,MAAV5B,CAAiB6B,IAAjB7B,kDAAgED,IAAhE,QAAyE4B,MAAzE3B;AACAE,YAAM,CAACH,IAAD,CAANG,GAAegB,wBAAfhB,CAFiB,CAEwB;;AAEzC,aAAOK,iBAAQC,OAAR,CAAgBU,wBAAhB,CAAP;AAdG,MAAP;AA9XyC;;AAgZ3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEqE,qBAxZ2C,+BAwZvBvF,GAxZuB,EAwZlB2D,KAxZkB,EAwZX1D,GAxZW,EAwZNuF,KAxZM,EAwZC;AAC1C,QAAI,CAAC,wBAAiB7B,KAAjB,CAAD,IAA4B,CAAC6B,KAA7B,IAAsC,CAAC,sBAAcA,KAAd,CAAvC,IAA+D7B,KAAK,GAAG,CAAvE,IAA4EA,KAAK,IAAI6B,KAAK,CAACjB,MAA3F,IAAqG,EAAEiB,KAAK,CAAC7B,KAAD,CAAL6B,YAAwBC,MAAxBD,IAAkC,OAAOA,KAAK,CAAC7B,KAAD,CAAZ,KAAwB,QAA5D,CAAzG,EAAgL;AAC9K,aAAOpD,iBAAQC,OAAR,EAAP;AACD;;AACD,QAAOU,wBAAP,GAAmClB,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBqB,YAAnBrB,CAAgCsB,MAAhCtB,CAA5BkB,wBAAP;AAEA,WAAOlB,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBkF,UAAnBlF,CAA8BmF,WAA9BnF,CAA0CC,GAA1CD,EAA+CwF,KAAK,CAAC7B,KAAD,CAApD3D,EACJuB,IADIvB,CACC,UAACoF,SAAD,EAAe;AACnBI,WAAK,CAAC7B,KAAD,CAAL6B,GAAeJ,SAAfI,CADmB,CACO;AAFvB,OAIJ9D,KAJI1B,CAIE,UAAC2B,MAAD,EAAY;AACjB3B,SAAG,CAACmB,KAAJnB,CAAU4B,MAAV5B,CAAiB6B,IAAjB7B,0DAAwE2D,KAAxE,QAAkFhC,MAAlF3B;AACAwF,WAAK,CAAC7B,KAAD,CAAL6B,GAAetE,wBAAfsE,CAFiB,CAEwB;;AAEzC,aAAOjF,iBAAQC,OAAR,CAAgBU,wBAAhB,CAAP;AARG,MAAP;AA9ZyC;;AAya3C;AACF;AACA;AACA;AACA;AACA;AACA;AACEwE,gBAhb2C,0BAgb5B1F,GAhb4B,EAgbvBC,GAhbuB,EAgblBC,MAhbkB,EAgbV;AAC/B,WAAOF,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBkF,UAAnBlF,CAA8B2F,UAA9B3F,CAAyCC,GAAzCD,EAA8CE,MAAM,CAAC0F,GAArD5F,EACJuB,IADIvB,CACC,UAAC4F,GAAD,EAAS;AACb1F,YAAM,CAAC0F,GAAP1F,GAAa0F,GAAb1F,CADa,CACK;AAFf,MAAP;AAjbyC;;AAub3C;AACF;AACA;AACA;AACA;AACA;AACA;AACE2F,iBA9b2C,2BA8b3B7F,GA9b2B,EA8btBC,GA9bsB,EA8bjBC,MA9biB,EA8bT;AAChC,WAAOF,GAAG,CAACmB,KAAJnB,CAAUoB,QAAVpB,CAAmBkF,UAAnBlF,CAA8B2F,UAA9B3F,CAAyCC,GAAzCD,EAA8CE,MAAM,CAAC4F,IAArD9F,EACJuB,IADIvB,CACC,UAAC8F,IAAD,EAAU;AACd5F,YAAM,CAAC4F,IAAP5F,GAAc4F,IAAd5F,CADc,CACM;AAFjB,MAAP;AA/byC;AAqc3C6F,wBAAsB,EAAEjG,eAAe,CAAC,aAAD,CArcI;AAuc3CkG,oBAAkB,EAAElG,eAAe,CAAC,SAAD,CAvcQ;AAyc3CmG,kBAAgB,EAAEnG,eAAe,CAAC,OAAD,CAzcU;AA2c3CoG,qBAAmB,EAAEpG,eAAe,CAAC,UAAD;AA3cO,CAAnB,CAAnB","names":["decryptTextProp","name","ctx","key","object","transform","transforms","decryptObject","undefined","_promise","resolve","objectType","encryptionKeyUrl","all","files","items","map","item","decryptSubmit","inputs","decryptionFailureMessage","webex","internal","conversation","config","then","JSON","parse","catch","reason","logger","warn","decryptReaction2summary","reactions","reaction","decryptReaction2selfsummary","decryptReaction2","decryptThread","threadObject","promises","childActivities","child","decryptConversation","activities","push","usableKey","error","url","avatarEncryptionKeyUrl","avatar","previous","previousValue","decryptActivity","activity","keyUrl","children","decryptMicroappinstance","microappInstance","decryptComment","comment","cards","index","decryptContent","content","contentCategory","decryptContentFiles","links","forEach","decryptContentLinks","decryptEvent","event","location","split","length","decryptFile","file","transcodedCollection","image","decryptLink","link","decryptTranscodedContent","transcodedContent","decryptImageURI","imageURI","encryption","decryptText","plaintext","keepEncryptedProperties","encryptedPropName","decryptPropCardItem","array","String","decryptPropScr","decryptScr","scr","decryptPropSslr","sslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation"],"sources":["decryption-transforms.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) => ctx.transform('decryptTextProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs])\n      .then((inputs) => {\n        object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt attachmentAction.inputs: ${reason}`);\n        object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n * Decrypt an individual threadObject\n * @param   {Object} ctx      An object containg a webex instance and a transform\n * @param   {Object} threadObject An instance of a Webex threadObject (the objects returned by the /conversation/api/v1/threads api)\n * @returns {Promise}         Returns a ctx.transform promise\n */\n  decryptThread(ctx, threadObject) {\n    let promises = [];\n\n    if (threadObject.childActivities && Array.isArray(threadObject.childActivities)) {\n      promises = threadObject.childActivities.map((child) => ctx.transform('decryptObject', null, child));\n    }\n\n    return Promise.all(promises);\n  },\n\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(Promise.all(conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))));\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation)\n        .catch((error) => {\n          ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n          Promise.resolve(decryptionFailureMessage);\n        }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n    // TODO (holsted 04/06/19): This was deprecated in favor of .previousValue below. I wanted to remove this entirely\n    // but I wasn't sure if some open source use cases may be reading from cached conversations or not so leaving it for now.\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n    if (conversation.previousValue) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previousValue));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    let promises = [];\n\n    // iterate and recursively decrypt over children objects\n\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map((child) => ctx.transform('decryptObject', keyUrl, child.activity));\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n* Decrypts a comment...\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {String} key KMS key\n* @param {Object} comment A comment object with a displayName and content (encrypted)\n* @returns {Promise} Returns the results of Promise.all on two transforms\n*/\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment)\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) => promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) => promises.push(ctx.transform('decryptObject', key, item)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, event)\n    ];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    // using object encryption keyUrl for images instead of activity encryptionKeyUrl\n    if (file.encryptionKeyUrl && file.encryptionKeyUrl !== key) {\n      key = file.encryptionKeyUrl;\n    }\n\n    return Promise.all([\n      file.transcodedCollection && Promise.all(file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image)\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link)\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n* Decrypting an element in an Array.\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {Integer} index Property of an object to be decrypted\n* @param {String} key KMS key\n* @param {Array} array An array of Strings to be decrypted\n* @returns {Promise} Returns a lonely Promise\n*/\n  decryptPropCardItem(ctx, index, key, array) {\n    if (!Number.isInteger(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr)\n      .then((sslr) => {\n        object.sslr = sslr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location')\n});\n"]},"metadata":{},"sourceType":"script"}
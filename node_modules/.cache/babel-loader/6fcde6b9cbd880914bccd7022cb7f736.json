{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar BasicConstraints = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for BasicConstraints class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Object} [cA]\r\n   * @property {Object} [pathLenConstraint]\r\n   */\n  function BasicConstraints() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BasicConstraints);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {boolean}\r\n     * @desc cA\r\n     */\n    this.cA = getParametersValue(parameters, \"cA\", false);\n    if (\"pathLenConstraint\" in parameters)\n      /**\r\n       * @type {number|Integer}\r\n       * @desc pathLenConstraint\r\n       */\n      this.pathLenConstraint = getParametersValue(parameters, \"pathLenConstraint\", 0); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(BasicConstraints, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"cA\", \"pathLenConstraint\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({\n        names: {\n          cA: \"cA\",\n          pathLenConstraint: \"pathLenConstraint\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for BasicConstraints\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"cA\" in asn1.result) this.cA = asn1.result.cA.valueBlock.value;\n\n      if (\"pathLenConstraint\" in asn1.result) {\n        if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) this.pathLenConstraint = asn1.result.pathLenConstraint;else this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n      if (this.cA !== BasicConstraints.defaultValues(\"cA\")) outputArray.push(new asn1js.Boolean({\n        value: this.cA\n      }));\n\n      if (\"pathLenConstraint\" in this) {\n        if (this.pathLenConstraint instanceof asn1js.Integer) outputArray.push(this.pathLenConstraint);else outputArray.push(new asn1js.Integer({\n          value: this.pathLenConstraint\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {};\n      if (this.cA !== BasicConstraints.defaultValues(\"cA\")) object.cA = this.cA;\n\n      if (\"pathLenConstraint\" in this) {\n        if (this.pathLenConstraint instanceof asn1js.Integer) object.pathLenConstraint = this.pathLenConstraint.toJSON();else object.pathLenConstraint = this.pathLenConstraint;\n      }\n\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"cA\":\n          return false;\n\n        default:\n          throw new Error(\"Invalid member name for BasicConstraints class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * BasicConstraints ::= SEQUENCE {\r\n     *    cA                      BOOLEAN DEFAULT FALSE,\r\n     *    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [cA]\r\n       * @property {string} [pathLenConstraint]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Boolean({\n          optional: true,\n          name: names.cA || \"\"\n        }), new asn1js.Integer({\n          optional: true,\n          name: names.pathLenConstraint || \"\"\n        })]\n      });\n    }\n  }]);\n\n  return BasicConstraints;\n}(); //**************************************************************************************\n\n\nexport { BasicConstraints as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/BasicConstraints.js"],"names":["asn1js","getParametersValue","clearProps","BasicConstraints","parameters","cA","pathLenConstraint","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","valueBlock","value","isHexOnly","valueDec","outputArray","defaultValues","push","Boolean","Integer","Sequence","object","toJSON","memberName","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class BasicConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Object} [cA]\r\n\t * @property {Object} [pathLenConstraint]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @desc cA\r\n\t\t */\r\n\t\tthis.cA = getParametersValue(parameters, \"cA\", false);\r\n\r\n\t\tif(\"pathLenConstraint\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc pathLenConstraint\r\n\t\t\t */\r\n\t\t\tthis.pathLenConstraint = getParametersValue(parameters, \"pathLenConstraint\", 0);\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"cA\":\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicConstraints ::= SEQUENCE {\r\n\t *    cA                      BOOLEAN DEFAULT FALSE,\r\n\t *    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [cA]\r\n\t\t * @property {string} [pathLenConstraint]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.cA || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.pathLenConstraint || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"cA\",\r\n\t\t\t\"pathLenConstraint\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcA: \"cA\",\r\n\t\t\t\t\tpathLenConstraint: \"pathLenConstraint\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"cA\" in asn1.result)\r\n\t\t\tthis.cA = asn1.result.cA.valueBlock.value;\r\n\r\n\t\tif(\"pathLenConstraint\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.pathLenConstraint.valueBlock.isHexOnly)\r\n\t\t\t\tthis.pathLenConstraint = asn1.result.pathLenConstraint;\r\n\t\t\telse\r\n\t\t\t\tthis.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.cA !== BasicConstraints.defaultValues(\"cA\"))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.cA }));\r\n\t\t\r\n\t\tif(\"pathLenConstraint\" in this)\r\n\t\t{\r\n\t\t\tif(this.pathLenConstraint instanceof asn1js.Integer)\r\n\t\t\t\toutputArray.push(this.pathLenConstraint);\r\n\t\t\telse\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(this.cA !== BasicConstraints.defaultValues(\"cA\"))\r\n\t\t\tobject.cA = this.cA;\r\n\r\n\t\tif(\"pathLenConstraint\" in this)\r\n\t\t{\r\n\t\t\tif(this.pathLenConstraint instanceof asn1js.Integer)\r\n\t\t\t\tobject.pathLenConstraint = this.pathLenConstraint.toJSON();\r\n\t\t\telse\r\n\t\t\t\tobject.pathLenConstraint = this.pathLenConstraint;\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
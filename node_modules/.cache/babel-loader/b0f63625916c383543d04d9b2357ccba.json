{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\nimport Time from \"./Time.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\nimport Extension from \"./Extension.js\";\nimport Extensions from \"./Extensions.js\"; //**************************************************************************************\n\nfunction tbsCertificate() {\n  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  //TBSCertificate  ::=  SEQUENCE  {\n  //    version         [0]  EXPLICIT Version DEFAULT v1,\n  //    serialNumber         CertificateSerialNumber,\n  //    signature            AlgorithmIdentifier,\n  //    issuer               Name,\n  //    validity             Validity,\n  //    subject              Name,\n  //    subjectPublicKeyInfo SubjectPublicKeyInfo,\n  //    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n  //                         -- If present, version MUST be v2 or v3\n  //    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n  //                         -- If present, version MUST be v2 or v3\n  //    extensions      [3]  EXPLICIT Extensions OPTIONAL\n  //    -- If present, version MUST be v3\n  //}\n\n  /**\r\n   * @type {Object}\r\n   * @property {string} [blockName]\r\n   * @property {string} [tbsCertificateVersion]\r\n   * @property {string} [tbsCertificateSerialNumber]\r\n   * @property {string} [signature]\r\n   * @property {string} [issuer]\r\n   * @property {string} [tbsCertificateValidity]\r\n   * @property {string} [notBefore]\r\n   * @property {string} [notAfter]\r\n   * @property {string} [subject]\r\n   * @property {string} [subjectPublicKeyInfo]\r\n   * @property {string} [tbsCertificateIssuerUniqueID]\r\n   * @property {string} [tbsCertificateSubjectUniqueID]\r\n   * @property {string} [extensions]\r\n   */\n  var names = getParametersValue(parameters, \"names\", {});\n  return new asn1js.Sequence({\n    name: names.blockName || \"tbsCertificate\",\n    value: [new asn1js.Constructed({\n      optional: true,\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 0 // [0]\n\n      },\n      value: [new asn1js.Integer({\n        name: names.tbsCertificateVersion || \"tbsCertificate.version\"\n      }) // EXPLICIT integer value\n      ]\n    }), new asn1js.Integer({\n      name: names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\"\n    }), AlgorithmIdentifier.schema(names.signature || {\n      names: {\n        blockName: \"tbsCertificate.signature\"\n      }\n    }), RelativeDistinguishedNames.schema(names.issuer || {\n      names: {\n        blockName: \"tbsCertificate.issuer\"\n      }\n    }), new asn1js.Sequence({\n      name: names.tbsCertificateValidity || \"tbsCertificate.validity\",\n      value: [Time.schema(names.notBefore || {\n        names: {\n          utcTimeName: \"tbsCertificate.notBefore\",\n          generalTimeName: \"tbsCertificate.notBefore\"\n        }\n      }), Time.schema(names.notAfter || {\n        names: {\n          utcTimeName: \"tbsCertificate.notAfter\",\n          generalTimeName: \"tbsCertificate.notAfter\"\n        }\n      })]\n    }), RelativeDistinguishedNames.schema(names.subject || {\n      names: {\n        blockName: \"tbsCertificate.subject\"\n      }\n    }), PublicKeyInfo.schema(names.subjectPublicKeyInfo || {\n      names: {\n        blockName: \"tbsCertificate.subjectPublicKeyInfo\"\n      }\n    }), new asn1js.Primitive({\n      name: names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\",\n      optional: true,\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 1 // [1]\n\n      }\n    }), // IMPLICIT bistring value\n    new asn1js.Primitive({\n      name: names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\",\n      optional: true,\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 2 // [2]\n\n      }\n    }), // IMPLICIT bistring value\n    new asn1js.Constructed({\n      optional: true,\n      idBlock: {\n        tagClass: 3,\n        // CONTEXT-SPECIFIC\n        tagNumber: 3 // [3]\n\n      },\n      value: [Extensions.schema(names.extensions || {\n        names: {\n          blockName: \"tbsCertificate.extensions\"\n        }\n      })]\n    }) // EXPLICIT SEQUENCE value\n    ]\n  });\n} //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\n\nvar Certificate = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for Certificate class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function Certificate() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Certificate);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc ToBeSigned (TBS) part of the certificate\r\n     */\n    this.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\n    /**\r\n     * @type {number}\r\n     * @desc Version number\r\n     */\n\n    this.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\n    /**\r\n     * @type {Integer}\r\n     * @desc Serial number of the certificate\r\n     */\n\n    this.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc This field contains the algorithm identifier for the algorithm used by the CA to sign the certificate\r\n     */\n\n    this.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\n    /**\r\n     * @type {RelativeDistinguishedNames}\r\n     * @desc The issuer field identifies the entity that has signed and issued the certificate\r\n     */\n\n    this.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\n    /**\r\n     * @type {Time}\r\n     * @desc The date on which the certificate validity period begins\r\n     */\n\n    this.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\n    /**\r\n     * @type {Time}\r\n     * @desc The date on which the certificate validity period ends\r\n     */\n\n    this.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\n    /**\r\n     * @type {RelativeDistinguishedNames}\r\n     * @desc The subject field identifies the entity associated with the public key stored in the subject public key field\r\n     */\n\n    this.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\n    /**\r\n     * @type {PublicKeyInfo}\r\n     * @desc This field is used to carry the public key and identify the algorithm with which the key is used\r\n     */\n\n    this.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\n    if (\"issuerUniqueID\" in parameters)\n      /**\r\n       * @type {ArrayBuffer}\r\n       * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n       */\n      this.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\n    if (\"subjectUniqueID\" in parameters)\n      /**\r\n       * @type {ArrayBuffer}\r\n       * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n       */\n      this.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\n    if (\"extensions\" in parameters)\n      /**\r\n       * @type {Array}\r\n       * @desc If present, this field is a SEQUENCE of one or more certificate extensions\r\n       */\n      this.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc The signatureAlgorithm field contains the identifier for the cryptographic algorithm used by the CA to sign this certificate\r\n     */\n\n    this.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\n    /**\r\n     * @type {BitString}\r\n     * @desc The signatureValue field contains a digital signature computed upon the ASN.1 DER encoded tbsCertificate\r\n     */\n\n    this.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(Certificate, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"tbsCertificate\", \"tbsCertificate.extensions\", \"tbsCertificate.version\", \"tbsCertificate.serialNumber\", \"tbsCertificate.signature\", \"tbsCertificate.issuer\", \"tbsCertificate.notBefore\", \"tbsCertificate.notAfter\", \"tbsCertificate.subject\", \"tbsCertificate.subjectPublicKeyInfo\", \"tbsCertificate.issuerUniqueID\", \"tbsCertificate.subjectUniqueID\", \"signatureAlgorithm\", \"signatureValue\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, Certificate.schema({\n        names: {\n          tbsCertificate: {\n            names: {\n              extensions: {\n                names: {\n                  extensions: \"tbsCertificate.extensions\"\n                }\n              }\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for Certificate\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\n      if (\"tbsCertificate.version\" in asn1.result) this.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\n      this.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\n      this.signature = new AlgorithmIdentifier({\n        schema: asn1.result[\"tbsCertificate.signature\"]\n      });\n      this.issuer = new RelativeDistinguishedNames({\n        schema: asn1.result[\"tbsCertificate.issuer\"]\n      });\n      this.notBefore = new Time({\n        schema: asn1.result[\"tbsCertificate.notBefore\"]\n      });\n      this.notAfter = new Time({\n        schema: asn1.result[\"tbsCertificate.notAfter\"]\n      });\n      this.subject = new RelativeDistinguishedNames({\n        schema: asn1.result[\"tbsCertificate.subject\"]\n      });\n      this.subjectPublicKeyInfo = new PublicKeyInfo({\n        schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"]\n      });\n      if (\"tbsCertificate.issuerUniqueID\" in asn1.result) this.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\n      if (\"tbsCertificate.subjectUniqueID\" in asn1.result) this.subjectUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\n      if (\"tbsCertificate.extensions\" in asn1.result) this.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], function (element) {\n        return new Extension({\n          schema: element\n        });\n      });\n      this.signatureAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.signatureAlgorithm\n      });\n      this.signatureValue = asn1.result.signatureValue; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Create ASN.1 schema for existing values of TBS part for the certificate\r\n     */\n\n  }, {\n    key: \"encodeTBS\",\n    value: function encodeTBS() {\n      //region Create array for output sequence\n      var outputArray = [];\n\n      if (\"version\" in this && this.version !== Certificate.defaultValues(\"version\")) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Integer({\n            value: this.version\n          }) // EXPLICIT integer value\n          ]\n        }));\n      }\n\n      outputArray.push(this.serialNumber);\n      outputArray.push(this.signature.toSchema());\n      outputArray.push(this.issuer.toSchema());\n      outputArray.push(new asn1js.Sequence({\n        value: [this.notBefore.toSchema(), this.notAfter.toSchema()]\n      }));\n      outputArray.push(this.subject.toSchema());\n      outputArray.push(this.subjectPublicKeyInfo.toSchema());\n\n      if (\"issuerUniqueID\" in this) {\n        outputArray.push(new asn1js.Primitive({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          valueHex: this.issuerUniqueID\n        }));\n      }\n\n      if (\"subjectUniqueID\" in this) {\n        outputArray.push(new asn1js.Primitive({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          valueHex: this.subjectUniqueID\n        }));\n      }\n\n      if (\"extensions\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 3 // [3]\n\n          },\n          value: [new asn1js.Sequence({\n            value: Array.from(this.extensions, function (element) {\n              return element.toSchema();\n            })\n          })]\n        }));\n      } //endregion\n      //region Create and return output sequence\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var encodeFlag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var tbsSchema = {}; //region Decode stored TBS value\n\n      if (encodeFlag === false) {\n        if (this.tbs.length === 0) // No stored certificate TBS part\n          return Certificate.schema().value[0];\n        tbsSchema = asn1js.fromBER(this.tbs).result;\n      } //endregion\n      //region Create TBS schema via assembling from TBS parts\n      else tbsSchema = this.encodeTBS(); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: [tbsSchema, this.signatureAlgorithm.toSchema(), this.signatureValue]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        tbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\n        serialNumber: this.serialNumber.toJSON(),\n        signature: this.signature.toJSON(),\n        issuer: this.issuer.toJSON(),\n        notBefore: this.notBefore.toJSON(),\n        notAfter: this.notAfter.toJSON(),\n        subject: this.subject.toJSON(),\n        subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n        signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n        signatureValue: this.signatureValue.toJSON()\n      };\n      if (\"version\" in this && this.version !== Certificate.defaultValues(\"version\")) object.version = this.version;\n      if (\"issuerUniqueID\" in this) object.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\n      if (\"subjectUniqueID\" in this) object.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\n      if (\"extensions\" in this) object.extensions = Array.from(this.extensions, function (element) {\n        return element.toJSON();\n      });\n      return object;\n    } //**********************************************************************************\n\n    /**\r\n     * Importing public key for current certificate\r\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    } //**********************************************************************************\n\n    /**\r\n     * Get hash value for subject public key (default SHA-1)\r\n     * @param {String} [hashAlgorithm=SHA-1] Hashing algorithm name\r\n     */\n\n  }, {\n    key: \"getKeyHash\",\n    value: function getKeyHash() {\n      var hashAlgorithm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"SHA-1\";\n      //region Get a \"crypto\" extension\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n\n      return crypto.digest({\n        name: hashAlgorithm\n      }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\n    } //**********************************************************************************\n\n    /**\r\n     * Make a signature for current value from TBS section\r\n     * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n     * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey) {\n      var _this = this;\n\n      var hashAlgorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"SHA-1\";\n      //region Initial checking\n      //region Check private key\n      if (typeof privateKey === \"undefined\") return Promise.reject(\"Need to provide a private key for signing\"); //endregion\n      //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve();\n      var parameters;\n      var engine = getEngine(); //endregion\n      //region Get a \"default parameters\" for current algorithm and set correct signature algorithm\n\n      sequence = sequence.then(function () {\n        return engine.subtle.getSignatureParameters(privateKey, hashAlgorithm);\n      });\n      sequence = sequence.then(function (result) {\n        parameters = result.parameters;\n        _this.signature = result.signatureAlgorithm;\n        _this.signatureAlgorithm = result.signatureAlgorithm;\n      }); //endregion\n      //region Create TBS data for signing\n\n      sequence = sequence.then(function () {\n        _this.tbs = _this.encodeTBS().toBER(false);\n      }); //endregion\n      //region Signing TBS data on provided private key\n\n      sequence = sequence.then(function () {\n        return engine.subtle.signWithPrivateKey(_this.tbs, privateKey, parameters);\n      });\n      sequence = sequence.then(function (result) {\n        _this.signatureValue = new asn1js.BitString({\n          valueHex: result\n        });\n      }); //endregion\n\n      return sequence;\n    } //**********************************************************************************\n\n  }, {\n    key: \"verify\",\n    value: function verify() {\n      var issuerCertificate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      //region Global variables\n      var subjectPublicKeyInfo = {}; //endregion\n      //region Set correct \"subjectPublicKeyInfo\" value\n\n      if (issuerCertificate !== null) subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;else {\n        if (this.issuer.isEqual(this.subject)) // Self-signed certificate\n          subjectPublicKeyInfo = this.subjectPublicKeyInfo;\n      }\n      if (subjectPublicKeyInfo instanceof PublicKeyInfo === false) return Promise.reject(\"Please provide issuer certificate as a parameter\"); //endregion\n\n      return getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"tbs\":\n          return new ArrayBuffer(0);\n\n        case \"version\":\n          return 0;\n\n        case \"serialNumber\":\n          return new asn1js.Integer();\n\n        case \"signature\":\n          return new AlgorithmIdentifier();\n\n        case \"issuer\":\n          return new RelativeDistinguishedNames();\n\n        case \"notBefore\":\n          return new Time();\n\n        case \"notAfter\":\n          return new Time();\n\n        case \"subject\":\n          return new RelativeDistinguishedNames();\n\n        case \"subjectPublicKeyInfo\":\n          return new PublicKeyInfo();\n\n        case \"issuerUniqueID\":\n          return new ArrayBuffer(0);\n\n        case \"subjectUniqueID\":\n          return new ArrayBuffer(0);\n\n        case \"extensions\":\n          return [];\n\n        case \"signatureAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"signatureValue\":\n          return new asn1js.BitString();\n\n        default:\n          throw new Error(\"Invalid member name for Certificate class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * Certificate  ::=  SEQUENCE  {\r\n     *    tbsCertificate       TBSCertificate,\r\n     *    signatureAlgorithm   AlgorithmIdentifier,\r\n     *    signatureValue       BIT STRING  }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [tbsCertificate]\r\n       * @property {string} [signatureAlgorithm]\r\n       * @property {string} [signatureValue]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [tbsCertificate(names.tbsCertificate), AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n          names: {\n            blockName: \"signatureAlgorithm\"\n          }\n        }), new asn1js.BitString({\n          name: names.signatureValue || \"signatureValue\"\n        })]\n      });\n    }\n  }]);\n\n  return Certificate;\n}(); //**************************************************************************************\n\n\nexport { Certificate as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/Certificate.js"],"names":["asn1js","getParametersValue","bufferToHexCodes","clearProps","getCrypto","getEngine","AlgorithmIdentifier","RelativeDistinguishedNames","Time","PublicKeyInfo","Extension","Extensions","tbsCertificate","parameters","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","tbsCertificateVersion","tbsCertificateSerialNumber","schema","signature","issuer","tbsCertificateValidity","notBefore","utcTimeName","generalTimeName","notAfter","subject","subjectPublicKeyInfo","Primitive","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","extensions","Certificate","tbs","defaultValues","version","serialNumber","issuerUniqueID","subjectUniqueID","signatureAlgorithm","signatureValue","fromSchema","asn1","compareSchema","verified","Error","result","valueBeforeDecode","valueBlock","valueDec","valueHex","Array","from","element","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","encodeTBS","object","byteLength","toJSON","subtle","getPublicKey","hashAlgorithm","crypto","Promise","reject","digest","Uint8Array","subjectPublicKey","privateKey","sequence","resolve","engine","then","getSignatureParameters","toBER","signWithPrivateKey","BitString","issuerCertificate","isEqual","verifyWithPublicKey","memberName","ArrayBuffer"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc ToBeSigned (TBS) part of the certificate\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Version number\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Serial number of the certificate\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc This field contains the algorithm identifier for the algorithm used by the CA to sign the certificate\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The issuer field identifies the entity that has signed and issued the certificate\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period begins\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period ends\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The subject field identifies the entity associated with the public key stored in the subject public key field\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc This field is used to carry the public key and identify the algorithm with which the key is used\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @desc If present, this field is a SEQUENCE of one or more certificate extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc The signatureAlgorithm field contains the identifier for the cryptographic algorithm used by the CA to sign this certificate\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc The signatureValue field contains a digital signature computed upon the ASN.1 DER encoded tbsCertificate\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Certificate  ::=  SEQUENCE  {\r\n\t *    tbsCertificate       TBSCertificate,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertificate\",\r\n\t\t\t\"tbsCertificate.extensions\",\r\n\t\t\t\"tbsCertificate.version\",\r\n\t\t\t\"tbsCertificate.serialNumber\",\r\n\t\t\t\"tbsCertificate.signature\",\r\n\t\t\t\"tbsCertificate.issuer\",\r\n\t\t\t\"tbsCertificate.notBefore\",\r\n\t\t\t\"tbsCertificate.notAfter\",\r\n\t\t\t\"tbsCertificate.subject\",\r\n\t\t\t\"tbsCertificate.subjectPublicKeyInfo\",\r\n\t\t\t\"tbsCertificate.issuerUniqueID\",\r\n\t\t\t\"tbsCertificate.subjectUniqueID\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Certificate\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.subjectUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\t\t\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get hash value for subject public key (default SHA-1)\r\n\t * @param {String} [hashAlgorithm=SHA-1] Hashing algorithm name\r\n\t */\r\n\tgetKeyHash(hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.digest({ name: hashAlgorithm }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\t\t\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
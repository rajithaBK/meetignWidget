{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n_Object$defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _search.default;\n  }\n});\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _has2 = _interopRequireDefault(require(\"lodash/has\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _search = _interopRequireDefault(require(\"./search\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nrequire(\"@webex/internal-plugin-conversation\");\n\nrequire(\"@webex/internal-plugin-encryption\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n\n(0, _webexCore.registerInternalPlugin)('search', _search.default, {\n  config: _config.default,\n  payloadTransformer: {\n    predicates: [{\n      name: 'encryptSearchQuery',\n      direction: 'outbound',\n      test: function test(ctx, options) {\n        if (!(0, _has2.default)(options, 'body.query')) {\n          return _promise.default.resolve(false);\n        }\n\n        if (!(0, _has2.default)(options, 'body.searchEncryptionKeyUrl')) {\n          return _promise.default.resolve(false);\n        }\n\n        if (options.service === 'argonaut') {\n          return _promise.default.resolve(true);\n        }\n\n        if (options.url) {\n          var service = ctx.webex.internal.services.getServiceFromUrl(options.url);\n          return _promise.default.resolve(service && service.name === 'argonaut');\n        }\n\n        return _promise.default.resolve(false);\n      },\n      extract: function extract(options) {\n        return _promise.default.resolve(options.body);\n      }\n    }, {\n      name: 'transformObjectArray',\n      direction: 'inbound',\n      test: function test(ctx, response) {\n        return _promise.default.resolve((0, _has2.default)(response, 'body.activities.items[0].objectType')).then(function (res) {\n          if (!res) {\n            return _promise.default.resolve(false);\n          }\n\n          if (response.options.service === 'argonaut') {\n            return _promise.default.resolve(true);\n          }\n\n          if (response.options.url) {\n            var service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);\n            return _promise.default.resolve(service && service.name === 'argonaut');\n          }\n\n          return _promise.default.resolve(false);\n        });\n      },\n      extract: function extract(response) {\n        return _promise.default.resolve(response.body.activities.items);\n      }\n    }],\n    transforms: [{\n      name: 'encryptSearchQuery',\n      direction: 'outbound',\n      fn: function fn(ctx, object) {\n        return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query).then(function (q) {\n          object.query = q;\n        });\n      }\n    }]\n  }\n});","map":{"version":3,"mappings":"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","names":["require","Search","config","payloadTransformer","predicates","name","direction","test","ctx","options","_promise","resolve","service","url","webex","internal","services","getServiceFromUrl","extract","body","response","then","res","activities","items","transforms","fn","object","encryption","encryptText","searchEncryptionKeyUrl","query","q"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Search from './search';\nimport config from './config';\n\nimport '@webex/internal-plugin-conversation';\nimport '@webex/internal-plugin-encryption';\n\nregisterInternalPlugin('search', Search, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        test(ctx, options) {\n          if (!has(options, 'body.query')) {\n            return Promise.resolve(false);\n          }\n\n          if (!has(options, 'body.searchEncryptionKeyUrl')) {\n            return Promise.resolve(false);\n          }\n\n          if (options.service === 'argonaut') {\n            return Promise.resolve(true);\n          }\n\n          if (options.url) {\n            const service = ctx.webex.internal.services.getServiceFromUrl(options.url);\n\n            return Promise.resolve(service && service.name === 'argonaut');\n          }\n\n          return Promise.resolve(false);\n        },\n        extract(options) {\n          return Promise.resolve(options.body);\n        }\n      },\n      {\n        name: 'transformObjectArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.activities.items[0].objectType'))\n            .then((res) => {\n              if (!res) {\n                return Promise.resolve(false);\n              }\n\n              if (response.options.service === 'argonaut') {\n                return Promise.resolve(true);\n              }\n\n              if (response.options.url) {\n                const service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);\n\n                return Promise.resolve(service && service.name === 'argonaut');\n              }\n\n              return Promise.resolve(false);\n            });\n        },\n        extract(response) {\n          return Promise.resolve(response.body.activities.items);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        fn(ctx, object) {\n          return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query)\n            .then((q) => {\n              object.query = q;\n            });\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './search';\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.safeSetTimeout = safeSetTimeout;\nexports.safeSetInterval = safeSetInterval;\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\n\nfunction safeSetTimeout() {\n  var timer = setTimeout.apply(void 0, arguments);\n\n  if (timer.unref) {\n    timer.unref();\n  }\n\n  return timer;\n}\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\n\n\nfunction safeSetInterval() {\n  var interval = setInterval.apply(void 0, arguments);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n\n  return interval;\n}","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASA,cAAT,GAAiC;AACtC,MAAMC,KAAK,GAAGC,UAAU,MAAVA,mBAAd;;AAEA,MAAID,KAAK,CAACE,KAAV,EAAiB;AACfF,SAAK,CAACE,KAANF;AACD;;AAED,SAAOA,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,eAAT,GAAkC;AACvC,MAAMC,QAAQ,GAAGC,WAAW,MAAXA,mBAAjB;;AAEA,MAAID,QAAQ,CAACF,KAAb,EAAoB;AAClBE,YAAQ,CAACF,KAATE;AACD;;AAED,SAAOA,QAAP;AACD","names":["safeSetTimeout","timer","setTimeout","unref","safeSetInterval","interval","setInterval"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetTimeout(...args) {\n  const timer = setTimeout(...args);\n\n  if (timer.unref) {\n    timer.unref();\n  }\n\n  return timer;\n}\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetInterval(...args) {\n  const interval = setInterval(...args);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n\n  return interval;\n}\n"]},"metadata":{},"sourceType":"script"}
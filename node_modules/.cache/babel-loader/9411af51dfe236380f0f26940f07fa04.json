{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = detect;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _fileType = require(\"file-type\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Determine mimeType for the specified buffer;\n * @param {Buffer|Uint8Array|ArrayBuffer} buffer\n * @returns {Promise<string>}\n */\n\n\nfunction detect(_x) {\n  return _detect.apply(this, arguments);\n}\n\nfunction _detect() {\n  _detect = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(buffer) {\n    var fileType;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!(buffer instanceof Blob) && !(buffer instanceof ArrayBuffer) && !(buffer instanceof Uint8Array))) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('`detect` requires a buffer of type Blob, ArrayBuffer, or Uint8Array');\n\n          case 2:\n            if (!(buffer instanceof Blob)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", buffer.type);\n\n          case 4:\n            _context.next = 6;\n            return (0, _fileType.fromBuffer)(buffer);\n\n          case 6:\n            fileType = _context.sent;\n\n            if (fileType) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 'application/octet-stream');\n\n          case 9:\n            return _context.abrupt(\"return\", fileType.mime);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _detect.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAIA;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;;SAC8BA,O;;;;;oFAAf,iBAAsBC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGX,EAAEA,MAAM,YAAYC,IAApB,KACA,EAAED,MAAM,YAAYE,WAApB,CADA,IAEA,EAAEF,MAAM,YAAYG,UAApB,CALW;AAAAC;AAAA;AAAA;;AAAA,kBAOL,IAAIC,KAAJ,CAAU,qEAAV,CAPK;;AAAA;AAAA,kBAUTL,MAAM,YAAYC,IAVT;AAAAG;AAAA;AAAA;;AAAA,6CAWJJ,MAAM,CAACM,IAXH;;AAAA;AAAAF;AAAA,mBAeU,0BAAWJ,MAAX,CAfV;;AAAA;AAePO,oBAfO,gBAePA;;AAfO,gBAiBRA,QAjBQ;AAAAH;AAAA;AAAA;;AAAA,6CAkBJ,0BAlBI;;AAAA;AAAA,6CAqBNG,QAAQ,CAACC,IArBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["detect","buffer","Blob","ArrayBuffer","Uint8Array","_context","Error","type","fileType","mime"],"sources":["detect.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {fromBuffer} from 'file-type';\n\n/**\n * Determine mimeType for the specified buffer;\n * @param {Buffer|Uint8Array|ArrayBuffer} buffer\n * @returns {Promise<string>}\n */\nexport default async function detect(buffer) {\n  /* global Blob */\n  if (\n    !(buffer instanceof Blob) &&\n    !(buffer instanceof ArrayBuffer) &&\n    !(buffer instanceof Uint8Array)\n  ) {\n    throw new Error('`detect` requires a buffer of type Blob, ArrayBuffer, or Uint8Array');\n  }\n\n  if (buffer instanceof Blob) {\n    return buffer.type;\n  }\n\n  // `fromBuffer()` can take a buffer that is either a ArrayBuffer or Uinit8Array\n  const fileType = await fromBuffer(buffer);\n\n  if (!fileType) {\n    return 'application/octet-stream';\n  }\n\n  return fileType.mime;\n}\n"]},"metadata":{},"sourceType":"script"}
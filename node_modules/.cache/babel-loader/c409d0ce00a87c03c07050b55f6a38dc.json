{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport Certificate from \"./Certificate.js\";\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar CertBag = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for CertBag class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function CertBag() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CertBag);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc certId\r\n     */\n    this.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\n    /**\r\n     * @type {*}\r\n     * @desc certValue\r\n     */\n\n    this.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(CertBag, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"certId\", \"certValue\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, CertBag.schema({\n        names: {\n          id: \"certId\",\n          value: \"certValue\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for CertBag\"); //endregion \n      //region Get internal properties from parsed schema \n\n      this.certId = asn1.result.certId.valueBlock.toString();\n      this.certValue = asn1.result.certValue;\n\n      switch (this.certId) {\n        case \"1.2.840.113549.1.9.22.1\":\n          // x509Certificate\n          {\n            var asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\n\n            try {\n              this.parsedValue = new Certificate({\n                schema: asn1Inner.result\n              });\n            } catch (ex) // In some realizations the same OID used for attribute certificates\n            {\n              this.parsedValue = new AttributeCertificateV2({\n                schema: asn1Inner.result\n              });\n            }\n          }\n          break;\n\n        case \"1.2.840.113549.1.9.22.3\":\n          // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\n          {\n            var _asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\n\n            this.parsedValue = new AttributeCertificateV2({\n              schema: _asn1Inner.result\n            });\n          }\n          break;\n\n        case \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\n\n        default:\n          throw new Error(\"Incorrect \\\"certId\\\" value in CertBag: \".concat(this.certId));\n      } //endregion \n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      if (\"parsedValue\" in this) {\n        if (\"acinfo\" in this.parsedValue) // attributeCertificate\n          this.certId = \"1.2.840.113549.1.9.22.3\";else // x509Certificate\n          this.certId = \"1.2.840.113549.1.9.22.1\";\n        this.certValue = new asn1js.OctetString({\n          valueHex: this.parsedValue.toSchema().toBER(false)\n        });\n      }\n\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.certId\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [\"toSchema\" in this.certValue ? this.certValue.toSchema() : this.certValue]\n        })]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        certId: this.certId,\n        certValue: this.certValue.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"certId\":\n          return \"\";\n\n        case \"certValue\":\n          return new asn1js.Any();\n\n        case \"parsedValue\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for CertBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"certId\":\n          return memberValue === \"\";\n\n        case \"certValue\":\n          return memberValue instanceof asn1js.Any;\n\n        case \"parsedValue\":\n          return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for CertBag class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * CertBag ::= SEQUENCE {\r\n     *    certId    BAG-TYPE.&id   ({CertTypes}),\r\n     *    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [id]\r\n       * @property {string} [value]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.id || \"id\"\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Any({\n            name: names.value || \"value\"\n          })] // EXPLICIT ANY value\n\n        })]\n      });\n    }\n  }]);\n\n  return CertBag;\n}(); //**************************************************************************************\n\n\nexport { CertBag as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/CertBag.js"],"names":["asn1js","getParametersValue","clearProps","Certificate","AttributeCertificateV2","CertBag","parameters","certId","defaultValues","certValue","parsedValue","fromSchema","schema","asn1","compareSchema","names","id","value","verified","Error","result","valueBlock","toString","asn1Inner","fromBER","valueHex","ex","OctetString","toSchema","toBER","Sequence","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","toJSON","memberName","Any","memberValue","Object","keys","length","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CertBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc certId\r\n\t\t */\r\n\t\tthis.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc certValue\r\n\t\t */\r\n\t\tthis.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertBag ::= SEQUENCE {\r\n\t *    certId    BAG-TYPE.&id   ({CertTypes}),\r\n\t *    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certId\",\r\n\t\t\t\"certValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"certId\",\r\n\t\t\t\t\tvalue: \"certValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertBag\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get internal properties from parsed schema \r\n\t\tthis.certId = asn1.result.certId.valueBlock.toString();\r\n\t\tthis.certValue = asn1.result.certValue;\r\n\t\t\r\n\t\tswitch(this.certId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.22.1\": // x509Certificate\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new Certificate({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex) // In some realizations the same OID used for attribute certificates\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.3\": // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \"certId\" value in CertBag: ${this.certId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tif(\"acinfo\" in this.parsedValue) // attributeCertificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.3\";\r\n\t\t\telse // x509Certificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.1\";\r\n\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.certId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertId: this.certId,\r\n\t\t\tcertValue: this.certValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _values = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/values\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _includes2 = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _util = _interopRequireDefault(require(\"util\"));\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nvar _window = _interopRequireDefault(require(\"global/window\"));\n\nvar _ipAnonymize = _interopRequireDefault(require(\"ip-anonymize\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _constants = require(\"../constants\");\n\nvar _browserDetection = _interopRequireDefault(require(\"../common/browser-detection\"));\n\nvar _config = require(\"./config\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar OSMap = {\n  'Chrome OS': _config.OS_NAME.chrome,\n  macOS: _config.OS_NAME.MAC,\n  Windows: _config.OS_NAME.WINDOWS,\n  iOS: _config.OS_NAME.IOS,\n  Android: _config.OS_NAME.ANDROID,\n  Linux: _config.OS_NAME.LINUX\n};\n\nvar _BrowserDetection = (0, _browserDetection.default)(),\n    getOSName = _BrowserDetection.getOSName,\n    getOSVersion = _BrowserDetection.getOSVersion,\n    getBrowserName = _BrowserDetection.getBrowserName,\n    getBrowserVersion = _BrowserDetection.getBrowserVersion; // Apply a CIDR /28 format to the IP address\n\n\nvar anonymizeIPAddress = function anonymizeIPAddress(localIp) {\n  return (0, _ipAnonymize.default)(localIp);\n};\n\nvar triggerTimers = function triggerTimers(_ref) {\n  var event = _ref.event,\n      meeting = _ref.meeting,\n      data = _ref.data;\n\n  switch (event) {\n    case _config.eventType.CALL_INITIATED:\n      meeting.setStartCallInitiateJoinReq();\n      break;\n\n    case _config.eventType.LOCUS_JOIN_REQUEST:\n      meeting.setEndCallInitiateJoinReq();\n      meeting.setStartJoinReqResp();\n      break;\n\n    case _config.eventType.LOCUS_JOIN_RESPONSE:\n      meeting.setEndJoinReqResp();\n      meeting.setStartSetupDelay(_config.mediaType.AUDIO);\n      meeting.setStartSetupDelay(_config.mediaType.VIDEO);\n      meeting.setStartSendingMediaDelay(_config.mediaType.AUDIO);\n      meeting.setStartSendingMediaDelay(_config.mediaType.VIDEO);\n      break;\n\n    case _config.eventType.RECEIVING_MEDIA_START:\n      meeting.setEndSetupDelay(data.mediaType);\n      break;\n\n    case _config.eventType.SENDING_MEDIA_START:\n      meeting.setEndSendingMediaDelay(data.mediaType);\n      break;\n\n    case _config.eventType.LOCAL_SDP_GENERATED:\n      meeting.setStartLocalSDPGenRemoteSDPRecvDelay();\n      break;\n\n    case _config.eventType.REMOTE_SDP_RECEIVED:\n      meeting.setEndLocalSDPGenRemoteSDPRecvDelay();\n      break;\n\n    default:\n      break;\n  }\n};\n/**\n * @description Metrics handles all the call metrics events\n * @export\n * @class Metrics\n */\n\n\nvar Metrics = /*#__PURE__*/function () {\n  /**\n     * Create Metrics Object\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n  function Metrics() {\n    (0, _classCallCheck2.default)(this, Metrics);\n\n    if (!Metrics.instance) {\n      /**\n       * @instance\n       * @type {Array}\n       * @private\n       * @memberof Metrics\n       */\n      this._events = [];\n      /**\n      * @instance\n      * @type {MeetingCollection}\n      * @private\n      * @memberof Metrics\n      */\n\n      this.meetingCollection = null;\n      /**\n      * @instance\n      * @type {MeetingCollection}\n      * @private\n      * @memberof Metrics\n      */\n\n      this.keys = (0, _values.default)(_config.eventType);\n      /**\n       * @instance\n       * @type {Metrics}\n       * @private\n       * @memberof Metrics\n       */\n\n      Metrics.instance = this;\n    }\n\n    return Metrics.instance;\n  }\n  /**\n   * Initializes the Metrics singleton with a meeting Collection.\n   *\n   * @param {Object} meetingCollection meetings object\n   * @param {Object} webex  webex SDK object\n   *\n   * @returns {void}\n   */\n\n\n  (0, _createClass2.default)(Metrics, [{\n    key: \"initialSetup\",\n    value: function initialSetup(meetingCollection, webex) {\n      this.meetingCollection = meetingCollection;\n      this.webex = webex;\n    }\n    /**\n     * poste Meeting event metrics\n     * @param {object} options {meetingId/meeting} as a json object\n     * @param {Meeting} options.meeting Meeting object\n     * @param {String} options.meetingId\n     * @param {object} options.data\n     * @param {object} options.event\n     * @returns {object} null\n     */\n\n  }, {\n    key: \"postEvent\",\n    value: function postEvent(options) {\n      var meetingId = options.meetingId,\n          _options$data = options.data,\n          data = _options$data === void 0 ? {} : _options$data,\n          event = options.event;\n      var meeting = options.meeting;\n\n      if (this.keys.indexOf(event) === -1) {\n        _loggerProxy.default.logger.error(\"Metrics:index#postEvent --> Event \".concat(event, \" doesn't exist in dictionary\"));\n      }\n\n      if (!meeting && meetingId) {\n        meeting = this.meetingCollection.get(meetingId);\n        options.meeting = meeting;\n      }\n\n      if (meeting) {\n        triggerTimers(options);\n\n        if (!meeting.callEvents) {\n          meeting.callEvents = [];\n        }\n\n        if (event === _config.eventType.MEDIA_QUALITY) {\n          data.event = event;\n          meeting.sendMediaQualityAnalyzerMetrics(data);\n        } else {\n          meeting.callEvents.push(event);\n          data.event = event;\n          meeting.sendCallAnalyzerMetrics(data);\n        }\n      } else {\n        _loggerProxy.default.logger.info(\"Metrics:index#postEvent --> Event received for meetingId:\".concat(meetingId, \", but meeting not found in collection.\"));\n      }\n    }\n    /**\n     *  Docs for Call analyzer metrics\n    *   https://sqbu-github.cisco.com/WebExSquared/call-analyzer/wiki\n    *   https://sqbu-github.cisco.com/WebExSquared/event-dictionary/blob/master/diagnostic-events.raml\n    */\n\n  }, {\n    key: \"initPayload\",\n    value: function initPayload(eventType, identifiers, options) {\n      var _this$webex$meetings$, _this$webex$meetings$2;\n\n      var payload = {\n        eventId: _uuid.default.v4(),\n        version: 1,\n        origin: {\n          name: 'endpoint',\n          networkType: 'unknown',\n          userAgent: this.userAgentToString(),\n          clientInfo: {\n            clientType: options.clientType,\n            clientVersion: \"\".concat(_config.CLIENT_NAME, \"/\").concat(this.webex.version),\n            localNetworkPrefix: anonymizeIPAddress((_this$webex$meetings$ = this.webex.meetings.geoHintInfo) === null || _this$webex$meetings$ === void 0 ? void 0 : _this$webex$meetings$.clientAddress),\n            osVersion: getOSVersion() || 'unknown',\n            subClientType: options.subClientType,\n            os: this.getOsName(),\n            browser: getBrowserName(),\n            browserVersion: getBrowserVersion()\n          }\n        },\n        originTime: {\n          triggered: new Date().toISOString()\n        },\n        senderCountryCode: (_this$webex$meetings$2 = this.webex.meetings.geoHintInfo) === null || _this$webex$meetings$2 === void 0 ? void 0 : _this$webex$meetings$2.countryCode,\n        event: {\n          name: eventType,\n          canProceed: true,\n          identifiers: identifiers,\n          eventData: {\n            webClientDomain: _window.default.location.hostname\n          }\n        }\n      }; // TODO: more options should be checked and some of them should be mandatory in certain conditions\n\n      if (options) {\n        if (Object.prototype.hasOwnProperty.call(options, 'canProceed')) {\n          payload.event.canProceed = options.canProceed;\n        }\n\n        if (options.errors) {\n          payload.event.errors = options.errors;\n        }\n\n        if (options.mediaType) {\n          payload.event.mediaType = options.mediaType;\n        }\n\n        if (options.trigger) {\n          payload.event.trigger = options.trigger;\n        }\n\n        if (options.pstnAudioType) {\n          payload.event.pstnAudioType = options.pstnAudioType;\n        }\n\n        if (options.mediaCapabilities) {\n          payload.event.mediaCapabilities = options.mediaCapabilities;\n        }\n\n        if (options.recoveredBy) {\n          payload.event.recoveredBy = options.recoveredBy;\n        }\n\n        if (options.joinTimes) {\n          payload.event.joinTimes = options.joinTimes;\n        }\n      }\n\n      return payload;\n    }\n    /**\n     * returns metrics friendly OS versions\n     * @param {String} osName Os name\n     * @returns {String}\n     * @private\n     * @memberof Metrics\n     */\n\n  }, {\n    key: \"getOsName\",\n    value: function getOsName() {\n      var _OSMap$getOSName;\n\n      return (_OSMap$getOSName = OSMap[getOSName()]) !== null && _OSMap$getOSName !== void 0 ? _OSMap$getOSName : _config.OS_NAME.OTHERS;\n    }\n    /**\n     * get the payload specific for a media quality event through call analyzer\n     * @param {String} eventType the event name\n     * @param {Object} identifiers contains the identifiers needed for CA\n     * @param {String} identifiers.correlationId\n     * @param {String} identifiers.locusUrl\n     * @param {String} identifiers.locusId\n     * @param {Object} options\n     * @param {Object} options.intervalData\n     * @param {String} options.clientType\n     * @returns {Object}\n     * @public\n     * @memberof Metrics\n     */\n\n  }, {\n    key: \"initMediaPayload\",\n    value: function initMediaPayload(eventType, identifiers) {\n      var _this$webex$meetings$3, _this$webex$meetings$4;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var audioSetupDelay = options.audioSetupDelay,\n          videoSetupDelay = options.videoSetupDelay,\n          joinTimes = options.joinTimes;\n      var payload = {\n        eventId: _uuid.default.v4(),\n        version: 1,\n        origin: {\n          audioSetupDelay: audioSetupDelay,\n          videoSetupDelay: videoSetupDelay,\n          name: 'endpoint',\n          networkType: options.networkType || _config.UNKNOWN,\n          userAgent: this.userAgentToString(),\n          clientInfo: {\n            clientType: options.clientType,\n            // TODO: Only clientType: 'TEAMS_CLIENT' is whitelisted\n            clientVersion: \"\".concat(_config.CLIENT_NAME, \"/\").concat(this.webex.version),\n            localNetworkPrefix: anonymizeIPAddress((_this$webex$meetings$3 = this.webex.meetings.geoHintInfo) === null || _this$webex$meetings$3 === void 0 ? void 0 : _this$webex$meetings$3.clientAddress),\n            os: this.getOsName(),\n            osVersion: getOSVersion() || _config.UNKNOWN,\n            subClientType: options.subClientType,\n            browser: getBrowserName(),\n            browserVersion: getBrowserVersion()\n          }\n        },\n        originTime: {\n          triggered: new Date().toISOString()\n        },\n        senderCountryCode: (_this$webex$meetings$4 = this.webex.meetings.geoHintInfo) === null || _this$webex$meetings$4 === void 0 ? void 0 : _this$webex$meetings$4.countryCode,\n        event: {\n          name: eventType,\n          canProceed: true,\n          identifiers: identifiers,\n          intervals: [options.intervalData],\n          joinTimes: joinTimes,\n          eventData: {\n            webClientDomain: _window.default.location.hostname\n          },\n          sourceMetadata: {\n            applicationSoftwareType: _config.CLIENT_NAME,\n            applicationSoftwareVersion: this.webex.version,\n            mediaEngineSoftwareType: getBrowserName() || 'browser',\n            mediaEngineSoftwareVersion: getOSVersion() || _config.UNKNOWN,\n            startTime: new Date().toISOString()\n          }\n        }\n      };\n      return payload;\n    }\n    /**\n     * This function Parses a Locus error and returns a diagnostic event payload.\n     * It should keep updating from:\n     * https://sqbu-github.cisco.com/WebExSquared/spark-client-framework/blob/master/spark-client-framework/Adapters/TelephonyAdapter/TelephonyAdapter.cpp#L920\n     *\n     * @param {Object} err the error Object from Locus response\n     * @param {boolean} showToUser true if a toast is shown to user\n     * @returns {{showToUser: boolean, category: string, errorDescription: string,\n     *  errorCode: number, errorData: *, fatal: boolean, name: string}}\n     */\n\n  }, {\n    key: \"parseLocusError\",\n    value: function parseLocusError(err, showToUser) {\n      var errorCode;\n\n      if (err && err.body && err.body.errorCode) {\n        switch (_config.errorCodes[err.body.errorCode]) {\n          case _constants.MEETING_ERRORS.FREE_USER_MAX_PARTICIPANTS_EXCEEDED:\n            errorCode = 3007;\n            break;\n\n          case _constants.MEETING_ERRORS.PAID_USER_MAX_PARTICIPANTS_EXCEEDED:\n          case _constants.MEETING_ERRORS.SERVICE_MAX_PARTICIPANTS_EXCEEDED:\n            errorCode = 3002;\n            break;\n\n          case _constants.MEETING_ERRORS.INACTIVE:\n            errorCode = 4001;\n            break;\n\n          case _constants.MEETING_ERRORS.EXCEEDED_MAX_JOINED_PARTICIPANTS:\n          case _constants.MEETING_ERRORS.EXCEEDED_SERVICE_MAX_PARTICIPANTS:\n            errorCode = 3001;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_IS_LOCKED:\n            errorCode = 4002;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_IS_TERMINATING:\n            errorCode = 4003;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN_INTENT:\n            errorCode = 4004;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN:\n            errorCode = 4005;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_ROLE:\n            errorCode = 4006;\n            break;\n\n          case _constants.MEETING_ERRORS.JOIN_RESTRICTED_USER:\n          case _constants.MEETING_ERRORS.GET_RESTRICTED_USER:\n          case _constants.MEETING_ERRORS.CREATE_MEDIA_RESTRICTED_USER:\n            errorCode = 3005;\n            break;\n\n          case _constants.MEETING_ERRORS.JOIN_RESTRICTED_USER_NOT_IN_ROOM:\n            errorCode = 4007;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_NOT_FOUND:\n            errorCode = 4011;\n            break;\n\n          case _constants.MEETING_ERRORS.NOT_WEBEX_SITE:\n            errorCode = 4012;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_JOIN_TIME:\n            errorCode = 4013;\n            break;\n\n          case _constants.MEETING_ERRORS.PHONE_NUMBER_NOT_A_NUMBER:\n            errorCode = 4016;\n            break;\n\n          case _constants.MEETING_ERRORS.PHONE_NUMBER_TOO_LONG:\n            errorCode = 4017;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_DIALABLE_KEY:\n            errorCode = 4018;\n            break;\n\n          case _constants.MEETING_ERRORS.ONE_ON_ONE_TO_SELF_NOT_ALLOWED:\n            errorCode = 4019;\n            break;\n\n          case _constants.MEETING_ERRORS.REMOVED_PARTICIPANT:\n            errorCode = 4020;\n            break;\n\n          case _constants.MEETING_ERRORS.MEETING_LINK_NOT_FOUND:\n            errorCode = 4021;\n            break;\n\n          case _constants.MEETING_ERRORS.PHONE_NUMBER_TOO_SHORT_AFTER_IDD:\n            errorCode = 4022;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_INVITEE_ADDRESS:\n            errorCode = 4023;\n            break;\n\n          case _constants.MEETING_ERRORS.PMR_ACCOUNT_LOCKED:\n            errorCode = 4024;\n            break;\n\n          case _constants.MEETING_ERRORS.RESOURCE_GUEST_FORBIDDEN:\n            errorCode = 4025;\n            break;\n\n          case _constants.MEETING_ERRORS.PMR_ACCOUNT_SUSPENDED:\n            errorCode = 4026;\n            break;\n\n          case _constants.MEETING_ERRORS.EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE:\n            errorCode = 4027;\n            break;\n\n          case _constants.MEETING_ERRORS.INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST:\n            errorCode = 1006;\n            break;\n\n          case _constants.MEETING_ERRORS.CONVERSATION_NOT_FOUND:\n            errorCode = 4028;\n            break;\n\n          case _constants.MEETING_ERRORS.RECORDING_CONTROL_NOT_SUPPORTED:\n          case _constants.MEETING_ERRORS.RECORDING_NOT_STARTED:\n          case _constants.MEETING_ERRORS.RECORDING_NOT_ENABLED:\n            errorCode = 4029;\n            break;\n\n          default:\n            errorCode = 4008;\n        }\n      } else {\n        errorCode = 4008;\n      }\n\n      return this.generateErrorPayload(errorCode, showToUser, _config.error.name.LOCUS_RESPONSE, err);\n    }\n  }, {\n    key: \"generateErrorPayload\",\n    value: function generateErrorPayload(errorCode, shownToUser, name, err) {\n      if (_config.error.errors[errorCode]) {\n        var errorPayload = {\n          shownToUser: shownToUser || false,\n          category: _config.error.errors[errorCode][2],\n          errorDescription: _config.error.errors[errorCode][0],\n          errorCode: errorCode,\n          fatal: !(0, _includes2.default)(_config.error.notFatalErrorList, errorCode),\n          name: name || _config.error.name.OTHER\n        };\n\n        if (err && err.body) {\n          errorPayload.errorData = err.body;\n        }\n\n        return errorPayload;\n      }\n\n      return null;\n    }\n    /**\n     * Returns a formated string of the user agent.\n     *\n     * @returns {string} formatted user agent information\n     */\n\n  }, {\n    key: \"userAgentToString\",\n    value: function userAgentToString() {\n      var _this$webex$meetings, _this$webex$meetings$5;\n\n      var userAgentOption;\n      var browserInfo;\n\n      var clientInfo = _util.default.format('client=%s', \"\".concat((_this$webex$meetings = this.webex.meetings) === null || _this$webex$meetings === void 0 ? void 0 : (_this$webex$meetings$5 = _this$webex$meetings.metrics) === null || _this$webex$meetings$5 === void 0 ? void 0 : _this$webex$meetings$5.clientName));\n\n      if (['chrome', 'firefox', 'msie', 'msedge', 'safari'].indexOf(getBrowserName().toLowerCase()) !== -1) {\n        browserInfo = _util.default.format('browser=%s', \"\".concat(getBrowserName().toLowerCase(), \"/\").concat(getBrowserVersion().split('.')[0]));\n      }\n\n      var osInfo = _util.default.format('os=%s', \"\".concat(getOSName(), \"/\").concat(getOSVersion().split('.')[0]));\n\n      if (browserInfo) {\n        userAgentOption = \"(\".concat(browserInfo);\n      }\n\n      if (osInfo) {\n        userAgentOption = userAgentOption ? \"\".concat(userAgentOption, \"; \").concat(clientInfo, \"; \").concat(osInfo) : \"\".concat(clientInfo, \"; (\").concat(osInfo);\n      }\n\n      if (userAgentOption) {\n        userAgentOption += ')';\n        return _util.default.format('webex-js-sdk/%s %s', \"\".concat(process.env.NODE_ENV, \"-\").concat(this.webex.version), userAgentOption);\n      }\n\n      return _util.default.format('webex-js-sdk/%s', \"\".concat(process.env.NODE_ENV, \"-\").concat(this.webex.version));\n    }\n    /**\n     * Uploads given metric to the Metrics service as an Behavioral metric.\n     * Metadata about the environment such as browser, OS, SDK and their versions\n     * are automatically added when the metric is sent.\n     *\n     * The Metrics service will send an Behavioral metric to InfluxDB for\n     * aggregation.\n     * See https://confluence-eng-gpk2.cisco.com/conf/display/WBXT/Getting+started+with+Metrics+Service.\n     *\n     * @param {string} metricName  Name of the metric (measurement) to send\n     * @param {Object} metricFields  Key-valye pairs of data or values about this metric\n     * @param {Object} metricTags  Key-value pairs of metric metadata\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sendBehavioralMetric\",\n    value: function sendBehavioralMetric(metricName) {\n      var metricFields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var metricTags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var fields = _objectSpread(_objectSpread({}, metricFields), {}, {\n        browser_version: getBrowserVersion(),\n        os_version: getOSVersion(),\n        sdk_version: this.webex.version,\n        platform: _config.PLATFORM\n      });\n\n      var context = {\n        app: {\n          version: this.webex.version\n        },\n        locale: 'en-US',\n        os: {\n          name: getOSName(),\n          version: getOSVersion()\n        }\n      };\n\n      var tags = _objectSpread(_objectSpread({}, metricTags), {}, {\n        browser: getBrowserName(),\n        org_id: this.webex.credentials.getOrgId(),\n        os: getOSName(),\n        domain: _window.default.location.hostname,\n        client_id: this.webex.credentials.config.client_id,\n        user_id: this.webex.internal.device.userId\n      });\n\n      if (!metricName) {\n        throw Error('Missing behavioral metric name. Please provide one');\n      }\n\n      this.webex.internal.metrics.submitClientMetrics(metricName, {\n        type: ['behavioral', 'operational'],\n        fields: fields,\n        tags: tags,\n        context: context\n      });\n    }\n  }]);\n  return Metrics;\n}(); // Export Metrics singleton ---------------------------------------------------\n\n\nvar instance = new Metrics();\nvar _default = instance;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["OSMap","OS_NAME","chrome","macOS","MAC","Windows","WINDOWS","iOS","IOS","Android","ANDROID","Linux","LINUX","getOSName","getOSVersion","getBrowserName","getBrowserVersion","anonymizeIPAddress","localIp","triggerTimers","event","meeting","data","eventType","CALL_INITIATED","setStartCallInitiateJoinReq","LOCUS_JOIN_REQUEST","setEndCallInitiateJoinReq","setStartJoinReqResp","LOCUS_JOIN_RESPONSE","setEndJoinReqResp","setStartSetupDelay","mediaType","AUDIO","VIDEO","setStartSendingMediaDelay","RECEIVING_MEDIA_START","setEndSetupDelay","SENDING_MEDIA_START","setEndSendingMediaDelay","LOCAL_SDP_GENERATED","setStartLocalSDPGenRemoteSDPRecvDelay","REMOTE_SDP_RECEIVED","setEndLocalSDPGenRemoteSDPRecvDelay","Metrics","instance","_events","meetingCollection","keys","webex","options","meetingId","indexOf","LoggerProxy","logger","error","get","callEvents","MEDIA_QUALITY","sendMediaQualityAnalyzerMetrics","push","sendCallAnalyzerMetrics","info","identifiers","payload","eventId","uuid","v4","version","origin","name","networkType","userAgent","userAgentToString","clientInfo","clientType","clientVersion","CLIENT_NAME","localNetworkPrefix","meetings","geoHintInfo","_this$webex$meetings$","clientAddress","osVersion","subClientType","os","getOsName","browser","browserVersion","originTime","triggered","Date","toISOString","senderCountryCode","_this$webex$meetings$2","countryCode","canProceed","eventData","webClientDomain","window","location","hostname","Object","prototype","hasOwnProperty","call","errors","trigger","pstnAudioType","mediaCapabilities","recoveredBy","joinTimes","OTHERS","audioSetupDelay","videoSetupDelay","UNKNOWN","_this$webex$meetings$3","_this$webex$meetings$4","intervals","intervalData","sourceMetadata","applicationSoftwareType","applicationSoftwareVersion","mediaEngineSoftwareType","mediaEngineSoftwareVersion","startTime","err","showToUser","errorCode","body","ERROR_CODE","MEETING_ERRORS","FREE_USER_MAX_PARTICIPANTS_EXCEEDED","PAID_USER_MAX_PARTICIPANTS_EXCEEDED","SERVICE_MAX_PARTICIPANTS_EXCEEDED","INACTIVE","EXCEEDED_MAX_JOINED_PARTICIPANTS","EXCEEDED_SERVICE_MAX_PARTICIPANTS","MEETING_IS_LOCKED","MEETING_IS_TERMINATING","MEETING_REQUIRE_MODERATOR_PIN_INTENT","MEETING_REQUIRE_MODERATOR_PIN","MEETING_REQUIRE_MODERATOR_ROLE","JOIN_RESTRICTED_USER","GET_RESTRICTED_USER","CREATE_MEDIA_RESTRICTED_USER","JOIN_RESTRICTED_USER_NOT_IN_ROOM","MEETING_NOT_FOUND","NOT_WEBEX_SITE","INVALID_JOIN_TIME","PHONE_NUMBER_NOT_A_NUMBER","PHONE_NUMBER_TOO_LONG","INVALID_DIALABLE_KEY","ONE_ON_ONE_TO_SELF_NOT_ALLOWED","REMOVED_PARTICIPANT","MEETING_LINK_NOT_FOUND","PHONE_NUMBER_TOO_SHORT_AFTER_IDD","INVALID_INVITEE_ADDRESS","PMR_ACCOUNT_LOCKED","RESOURCE_GUEST_FORBIDDEN","PMR_ACCOUNT_SUSPENDED","EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE","INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST","CONVERSATION_NOT_FOUND","RECORDING_CONTROL_NOT_SUPPORTED","RECORDING_NOT_STARTED","RECORDING_NOT_ENABLED","generateErrorPayload","LOCUS_RESPONSE","shownToUser","errorPayload","category","errorDescription","fatal","notFatalErrorList","OTHER","errorData","userAgentOption","browserInfo","util","format","_this$webex$meetings","metrics","_this$webex$meetings$5","clientName","toLowerCase","split","osInfo","process","env","NODE_ENV","metricName","metricFields","metricTags","fields","browser_version","os_version","sdk_version","platform","PLATFORM","context","app","locale","tags","org_id","credentials","getOrgId","domain","client_id","config","user_id","internal","device","userId","Error","submitClientMetrics","type"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport util from 'util';\n\nimport {includes} from 'lodash';\nimport uuid from 'uuid';\nimport window from 'global/window';\nimport anonymize from 'ip-anonymize';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {MEETING_ERRORS} from '../constants';\nimport BrowserDetection from '../common/browser-detection';\n\nimport {\n  error, eventType, errorCodes as ERROR_CODE, OS_NAME, UNKNOWN, CLIENT_NAME,\n  mediaType, PLATFORM\n} from './config';\n\nconst OSMap = {\n  'Chrome OS': OS_NAME.chrome,\n  macOS: OS_NAME.MAC,\n  Windows: OS_NAME.WINDOWS,\n  iOS: OS_NAME.IOS,\n  Android: OS_NAME.ANDROID,\n  Linux: OS_NAME.LINUX\n};\n\nconst {\n  getOSName,\n  getOSVersion,\n  getBrowserName,\n  getBrowserVersion\n} = BrowserDetection();\n\n// Apply a CIDR /28 format to the IP address\nconst anonymizeIPAddress = (localIp) => anonymize(localIp);\n\nconst triggerTimers = ({event, meeting, data}) => {\n  switch (event) {\n    case eventType.CALL_INITIATED:\n      meeting.setStartCallInitiateJoinReq();\n      break;\n    case eventType.LOCUS_JOIN_REQUEST:\n      meeting.setEndCallInitiateJoinReq();\n      meeting.setStartJoinReqResp();\n      break;\n    case eventType.LOCUS_JOIN_RESPONSE:\n      meeting.setEndJoinReqResp();\n      meeting.setStartSetupDelay(mediaType.AUDIO);\n      meeting.setStartSetupDelay(mediaType.VIDEO);\n      meeting.setStartSendingMediaDelay(mediaType.AUDIO);\n      meeting.setStartSendingMediaDelay(mediaType.VIDEO);\n      break;\n    case eventType.RECEIVING_MEDIA_START:\n      meeting.setEndSetupDelay(data.mediaType);\n      break;\n    case eventType.SENDING_MEDIA_START:\n      meeting.setEndSendingMediaDelay(data.mediaType);\n      break;\n    case eventType.LOCAL_SDP_GENERATED:\n      meeting.setStartLocalSDPGenRemoteSDPRecvDelay();\n      break;\n    case eventType.REMOTE_SDP_RECEIVED:\n      meeting.setEndLocalSDPGenRemoteSDPRecvDelay();\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * @description Metrics handles all the call metrics events\n * @export\n * @class Metrics\n */\nclass Metrics {\n  /**\n     * Create Metrics Object\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n  constructor() {\n    if (!Metrics.instance) {\n    /**\n     * @instance\n     * @type {Array}\n     * @private\n     * @memberof Metrics\n     */\n      this._events = [];\n      /**\n     * @instance\n     * @type {MeetingCollection}\n     * @private\n     * @memberof Metrics\n     */\n      this.meetingCollection = null;\n      /**\n     * @instance\n     * @type {MeetingCollection}\n     * @private\n     * @memberof Metrics\n     */\n      this.keys = Object.values(eventType);\n      /**\n       * @instance\n       * @type {Metrics}\n       * @private\n       * @memberof Metrics\n       */\n      Metrics.instance = this;\n    }\n\n    return Metrics.instance;\n  }\n\n  /**\n   * Initializes the Metrics singleton with a meeting Collection.\n   *\n   * @param {Object} meetingCollection meetings object\n   * @param {Object} webex  webex SDK object\n   *\n   * @returns {void}\n   */\n  initialSetup(meetingCollection, webex) {\n    this.meetingCollection = meetingCollection;\n    this.webex = webex;\n  }\n\n  /**\n   * poste Meeting event metrics\n   * @param {object} options {meetingId/meeting} as a json object\n   * @param {Meeting} options.meeting Meeting object\n   * @param {String} options.meetingId\n   * @param {object} options.data\n   * @param {object} options.event\n   * @returns {object} null\n   */\n  postEvent(options) {\n    const {meetingId, data = {}, event} = options;\n    let {meeting} = options;\n\n    if (this.keys.indexOf(event) === -1) {\n      LoggerProxy.logger.error(`Metrics:index#postEvent --> Event ${event} doesn't exist in dictionary`);\n    }\n\n    if (!meeting && meetingId) {\n      meeting = this.meetingCollection.get(meetingId);\n      options.meeting = meeting;\n    }\n\n    if (meeting) {\n      triggerTimers(options);\n\n      if (!meeting.callEvents) {\n        meeting.callEvents = [];\n      }\n      if (event === eventType.MEDIA_QUALITY) {\n        data.event = event;\n        meeting.sendMediaQualityAnalyzerMetrics(data);\n      }\n      else {\n        meeting.callEvents.push(event);\n        data.event = event;\n        meeting.sendCallAnalyzerMetrics(data);\n      }\n    }\n\n    else {\n      LoggerProxy.logger.info(`Metrics:index#postEvent --> Event received for meetingId:${meetingId}, but meeting not found in collection.`);\n    }\n  }\n\n  /**\n   *  Docs for Call analyzer metrics\n  *   https://sqbu-github.cisco.com/WebExSquared/call-analyzer/wiki\n  *   https://sqbu-github.cisco.com/WebExSquared/event-dictionary/blob/master/diagnostic-events.raml\n */\n\n  initPayload(eventType, identifiers, options) {\n    const payload = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin: {\n        name: 'endpoint',\n        networkType: 'unknown',\n        userAgent: this.userAgentToString(),\n        clientInfo: {\n          clientType: options.clientType,\n          clientVersion: `${CLIENT_NAME}/${this.webex.version}`,\n          localNetworkPrefix: anonymizeIPAddress(this.webex.meetings.geoHintInfo?.clientAddress),\n          osVersion: getOSVersion() || 'unknown',\n          subClientType: options.subClientType,\n          os: this.getOsName(),\n          browser: getBrowserName(),\n          browserVersion: getBrowserVersion()\n        }\n      },\n      originTime: {\n        triggered: new Date().toISOString()\n      },\n      senderCountryCode: this.webex.meetings.geoHintInfo?.countryCode,\n      event: {\n        name: eventType,\n        canProceed: true,\n        identifiers,\n        eventData: {webClientDomain: window.location.hostname}\n      }\n    };\n\n    // TODO: more options should be checked and some of them should be mandatory in certain conditions\n    if (options) {\n      if (Object.prototype.hasOwnProperty.call(options, 'canProceed')) {\n        payload.event.canProceed = options.canProceed;\n      }\n      if (options.errors) {\n        payload.event.errors = options.errors;\n      }\n      if (options.mediaType) {\n        payload.event.mediaType = options.mediaType;\n      }\n      if (options.trigger) {\n        payload.event.trigger = options.trigger;\n      }\n      if (options.pstnAudioType) {\n        payload.event.pstnAudioType = options.pstnAudioType;\n      }\n      if (options.mediaCapabilities) {\n        payload.event.mediaCapabilities = options.mediaCapabilities;\n      }\n      if (options.recoveredBy) {\n        payload.event.recoveredBy = options.recoveredBy;\n      }\n      if (options.joinTimes) {\n        payload.event.joinTimes = options.joinTimes;\n      }\n    }\n\n    return payload;\n  }\n\n  /**\n   * returns metrics friendly OS versions\n   * @param {String} osName Os name\n   * @returns {String}\n   * @private\n   * @memberof Metrics\n   */\n  getOsName() {\n    return OSMap[getOSName()] ?? OS_NAME.OTHERS;\n  }\n\n  /**\n   * get the payload specific for a media quality event through call analyzer\n   * @param {String} eventType the event name\n   * @param {Object} identifiers contains the identifiers needed for CA\n   * @param {String} identifiers.correlationId\n   * @param {String} identifiers.locusUrl\n   * @param {String} identifiers.locusId\n   * @param {Object} options\n   * @param {Object} options.intervalData\n   * @param {String} options.clientType\n   * @returns {Object}\n   * @public\n   * @memberof Metrics\n   */\n  initMediaPayload(eventType, identifiers, options = {}) {\n    const {audioSetupDelay, videoSetupDelay, joinTimes} = options;\n\n    const payload = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin: {\n        audioSetupDelay,\n        videoSetupDelay,\n        name: 'endpoint',\n        networkType: options.networkType || UNKNOWN,\n        userAgent: this.userAgentToString(),\n        clientInfo: {\n          clientType: options.clientType, // TODO: Only clientType: 'TEAMS_CLIENT' is whitelisted\n          clientVersion: `${CLIENT_NAME}/${this.webex.version}`,\n          localNetworkPrefix: anonymizeIPAddress(this.webex.meetings.geoHintInfo?.clientAddress),\n          os: this.getOsName(),\n          osVersion: getOSVersion() || UNKNOWN,\n          subClientType: options.subClientType,\n          browser: getBrowserName(),\n          browserVersion: getBrowserVersion()\n        }\n      },\n      originTime: {\n        triggered: new Date().toISOString()\n      },\n      senderCountryCode: this.webex.meetings.geoHintInfo?.countryCode,\n      event: {\n        name: eventType,\n        canProceed: true,\n        identifiers,\n        intervals: [options.intervalData],\n        joinTimes,\n        eventData: {\n          webClientDomain: window.location.hostname\n        },\n        sourceMetadata: {\n          applicationSoftwareType: CLIENT_NAME,\n          applicationSoftwareVersion: this.webex.version,\n          mediaEngineSoftwareType: getBrowserName() || 'browser',\n          mediaEngineSoftwareVersion: getOSVersion() || UNKNOWN,\n          startTime: new Date().toISOString()\n        }\n      }\n    };\n\n    return payload;\n  }\n\n  /**\n   * This function Parses a Locus error and returns a diagnostic event payload.\n   * It should keep updating from:\n   * https://sqbu-github.cisco.com/WebExSquared/spark-client-framework/blob/master/spark-client-framework/Adapters/TelephonyAdapter/TelephonyAdapter.cpp#L920\n   *\n   * @param {Object} err the error Object from Locus response\n   * @param {boolean} showToUser true if a toast is shown to user\n   * @returns {{showToUser: boolean, category: string, errorDescription: string,\n   *  errorCode: number, errorData: *, fatal: boolean, name: string}}\n   */\n  parseLocusError(err, showToUser) {\n    let errorCode;\n\n    if (err && err.body && err.body.errorCode) {\n      switch (ERROR_CODE[err.body.errorCode]) {\n        case MEETING_ERRORS.FREE_USER_MAX_PARTICIPANTS_EXCEEDED:\n          errorCode = 3007;\n          break;\n        case MEETING_ERRORS.PAID_USER_MAX_PARTICIPANTS_EXCEEDED:\n        case MEETING_ERRORS.SERVICE_MAX_PARTICIPANTS_EXCEEDED:\n          errorCode = 3002;\n          break;\n        case MEETING_ERRORS.INACTIVE:\n          errorCode = 4001;\n          break;\n        case MEETING_ERRORS.EXCEEDED_MAX_JOINED_PARTICIPANTS:\n        case MEETING_ERRORS.EXCEEDED_SERVICE_MAX_PARTICIPANTS:\n          errorCode = 3001;\n          break;\n        case MEETING_ERRORS.MEETING_IS_LOCKED:\n          errorCode = 4002;\n          break;\n        case MEETING_ERRORS.MEETING_IS_TERMINATING:\n          errorCode = 4003;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN_INTENT:\n          errorCode = 4004;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN:\n          errorCode = 4005;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_ROLE:\n          errorCode = 4006;\n          break;\n        case MEETING_ERRORS.JOIN_RESTRICTED_USER:\n        case MEETING_ERRORS.GET_RESTRICTED_USER:\n        case MEETING_ERRORS.CREATE_MEDIA_RESTRICTED_USER:\n          errorCode = 3005;\n          break;\n        case MEETING_ERRORS.JOIN_RESTRICTED_USER_NOT_IN_ROOM:\n          errorCode = 4007;\n          break;\n        case MEETING_ERRORS.MEETING_NOT_FOUND:\n          errorCode = 4011;\n          break;\n        case MEETING_ERRORS.NOT_WEBEX_SITE:\n          errorCode = 4012;\n          break;\n        case MEETING_ERRORS.INVALID_JOIN_TIME:\n          errorCode = 4013;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_NOT_A_NUMBER:\n          errorCode = 4016;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_TOO_LONG:\n          errorCode = 4017;\n          break;\n        case MEETING_ERRORS.INVALID_DIALABLE_KEY:\n          errorCode = 4018;\n          break;\n        case MEETING_ERRORS.ONE_ON_ONE_TO_SELF_NOT_ALLOWED:\n          errorCode = 4019;\n          break;\n        case MEETING_ERRORS.REMOVED_PARTICIPANT:\n          errorCode = 4020;\n          break;\n        case MEETING_ERRORS.MEETING_LINK_NOT_FOUND:\n          errorCode = 4021;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_TOO_SHORT_AFTER_IDD:\n          errorCode = 4022;\n          break;\n        case MEETING_ERRORS.INVALID_INVITEE_ADDRESS:\n          errorCode = 4023;\n          break;\n        case MEETING_ERRORS.PMR_ACCOUNT_LOCKED:\n          errorCode = 4024;\n          break;\n        case MEETING_ERRORS.RESOURCE_GUEST_FORBIDDEN:\n          errorCode = 4025;\n          break;\n        case MEETING_ERRORS.PMR_ACCOUNT_SUSPENDED:\n          errorCode = 4026;\n          break;\n        case MEETING_ERRORS.EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE:\n          errorCode = 4027;\n          break;\n        case MEETING_ERRORS.INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST:\n          errorCode = 1006;\n          break;\n        case MEETING_ERRORS.CONVERSATION_NOT_FOUND:\n          errorCode = 4028;\n          break;\n        case MEETING_ERRORS.RECORDING_CONTROL_NOT_SUPPORTED:\n        case MEETING_ERRORS.RECORDING_NOT_STARTED:\n        case MEETING_ERRORS.RECORDING_NOT_ENABLED:\n          errorCode = 4029;\n          break;\n        default:\n          errorCode = 4008;\n      }\n    }\n    else {\n      errorCode = 4008;\n    }\n\n    return this.generateErrorPayload(\n      errorCode, showToUser, error.name.LOCUS_RESPONSE, err\n    );\n  }\n\n\n  generateErrorPayload(errorCode, shownToUser, name, err) {\n    if (error.errors[errorCode]) {\n      const errorPayload = {\n        shownToUser: shownToUser || false,\n        category: error.errors[errorCode][2],\n        errorDescription: error.errors[errorCode][0],\n        errorCode,\n        fatal: !includes(error.notFatalErrorList, errorCode),\n        name: name || error.name.OTHER\n      };\n\n      if (err && err.body) {\n        errorPayload.errorData = err.body;\n      }\n\n      return errorPayload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a formated string of the user agent.\n   *\n   * @returns {string} formatted user agent information\n   */\n  userAgentToString() {\n    let userAgentOption;\n    let browserInfo;\n    const clientInfo = util.format('client=%s', `${this.webex.meetings?.metrics?.clientName}`);\n\n    if (['chrome', 'firefox', 'msie', 'msedge', 'safari'].indexOf(getBrowserName().toLowerCase()) !== -1) {\n      browserInfo = util.format('browser=%s', `${getBrowserName().toLowerCase()}/${getBrowserVersion().split('.')[0]}`);\n    }\n    const osInfo = util.format('os=%s', `${getOSName()}/${getOSVersion().split('.')[0]}`);\n\n    if (browserInfo) {\n      userAgentOption = `(${browserInfo}`;\n    }\n    if (osInfo) {\n      userAgentOption = userAgentOption ? `${userAgentOption}; ${clientInfo}; ${osInfo}` : `${clientInfo}; (${osInfo}`;\n    }\n    if (userAgentOption) {\n      userAgentOption += ')';\n\n      return util.format('webex-js-sdk/%s %s', `${process.env.NODE_ENV}-${this.webex.version}`, userAgentOption);\n    }\n\n    return util.format('webex-js-sdk/%s', `${process.env.NODE_ENV}-${this.webex.version}`);\n  }\n\n  /**\n   * Uploads given metric to the Metrics service as an Behavioral metric.\n   * Metadata about the environment such as browser, OS, SDK and their versions\n   * are automatically added when the metric is sent.\n   *\n   * The Metrics service will send an Behavioral metric to InfluxDB for\n   * aggregation.\n   * See https://confluence-eng-gpk2.cisco.com/conf/display/WBXT/Getting+started+with+Metrics+Service.\n   *\n   * @param {string} metricName  Name of the metric (measurement) to send\n   * @param {Object} metricFields  Key-valye pairs of data or values about this metric\n   * @param {Object} metricTags  Key-value pairs of metric metadata\n   *\n   * @returns {void}\n   */\n  sendBehavioralMetric(metricName, metricFields = {}, metricTags = {}) {\n    const fields = {\n      ...metricFields,\n      browser_version: getBrowserVersion(),\n      os_version: getOSVersion(),\n      sdk_version: this.webex.version,\n      platform: PLATFORM\n    };\n\n    const context = {\n      app: {\n        version: this.webex.version\n      },\n      locale: 'en-US',\n      os: {\n        name: getOSName(),\n        version: getOSVersion()\n      }\n    };\n\n    const tags = {\n      ...metricTags,\n      browser: getBrowserName(),\n      org_id: this.webex.credentials.getOrgId(),\n      os: getOSName(),\n      domain: window.location.hostname,\n      client_id: this.webex.credentials.config.client_id,\n      user_id: this.webex.internal.device.userId\n    };\n\n    if (!metricName) {\n      throw Error('Missing behavioral metric name. Please provide one');\n    }\n\n    this.webex.internal.metrics.submitClientMetrics(metricName, {\n      type: ['behavioral', 'operational'],\n      fields,\n      tags,\n      context\n    });\n  }\n}\n\n// Export Metrics singleton ---------------------------------------------------\nconst instance = new Metrics();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"script"}
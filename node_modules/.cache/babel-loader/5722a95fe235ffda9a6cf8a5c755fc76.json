{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC2898\r\n */\n\nvar PBES2Params = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PBES2Params class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PBES2Params() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PBES2Params);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyDerivationFunc\r\n     */\n    this.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc encryptionScheme\r\n     */\n\n    this.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PBES2Params, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"keyDerivationFunc\", \"encryptionScheme\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({\n        names: {\n          keyDerivationFunc: {\n            names: {\n              blockName: \"keyDerivationFunc\"\n            }\n          },\n          encryptionScheme: {\n            names: {\n              blockName: \"encryptionScheme\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PBES2Params\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.keyDerivationFunc = new AlgorithmIdentifier({\n        schema: asn1.result.keyDerivationFunc\n      });\n      this.encryptionScheme = new AlgorithmIdentifier({\n        schema: asn1.result.encryptionScheme\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [this.keyDerivationFunc.toSchema(), this.encryptionScheme.toSchema()]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keyDerivationFunc: this.keyDerivationFunc.toJSON(),\n        encryptionScheme: this.encryptionScheme.toJSON()\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"keyDerivationFunc\":\n          return new AlgorithmIdentifier();\n\n        case \"encryptionScheme\":\n          return new AlgorithmIdentifier();\n\n        default:\n          throw new Error(\"Invalid member name for PBES2Params class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PBES2-params ::= SEQUENCE {\r\n     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [keyDerivationFunc]\r\n       * @property {string} [encryptionScheme]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [AlgorithmIdentifier.schema(names.keyDerivationFunc || {}), AlgorithmIdentifier.schema(names.encryptionScheme || {})]\n      });\n    }\n  }]);\n\n  return PBES2Params;\n}(); //**************************************************************************************\n\n\nexport { PBES2Params as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PBES2Params.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","PBES2Params","parameters","keyDerivationFunc","defaultValues","encryptionScheme","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","Sequence","value","toSchema","toJSON","memberName","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBES2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBES2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyDerivationFunc\r\n\t\t */\r\n\t\tthis.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionScheme\r\n\t\t */\r\n\t\tthis.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyDerivationFunc\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptionScheme\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBES2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBES2-params ::= SEQUENCE {\r\n\t *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n\t *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationFunc]\r\n\t\t * @property {string} [encryptionScheme]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionScheme || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyDerivationFunc\",\r\n\t\t\t\"encryptionScheme\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBES2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyDerivationFunc: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyDerivationFunc\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptionScheme: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionScheme\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBES2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\r\n\t\tthis.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.keyDerivationFunc.toSchema(),\r\n\t\t\t\tthis.encryptionScheme.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyDerivationFunc: this.keyDerivationFunc.toJSON(),\r\n\t\t\tencryptionScheme: this.encryptionScheme.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _httpCore = require(\"@webex/http-core\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @class\n */\n\n\nvar RequestEventInterceptor = /*#__PURE__*/function (_Interceptor) {\n  (0, _inherits2.default)(RequestEventInterceptor, _Interceptor);\n\n  var _super = _createSuper(RequestEventInterceptor);\n\n  function RequestEventInterceptor() {\n    (0, _classCallCheck2.default)(this, RequestEventInterceptor);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(RequestEventInterceptor, [{\n    key: \"onRequest\",\n    value:\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @returns {Object}\n     */\n    function onRequest(options) {\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:start', options);\n      } catch (error) {\n        logger.warn('event handler for request:start failed ', error);\n      }\n\n      return _promise.default.resolve(options);\n    }\n    /**\n     * @see Interceptor#onRequest\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"onRequestError\",\n    value: function onRequestError(options, reason) {\n      // We need to do the normal onRequest logging, but then log how the request\n      // failed since the response logger won't be called.\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:end', options, reason);\n        this.webex.trigger('request:failure', options, reason);\n      } catch (error) {\n        logger.warn('event handler for request:end failed ', error);\n      }\n\n      return _promise.default.reject(reason);\n    }\n    /**\n     * @see Interceptor#onResponse\n     * @param {Object} options\n     * @param {HttpResponse} response\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"onResponse\",\n    value: function onResponse(options, response) {\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:success', response.options, response);\n      } catch (error) {\n        logger.warn('event handler for request:success failed ', error);\n      }\n\n      return _promise.default.resolve(response);\n    }\n    /**\n     * @see Interceptor#onResponseError\n     * @param {Object} options\n     * @param {Error} reason\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"onResponseError\",\n    value: function onResponseError(options, reason) {\n      var logger = (0, _get2.default)(this, 'webex.logger', console);\n\n      try {\n        this.webex.trigger('request:end', options, reason);\n        this.webex.trigger('request:failure', options, reason);\n      } catch (error) {\n        logger.warn('event handler for request:failure failed ', error);\n      }\n\n      return _promise.default.reject(reason);\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * @returns {RequestEventInterceptor}\n     */\n    function create() {\n      return new RequestEventInterceptor({\n        webex: this\n      });\n    }\n  }]);\n  return RequestEventInterceptor;\n}(_httpCore.Interceptor);\n\nexports.default = RequestEventInterceptor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;IACqBA,uB;;;;;;;;;;;;;AAQnB;AACF;AACA;AACA;AACA;AACE,uBAAUC,OAAV,EAAmB;AACjB,UAAMC,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,eAAnB,EAAoCJ,OAApC;AADF,QAGA,OAAOK,KAAP,EAAc;AACZJ,cAAM,CAACK,IAAPL,CAAY,yCAAZA,EAAuDI,KAAvDJ;AACD;;AAED,aAAOM,iBAAQC,OAAR,CAAgBR,OAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wBAAeA,OAAf,EAAwBS,MAAxB,EAAgC;AAC9B;AACA;AACA,UAAMR,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,aAAnB,EAAkCJ,OAAlC,EAA2CS,MAA3C;AACA,aAAKN,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCJ,OAAtC,EAA+CS,MAA/C;AAFF,QAIA,OAAOJ,KAAP,EAAc;AACZJ,cAAM,CAACK,IAAPL,CAAY,uCAAZA,EAAqDI,KAArDJ;AACD;;AAED,aAAOM,iBAAQG,MAAR,CAAeD,MAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAWT,OAAX,EAAoBW,QAApB,EAA8B;AAC5B,UAAMV,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCO,QAAQ,CAACX,OAA/C,EAAwDW,QAAxD;AADF,QAGA,OAAON,KAAP,EAAc;AACZJ,cAAM,CAACK,IAAPL,CAAY,2CAAZA,EAAyDI,KAAzDJ;AACD;;AAED,aAAOM,iBAAQC,OAAR,CAAgBG,QAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBX,OAAhB,EAAyBS,MAAzB,EAAiC;AAC/B,UAAMR,MAAM,GAAG,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,aAAnB,EAAkCJ,OAAlC,EAA2CS,MAA3C;AACA,aAAKN,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCJ,OAAtC,EAA+CS,MAA/C;AAFF,QAIA,OAAOJ,KAAP,EAAc;AACZJ,cAAM,CAACK,IAAPL,CAAY,2CAAZA,EAAyDI,KAAzDJ;AACD;;AAED,aAAOM,iBAAQG,MAAR,CAAeD,MAAf,CAAP;AACD;;;;AApFD;AACF;AACA;AACE,sBAAgB;AACd,aAAO,IAAIV,uBAAJ,CAA4B;AAACI,aAAK,EAAE;AAAR,OAA5B,CAAP;AACD;;;EANkDS,qB","names":["RequestEventInterceptor","options","logger","console","webex","trigger","error","warn","_promise","resolve","reason","reject","response","Interceptor"],"sources":["request-event.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\n/**\n * @class\n */\nexport default class RequestEventInterceptor extends Interceptor {\n  /**\n   * @returns {RequestEventInterceptor}\n   */\n  static create() {\n    return new RequestEventInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:start', options);\n    }\n    catch (error) {\n      logger.warn('event handler for request:start failed ', error);\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:end failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:success', response.options, response);\n    }\n    catch (error) {\n      logger.warn('event handler for request:success failed ', error);\n    }\n\n    return Promise.resolve(response);\n  }\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:failure failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
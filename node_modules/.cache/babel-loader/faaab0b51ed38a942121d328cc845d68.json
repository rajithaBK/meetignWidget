{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5480\r\n */\n\nvar ECPublicKey = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ECCPublicKey class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function ECPublicKey() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ECPublicKey);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc type\r\n     */\n    this.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\n    /**\r\n     * @type {ArrayBuffer}\r\n     * @desc values\r\n     */\n\n    this.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\n    /**\r\n     * @type {string}\r\n     * @desc namedCurve\r\n     */\n\n    this.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n    //region If input argument array contains \"json\" for this object\n\n    if (\"json\" in parameters) this.fromJSON(parameters.json); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(ECPublicKey, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert ArrayBuffer into current class\r\n     * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n     */\n    function fromSchema(schema) {\n      //region Check the schema is valid\n      if (schema instanceof ArrayBuffer === false) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n      var view = new Uint8Array(schema);\n      if (view[0] !== 0x04) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\"); //endregion\n      //region Get internal properties from parsed schema\n\n      var coordinateLength;\n\n      switch (this.namedCurve) {\n        case \"1.2.840.10045.3.1.7\":\n          // P-256\n          coordinateLength = 32;\n          break;\n\n        case \"1.3.132.0.34\":\n          // P-384\n          coordinateLength = 48;\n          break;\n\n        case \"1.3.132.0.35\":\n          // P-521\n          coordinateLength = 66;\n          break;\n\n        default:\n          throw new Error(\"Incorrect curve OID: \".concat(this.namedCurve));\n      }\n\n      if (schema.byteLength !== coordinateLength * 2 + 1) throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n      this.x = schema.slice(1, coordinateLength + 1);\n      this.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      return new asn1js.RawData({\n        data: utilConcatBuf(new Uint8Array([0x04]).buffer, this.x, this.y)\n      });\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var crvName = \"\";\n\n      switch (this.namedCurve) {\n        case \"1.2.840.10045.3.1.7\":\n          // P-256\n          crvName = \"P-256\";\n          break;\n\n        case \"1.3.132.0.34\":\n          // P-384\n          crvName = \"P-384\";\n          break;\n\n        case \"1.3.132.0.35\":\n          // P-521\n          crvName = \"P-521\";\n          break;\n\n        default:\n      }\n\n      return {\n        crv: crvName,\n        x: toBase64(arrayBufferToString(this.x), true, true, false),\n        y: toBase64(arrayBufferToString(this.y), true, true, false)\n      };\n    } //**********************************************************************************\n\n    /**\r\n     * Convert JSON value into current object\r\n     * @param {Object} json\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var coodinateLength = 0;\n\n      if (\"crv\" in json) {\n        switch (json.crv.toUpperCase()) {\n          case \"P-256\":\n            this.namedCurve = \"1.2.840.10045.3.1.7\";\n            coodinateLength = 32;\n            break;\n\n          case \"P-384\":\n            this.namedCurve = \"1.3.132.0.34\";\n            coodinateLength = 48;\n            break;\n\n          case \"P-521\":\n            this.namedCurve = \"1.3.132.0.35\";\n            coodinateLength = 66;\n            break;\n\n          default:\n        }\n      } else throw new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n      if (\"x\" in json) {\n        var convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\n\n        if (convertBuffer.byteLength < coodinateLength) {\n          this.x = new ArrayBuffer(coodinateLength);\n          var view = new Uint8Array(this.x);\n          var convertBufferView = new Uint8Array(convertBuffer);\n          view.set(convertBufferView, 1);\n        } else this.x = convertBuffer.slice(0, coodinateLength);\n      } else throw new Error(\"Absent mandatory parameter \\\"x\\\"\");\n\n      if (\"y\" in json) {\n        var _convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\n\n        if (_convertBuffer.byteLength < coodinateLength) {\n          this.y = new ArrayBuffer(coodinateLength);\n\n          var _view = new Uint8Array(this.y);\n\n          var _convertBufferView = new Uint8Array(_convertBuffer);\n\n          _view.set(_convertBufferView, 1);\n        } else this.y = _convertBuffer.slice(0, coodinateLength);\n      } else throw new Error(\"Absent mandatory parameter \\\"y\\\"\");\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"x\":\n        case \"y\":\n          return new ArrayBuffer(0);\n\n        case \"namedCurve\":\n          return \"\";\n\n        default:\n          throw new Error(\"Invalid member name for ECCPublicKey class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"x\":\n        case \"y\":\n          return isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName));\n\n        case \"namedCurve\":\n          return memberValue === \"\";\n\n        default:\n          throw new Error(\"Invalid member name for ECCPublicKey class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new asn1js.RawData();\n    }\n  }]);\n\n  return ECPublicKey;\n}(); //**************************************************************************************\n\n\nexport { ECPublicKey as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/ECPublicKey.js"],"names":["asn1js","getParametersValue","utilConcatBuf","isEqualBuffer","toBase64","fromBase64","arrayBufferToString","stringToArrayBuffer","ECPublicKey","parameters","x","defaultValues","y","namedCurve","fromSchema","schema","fromJSON","json","ArrayBuffer","Error","view","Uint8Array","coordinateLength","byteLength","slice","RawData","data","buffer","crvName","crv","coodinateLength","toUpperCase","convertBuffer","convertBufferView","set","memberName","memberValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
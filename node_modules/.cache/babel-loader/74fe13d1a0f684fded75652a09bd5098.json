{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC2898\r\n */\n\nvar PBKDF2Params = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PBKDF2Params class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PBKDF2Params() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PBKDF2Params);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Object}\r\n     * @desc salt\r\n     */\n    this.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\n    /**\r\n     * @type {number}\r\n     * @desc iterationCount\r\n     */\n\n    this.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\n    if (\"keyLength\" in parameters)\n      /**\r\n       * @type {number}\r\n       * @desc keyLength\r\n       */\n      this.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\n    if (\"prf\" in parameters)\n      /**\r\n       * @type {AlgorithmIdentifier}\r\n       * @desc prf\r\n       */\n      this.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PBKDF2Params, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"salt\", \"iterationCount\", \"keyLength\", \"prf\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PBKDF2Params.schema({\n        names: {\n          saltPrimitive: \"salt\",\n          saltConstructed: {\n            names: {\n              blockName: \"salt\"\n            }\n          },\n          iterationCount: \"iterationCount\",\n          keyLength: \"keyLength\",\n          prf: {\n            names: {\n              blockName: \"prf\",\n              optional: true\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PBKDF2Params\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.salt = asn1.result.salt;\n      this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\n      if (\"keyLength\" in asn1.result) this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\n      if (\"prf\" in asn1.result) this.prf = new AlgorithmIdentifier({\n        schema: asn1.result.prf\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence \n      var outputArray = [];\n      outputArray.push(this.salt);\n      outputArray.push(new asn1js.Integer({\n        value: this.iterationCount\n      }));\n\n      if (\"keyLength\" in this) {\n        if (PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength) outputArray.push(new asn1js.Integer({\n          value: this.keyLength\n        }));\n      }\n\n      if (\"prf\" in this) {\n        if (PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false) outputArray.push(this.prf.toSchema());\n      } //endregion \n      //region Construct and return new ASN.1 schema for this object \n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion \n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        salt: this.salt.toJSON(),\n        iterationCount: this.iterationCount\n      };\n\n      if (\"keyLength\" in this) {\n        if (PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength) _object.keyLength = this.keyLength;\n      }\n\n      if (\"prf\" in this) {\n        if (PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false) _object.prf = this.prf.toJSON();\n      }\n\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"salt\":\n          return {};\n\n        case \"iterationCount\":\n          return -1;\n\n        case \"keyLength\":\n          return 0;\n\n        case \"prf\":\n          return new AlgorithmIdentifier({\n            algorithmId: \"1.3.14.3.2.26\",\n            // SHA-1\n            algorithmParams: new asn1js.Null()\n          });\n\n        default:\n          throw new Error(\"Invalid member name for PBKDF2Params class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PBKDF2-params ::= SEQUENCE {\r\n     *    salt CHOICE {\r\n     *        specified OCTET STRING,\r\n     *        otherSource AlgorithmIdentifier },\r\n     *  iterationCount INTEGER (1..MAX),\r\n     *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n     *  prf AlgorithmIdentifier\r\n     *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [saltPrimitive]\r\n       * @property {string} [saltConstructed]\r\n       * @property {string} [iterationCount]\r\n       * @property {string} [keyLength]\r\n       * @property {string} [prf]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Choice({\n          value: [new asn1js.OctetString({\n            name: names.saltPrimitive || \"\"\n          }), AlgorithmIdentifier.schema(names.saltConstructed || {})]\n        }), new asn1js.Integer({\n          name: names.iterationCount || \"\"\n        }), new asn1js.Integer({\n          name: names.keyLength || \"\",\n          optional: true\n        }), AlgorithmIdentifier.schema(names.prf || {\n          names: {\n            optional: true\n          }\n        })]\n      });\n    }\n  }]);\n\n  return PBKDF2Params;\n}(); //**************************************************************************************\n\n\nexport { PBKDF2Params as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PBKDF2Params.js"],"names":["asn1js","getParametersValue","clearProps","AlgorithmIdentifier","PBKDF2Params","parameters","salt","defaultValues","iterationCount","keyLength","prf","fromSchema","schema","asn1","compareSchema","names","saltPrimitive","saltConstructed","blockName","optional","verified","Error","result","valueBlock","valueDec","outputArray","push","Integer","value","isEqual","toSchema","Sequence","_object","toJSON","memberName","algorithmId","algorithmParams","Null","name","Choice","OctetString"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C;AACA,OAAOC,mBAAP,MAAgC,0BAAhC,C,CACA;;AACA;AACA;AACA;;IACqBC,Y;AAEpB;;AACA;AACD;AACA;AACA;AACA;AACC,0BACA;AAAA,QADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,IAAL,GAAYL,kBAAkB,CAACI,UAAD,EAAa,MAAb,EAAqBD,YAAY,CAACG,aAAb,CAA2B,MAA3B,CAArB,CAA9B;AACA;AACF;AACA;AACA;;AACE,SAAKC,cAAL,GAAsBP,kBAAkB,CAACI,UAAD,EAAa,gBAAb,EAA+BD,YAAY,CAACG,aAAb,CAA2B,gBAA3B,CAA/B,CAAxC;AAEA,QAAG,eAAeF,UAAlB;AACC;AACH;AACA;AACA;AACG,WAAKI,SAAL,GAAiBR,kBAAkB,CAACI,UAAD,EAAa,WAAb,EAA0BD,YAAY,CAACG,aAAb,CAA2B,WAA3B,CAA1B,CAAnC;AAED,QAAG,SAASF,UAAZ;AACC;AACH;AACA;AACA;AACG,WAAKK,GAAL,GAAWT,kBAAkB,CAACI,UAAD,EAAa,KAAb,EAAoBD,YAAY,CAACG,aAAb,CAA2B,KAA3B,CAApB,CAA7B,CAzBF,CA0BC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EA9BF,CA+BC;AACA,G,CACD;;AACA;AACD;AACA;AACA;;;;;WA0EC;;AACA;AACD;AACA;AACA;AACC,wBAAWA,MAAX,EACA;AACC;AACAV,MAAAA,UAAU,CAACU,MAAD,EAAS,CAClB,MADkB,EAElB,gBAFkB,EAGlB,WAHkB,EAIlB,KAJkB,CAAT,CAAV,CAFD,CAQC;AAEA;;AACA,UAAMC,IAAI,GAAGb,MAAM,CAACc,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZR,YAAY,CAACQ,MAAb,CAAoB;AACnBG,QAAAA,KAAK,EAAE;AACNC,UAAAA,aAAa,EAAE,MADT;AAENC,UAAAA,eAAe,EAAE;AAChBF,YAAAA,KAAK,EAAE;AACNG,cAAAA,SAAS,EAAE;AADL;AADS,WAFX;AAONV,UAAAA,cAAc,EAAE,gBAPV;AAQNC,UAAAA,SAAS,EAAE,WARL;AASNC,UAAAA,GAAG,EAAE;AACJK,YAAAA,KAAK,EAAE;AACNG,cAAAA,SAAS,EAAE,KADL;AAENC,cAAAA,QAAQ,EAAE;AAFJ;AADH;AATC;AADY,OAApB,CAFY,CAAb;AAsBA,UAAGN,IAAI,CAACO,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN,CAlCF,CAmCC;AAEA;;AACA,WAAKf,IAAL,GAAYO,IAAI,CAACS,MAAL,CAAYhB,IAAxB;AACA,WAAKE,cAAL,GAAsBK,IAAI,CAACS,MAAL,CAAYd,cAAZ,CAA2Be,UAA3B,CAAsCC,QAA5D;AAEA,UAAG,eAAeX,IAAI,CAACS,MAAvB,EACC,KAAKb,SAAL,GAAiBI,IAAI,CAACS,MAAL,CAAYb,SAAZ,CAAsBc,UAAtB,CAAiCC,QAAlD;AAED,UAAG,SAASX,IAAI,CAACS,MAAjB,EACC,KAAKZ,GAAL,GAAW,IAAIP,mBAAJ,CAAwB;AAAES,QAAAA,MAAM,EAAEC,IAAI,CAACS,MAAL,CAAYZ;AAAtB,OAAxB,CAAX,CA7CF,CA8CC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,oBACA;AACC;AACA,UAAMe,WAAW,GAAG,EAApB;AAEAA,MAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKpB,IAAtB;AACAmB,MAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAI1B,MAAM,CAAC2B,OAAX,CAAmB;AAAEC,QAAAA,KAAK,EAAE,KAAKpB;AAAd,OAAnB,CAAjB;;AAEA,UAAG,eAAe,IAAlB,EACA;AACC,YAAGJ,YAAY,CAACG,aAAb,CAA2B,WAA3B,MAA4C,KAAKE,SAApD,EACCgB,WAAW,CAACC,IAAZ,CAAiB,IAAI1B,MAAM,CAAC2B,OAAX,CAAmB;AAAEC,UAAAA,KAAK,EAAE,KAAKnB;AAAd,SAAnB,CAAjB;AACD;;AAED,UAAG,SAAS,IAAZ,EACA;AACC,YAAGL,YAAY,CAACG,aAAb,CAA2B,KAA3B,EAAkCsB,OAAlC,CAA0C,KAAKnB,GAA/C,MAAwD,KAA3D,EACCe,WAAW,CAACC,IAAZ,CAAiB,KAAKhB,GAAL,CAASoB,QAAT,EAAjB;AACD,OAjBF,CAkBC;AAEA;;;AACA,aAAQ,IAAI9B,MAAM,CAAC+B,QAAX,CAAoB;AAC3BH,QAAAA,KAAK,EAAEH;AADoB,OAApB,CAAR,CArBD,CAwBC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBACA;AACC,UAAMO,OAAO,GAAG;AACf1B,QAAAA,IAAI,EAAE,KAAKA,IAAL,CAAU2B,MAAV,EADS;AAEfzB,QAAAA,cAAc,EAAE,KAAKA;AAFN,OAAhB;;AAKA,UAAG,eAAe,IAAlB,EACA;AACC,YAAGJ,YAAY,CAACG,aAAb,CAA2B,WAA3B,MAA4C,KAAKE,SAApD,EACCuB,OAAO,CAACvB,SAAR,GAAoB,KAAKA,SAAzB;AACD;;AAED,UAAG,SAAS,IAAZ,EACA;AACC,YAAGL,YAAY,CAACG,aAAb,CAA2B,KAA3B,EAAkCsB,OAAlC,CAA0C,KAAKnB,GAA/C,MAAwD,KAA3D,EACCsB,OAAO,CAACtB,GAAR,GAAc,KAAKA,GAAL,CAASuB,MAAT,EAAd;AACD;;AAED,aAAOD,OAAP;AACA,K,CACD;;;;WAzLA,uBAAqBE,UAArB,EACA;AACC,cAAOA,UAAP;AAEC,aAAK,MAAL;AACC,iBAAO,EAAP;;AACD,aAAK,gBAAL;AACC,iBAAQ,CAAC,CAAT;;AACD,aAAK,WAAL;AACC,iBAAO,CAAP;;AACD,aAAK,KAAL;AACC,iBAAO,IAAI/B,mBAAJ,CAAwB;AAC9BgC,YAAAA,WAAW,EAAE,eADiB;AACA;AAC9BC,YAAAA,eAAe,EAAE,IAAIpC,MAAM,CAACqC,IAAX;AAFa,WAAxB,CAAP;;AAID;AACC,gBAAM,IAAIhB,KAAJ,uDAAyDa,UAAzD,EAAN;AAdF;AAgBA,K,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBACA;AAAA,UADc7B,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,UAAMU,KAAK,GAAGd,kBAAkB,CAACI,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,aAAQ,IAAIL,MAAM,CAAC+B,QAAX,CAAoB;AAC3BO,QAAAA,IAAI,EAAGvB,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BU,QAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAACuC,MAAX,CAAkB;AACjBX,UAAAA,KAAK,EAAE,CACN,IAAI5B,MAAM,CAACwC,WAAX,CAAuB;AAAEF,YAAAA,IAAI,EAAGvB,KAAK,CAACC,aAAN,IAAuB;AAAhC,WAAvB,CADM,EAENb,mBAAmB,CAACS,MAApB,CAA2BG,KAAK,CAACE,eAAN,IAAyB,EAApD,CAFM;AADU,SAAlB,CADM,EAON,IAAIjB,MAAM,CAAC2B,OAAX,CAAmB;AAAEW,UAAAA,IAAI,EAAGvB,KAAK,CAACP,cAAN,IAAwB;AAAjC,SAAnB,CAPM,EAQN,IAAIR,MAAM,CAAC2B,OAAX,CAAmB;AAClBW,UAAAA,IAAI,EAAGvB,KAAK,CAACN,SAAN,IAAmB,EADR;AAElBU,UAAAA,QAAQ,EAAE;AAFQ,SAAnB,CARM,EAYNhB,mBAAmB,CAACS,MAApB,CAA2BG,KAAK,CAACL,GAAN,IAAa;AACvCK,UAAAA,KAAK,EAAE;AACNI,YAAAA,QAAQ,EAAE;AADJ;AADgC,SAAxC,CAZM;AAFoB,OAApB,CAAR;AAqBA;;;;KAmHF;;;SA1OqBf,Y","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t\r\n\t\tif(\"keyLength\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc keyLength\r\n\t\t\t */\r\n\t\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t\r\n\t\tif(\"prf\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc prf\r\n\t\t\t */\r\n\t\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBKDF2-params ::= SEQUENCE {\r\n\t *    salt CHOICE {\r\n\t *        specified OCTET STRING,\r\n\t *        otherSource AlgorithmIdentifier },\r\n\t *  iterationCount INTEGER (1..MAX),\r\n\t *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t *  prf AlgorithmIdentifier\r\n\t *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"salt\",\r\n\t\t\t\"iterationCount\",\r\n\t\t\t\"keyLength\",\r\n\t\t\t\"prf\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\t_object.keyLength = this.keyLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\t_object.prf = this.prf.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
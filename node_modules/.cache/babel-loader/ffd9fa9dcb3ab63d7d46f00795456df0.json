{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar ContentInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ContentInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function ContentInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ContentInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc contentType\r\n     */\n    this.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\n    /**\r\n     * @type {Any}\r\n     * @desc content\r\n     */\n\n    this.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(ContentInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"contentType\", \"content\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, ContentInfo.schema());\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ContentInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.contentType = asn1.result.contentType.valueBlock.toString();\n      this.content = asn1.result.content; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: [new asn1js.ObjectIdentifier({\n          value: this.contentType\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [this.content] // EXPLICIT ANY value\n\n        })]\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {\n        contentType: this.contentType\n      };\n      if (!(this.content instanceof asn1js.Any)) object.content = this.content.toJSON();\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"contentType\":\n          return \"\";\n\n        case \"content\":\n          return new asn1js.Any();\n\n        default:\n          throw new Error(\"Invalid member name for ContentInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"contentType\":\n          return memberValue === \"\";\n\n        case \"content\":\n          return memberValue instanceof asn1js.Any;\n\n        default:\n          throw new Error(\"Invalid member name for ContentInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * ContentInfo ::= SEQUENCE {\r\n     *    contentType ContentType,\r\n     *    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [contentType]\r\n       * @property {string} [content]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      if (\"optional\" in names === false) names.optional = false;\n      return new asn1js.Sequence({\n        name: names.blockName || \"ContentInfo\",\n        optional: names.optional,\n        value: [new asn1js.ObjectIdentifier({\n          name: names.contentType || \"contentType\"\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Any({\n            name: names.content || \"content\"\n          })] // EXPLICIT ANY value\n\n        })]\n      });\n    }\n  }]);\n\n  return ContentInfo;\n}(); //**************************************************************************************\n\n\nexport { ContentInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/ContentInfo.js"],"names":["asn1js","getParametersValue","clearProps","ContentInfo","parameters","contentType","defaultValues","content","fromSchema","schema","asn1","compareSchema","verified","Error","result","valueBlock","toString","Sequence","value","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","object","Any","toJSON","memberName","memberValue","names","optional","name","blockName"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class ContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc content\r\n\t\t */\r\n\t\tthis.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [content]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ContentInfo\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"contentType\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.content || \"content\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"content\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.content = asn1.result.content;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.content] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\r\n\t\tif(!(this.content instanceof asn1js.Any))\r\n\t\t\tobject.content = this.content.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
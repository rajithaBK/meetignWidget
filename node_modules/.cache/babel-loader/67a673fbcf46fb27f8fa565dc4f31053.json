{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar ExtKeyUsage = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for ExtKeyUsage class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function ExtKeyUsage() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ExtKeyUsage);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {Array.<string>}\r\n     * @desc keyPurposes\r\n     */\n    this.keyPurposes = getParametersValue(parameters, \"keyPurposes\", ExtKeyUsage.defaultValues(\"keyPurposes\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(ExtKeyUsage, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"keyPurposes\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, ExtKeyUsage.schema({\n        names: {\n          keyPurposes: \"keyPurposes\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for ExtKeyUsage\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.keyPurposes = Array.from(asn1.result.keyPurposes, function (element) {\n        return element.valueBlock.toString();\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      return new asn1js.Sequence({\n        value: Array.from(this.keyPurposes, function (element) {\n          return new asn1js.ObjectIdentifier({\n            value: element\n          });\n        })\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keyPurposes: Array.from(this.keyPurposes)\n      };\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"keyPurposes\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for ExtKeyUsage class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * ExtKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\r\n     *\r\n     * KeyPurposeId ::= OBJECT IDENTIFIER\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [keyPurposes]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Repeated({\n          name: names.keyPurposes || \"\",\n          value: new asn1js.ObjectIdentifier()\n        })]\n      });\n    }\n  }]);\n\n  return ExtKeyUsage;\n}(); //**************************************************************************************\n\n\nexport { ExtKeyUsage as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/ExtKeyUsage.js"],"names":["asn1js","getParametersValue","clearProps","ExtKeyUsage","parameters","keyPurposes","defaultValues","fromSchema","schema","asn1","compareSchema","names","verified","Error","Array","from","result","element","valueBlock","toString","Sequence","value","ObjectIdentifier","memberName","name","blockName","Repeated"],"mappings":";;AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,SAA/C,C,CACA;;AACA;AACA;AACA;;IACqBC,W;AAEpB;;AACA;AACD;AACA;AACA;AACA;AACC,yBACA;AAAA,QADYC,UACZ,uEADyB,EACzB;;AAAA;;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,WAAL,GAAmBJ,kBAAkB,CAACG,UAAD,EAAa,aAAb,EAA4BD,WAAW,CAACG,aAAZ,CAA0B,aAA1B,CAA5B,CAArC,CAND,CAOC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EAXF,CAYC;AACA,G,CACD;;AACA;AACD;AACA;AACA;;;;;WA4CC;;AACA;AACD;AACA;AACA;AACC,wBAAWA,MAAX,EACA;AACC;AACAN,MAAAA,UAAU,CAACM,MAAD,EAAS,CAClB,aADkB,CAAT,CAAV,CAFD,CAKC;AAEA;;AACA,UAAMC,IAAI,GAAGT,MAAM,CAACU,aAAP,CAAqBF,MAArB,EACZA,MADY,EAEZL,WAAW,CAACK,MAAZ,CAAmB;AAClBG,QAAAA,KAAK,EAAE;AACNN,UAAAA,WAAW,EAAE;AADP;AADW,OAAnB,CAFY,CAAb;AASA,UAAGI,IAAI,CAACG,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN,CAlBF,CAmBC;AAEA;;AACA,WAAKR,WAAL,GAAmBS,KAAK,CAACC,IAAN,CAAWN,IAAI,CAACO,MAAL,CAAYX,WAAvB,EAAoC,UAAAY,OAAO;AAAA,eAAIA,OAAO,CAACC,UAAR,CAAmBC,QAAnB,EAAJ;AAAA,OAA3C,CAAnB,CAtBD,CAuBC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,oBACA;AACC;AACA,aAAQ,IAAInB,MAAM,CAACoB,QAAX,CAAoB;AAC3BC,QAAAA,KAAK,EAAEP,KAAK,CAACC,IAAN,CAAW,KAAKV,WAAhB,EAA6B,UAAAY,OAAO;AAAA,iBAAI,IAAIjB,MAAM,CAACsB,gBAAX,CAA4B;AAAED,YAAAA,KAAK,EAAEJ;AAAT,WAA5B,CAAJ;AAAA,SAApC;AADoB,OAApB,CAAR,CAFD,CAKC;AACA,K,CACD;;AACA;AACD;AACA;AACA;;;;WACC,kBACA;AACC,aAAO;AACNZ,QAAAA,WAAW,EAAES,KAAK,CAACC,IAAN,CAAW,KAAKV,WAAhB;AADP,OAAP;AAGA,K,CACD;;;;WAlGA,uBAAqBkB,UAArB,EACA;AACC,cAAOA,UAAP;AAEC,aAAK,aAAL;AACC,iBAAO,EAAP;;AACD;AACC,gBAAM,IAAIV,KAAJ,sDAAwDU,UAAxD,EAAN;AALF;AAOA,K,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBACA;AAAA,UADcnB,UACd,uEAD2B,EAC3B;;AACC;AACF;AACA;AACA;AACA;AACE,UAAMO,KAAK,GAAGV,kBAAkB,CAACG,UAAD,EAAa,OAAb,EAAsB,EAAtB,CAAhC;AAEA,aAAQ,IAAIJ,MAAM,CAACoB,QAAX,CAAoB;AAC3BI,QAAAA,IAAI,EAAGb,KAAK,CAACc,SAAN,IAAmB,EADC;AAE3BJ,QAAAA,KAAK,EAAE,CACN,IAAIrB,MAAM,CAAC0B,QAAX,CAAoB;AACnBF,UAAAA,IAAI,EAAGb,KAAK,CAACN,WAAN,IAAqB,EADT;AAEnBgB,UAAAA,KAAK,EAAE,IAAIrB,MAAM,CAACsB,gBAAX;AAFY,SAApB,CADM;AAFoB,OAApB,CAAR;AASA;;;;KA0DF;;;SAhIqBnB,W","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class ExtKeyUsage\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ExtKeyUsage class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<string>}\r\n\t\t * @desc keyPurposes\r\n\t\t */\r\n\t\tthis.keyPurposes = getParametersValue(parameters, \"keyPurposes\", ExtKeyUsage.defaultValues(\"keyPurposes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyPurposes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ExtKeyUsage class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ExtKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\r\n\t *\r\n\t * KeyPurposeId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyPurposes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.keyPurposes || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.ObjectIdentifier()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyPurposes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtKeyUsage.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyPurposes: \"keyPurposes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ExtKeyUsage\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyPurposes = Array.from(asn1.result.keyPurposes, element => element.valueBlock.toString());\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.keyPurposes, element => new asn1js.ObjectIdentifier({ value: element }))\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyPurposes: Array.from(this.keyPurposes)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
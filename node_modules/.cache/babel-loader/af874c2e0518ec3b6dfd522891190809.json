{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs2/core-js/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _constants = require(\"../constants\");\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar _util = _interopRequireDefault(require(\"./util\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @class MeetingInfoRequest\n */\n\n\nvar PersonalMeetingRoomRequest = /*#__PURE__*/function (_StatelessWebexPlugin) {\n  (0, _inherits2.default)(PersonalMeetingRoomRequest, _StatelessWebexPlugin);\n\n  var _super = _createSuper(PersonalMeetingRoomRequest);\n\n  function PersonalMeetingRoomRequest() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PersonalMeetingRoomRequest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"namespace\", _constants.MEETINGS);\n    return _this;\n  }\n\n  (0, _createClass2.default)(PersonalMeetingRoomRequest, [{\n    key: \"claimPmr\",\n    value:\n    /**\n     *\n     * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}\n     * @returns {Promise} returns a promise that resolves/rejects the result of the request\n     * @memberof PersonalMeetingRoomRequest\n     */\n    function claimPmr(options) {\n      if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {\n        throw new _parameter.default('Claiming a PMR should be done with userId, passcode, preferred, and meetingAddress in options.');\n      }\n\n      var validPin = _util.default.getClaimPmrPin(options.passcode);\n\n      if (!validPin) {\n        return _promise.default.reject(new _parameter.default('The host pin provided was of an invalid format'));\n      }\n\n      var validLink = _util.default.getClaimPmrLink(options.meetingAddress);\n\n      if (!validLink) {\n        return _promise.default.reject(new _parameter.default('The PMR link provided was of an invalid format'));\n      }\n\n      var request = _util.default.getClaimedRequestParams(validLink, validPin, options);\n\n      return this.request(request);\n    }\n  }]);\n  return PersonalMeetingRoomRequest;\n}(_webexCore.StatelessWebexPlugin);\n\nexports.default = PersonalMeetingRoomRequest;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;;;IACqBA,0B;;;;;;;;;;;;;;;4FACPC;;;;;;;AAEZ;AACF;AACA;AACA;AACA;AACA;AACE,sBAASC,OAAT,EAAkB;AAChB,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,MAArB,IAA+B,CAACD,OAAO,CAACE,QAAxC,IAAoD,CAACF,OAAO,CAACG,cAA7D,IAA+E,CAACH,OAAO,CAACI,SAA5F,EAAuG;AACrG,cAAM,IAAIC,kBAAJ,CAAmB,gGAAnB,CAAN;AACD;;AACD,UAAMC,QAAQ,GAAGC,cAAwBC,cAAxBD,CAAuCP,OAAO,CAACE,QAA/CK,CAAjB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACb,eAAOG,iBAAQC,MAAR,CAAe,IAAIL,kBAAJ,CAAmB,gDAAnB,CAAf,CAAP;AACD;;AACD,UAAMM,SAAS,GAAGJ,cAAwBK,eAAxBL,CAAwCP,OAAO,CAACG,cAAhDI,CAAlB;;AAEA,UAAI,CAACI,SAAL,EAAgB;AACd,eAAOF,iBAAQC,MAAR,CAAe,IAAIL,kBAAJ,CAAmB,gDAAnB,CAAf,CAAP;AACD;;AACD,UAAMQ,OAAO,GAAGN,cAAwBO,uBAAxBP,CAAgDI,SAAhDJ,EAA2DD,QAA3DC,EAAqEP,OAArEO,CAAhB;;AAEA,aAAO,KAAKM,OAAL,CAAaA,OAAb,CAAP;AACD;;;EA1BqDE,+B","names":["PersonalMeetingRoomRequest","MEETINGS","options","userId","passcode","meetingAddress","preferred","ParameterError","validPin","PersonalMeetingRoomUtil","getClaimPmrPin","_promise","reject","validLink","getClaimPmrLink","request","getClaimedRequestParams","StatelessWebexPlugin"],"sources":["request.js"],"sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport PersonalMeetingRoomUtil from './util';\n\n\n/**\n * @class MeetingInfoRequest\n */\nexport default class PersonalMeetingRoomRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @memberof PersonalMeetingRoomRequest\n   */\n  claimPmr(options) {\n    if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {\n      throw new ParameterError('Claiming a PMR should be done with userId, passcode, preferred, and meetingAddress in options.');\n    }\n    const validPin = PersonalMeetingRoomUtil.getClaimPmrPin(options.passcode);\n\n    if (!validPin) {\n      return Promise.reject(new ParameterError('The host pin provided was of an invalid format'));\n    }\n    const validLink = PersonalMeetingRoomUtil.getClaimPmrLink(options.meetingAddress);\n\n    if (!validLink) {\n      return Promise.reject(new ParameterError('The PMR link provided was of an invalid format'));\n    }\n    const request = PersonalMeetingRoomUtil.getClaimedRequestParams(validLink, validPin, options);\n\n    return this.request(request);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
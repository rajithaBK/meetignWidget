{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport CertificateSet from \"./CertificateSet.js\";\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar OriginatorInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for OriginatorInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function OriginatorInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OriginatorInfo);\n\n    //region Internal properties of the object\n    if (\"certs\" in parameters)\n      /**\r\n       * @type {CertificateSet}\r\n       * @desc certs\r\n       */\n      this.certs = getParametersValue(parameters, \"certs\", OriginatorInfo.defaultValues(\"certs\"));\n    if (\"crls\" in parameters)\n      /**\r\n       * @type {RevocationInfoChoices}\r\n       * @desc crls\r\n       */\n      this.crls = getParametersValue(parameters, \"crls\", OriginatorInfo.defaultValues(\"crls\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(OriginatorInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"certs\", \"crls\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, OriginatorInfo.schema({\n        names: {\n          certs: \"certs\",\n          crls: \"crls\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for OriginatorInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"certs\" in asn1.result) {\n        this.certs = new CertificateSet({\n          schema: new asn1js.Set({\n            value: asn1.result.certs.valueBlock.value\n          })\n        });\n      }\n\n      if (\"crls\" in asn1.result) {\n        this.crls = new RevocationInfoChoices({\n          schema: new asn1js.Set({\n            value: asn1.result.crls.valueBlock.value\n          })\n        });\n      } //endregion\n\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      var sequenceValue = [];\n\n      if (\"certs\" in this) {\n        sequenceValue.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: this.certs.toSchema().valueBlock.value\n        }));\n      }\n\n      if (\"crls\" in this) {\n        sequenceValue.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: this.crls.toSchema().valueBlock.value\n        }));\n      } //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: sequenceValue\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {};\n      if (\"certs\" in this) object.certs = this.certs.toJSON();\n      if (\"crls\" in this) object.crls = this.crls.toJSON();\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"certs\":\n          return new CertificateSet();\n\n        case \"crls\":\n          return new RevocationInfoChoices();\n\n        default:\n          throw new Error(\"Invalid member name for OriginatorInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"certs\":\n          return memberValue.certificates.length === 0;\n\n        case \"crls\":\n          return memberValue.crls.length === 0 && memberValue.otherRevocationInfos.length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for OriginatorInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * OriginatorInfo ::= SEQUENCE {\r\n     *    certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n     *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [certs]\r\n       * @property {string} [crls]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Constructed({\n          name: names.certs || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: CertificateSet.schema().valueBlock.value\n        }), new asn1js.Constructed({\n          name: names.crls || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: RevocationInfoChoices.schema().valueBlock.value\n        })]\n      });\n    }\n  }]);\n\n  return OriginatorInfo;\n}(); //**************************************************************************************\n\n\nexport { OriginatorInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/OriginatorInfo.js"],"names":["asn1js","getParametersValue","clearProps","CertificateSet","RevocationInfoChoices","OriginatorInfo","parameters","certs","defaultValues","crls","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","Set","value","valueBlock","sequenceValue","push","Constructed","idBlock","tagClass","tagNumber","toSchema","Sequence","object","toJSON","memberName","memberValue","certificates","length","otherRevocationInfos","name","blockName","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {CertificateSet}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", OriginatorInfo.defaultValues(\"certs\"));\r\n\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {RevocationInfoChoices}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", OriginatorInfo.defaultValues(\"crls\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn new CertificateSet();\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn new RevocationInfoChoices();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.certificates.length === 0);\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OriginatorInfo ::= SEQUENCE {\r\n\t *    certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certs]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certs\",\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcerts: \"certs\",\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.certs = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result.certs.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = new RevocationInfoChoices({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result.crls.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst sequenceValue = [];\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\tsequenceValue.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.certs.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\tsequenceValue.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.crls.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: sequenceValue\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\tobject.certs = this.certs.toJSON();\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t\tobject.crls = this.crls.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\nimport ContentInfo from \"./ContentInfo.js\";\nimport MacData from \"./MacData.js\";\nimport DigestInfo from \"./DigestInfo.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport SignedData from \"./SignedData.js\";\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\nimport Attribute from \"./Attribute.js\";\nimport SignerInfo from \"./SignerInfo.js\";\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC7292\r\n */\n\nvar PFX = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for PFX class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function PFX() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PFX);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\n    /**\r\n     * @type {ContentInfo}\r\n     * @desc authSafe\r\n     */\n\n    this.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\n    if (\"macData\" in parameters)\n      /**\r\n       * @type {MacData}\r\n       * @desc macData\r\n       */\n      this.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\n    if (\"parsedValue\" in parameters)\n      /**\r\n       * @type {*}\r\n       * @desc parsedValue\r\n       */\n      this.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(PFX, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"authSafe\", \"macData\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, PFX.schema({\n        names: {\n          version: \"version\",\n          authSafe: {\n            names: {\n              blockName: \"authSafe\"\n            }\n          },\n          macData: {\n            names: {\n              blockName: \"macData\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for PFX\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.authSafe = new ContentInfo({\n        schema: asn1.result.authSafe\n      });\n      if (\"macData\" in asn1.result) this.macData = new MacData({\n        schema: asn1.result.macData\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Construct and return new ASN.1 schema for this object\n      var outputArray = [new asn1js.Integer({\n        value: this.version\n      }), this.authSafe.toSchema()];\n      if (\"macData\" in this) outputArray.push(this.macData.toSchema());\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var output = {\n        version: this.version,\n        authSafe: this.authSafe.toJSON()\n      };\n      if (\"macData\" in this) output.macData = this.macData.toJSON();\n      return output;\n    } //**********************************************************************************\n\n    /**\r\n     * Making ContentInfo from \"parsedValue\" object\r\n     * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n     */\n\n  }, {\n    key: \"makeInternalValues\",\n    value: function makeInternalValues() {\n      var _this = this;\n\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //region Check mandatory parameter\n      if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n      if (\"parsedValue\" in this === false) return Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\n      if (\"integrityMode\" in this.parsedValue === false) return Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\"); //endregion\n      //region Initial variables\n\n      var sequence = Promise.resolve(); //endregion\n      //region Get a \"crypto\" extension\n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion\n      //region Makes values for each particular integrity mode\n      //region Check that we do have neccessary fields in \"parsedValue\" object\n\n      if (\"authenticatedSafe\" in this.parsedValue === false) return Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\"); //endregion\n\n      switch (this.parsedValue.integrityMode) {\n        //region HMAC-based integrity\n        case 0:\n          {\n            //region Check additional mandatory parameters\n            if (\"iterations\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\n            if (\"pbkdf2HashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\n            if (\"hmacHashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\n            if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\"); //endregion\n            //region Initial variables\n\n            var saltBuffer = new ArrayBuffer(64);\n            var saltView = new Uint8Array(saltBuffer);\n            getRandomValues(saltView);\n            var data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n            this.authSafe = new ContentInfo({\n              contentType: \"1.2.840.113549.1.7.1\",\n              content: new asn1js.OctetString({\n                valueHex: data\n              })\n            }); //endregion\n            //region Call current crypto engine for making HMAC-based data stamp\n\n            var engine = getEngine();\n            if (\"stampDataWithPassword\" in engine.subtle === false) return Promise.reject(\"No support for \\\"stampDataWithPassword\\\" in current engine \\\"\".concat(engine.name, \"\\\"\"));\n            sequence = sequence.then(function () {\n              return engine.subtle.stampDataWithPassword({\n                password: parameters.password,\n                hashAlgorithm: parameters.hmacHashAlgorithm,\n                salt: saltBuffer,\n                iterationCount: parameters.iterations,\n                contentToStamp: data\n              });\n            }); //endregion\n            //region Make \"MacData\" values\n\n            sequence = sequence.then(function (result) {\n              _this.macData = new MacData({\n                mac: new DigestInfo({\n                  digestAlgorithm: new AlgorithmIdentifier({\n                    algorithmId: getOIDByAlgorithm({\n                      name: parameters.hmacHashAlgorithm\n                    })\n                  }),\n                  digest: new asn1js.OctetString({\n                    valueHex: result\n                  })\n                }),\n                macSalt: new asn1js.OctetString({\n                  valueHex: saltBuffer\n                }),\n                iterations: parameters.iterations\n              });\n            }, function (error) {\n              return Promise.reject(error);\n            }); //endregion\n            //endregion\n          }\n          break;\n        //endregion\n        //region publicKey-based integrity\n\n        case 1:\n          {\n            //region Check additional mandatory parameters\n            if (\"signingCertificate\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\n            if (\"privateKey\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\n            if (\"hashAlgorithm\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\"); //endregion\n            //region Making data to be signed\n            // NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\n            // Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\n            // Or user can choose to use values from initial parsing of existing PKCS#12 data.\n\n            var toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false); //endregion\n            //region Initial variables\n\n            var cmsSigned = new SignedData({\n              version: 1,\n              encapContentInfo: new EncapsulatedContentInfo({\n                eContentType: \"1.2.840.113549.1.7.1\",\n                // \"data\" content type\n                eContent: new asn1js.OctetString({\n                  valueHex: toBeSigned\n                })\n              }),\n              certificates: [parameters.signingCertificate]\n            }); //endregion\n            //region Making additional attributes for CMS Signed Data\n            //region Create a message digest\n\n            sequence = sequence.then(function () {\n              return crypto.digest({\n                name: parameters.hashAlgorithm\n              }, new Uint8Array(toBeSigned));\n            }); //endregion\n            //region Combine all signed extensions\n\n            sequence = sequence.then(function (result) {\n              //region Initial variables\n              var signedAttr = []; //endregion\n              //region contentType\n\n              signedAttr.push(new Attribute({\n                type: \"1.2.840.113549.1.9.3\",\n                values: [new asn1js.ObjectIdentifier({\n                  value: \"1.2.840.113549.1.7.1\"\n                })]\n              })); //endregion\n              //region signingTime\n\n              signedAttr.push(new Attribute({\n                type: \"1.2.840.113549.1.9.5\",\n                values: [new asn1js.UTCTime({\n                  valueDate: new Date()\n                })]\n              })); //endregion\n              //region messageDigest\n\n              signedAttr.push(new Attribute({\n                type: \"1.2.840.113549.1.9.4\",\n                values: [new asn1js.OctetString({\n                  valueHex: result\n                })]\n              })); //endregion\n              //region Making final value for \"SignerInfo\" type\n\n              cmsSigned.signerInfos.push(new SignerInfo({\n                version: 1,\n                sid: new IssuerAndSerialNumber({\n                  issuer: parameters.signingCertificate.issuer,\n                  serialNumber: parameters.signingCertificate.serialNumber\n                }),\n                signedAttrs: new SignedAndUnsignedAttributes({\n                  type: 0,\n                  attributes: signedAttr\n                })\n              })); //endregion\n            }, function (error) {\n              return Promise.reject(\"Error during making digest for message: \".concat(error));\n            }); //endregion\n            //endregion\n            //region Signing CMS Signed Data\n\n            sequence = sequence.then(function () {\n              return cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm);\n            }); //endregion\n            //region Making final CMS_CONTENT_INFO type\n\n            sequence = sequence.then(function () {\n              _this.authSafe = new ContentInfo({\n                contentType: \"1.2.840.113549.1.7.2\",\n                content: cmsSigned.toSchema(true)\n              });\n            }, function (error) {\n              return Promise.reject(\"Error during making signature: \".concat(error));\n            }); //endregion\n          }\n          break;\n        //endregion\n        //region default\n\n        default:\n          return Promise.reject(\"Parameter \\\"integrityMode\\\" has unknown value: \".concat(parameters.integrityMode));\n        //endregion\n      } //endregion\n\n\n      return sequence;\n    } //**********************************************************************************\n\n  }, {\n    key: \"parseInternalValues\",\n    value: function parseInternalValues(parameters) {\n      var _this2 = this;\n\n      //region Check input data from \"parameters\" \n      if (parameters instanceof Object === false) return Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\n      if (\"checkIntegrity\" in parameters === false) parameters.checkIntegrity = true; //endregion \n      //region Initial variables \n\n      var sequence = Promise.resolve(); //endregion \n      //region Get a \"crypto\" extension \n\n      var crypto = getCrypto();\n      if (typeof crypto === \"undefined\") return Promise.reject(\"Unable to create WebCrypto object\"); //endregion \n      //region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \n\n      this.parsedValue = {};\n\n      switch (this.authSafe.contentType) {\n        //region data \n        case \"1.2.840.113549.1.7.1\":\n          {\n            //region Check additional mandatory parameters\n            if (\"password\" in parameters === false) return Promise.reject(\"Absent mandatory parameter \\\"password\\\"\"); //endregion\n            //region Integrity based on HMAC\n\n            this.parsedValue.integrityMode = 0; //endregion\n            //region Check that we do have OCTETSTRING as \"content\"\n\n            if (this.authSafe.content instanceof asn1js.OctetString === false) return Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\"); //endregion\n            //region Check we have \"constructive encoding\" for AuthSafe content\n\n            var authSafeContent = new ArrayBuffer(0);\n\n            if (this.authSafe.content.valueBlock.isConstructed) {\n              var _iterator = _createForOfIteratorHelper(this.authSafe.content.valueBlock.value),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var contentValue = _step.value;\n                  authSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            } else authSafeContent = this.authSafe.content.valueBlock.valueHex; //endregion\n            //region Parse internal ASN.1 data\n\n\n            var asn1 = asn1js.fromBER(authSafeContent);\n            if (asn1.offset === -1) return Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\"); //endregion\n            //region Set \"authenticatedSafe\" value\n\n            this.parsedValue.authenticatedSafe = new AuthenticatedSafe({\n              schema: asn1.result\n            }); //endregion\n            //region Check integrity\n\n            if (parameters.checkIntegrity) {\n              //region Check that \"MacData\" exists\n              if (\"macData\" in this === false) return Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\"); //endregion\n              //region Initial variables\n\n              var hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\n              if (\"name\" in hashAlgorithm === false) return Promise.reject(\"Unsupported digest algorithm: \".concat(this.macData.mac.digestAlgorithm.algorithmId)); //endregion\n              //region Call current crypto engine for verifying HMAC-based data stamp\n\n              var engine = getEngine();\n              sequence = sequence.then(function () {\n                return engine.subtle.verifyDataStampedWithPassword({\n                  password: parameters.password,\n                  hashAlgorithm: hashAlgorithm.name,\n                  salt: _this2.macData.macSalt.valueBlock.valueHex,\n                  iterationCount: _this2.macData.iterations,\n                  contentToVerify: authSafeContent,\n                  signatureToVerify: _this2.macData.mac.digest.valueBlock.valueHex\n                });\n              }); //endregion\n              //region Verify HMAC signature\n\n              sequence = sequence.then(function (result) {\n                if (result === false) return Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\n                return Promise.resolve();\n              }, function (error) {\n                return Promise.reject(error);\n              }); //endregion\n            } //endregion\n\n          }\n          break;\n        //endregion \n        //region signedData \n\n        case \"1.2.840.113549.1.7.2\":\n          {\n            //region Integrity based on signature using public key\n            this.parsedValue.integrityMode = 1; //endregion\n            //region Parse CMS Signed Data\n\n            var cmsSigned = new SignedData({\n              schema: this.authSafe.content\n            }); //endregion\n            //region Check that we do have OCTETSTRING as \"content\"\n\n            if (\"eContent\" in cmsSigned.encapContentInfo === false) return Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\n            if (cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString === false) return Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\"); //endregion\n            //region Create correct data block for verification\n\n            var data = new ArrayBuffer(0);\n            if (cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false) data = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;else {\n              for (var i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++) {\n                data = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\n              }\n            } //endregion\n            //region Parse internal ASN.1 data\n\n            var _asn = asn1js.fromBER(data);\n\n            if (_asn.offset === -1) return Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\"); //endregion\n            //region Set \"authenticatedSafe\" value\n\n            this.parsedValue.authenticatedSafe = new AuthenticatedSafe({\n              schema: _asn.result\n            }); //endregion\n            //region Check integrity\n\n            sequence = sequence.then(function () {\n              return cmsSigned.verify({\n                signer: 0,\n                checkChain: false\n              });\n            }).then(function (result) {\n              if (result === false) return Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\n              return Promise.resolve();\n            }, function (error) {\n              return Promise.reject(\"Error during integrity verification: \".concat(error));\n            }); //endregion\n          }\n          break;\n        //endregion   \n        //region default \n\n        default:\n          return Promise.reject(\"Incorrect value for \\\"this.authSafe.contentType\\\": \".concat(this.authSafe.contentType));\n        //endregion \n      } //endregion \n      //region Return result of the function \n\n\n      return sequence.then(function () {\n        return _this2;\n      }, function (error) {\n        return Promise.reject(\"Error during parsing: \".concat(error));\n      }); //endregion   \n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 3;\n\n        case \"authSafe\":\n          return new ContentInfo();\n\n        case \"macData\":\n          return new MacData();\n\n        case \"parsedValue\":\n          return {};\n\n        default:\n          throw new Error(\"Invalid member name for PFX class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === PFX.defaultValues(memberName);\n\n        case \"authSafe\":\n          return ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType) && ContentInfo.compareWithDefault(\"content\", memberValue.content);\n\n        case \"macData\":\n          return MacData.compareWithDefault(\"mac\", memberValue.mac) && MacData.compareWithDefault(\"macSalt\", memberValue.macSalt) && MacData.compareWithDefault(\"iterations\", memberValue.iterations);\n\n        case \"parsedValue\":\n          return memberValue instanceof Object && Object.keys(memberValue).length === 0;\n\n        default:\n          throw new Error(\"Invalid member name for PFX class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * PFX ::= SEQUENCE {\r\n     *    version\t\tINTEGER {v3(3)}(v3,...),\r\n     *    authSafe\tContentInfo,\r\n     *    macData    \tMacData OPTIONAL\r\n     * }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [authSafe]\r\n       * @property {string} [macData]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"version\"\n        }), ContentInfo.schema(names.authSafe || {\n          names: {\n            blockName: \"authSafe\"\n          }\n        }), MacData.schema(names.macData || {\n          names: {\n            blockName: \"macData\",\n            optional: true\n          }\n        })]\n      });\n    }\n  }]);\n\n  return PFX;\n}(); //**************************************************************************************\n\n\nexport { PFX as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/PFX.js"],"names":["asn1js","getParametersValue","utilConcatBuf","clearProps","getCrypto","getEngine","getRandomValues","getOIDByAlgorithm","getAlgorithmByOID","ContentInfo","MacData","DigestInfo","AlgorithmIdentifier","SignedData","EncapsulatedContentInfo","Attribute","SignerInfo","IssuerAndSerialNumber","SignedAndUnsignedAttributes","AuthenticatedSafe","PFX","parameters","version","defaultValues","authSafe","macData","parsedValue","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","outputArray","Integer","value","toSchema","push","Sequence","output","toJSON","Object","Promise","reject","sequence","resolve","crypto","integrityMode","saltBuffer","ArrayBuffer","saltView","Uint8Array","data","authenticatedSafe","toBER","contentType","content","OctetString","valueHex","engine","subtle","name","then","stampDataWithPassword","password","hashAlgorithm","hmacHashAlgorithm","salt","iterationCount","iterations","contentToStamp","mac","digestAlgorithm","algorithmId","digest","macSalt","error","toBeSigned","cmsSigned","encapContentInfo","eContentType","eContent","certificates","signingCertificate","signedAttr","type","values","ObjectIdentifier","UTCTime","valueDate","Date","signerInfos","sid","issuer","serialNumber","signedAttrs","attributes","sign","privateKey","checkIntegrity","authSafeContent","isConstructed","contentValue","fromBER","offset","verifyDataStampedWithPassword","contentToVerify","signatureToVerify","idBlock","i","length","verify","signer","checkChain","memberName","memberValue","compareWithDefault","keys","optional"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport MacData from \"./MacData.js\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedData from \"./SignedData.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PFX \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @desc authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @desc macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PFX ::= SEQUENCE {\r\n\t *    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t *    authSafe\tContentInfo,\r\n\t *    macData    \tMacData OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"authSafe\",\r\n\t\t\t\"macData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\r\n\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: data })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Call current crypto engine for making HMAC-based data stamp\r\n\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"stampDataWithPassword\" in engine.subtle) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`No support for \"stampDataWithPassword\" in current engine \"${engine.name}\"`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\tengine.subtle.stampDataWithPassword({\r\n\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\thashAlgorithm: parameters.hmacHashAlgorithm,\r\n\t\t\t\t\t\t\tsalt: saltBuffer,\r\n\t\t\t\t\t\t\titerationCount: parameters.iterations,\r\n\t\t\t\t\t\t\tcontentToStamp: data\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\r\n\t\t\t\t\tconst toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [parameters.signingCertificate]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \"integrityMode\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) === false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.authSafe.content.valueBlock.isConstructed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.authSafe.content.valueBlock.value)\r\n\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tauthSafeContent = this.authSafe.content.valueBlock.valueHex;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Call current crypto engine for verifying HMAC-based data stamp\r\n\t\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\t\tengine.subtle.verifyDataStampedWithPassword({\r\n\t\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\t\t\t\tsalt: this.macData.macSalt.valueBlock.valueHex,\r\n\t\t\t\t\t\t\t\titerationCount: this.macData.iterations,\r\n\t\t\t\t\t\t\t\tcontentToVerify: authSafeContent,\r\n\t\t\t\t\t\t\t\tsignatureToVerify: this.macData.mac.digest.valueBlock.valueHex\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tconst cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
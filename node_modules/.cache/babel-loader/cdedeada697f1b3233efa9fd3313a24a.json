{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\rkanthet\\\\Documents\\\\test_window_object\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BufferTokenizer = void 0;\n\nvar peek_readable_1 = require(\"peek-readable\");\n\nvar AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\n\nvar BufferTokenizer = /*#__PURE__*/function (_AbstractTokenizer_1$) {\n  _inherits(BufferTokenizer, _AbstractTokenizer_1$);\n\n  var _super = _createSuper(BufferTokenizer);\n\n  /**\r\n   * Construct BufferTokenizer\r\n   * @param uint8Array - Uint8Array to tokenize\r\n   * @param fileInfo - Pass additional file information to the tokenizer\r\n   */\n  function BufferTokenizer(uint8Array, fileInfo) {\n    var _this;\n\n    _classCallCheck(this, BufferTokenizer);\n\n    _this = _super.call(this, fileInfo);\n    _this.uint8Array = uint8Array;\n    _this.fileInfo.size = _this.fileInfo.size ? _this.fileInfo.size : uint8Array.length;\n    return _this;\n  }\n  /**\r\n   * Read buffer from tokenizer\r\n   * @param uint8Array - Uint8Array to tokenize\r\n   * @param options - Read behaviour options\r\n   * @returns {Promise<number>}\r\n   */\n\n\n  _createClass(BufferTokenizer, [{\n    key: \"readBuffer\",\n    value: function () {\n      var _readBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(uint8Array, options) {\n        var bytesRead;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(options && options.position)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                if (!(options.position < this.position)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n\n              case 3:\n                this.position = options.position;\n\n              case 4:\n                _context.next = 6;\n                return this.peekBuffer(uint8Array, options);\n\n              case 6:\n                bytesRead = _context.sent;\n                this.position += bytesRead;\n                return _context.abrupt(\"return\", bytesRead);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function readBuffer(_x, _x2) {\n        return _readBuffer.apply(this, arguments);\n      }\n\n      return readBuffer;\n    }()\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\n\n  }, {\n    key: \"peekBuffer\",\n    value: function () {\n      var _peekBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(uint8Array, options) {\n        var normOptions, bytes2read;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                normOptions = this.normalizeOptions(uint8Array, options);\n                bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\n\n                if (!(!normOptions.mayBeLess && bytes2read < normOptions.length)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new peek_readable_1.EndOfStreamError();\n\n              case 6:\n                uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\n                return _context2.abrupt(\"return\", bytes2read);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function peekBuffer(_x3, _x4) {\n        return _peekBuffer.apply(this, arguments);\n      }\n\n      return peekBuffer;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return BufferTokenizer;\n}(AbstractTokenizer_1.AbstractTokenizer);\n\nexports.BufferTokenizer = BufferTokenizer;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/strtok3/lib/BufferTokenizer.js"],"names":["Object","defineProperty","exports","value","BufferTokenizer","peek_readable_1","require","AbstractTokenizer_1","uint8Array","fileInfo","size","length","options","position","Error","peekBuffer","bytesRead","normOptions","normalizeOptions","bytes2read","Math","min","mayBeLess","EndOfStreamError","set","subarray","offset","AbstractTokenizer"],"mappings":"AAAA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,IAAMC,eAAe,GAAGC,OAAO,CAAC,eAAD,CAA/B;;AACA,IAAMC,mBAAmB,GAAGD,OAAO,CAAC,qBAAD,CAAnC;;IACMF,e;;;;;AACF;AACJ;AACA;AACA;AACA;AACI,2BAAYI,UAAZ,EAAwBC,QAAxB,EAAkC;AAAA;;AAAA;;AAC9B,8BAAMA,QAAN;AACA,UAAKD,UAAL,GAAkBA,UAAlB;AACA,UAAKC,QAAL,CAAcC,IAAd,GAAqB,MAAKD,QAAL,CAAcC,IAAd,GAAqB,MAAKD,QAAL,CAAcC,IAAnC,GAA0CF,UAAU,CAACG,MAA1E;AAH8B;AAIjC;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;;iFACI,iBAAiBH,UAAjB,EAA6BI,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACQA,OAAO,IAAIA,OAAO,CAACC,QAD3B;AAAA;AAAA;AAAA;;AAAA,sBAEYD,OAAO,CAACC,QAAR,GAAmB,KAAKA,QAFpC;AAAA;AAAA;AAAA;;AAAA,sBAGkB,IAAIC,KAAJ,CAAU,uEAAV,CAHlB;;AAAA;AAKQ,qBAAKD,QAAL,GAAgBD,OAAO,CAACC,QAAxB;;AALR;AAAA;AAAA,uBAO4B,KAAKE,UAAL,CAAgBP,UAAhB,EAA4BI,OAA5B,CAP5B;;AAAA;AAOUI,gBAAAA,SAPV;AAQI,qBAAKH,QAAL,IAAiBG,SAAjB;AARJ,iDASWA,SATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAWA;AACJ;AACA;AACA;AACA;AACA;;;;;iFACI,kBAAiBR,UAAjB,EAA6BI,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUK,gBAAAA,WADV,GACwB,KAAKC,gBAAL,CAAsBV,UAAtB,EAAkCI,OAAlC,CADxB;AAEUO,gBAAAA,UAFV,GAEuBC,IAAI,CAACC,GAAL,CAAS,KAAKb,UAAL,CAAgBG,MAAhB,GAAyBM,WAAW,CAACJ,QAA9C,EAAwDI,WAAW,CAACN,MAApE,CAFvB;;AAAA,sBAGS,CAACM,WAAW,CAACK,SAAd,IAA4BH,UAAU,GAAGF,WAAW,CAACN,MAH7D;AAAA;AAAA;AAAA;;AAAA,sBAIc,IAAIN,eAAe,CAACkB,gBAApB,EAJd;;AAAA;AAOQf,gBAAAA,UAAU,CAACgB,GAAX,CAAe,KAAKhB,UAAL,CAAgBiB,QAAhB,CAAyBR,WAAW,CAACJ,QAArC,EAA+CI,WAAW,CAACJ,QAAZ,GAAuBM,UAAtE,CAAf,EAAkGF,WAAW,CAACS,MAA9G;AAPR,kDAQeP,UARf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4EAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EA7C0BZ,mBAAmB,CAACoB,iB;;AAiDlDzB,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BufferTokenizer = void 0;\r\nconst peek_readable_1 = require(\"peek-readable\");\r\nconst AbstractTokenizer_1 = require(\"./AbstractTokenizer\");\r\nclass BufferTokenizer extends AbstractTokenizer_1.AbstractTokenizer {\r\n    /**\r\n     * Construct BufferTokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param fileInfo - Pass additional file information to the tokenizer\r\n     */\r\n    constructor(uint8Array, fileInfo) {\r\n        super(fileInfo);\r\n        this.uint8Array = uint8Array;\r\n        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        if (options && options.position) {\r\n            if (options.position < this.position) {\r\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n            }\r\n            this.position = options.position;\r\n        }\r\n        const bytesRead = await this.peekBuffer(uint8Array, options);\r\n        this.position += bytesRead;\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\r\n        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {\r\n            throw new peek_readable_1.EndOfStreamError();\r\n        }\r\n        else {\r\n            uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\r\n            return bytes2read;\r\n        }\r\n    }\r\n    async close() {\r\n        // empty\r\n    }\r\n}\r\nexports.BufferTokenizer = BufferTokenizer;\r\n"]},"metadata":{},"sourceType":"script"}
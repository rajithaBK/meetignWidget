{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _initializerDefineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/initializerDefineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _applyDecoratedDescriptor2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/applyDecoratedDescriptor\"));\n\nvar _initializerWarningHelper2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/initializerWarningHelper\"));\n\nvar _weakMap = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/weak-map\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _coreDecorators = require(\"core-decorators\");\n\nvar _ampersandEvents = _interopRequireDefault(require(\"ampersand-events\"));\n\nvar _class, _descriptor; // hold onto weak references to parent' Webexs to help avoid retain cycles\n\n\nvar webexs = new _weakMap.default();\n/**\n * Base plugin class. Doesn't depend on Ampersand State\n */\n\nvar StatelessWebexPlugin = (_class = /*#__PURE__*/function () {\n  /**\n   * Constructor. One of attrs.webex or options.parent is required\n   * @param {Object} attrs\n   * @param {WebexCore} [attrs.webex]\n   * @param {Object} options\n   * @param {WebexCore} [options.parent]\n   */\n  function StatelessWebexPlugin() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _classCallCheck2.default)(this, StatelessWebexPlugin);\n    (0, _initializerDefineProperty2.default)(this, \"ready\", _descriptor, this);\n    var webex = attrs.webex || options.parent;\n\n    if (!webex) {\n      throw new Error('One of `attrs.webex` or `options.parent` must be supplied when initializing a StatelessWebexPlugin');\n    }\n\n    while (webex.parent || webex.collection) {\n      webex = webex.parent || webex.collection;\n    }\n\n    webexs.set(this, webex);\n  }\n  /**\n   * Proxies to {@link WebexPlugin#webex}'s `request()` method.\n   * @see WebexCore#request\n   * @param {Array<mixed>} args\n   * @returns {Promise}\n   */\n\n\n  (0, _createClass2.default)(StatelessWebexPlugin, [{\n    key: \"config\",\n    get:\n    /**\n     * The config for this plugin's namespace. If no namespace has been set\n     * returns all of webex's config.\n     * @type {Object}\n     */\n    function get() {\n      var namespace = this.getNamespace ? this.getNamespace() : this.namespace;\n\n      if (namespace) {\n        namespace = namespace.toLowerCase();\n        return this.webex.config[namespace];\n      }\n\n      return this.webex.config;\n    }\n    /**\n     * A reference to the webex logger.\n     * @type {Logger}\n     */\n\n  }, {\n    key: \"logger\",\n    get: function get() {\n      return this.webex.logger;\n    }\n    /**\n     * A reference to the main sdk instance\n     * @type {WebexCore}\n     */\n\n  }, {\n    key: \"webex\",\n    get: function get() {\n      return webexs.get(this);\n    }\n  }, {\n    key: \"request\",\n    value: function request() {\n      var _this$webex;\n\n      return (_this$webex = this.webex).request.apply(_this$webex, arguments);\n    }\n    /**\n     * Proxies to {@link WebexPlugin#webex}'s `upload()` method.\n     * @see WebexCore#upload\n     * @param {Array<mixed>} args\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload() {\n      var _this$webex2;\n\n      return (_this$webex2 = this.webex).upload.apply(_this$webex2, arguments);\n    }\n  }]);\n  return StatelessWebexPlugin;\n}(), _descriptor = (0, _applyDecoratedDescriptor2.default)(_class.prototype, \"ready\", [_coreDecorators.readonly], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return true;\n  }\n}), _class);\nexports.default = StatelessWebexPlugin;\n(0, _assign.default)(StatelessWebexPlugin.prototype, _ampersandEvents.default);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;yBAEA;;;AACA,IAAMA,MAAM,GAAG,sBAAf;AAEA;AACA;AACA;;IACqBC,oB;AA6CnB;AACF;AACA;AACA;AACA;AACA;AACA;AACE,kCAAsC;AAAA,QAA1BC,KAA0B,uEAAlB,EAAkB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAAA;AACpC,QAAIC,KAAK,GAAGF,KAAK,CAACE,KAANF,IAAeC,OAAO,CAACE,MAAnC;;AAEA,QAAI,CAACD,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CAAU,oGAAV,CAAN;AACD;;AAED,WAAOF,KAAK,CAACC,MAAND,IAAgBA,KAAK,CAACG,UAA7B,EAAyC;AACvCH,WAAK,GAAGA,KAAK,CAACC,MAAND,IAAgBA,KAAK,CAACG,UAA9BH;AACD;;AACDJ,UAAM,CAACQ,GAAPR,CAAW,IAAXA,EAAiBI,KAAjBJ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;;AArEE;AACF;AACA;AACA;AACA;AACE,mBAAa;AACX,UAAIS,SAAS,GAAG,KAAKC,YAAL,GAAoB,KAAKA,YAAL,EAApB,GAA0C,KAAKD,SAA/D;;AAEA,UAAIA,SAAJ,EAAe;AACbA,iBAAS,GAAGA,SAAS,CAACE,WAAVF,EAAZA;AAEA,eAAO,KAAKL,KAAL,CAAWQ,MAAX,CAAkBH,SAAlB,CAAP;AACD;;AAED,aAAO,KAAKL,KAAL,CAAWQ,MAAlB;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAa;AACX,aAAO,KAAKR,KAAL,CAAWS,MAAlB;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAY;AACV,aAAOb,MAAM,CAACc,GAAPd,CAAW,IAAXA,CAAP;AACD;;;WAuCD,mBAAiB;AAAA;;AACf,aAAO,oBAAKI,KAAL,EAAWW,OAAX,8BAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kBAAgB;AAAA;;AACd,aAAO,qBAAKX,KAAL,EAAWY,MAAX,+BAAP;AACD;;;uFAjDAC,2B;;;;;WASO;;;;AA2CV,qBAAchB,oBAAoB,CAACiB,SAAnC,EAA8CC,wBAA9C","names":["webexs","StatelessWebexPlugin","attrs","options","webex","parent","Error","collection","set","namespace","getNamespace","toLowerCase","config","logger","get","request","upload","readonly","prototype","AmpEvents"],"sources":["stateless-webex-plugin.js"],"sourcesContent":["import {readonly} from 'core-decorators';\nimport AmpEvents from 'ampersand-events';\n\n// hold onto weak references to parent' Webexs to help avoid retain cycles\nconst webexs = new WeakMap();\n\n/**\n * Base plugin class. Doesn't depend on Ampersand State\n */\nexport default class StatelessWebexPlugin {\n  /**\n   * The config for this plugin's namespace. If no namespace has been set\n   * returns all of webex's config.\n   * @type {Object}\n   */\n  get config() {\n    let namespace = this.getNamespace ? this.getNamespace() : this.namespace;\n\n    if (namespace) {\n      namespace = namespace.toLowerCase();\n\n      return this.webex.config[namespace];\n    }\n\n    return this.webex.config;\n  }\n\n  /**\n   * A reference to the webex logger.\n   * @type {Logger}\n   */\n  get logger() {\n    return this.webex.logger;\n  }\n\n  /**\n   * A reference to the main sdk instance\n   * @type {WebexCore}\n   */\n  get webex() {\n    return webexs.get(this);\n  }\n\n  @readonly\n  /**\n   * Mostly here for compatibility with legacy WebexPlugins.\n   * StatelessWebexPlugins will never have a state other than ready, however, if\n   * we implement stateful WebexPlugins as es6 classes, they may have the option\n   * to have ready be false\n   * @private\n   * @type {boolean}\n   */\n  ready = true;\n\n  /**\n   * Constructor. One of attrs.webex or options.parent is required\n   * @param {Object} attrs\n   * @param {WebexCore} [attrs.webex]\n   * @param {Object} options\n   * @param {WebexCore} [options.parent]\n   */\n  constructor(attrs = {}, options = {}) {\n    let webex = attrs.webex || options.parent;\n\n    if (!webex) {\n      throw new Error('One of `attrs.webex` or `options.parent` must be supplied when initializing a StatelessWebexPlugin');\n    }\n\n    while (webex.parent || webex.collection) {\n      webex = webex.parent || webex.collection;\n    }\n    webexs.set(this, webex);\n  }\n\n  /**\n   * Proxies to {@link WebexPlugin#webex}'s `request()` method.\n   * @see WebexCore#request\n   * @param {Array<mixed>} args\n   * @returns {Promise}\n   */\n  request(...args) {\n    return this.webex.request(...args);\n  }\n\n  /**\n   * Proxies to {@link WebexPlugin#webex}'s `upload()` method.\n   * @see WebexCore#upload\n   * @param {Array<mixed>} args\n   * @returns {Promise}\n   */\n  upload(...args) {\n    return this.webex.upload(...args);\n  }\n}\n\nObject.assign(StatelessWebexPlugin.prototype, AmpEvents);\n"]},"metadata":{},"sourceType":"script"}
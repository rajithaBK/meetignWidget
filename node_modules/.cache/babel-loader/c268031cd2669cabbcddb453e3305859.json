{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor2 = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _deleteProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/delete-property\"));\n\nvar _now = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/date/now\"));\n\nvar _getOwnPropertyDescriptor = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/slicedToArray\"));\n\nvar _applyDecoratedDescriptor2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/applyDecoratedDescriptor\"));\n\nvar _set2 = _interopRequireDefault(require(\"lodash/set\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _camelCase2 = _interopRequireDefault(require(\"lodash/camelCase\"));\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _common = require(\"@webex/common\");\n\nvar _backoff = _interopRequireDefault(require(\"backoff\"));\n\nvar _socket = _interopRequireDefault(require(\"./socket\"));\n\nvar _errors = require(\"./errors\");\n\nvar _dec, _dec2, _obj;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor2(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor2(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar normalReconnectReasons = ['idle', 'done (forced)', 'pong not received', 'pong mismatch'];\n\nvar Mercury = _webexCore.WebexPlugin.extend((_dec = (0, _common.deprecated)('Mercury#listen(): Use Mercury#connect() instead'), _dec2 = (0, _common.deprecated)('Mercury#stopListening(): Use Mercury#disconnect() instead'), (_obj = {\n  namespace: 'Mercury',\n  session: {\n    connected: {\n      default: false,\n      type: 'boolean'\n    },\n    connecting: {\n      default: false,\n      type: 'boolean'\n    },\n    socket: 'object',\n    localClusterServiceUrls: 'object'\n  },\n  derived: {\n    listening: {\n      deps: ['connected'],\n      fn: function fn() {\n        return this.connected;\n      }\n    }\n  },\n  connect: function connect(webSocketUrl) {\n    var _this = this;\n\n    if (this.connected) {\n      this.logger.info('mercury: already connected, will not connect again');\n      return _promise.default.resolve();\n    }\n\n    this.connecting = true;\n    return _promise.default.resolve(this.webex.internal.device.registered || this.webex.internal.device.register()).then(function () {\n      _this.logger.info('mercury: connecting');\n\n      return _this._connectWithBackoff(webSocketUrl);\n    });\n  },\n  disconnect: function disconnect() {\n    var _this2 = this;\n\n    return new _promise.default(function (resolve) {\n      if (_this2.backoffCall) {\n        _this2.logger.info('mercury: aborting connection');\n\n        _this2.backoffCall.abort();\n      }\n\n      if (_this2.socket) {\n        _this2.socket.removeAllListeners('message');\n\n        _this2.once('offline', resolve);\n\n        _this2.socket.close();\n\n        return;\n      }\n\n      resolve();\n    });\n  },\n  listen: function listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n  stopListening: function stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n  processRegistrationStatusEvent: function processRegistrationStatusEvent(message) {\n    this.localClusterServiceUrls = message.localClusterServiceUrls;\n  },\n  _applyOverrides: function _applyOverrides(event) {\n    if (!event || !event.headers) {\n      return;\n    }\n\n    var headerKeys = (0, _keys.default)(event.headers);\n    headerKeys.forEach(function (keyPath) {\n      (0, _set2.default)(event, keyPath, event.headers[keyPath]);\n    });\n  },\n  _prepareUrl: function _prepareUrl(webSocketUrl) {\n    var _this3 = this;\n\n    if (!webSocketUrl) {\n      webSocketUrl = this.webex.internal.device.webSocketUrl;\n    }\n\n    return this.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n      if (haMessagingEnabled) {\n        return _this3.webex.internal.services.convertUrlToPriorityHostUrl(webSocketUrl);\n      }\n\n      return webSocketUrl;\n    }).then(function (wsUrl) {\n      webSocketUrl = wsUrl;\n    }).then(function () {\n      return _this3.webex.internal.feature.getFeature('developer', 'web-shared-mercury');\n    }).then(function (webSharedMercury) {\n      webSocketUrl = _url.default.parse(webSocketUrl, true);\n      (0, _assign.default)(webSocketUrl.query, {\n        outboundWireFormat: 'text',\n        bufferStates: true,\n        aliasHttpStatus: true\n      });\n\n      if (webSharedMercury) {\n        (0, _assign.default)(webSocketUrl.query, {\n          mercuryRegistrationStatus: true,\n          isRegistrationRefreshEnabled: true\n        });\n        (0, _deleteProperty.default)(webSocketUrl.query, 'bufferStates');\n      }\n\n      if ((0, _get2.default)(_this3, 'webex.config.device.ephemeral', false)) {\n        webSocketUrl.query.multipleConnections = true;\n      }\n\n      return _url.default.format(webSocketUrl);\n    });\n  },\n  _attemptConnection: function _attemptConnection(socketUrl, callback) {\n    var _this4 = this;\n\n    var socket = new _socket.default();\n    var attemptWSUrl;\n    socket.on('close', function () {\n      return _this4._onclose.apply(_this4, arguments);\n    });\n    socket.on('message', function () {\n      return _this4._onmessage.apply(_this4, arguments);\n    });\n    socket.on('sequence-mismatch', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _this4._emit.apply(_this4, ['sequence-mismatch'].concat(args));\n    });\n\n    _promise.default.all([this._prepareUrl(socketUrl), this.webex.credentials.getUserToken()]).then(function (_ref) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n          webSocketUrl = _ref2[0],\n          token = _ref2[1];\n\n      if (!_this4.backoffCall) {\n        var msg = 'mercury: prevent socket open when backoffCall no longer defined';\n\n        _this4.logger.info(msg);\n\n        return _promise.default.reject(new Error(msg));\n      }\n\n      attemptWSUrl = webSocketUrl;\n      var options = {\n        forceCloseDelay: _this4.config.forceCloseDelay,\n        pingInterval: _this4.config.pingInterval,\n        pongTimeout: _this4.config.pongTimeout,\n        token: token.toString(),\n        trackingId: \"\".concat(_this4.webex.sessionId, \"_\").concat((0, _now.default)()),\n        logger: _this4.logger\n      }; // if the consumer has supplied request options use them\n\n      if (_this4.webex.config.defaultMercuryOptions) {\n        _this4.logger.info('mercury: setting custom options');\n\n        options = _objectSpread(_objectSpread({}, options), _this4.webex.config.defaultMercuryOptions);\n      } // Set the socket before opening it. This allows a disconnect() to close\n      // the socket if it is in the process of being opened.\n\n\n      _this4.socket = socket;\n      return socket.open(webSocketUrl, options);\n    }).then(function () {\n      _this4.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n        fields: {\n          success: true\n        },\n        tags: {\n          action: 'connected',\n          url: attemptWSUrl\n        }\n      });\n\n      callback();\n      return _this4.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n        if (haMessagingEnabled) {\n          return _this4.webex.internal.device.refresh();\n        }\n\n        return _promise.default.resolve();\n      });\n    }).catch(function (reason) {\n      // Suppress connection errors that appear to be network related. This\n      // may end up suppressing metrics during outages, but we might not care\n      // (especially since many of our outages happen in a way that client\n      // metrics can't be trusted).\n      if (reason.code !== 1006 && _this4.backoffCall && _this4.backoffCall.getNumRetries() > 0) {\n        _this4._emit('connection_failed', reason, {\n          retries: _this4.backoffCall.getNumRetries()\n        });\n      }\n\n      _this4.logger.info('mercury: connection attempt failed', reason); // UnknownResponse is produced by IE for any 4XXX; treated it like a bad\n      // web socket url and let WDM handle the token checking\n\n\n      if (reason instanceof _errors.UnknownResponse) {\n        _this4.logger.info('mercury: received unknown response code, refreshing device registration');\n\n        return _this4.webex.internal.device.refresh().then(function () {\n          return callback(reason);\n        });\n      } // NotAuthorized implies expired token\n\n\n      if (reason instanceof _errors.NotAuthorized) {\n        _this4.logger.info('mercury: received authorization error, reauthorizing');\n\n        return _this4.webex.credentials.refresh({\n          force: true\n        }).then(function () {\n          return callback(reason);\n        });\n      } // // NotFound implies expired web socket url\n      // else if (reason instanceof NotFound) {\n      //   this.logger.info(`mercury: received not found error, refreshing device registration`);\n      //   return this.webex.internal.device.refresh()\n      //     .then(() => callback(reason));\n      // }\n      // BadRequest implies current credentials are for a Service Account\n      // Forbidden implies current user is not entitle for Webex\n\n\n      if (reason instanceof _errors.BadRequest || reason instanceof _errors.Forbidden) {\n        _this4.logger.warn('mercury: received unrecoverable response from mercury');\n\n        _this4.backoffCall.abort();\n\n        return callback(reason);\n      }\n\n      if (reason instanceof _errors.ConnectionError) {\n        return _this4.webex.internal.feature.getFeature('developer', 'web-high-availability').then(function (haMessagingEnabled) {\n          if (haMessagingEnabled) {\n            _this4.logger.info('mercury: received a generic connection error, will try to connect to another datacenter');\n\n            _this4.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n              fields: {\n                success: false\n              },\n              tags: {\n                action: 'failed',\n                error: reason.message,\n                url: attemptWSUrl\n              }\n            });\n\n            return _this4.webex.internal.services.markFailedUrl(attemptWSUrl);\n          }\n\n          return null;\n        }).then(function () {\n          return callback(reason);\n        });\n      }\n\n      return callback(reason);\n    }).catch(function (reason) {\n      _this4.logger.error('mercury: failed to handle connection failure', reason);\n\n      callback(reason);\n    });\n  },\n  _connectWithBackoff: function _connectWithBackoff(webSocketUrl) {\n    var _this5 = this;\n\n    return new _promise.default(function (resolve, reject) {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      var call;\n\n      var onComplete = function onComplete(err) {\n        _this5.connecting = false;\n        _this5.backoffCall = undefined;\n\n        if (err) {\n          _this5.logger.info(\"mercury: failed to connect after \".concat(call.getNumRetries(), \" retries; log statement about next retry was inaccurate; \").concat(err));\n\n          return reject(err);\n        }\n\n        _this5.connected = true;\n\n        _this5._emit('online');\n\n        return resolve();\n      }; // eslint-disable-next-line prefer-reflect\n\n\n      call = _backoff.default.call(function (callback) {\n        _this5.logger.info(\"mercury: executing connection attempt \".concat(call.getNumRetries()));\n\n        _this5._attemptConnection(webSocketUrl, callback);\n      }, onComplete);\n      call.setStrategy(new _backoff.default.ExponentialStrategy({\n        initialDelay: _this5.config.backoffTimeReset,\n        maxDelay: _this5.config.backoffTimeMax\n      }));\n\n      if (_this5.config.maxRetries) {\n        call.failAfter(_this5.config.maxRetries);\n      }\n\n      call.on('abort', function () {\n        _this5.logger.info('mercury: connection aborted');\n\n        reject(new Error('Mercury Connection Aborted'));\n      });\n      call.on('callback', function (err) {\n        if (err) {\n          var number = call.getNumRetries();\n          var delay = Math.min(call.strategy_.nextBackoffDelay_, _this5.config.backoffTimeMax);\n\n          _this5.logger.info(\"mercury: failed to connect; attempting retry \".concat(number + 1, \" in \").concat(delay, \" ms\"));\n          /* istanbul ignore if */\n\n\n          if (process.env.NODE_ENV === 'development') {\n            _this5.logger.debug('mercury: ', err, err.stack);\n          }\n\n          return;\n        }\n\n        _this5.logger.info('mercury: connected');\n      });\n      call.start();\n      _this5.backoffCall = call;\n    });\n  },\n  _emit: function _emit() {\n    try {\n      this.trigger.apply(this, arguments);\n    } catch (error) {\n      this.logger.error('mercury: error occurred in event handler', error);\n    }\n  },\n  _getEventHandlers: function _getEventHandlers(eventType) {\n    var _eventType$split = eventType.split('.'),\n        _eventType$split2 = (0, _slicedToArray2.default)(_eventType$split, 2),\n        namespace = _eventType$split2[0],\n        name = _eventType$split2[1];\n\n    var handlers = [];\n\n    if (!this.webex[namespace] && !this.webex.internal[namespace]) {\n      return handlers;\n    }\n\n    var handlerName = (0, _camelCase2.default)(\"process_\".concat(name, \"_event\"));\n\n    if ((this.webex[namespace] || this.webex.internal[namespace])[handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace: namespace\n      });\n    }\n\n    return handlers;\n  },\n  _onclose: function _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n\n    /* eslint complexity: [0] */\n    try {\n      var reason = event.reason && event.reason.toLowerCase();\n      var socketUrl = this.socket.url;\n      this.socket.removeAllListeners();\n      this.unset('socket');\n      this.connected = false;\n\n      this._emit('offline', event);\n\n      switch (event.code) {\n        case 1003:\n          // metric: disconnect\n          this.logger.info(\"mercury: Mercury service rejected last message; will not reconnect: \".concat(event.reason));\n\n          this._emit('offline.permanent', event);\n\n          break;\n\n        case 4000:\n          // metric: disconnect\n          this.logger.info('mercury: socket replaced; will not reconnect');\n\n          this._emit('offline.replaced', event);\n\n          break;\n\n        case 1001:\n        case 1005:\n        case 1006:\n        case 1011:\n          this.logger.info('mercury: socket disconnected; reconnecting');\n\n          this._emit('offline.transient', event);\n\n          this._reconnect(socketUrl); // metric: disconnect\n          // if (code == 1011 && reason !== ping error) metric: unexpected disconnect\n\n\n          break;\n\n        case 1000:\n          if (normalReconnectReasons.includes(reason)) {\n            this.logger.info('mercury: socket disconnected; reconnecting');\n\n            this._emit('offline.transient', event);\n\n            this._reconnect(socketUrl); // metric: disconnect\n            // if (reason === done forced) metric: force closure\n\n          } else {\n            this.logger.info('mercury: socket disconnected; will not reconnect');\n\n            this._emit('offline.permanent', event);\n          }\n\n          break;\n\n        default:\n          this.logger.info('mercury: socket disconnected unexpectedly; will not reconnect'); // unexpected disconnect\n\n          this._emit('offline.permanent', event);\n\n      }\n    } catch (error) {\n      this.logger.error('mercury: error occurred in close handler', error);\n    }\n  },\n  _onmessage: function _onmessage(event) {\n    var _this6 = this;\n\n    var envelope = event.data;\n\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug('mercury: message envelope: ', envelope);\n    }\n\n    var data = envelope.data;\n\n    this._applyOverrides(data);\n\n    return this._getEventHandlers(data.eventType).reduce(function (promise, handler) {\n      return promise.then(function () {\n        var namespace = handler.namespace,\n            name = handler.name;\n        return new _promise.default(function (resolve) {\n          return resolve((_this6.webex[namespace] || _this6.webex.internal[namespace])[name](data));\n        }).catch(function (reason) {\n          return _this6.logger.error(\"mercury: error occurred in autowired event handler for \".concat(data.eventType), reason);\n        });\n      });\n    }, _promise.default.resolve()).then(function () {\n      _this6._emit('event', event.data);\n\n      var _data$eventType$split = data.eventType.split('.'),\n          _data$eventType$split2 = (0, _slicedToArray2.default)(_data$eventType$split, 1),\n          namespace = _data$eventType$split2[0];\n\n      if (namespace === data.eventType) {\n        _this6._emit(\"event:\".concat(namespace), envelope);\n      } else {\n        _this6._emit(\"event:\".concat(namespace), envelope);\n\n        _this6._emit(\"event:\".concat(data.eventType), envelope);\n      }\n    }).catch(function (reason) {\n      _this6.logger.error('mercury: error occurred processing socket message', reason);\n    });\n  },\n  _reconnect: function _reconnect(webSocketUrl) {\n    this.logger.info('mercury: reconnecting');\n    return this.connect(webSocketUrl);\n  },\n  version: \"1.154.2\"\n}, ((0, _applyDecoratedDescriptor2.default)(_obj, \"connect\", [_common.oneFlight], (0, _getOwnPropertyDescriptor.default)(_obj, \"connect\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"disconnect\", [_common.oneFlight], (0, _getOwnPropertyDescriptor.default)(_obj, \"disconnect\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"listen\", [_dec], (0, _getOwnPropertyDescriptor.default)(_obj, \"listen\"), _obj), (0, _applyDecoratedDescriptor2.default)(_obj, \"stopListening\", [_dec2], (0, _getOwnPropertyDescriptor.default)(_obj, \"stopListening\"), _obj)), _obj)));\n\nvar _default = Mercury;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["normalReconnectReasons","Mercury","WebexPlugin","extend","namespace","session","connected","default","type","connecting","socket","localClusterServiceUrls","derived","listening","deps","fn","connect","webSocketUrl","logger","info","_promise","resolve","webex","internal","device","registered","register","then","_this","_connectWithBackoff","disconnect","_this2","backoffCall","abort","removeAllListeners","once","close","listen","stopListening","processRegistrationStatusEvent","message","_applyOverrides","event","headers","headerKeys","forEach","keyPath","_prepareUrl","feature","getFeature","haMessagingEnabled","_this3","services","convertUrlToPriorityHostUrl","wsUrl","webSharedMercury","url","parse","query","outboundWireFormat","bufferStates","aliasHttpStatus","mercuryRegistrationStatus","isRegistrationRefreshEnabled","multipleConnections","format","_attemptConnection","socketUrl","callback","Socket","attemptWSUrl","on","_this4","_onclose","arguments","_onmessage","args","_emit","all","credentials","getUserToken","token","msg","reject","Error","options","forceCloseDelay","config","pingInterval","pongTimeout","toString","trackingId","sessionId","defaultMercuryOptions","open","metrics","submitClientMetrics","fields","success","tags","action","refresh","catch","reason","code","getNumRetries","retries","UnknownResponse","NotAuthorized","force","BadRequest","Forbidden","warn","ConnectionError","error","markFailedUrl","call","onComplete","err","_this5","undefined","backoff","setStrategy","ExponentialStrategy","initialDelay","backoffTimeReset","maxDelay","backoffTimeMax","maxRetries","failAfter","number","delay","Math","min","strategy_","nextBackoffDelay_","process","env","NODE_ENV","debug","stack","start","trigger","_getEventHandlers","eventType","split","name","handlers","handlerName","push","toLowerCase","unset","_reconnect","includes","envelope","data","ENABLE_MERCURY_LOGGING","reduce","promise","handler","_this6","version","oneFlight"],"sources":["mercury.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport url from 'url';\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport {deprecated, oneFlight} from '@webex/common';\nimport {camelCase, get, set} from 'lodash';\nimport backoff from 'backoff';\n\nimport Socket from './socket';\nimport {\n  BadRequest,\n  Forbidden,\n  NotAuthorized,\n  UnknownResponse,\n  ConnectionError\n  // NotFound\n} from './errors';\n\nconst normalReconnectReasons = [\n  'idle',\n  'done (forced)',\n  'pong not received',\n  'pong mismatch'\n];\n\nconst Mercury = WebexPlugin.extend({\n  namespace: 'Mercury',\n\n  session: {\n    connected: {\n      default: false,\n      type: 'boolean'\n    },\n    connecting: {\n      default: false,\n      type: 'boolean'\n    },\n    socket: 'object',\n    localClusterServiceUrls: 'object'\n  },\n\n  derived: {\n    listening: {\n      deps: ['connected'],\n      fn() {\n        return this.connected;\n      }\n    }\n  },\n\n  @oneFlight\n  connect(webSocketUrl) {\n    if (this.connected) {\n      this.logger.info('mercury: already connected, will not connect again');\n\n      return Promise.resolve();\n    }\n\n    this.connecting = true;\n\n    return Promise.resolve(this.webex.internal.device.registered || this.webex.internal.device.register())\n      .then(() => {\n        this.logger.info('mercury: connecting');\n\n        return this._connectWithBackoff(webSocketUrl);\n      });\n  },\n\n  @oneFlight\n  disconnect() {\n    return new Promise((resolve) => {\n      if (this.backoffCall) {\n        this.logger.info('mercury: aborting connection');\n        this.backoffCall.abort();\n      }\n\n      if (this.socket) {\n        this.socket.removeAllListeners('message');\n        this.once('offline', resolve);\n        this.socket.close();\n\n        return;\n      }\n\n      resolve();\n    });\n  },\n\n  @deprecated('Mercury#listen(): Use Mercury#connect() instead')\n  listen() {\n    /* eslint no-invalid-this: [0] */\n    return this.connect();\n  },\n\n  @deprecated('Mercury#stopListening(): Use Mercury#disconnect() instead')\n  stopListening() {\n    /* eslint no-invalid-this: [0] */\n    return this.disconnect();\n  },\n\n  processRegistrationStatusEvent(message) {\n    this.localClusterServiceUrls = message.localClusterServiceUrls;\n  },\n\n  _applyOverrides(event) {\n    if (!event || !event.headers) {\n      return;\n    }\n    const headerKeys = Object.keys(event.headers);\n\n    headerKeys.forEach((keyPath) => {\n      set(event, keyPath, event.headers[keyPath]);\n    });\n  },\n\n  _prepareUrl(webSocketUrl) {\n    if (!webSocketUrl) {\n      webSocketUrl = this.webex.internal.device.webSocketUrl;\n    }\n\n    return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n      .then((haMessagingEnabled) => {\n        if (haMessagingEnabled) {\n          return this.webex.internal.services.convertUrlToPriorityHostUrl(webSocketUrl);\n        }\n\n        return webSocketUrl;\n      })\n      .then((wsUrl) => {\n        webSocketUrl = wsUrl;\n      })\n      .then(() => this.webex.internal.feature.getFeature('developer', 'web-shared-mercury'))\n      .then((webSharedMercury) => {\n        webSocketUrl = url.parse(webSocketUrl, true);\n        Object.assign(webSocketUrl.query, {\n          outboundWireFormat: 'text',\n          bufferStates: true,\n          aliasHttpStatus: true\n        });\n\n        if (webSharedMercury) {\n          Object.assign(webSocketUrl.query, {\n            mercuryRegistrationStatus: true,\n            isRegistrationRefreshEnabled: true\n          });\n          Reflect.deleteProperty(webSocketUrl.query, 'bufferStates');\n        }\n\n        if (get(this, 'webex.config.device.ephemeral', false)) {\n          webSocketUrl.query.multipleConnections = true;\n        }\n\n        return url.format(webSocketUrl);\n      });\n  },\n\n  _attemptConnection(socketUrl, callback) {\n    const socket = new Socket();\n    let attemptWSUrl;\n\n    socket.on('close', (...args) => this._onclose(...args));\n    socket.on('message', (...args) => this._onmessage(...args));\n    socket.on('sequence-mismatch', (...args) => this._emit('sequence-mismatch', ...args));\n\n    Promise.all([this._prepareUrl(socketUrl), this.webex.credentials.getUserToken()])\n      .then(([webSocketUrl, token]) => {\n        if (!this.backoffCall) {\n          const msg = 'mercury: prevent socket open when backoffCall no longer defined';\n\n          this.logger.info(msg);\n\n          return Promise.reject(new Error(msg));\n        }\n\n        attemptWSUrl = webSocketUrl;\n\n        let options = {\n          forceCloseDelay: this.config.forceCloseDelay,\n          pingInterval: this.config.pingInterval,\n          pongTimeout: this.config.pongTimeout,\n          token: token.toString(),\n          trackingId: `${this.webex.sessionId}_${Date.now()}`,\n          logger: this.logger\n        };\n\n        // if the consumer has supplied request options use them\n        if (this.webex.config.defaultMercuryOptions) {\n          this.logger.info('mercury: setting custom options');\n          options = {...options, ...this.webex.config.defaultMercuryOptions};\n        }\n\n        // Set the socket before opening it. This allows a disconnect() to close\n        // the socket if it is in the process of being opened.\n        this.socket = socket;\n\n        return socket.open(webSocketUrl, options);\n      })\n      .then(() => {\n        this.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n          fields: {\n            success: true\n          },\n          tags: {\n            action: 'connected',\n            url: attemptWSUrl\n          }\n        });\n        callback();\n\n        return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n          .then((haMessagingEnabled) => {\n            if (haMessagingEnabled) {\n              return this.webex.internal.device.refresh();\n            }\n\n            return Promise.resolve();\n          });\n      })\n      .catch((reason) => {\n        // Suppress connection errors that appear to be network related. This\n        // may end up suppressing metrics during outages, but we might not care\n        // (especially since many of our outages happen in a way that client\n        // metrics can't be trusted).\n        if (reason.code !== 1006 && this.backoffCall && this.backoffCall.getNumRetries() > 0) {\n          this._emit('connection_failed', reason, {retries: this.backoffCall.getNumRetries()});\n        }\n        this.logger.info('mercury: connection attempt failed', reason);\n        // UnknownResponse is produced by IE for any 4XXX; treated it like a bad\n        // web socket url and let WDM handle the token checking\n        if (reason instanceof UnknownResponse) {\n          this.logger.info('mercury: received unknown response code, refreshing device registration');\n\n          return this.webex.internal.device.refresh()\n            .then(() => callback(reason));\n        }\n        // NotAuthorized implies expired token\n        if (reason instanceof NotAuthorized) {\n          this.logger.info('mercury: received authorization error, reauthorizing');\n\n          return this.webex.credentials.refresh({force: true})\n            .then(() => callback(reason));\n        }\n        // // NotFound implies expired web socket url\n        // else if (reason instanceof NotFound) {\n        //   this.logger.info(`mercury: received not found error, refreshing device registration`);\n        //   return this.webex.internal.device.refresh()\n        //     .then(() => callback(reason));\n        // }\n        // BadRequest implies current credentials are for a Service Account\n        // Forbidden implies current user is not entitle for Webex\n        if (reason instanceof BadRequest || reason instanceof Forbidden) {\n          this.logger.warn('mercury: received unrecoverable response from mercury');\n          this.backoffCall.abort();\n\n          return callback(reason);\n        }\n        if (reason instanceof ConnectionError) {\n          return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n            .then((haMessagingEnabled) => {\n              if (haMessagingEnabled) {\n                this.logger.info('mercury: received a generic connection error, will try to connect to another datacenter');\n                this.webex.internal.metrics.submitClientMetrics('web-ha-mercury', {\n                  fields: {\n                    success: false\n                  },\n                  tags: {\n                    action: 'failed',\n                    error: reason.message,\n                    url: attemptWSUrl\n                  }\n                });\n\n                return this.webex.internal.services.markFailedUrl(attemptWSUrl);\n              }\n\n              return null;\n            })\n            .then(() => callback(reason));\n        }\n\n        return callback(reason);\n      })\n      .catch((reason) => {\n        this.logger.error('mercury: failed to handle connection failure', reason);\n        callback(reason);\n      });\n  },\n\n  _connectWithBackoff(webSocketUrl) {\n    return new Promise((resolve, reject) => {\n      // eslint gets confused about whether or not call is actually used\n      // eslint-disable-next-line prefer-const\n      let call;\n      const onComplete = (err) => {\n        this.connecting = false;\n\n        this.backoffCall = undefined;\n        if (err) {\n          this.logger.info(`mercury: failed to connect after ${call.getNumRetries()} retries; log statement about next retry was inaccurate; ${err}`);\n\n          return reject(err);\n        }\n        this.connected = true;\n        this._emit('online');\n\n        return resolve();\n      };\n\n      // eslint-disable-next-line prefer-reflect\n      call = backoff.call((callback) => {\n        this.logger.info(`mercury: executing connection attempt ${call.getNumRetries()}`);\n        this._attemptConnection(webSocketUrl, callback);\n      }, onComplete);\n\n      call.setStrategy(new backoff.ExponentialStrategy({\n        initialDelay: this.config.backoffTimeReset,\n        maxDelay: this.config.backoffTimeMax\n      }));\n\n      if (this.config.maxRetries) {\n        call.failAfter(this.config.maxRetries);\n      }\n\n      call.on('abort', () => {\n        this.logger.info('mercury: connection aborted');\n        reject(new Error('Mercury Connection Aborted'));\n      });\n\n      call.on('callback', (err) => {\n        if (err) {\n          const number = call.getNumRetries();\n          const delay = Math.min(call.strategy_.nextBackoffDelay_, this.config.backoffTimeMax);\n\n          this.logger.info(`mercury: failed to connect; attempting retry ${number + 1} in ${delay} ms`);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV === 'development') {\n            this.logger.debug('mercury: ', err, err.stack);\n          }\n\n          return;\n        }\n        this.logger.info('mercury: connected');\n      });\n\n      call.start();\n\n      this.backoffCall = call;\n    });\n  },\n\n  _emit(...args) {\n    try {\n      this.trigger(...args);\n    }\n    catch (error) {\n      this.logger.error('mercury: error occurred in event handler', error);\n    }\n  },\n\n  _getEventHandlers(eventType) {\n    const [namespace, name] = eventType.split('.');\n    const handlers = [];\n\n    if (!this.webex[namespace] && !this.webex.internal[namespace]) {\n      return handlers;\n    }\n\n    const handlerName = camelCase(`process_${name}_event`);\n\n    if ((this.webex[namespace] || this.webex.internal[namespace])[handlerName]) {\n      handlers.push({\n        name: handlerName,\n        namespace\n      });\n    }\n\n    return handlers;\n  },\n\n  _onclose(event) {\n    // I don't see any way to avoid the complexity or statement count in here.\n    /* eslint complexity: [0] */\n\n    try {\n      const reason = event.reason && event.reason.toLowerCase();\n      const socketUrl = this.socket.url;\n\n      this.socket.removeAllListeners();\n      this.unset('socket');\n      this.connected = false;\n      this._emit('offline', event);\n\n      switch (event.code) {\n        case 1003:\n        // metric: disconnect\n          this.logger.info(`mercury: Mercury service rejected last message; will not reconnect: ${event.reason}`);\n          this._emit('offline.permanent', event);\n          break;\n        case 4000:\n          // metric: disconnect\n          this.logger.info('mercury: socket replaced; will not reconnect');\n          this._emit('offline.replaced', event);\n          break;\n        case 1001:\n        case 1005:\n        case 1006:\n        case 1011:\n          this.logger.info('mercury: socket disconnected; reconnecting');\n          this._emit('offline.transient', event);\n          this._reconnect(socketUrl);\n          // metric: disconnect\n          // if (code == 1011 && reason !== ping error) metric: unexpected disconnect\n          break;\n        case 1000:\n          if (normalReconnectReasons.includes(reason)) {\n            this.logger.info('mercury: socket disconnected; reconnecting');\n            this._emit('offline.transient', event);\n            this._reconnect(socketUrl);\n            // metric: disconnect\n            // if (reason === done forced) metric: force closure\n          }\n          else {\n            this.logger.info('mercury: socket disconnected; will not reconnect');\n            this._emit('offline.permanent', event);\n          }\n          break;\n        default:\n          this.logger.info('mercury: socket disconnected unexpectedly; will not reconnect');\n          // unexpected disconnect\n          this._emit('offline.permanent', event);\n      }\n    }\n    catch (error) {\n      this.logger.error('mercury: error occurred in close handler', error);\n    }\n  },\n\n  _onmessage(event) {\n    const envelope = event.data;\n\n    if (process.env.ENABLE_MERCURY_LOGGING) {\n      this.logger.debug('mercury: message envelope: ', envelope);\n    }\n\n    const {data} = envelope;\n\n    this._applyOverrides(data);\n\n    return this._getEventHandlers(data.eventType)\n      .reduce((promise, handler) => promise.then(() => {\n        const {namespace, name} = handler;\n\n        return new Promise((resolve) => resolve((this.webex[namespace] || this.webex.internal[namespace])[name](data)))\n          .catch((reason) => this.logger.error(`mercury: error occurred in autowired event handler for ${data.eventType}`, reason));\n      }), Promise.resolve())\n      .then(() => {\n        this._emit('event', event.data);\n        const [namespace] = data.eventType.split('.');\n\n        if (namespace === data.eventType) {\n          this._emit(`event:${namespace}`, envelope);\n        }\n        else {\n          this._emit(`event:${namespace}`, envelope);\n          this._emit(`event:${data.eventType}`, envelope);\n        }\n      })\n      .catch((reason) => {\n        this.logger.error('mercury: error occurred processing socket message', reason);\n      });\n  },\n\n  _reconnect(webSocketUrl) {\n    this.logger.info('mercury: reconnecting');\n\n    return this.connect(webSocketUrl);\n  }\n});\n\nexport default Mercury;\n"]},"metadata":{},"sourceType":"script"}
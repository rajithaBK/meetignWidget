{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _constants = require(\"../constants\");\n\nvar _browserDetection = _interopRequireDefault(require(\"../common/browser-detection\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar _BrowserDetection = (0, _browserDetection.default)(),\n    isBrowser = _BrowserDetection.isBrowser;\n/**\n * @description MQAProcessor handles interval data for MQA\n * @export\n * @class MQAProcessor\n */\n\n\nvar MQAProcessor = /*#__PURE__*/function () {\n  /**\n     * @constructor\n     * @public\n     * @memberof MQAProcessor\n     */\n  function MQAProcessor() {\n    (0, _classCallCheck2.default)(this, MQAProcessor);\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n    this.intervalNumber = 1;\n  }\n  /**\n   * @param {String} id\n   * @param {Array<WebRTCData>} interval - a slice of metrics history\n   * @returns {undefined}\n   * @memberof MQAProcessor\n   */\n\n\n  (0, _createClass2.default)(MQAProcessor, [{\n    key: \"process\",\n    value: function process(id, interval) {\n      var rtcCandidatePair, rtcOutVideo, rtpOutVideo; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:\n\n      var vsTransmit;\n      var _this$data = this.data,\n          videoReceive = _this$data.videoReceive,\n          audioTransmit = _this$data.audioTransmit,\n          audioReceive = _this$data.audioReceive,\n          videoTransmit = _this$data.videoTransmit;\n      var sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed\n\n      if (sumValue) {\n        rtcCandidatePair = sumValue.rtcCandidatePair;\n      }\n\n      switch (id) {\n        case _constants.STATS.AUDIO_SENDER_ID:\n          audioTransmit.push();\n          break;\n\n        case _constants.STATS.AUDIO_RECEIVER_ID:\n          audioReceive.push();\n          break;\n\n        case _constants.STATS.VIDEO_SENDER_ID:\n          videoTransmit.push();\n          break;\n\n        case _constants.STATS.VIDEO_RECEIVER_ID:\n          videoReceive.push();\n          break;\n\n        case _constants.STATS.SHARE_SENDER_ID:\n          if (sumValue) {\n            rtcOutVideo = sumValue.rtcOutVideo;\n            rtpOutVideo = sumValue.rtpOutVideo;\n          }\n\n          vsTransmit = _objectSpread({}, _constants.MQA_STATS.DEFAULT_SHARE_SENDER_STATS);\n\n          if (isBrowser('firefox')) {\n            vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          } else {\n            vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : 0;\n            vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : 0;\n            vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : 0;\n            vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : 0;\n            vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : 0;\n            vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : 0;\n          }\n\n          videoTransmit.push(vsTransmit);\n          break;\n\n        default:\n          break;\n      }\n\n      this.data.intervalMetadata = this.data.intervalMetadata || _objectSpread({}, _constants.MQA_STATS.intervalMetadata);\n    }\n    /**\n     * get the data payload for media quality events after they all have been processed\n     * wait to call this until after you have all the data from the interval you want\n     * this method clears the data as a side effect\n     * @returns {Object}\n     * @memberof MQAProcessor\n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      this.intervalNumber += 1;\n\n      var payload = _objectSpread(_objectSpread({}, this.data), {}, {\n        intervalNumber: this.intervalNumber\n      });\n\n      this.data = {\n        videoReceive: [],\n        audioTransmit: [],\n        audioReceive: [],\n        videoTransmit: []\n      };\n      return payload;\n    }\n  }]);\n  return MQAProcessor;\n}();\n\nvar _default = MQAProcessor;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["isBrowser","MQAProcessor","data","videoReceive","audioTransmit","audioReceive","videoTransmit","intervalNumber","id","interval","rtcCandidatePair","rtcOutVideo","rtpOutVideo","vsTransmit","sumValue","STATS","AUDIO_SENDER_ID","push","AUDIO_RECEIVER_ID","VIDEO_SENDER_ID","VIDEO_RECEIVER_ID","SHARE_SENDER_ID","MQA_STATS","DEFAULT_SHARE_SENDER_STATS","common","remoteLossRate","pliCount","length","rtpPackets","packetsSent","streams","transmittedFrameRate","framesEncoded","availableBitRate","availableOutgoingBitrate","roundTripTime","totalRoundTripTime","transmittedBitrate","framesSent","transmittedHeight","frameHeight","transmittedKeyFrames","hugeFramesSent","transmittedWidth","frameWidth","intervalMetadata","payload"],"sources":["mqa-processor.js"],"sourcesContent":["import {\n  STATS,\n  MQA_STATS\n} from '../constants';\nimport BrowserDetection from '../common/browser-detection';\n\nconst {isBrowser} = BrowserDetection();\n\n/**\n * @description MQAProcessor handles interval data for MQA\n * @export\n * @class MQAProcessor\n */\nclass MQAProcessor {\n  /**\n     * @constructor\n     * @public\n     * @memberof MQAProcessor\n     */\n  constructor() {\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n    this.intervalNumber = 1;\n  }\n\n  /**\n   * @param {String} id\n   * @param {Array<WebRTCData>} interval - a slice of metrics history\n   * @returns {undefined}\n   * @memberof MQAProcessor\n   */\n  process(id, interval) {\n    let rtcCandidatePair, rtcOutVideo, rtpOutVideo; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:\n    let vsTransmit;\n\n    const {\n      videoReceive, audioTransmit, audioReceive, videoTransmit\n    } = this.data;\n\n    const sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed\n\n    if (sumValue) {\n      rtcCandidatePair = sumValue.rtcCandidatePair;\n    }\n\n    switch (id) {\n      case STATS.AUDIO_SENDER_ID:\n        audioTransmit.push();\n        break;\n      case STATS.AUDIO_RECEIVER_ID:\n        audioReceive.push();\n        break;\n      case STATS.VIDEO_SENDER_ID:\n        videoTransmit.push();\n        break;\n      case STATS.VIDEO_RECEIVER_ID:\n        videoReceive.push();\n        break;\n      case STATS.SHARE_SENDER_ID:\n        if (sumValue) {\n          rtcOutVideo = sumValue.rtcOutVideo;\n          rtpOutVideo = sumValue.rtpOutVideo;\n        }\n        vsTransmit = {...MQA_STATS.DEFAULT_SHARE_SENDER_STATS};\n        if (isBrowser('firefox')) {\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n        }\n        else {\n          vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : 0;\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : 0;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : 0;\n          vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : 0;\n          vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : 0;\n          vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : 0;\n        }\n        videoTransmit.push(vsTransmit);\n        break;\n      default:\n        break;\n    }\n    this.data.intervalMetadata = this.data.intervalMetadata || {...MQA_STATS.intervalMetadata};\n  }\n\n  /**\n   * get the data payload for media quality events after they all have been processed\n   * wait to call this until after you have all the data from the interval you want\n   * this method clears the data as a side effect\n   * @returns {Object}\n   * @memberof MQAProcessor\n   */\n  getData() {\n    this.intervalNumber += 1;\n\n    const payload = {...this.data, intervalNumber: this.intervalNumber};\n\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n\n    return payload;\n  }\n}\n\nexport default MQAProcessor;\n"]},"metadata":{},"sourceType":"script"}
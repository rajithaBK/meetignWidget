{"ast":null,"code":"var isIPv4 = function (ipString) {\n  if (!ipString.match(/^([0-9]{1,3}\\.){3}[0-9]{1,3}$/)) {\n    return false;\n  }\n\n  var octets = ipString.split('.');\n\n  for (let octet of octets) {\n    var number = Number(octet);\n\n    if (number > 255) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isIPv6 = function (ipString) {\n  let chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  ipString = ipString.toLowerCase();\n\n  if (ipString === '::') {\n    return true;\n  }\n\n  if (!ipString.match(/^([0-9a-f]{0,4}:?){2,8}$/)) {\n    return false;\n  } // If there is a colon at the end, it must be a double colon\n\n\n  if (ipString[ipString.length - 1] === ':') {\n    if (ipString[ipString.length - 2] !== ':') {\n      return false;\n    }\n  } // No more than one double colon\n\n\n  if (ipString.split('::').length > 2) {\n    return false;\n  } // If no double colon, then exactly `chunks` chunks\n\n\n  if (ipString.split('::').length === 1) {\n    if (ipString.split(':').length !== chunks) {\n      return false;\n    }\n  }\n\n  if (ipString.split('::').length === 2) {\n    var right = ipString.split('::')[1];\n    right = right.split(':');\n\n    for (let i = 0; i < right.length - 1; i++) {\n      if (right[i] === '') {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nvar isIPv64 = function (ipString) {\n  var [v6, v4] = splitIPv64(ipString);\n  return isIPv6(v6, 6) && isIPv4(v4);\n}; // Reference: https://web.archive.org/web/20181019071947/http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding-2.htm\n// Either starts with 96 0s or 80 0s followed by 16 1s\n\n\nvar isIPv4MappedIPv6 = function (ipString) {\n  return isIPv64(ipString) && (!binaryIPv64(ipString).substring(0, 96).includes('1') || !binaryIPv64(ipString).substring(0, 80).includes('1') && !binaryIPv64(ipString).substring(80, 96).includes('0'));\n};\n\nvar ipType = function (ipString) {\n  if (isIPv4(ipString)) {\n    return 'IPv4';\n  }\n\n  if (isIPv6(ipString)) {\n    return 'IPv6';\n  }\n\n  if (isIPv64(ipString)) {\n    return 'IPv6_4';\n  }\n\n  return 'None';\n};\n\nvar padRight = function (str, length) {\n  let char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n\n  while (str.length < length) {\n    str += char;\n  }\n\n  return str;\n};\n\nvar padLeft = function (str, length) {\n  let char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n\n  while (str.length < length) {\n    str = char + str;\n  }\n\n  return str;\n};\n\nvar split = function (str, length) {\n  var chunks = [];\n\n  while (str.length > 0) {\n    var chunk = str.substring(0, length);\n    chunks.push(chunk);\n    str = str.substring(length);\n  }\n\n  return chunks;\n};\n\nvar toBinary = function (n) {\n  return Number(n).toString(2);\n};\n\nvar fromBinary = function (binaryString) {\n  return parseInt(binaryString, 2);\n};\n\nvar binaryIPv4 = function (ipString) {\n  var octetStrings = ipString.split('.');\n  return octetStrings.map(str => padLeft(toBinary(str), 8)).join('');\n};\n\nvar toHex = function (n) {\n  return n.toString(16);\n};\n\nvar binaryIPv6 = function (ipString) {\n  var [left, right] = ipString.split('::');\n  left = left.split(':');\n\n  if (right !== undefined) {\n    right = right.split(':');\n  } else {\n    right = [];\n  }\n\n  while (left.length + right.length < 8) {\n    left.push('0');\n  }\n\n  var chunkStrings = left.concat(right);\n\n  for (let i = 0; i < chunkStrings.length; i++) {\n    if (chunkStrings[i].length === 0) {\n      chunkStrings[i] = '0';\n    }\n  }\n\n  var chunks = chunkStrings.map(str => parseInt(str, 16));\n  var binaryChunks = chunks.map(n => padLeft(toBinary(n), 16));\n  return binaryChunks.join('');\n};\n\nvar splitIPv64 = function (ipString) {\n  var separatorIndex = ipString.lastIndexOf(':');\n  var v6 = ipString.substring(0, separatorIndex);\n  var v4 = ipString.substring(separatorIndex + 1);\n\n  if (v6[v6.length - 1] === ':') {\n    v6 = v6 + ':';\n  }\n\n  return [v6, v4];\n};\n\nvar binaryIPv64 = function (ipString) {\n  var [v6, v4] = splitIPv64(ipString);\n  var [left, right] = v6.split('::');\n  left = left.split(':');\n\n  if (right !== undefined) {\n    right = right.split(':');\n  } else {\n    right = [];\n  }\n\n  while (left.length + right.length < 6) {\n    left.push('0');\n  }\n\n  var chunkStrings = left.concat(right);\n\n  for (let i = 0; i < chunkStrings.length; i++) {\n    if (chunkStrings[i].length === 0) {\n      chunkStrings[i] = '0';\n    }\n  }\n\n  var chunks = chunkStrings.map(str => parseInt(str, 16));\n  var binaryChunks = chunks.map(n => padLeft(toBinary(n), 16));\n  return binaryChunks.join('') + binaryIPv4(v4);\n};\n\nvar fromBinaryIPv4 = function (binaryString) {\n  var octets = split(binaryString, 8);\n  return octets.map(fromBinary).join('.');\n};\n\nvar compressIPv6 = function (ipString) {\n  var chunks = ipString.split(':');\n  var bestRunLength = 0;\n  var bestRunStart = null;\n  var currentlyRun = false;\n  var runLength = 0;\n  var runStart = null;\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (currentlyRun) {\n      if (chunks[i] === '0') {\n        runLength++;\n      } else {\n        if (runLength > bestRunLength) {\n          bestRunLength = runLength;\n          bestRunStart = runStart;\n        }\n\n        currentlyRun = false;\n        runLength = 0;\n        runStart = null;\n      }\n    } else {\n      if (chunks[i] === '0') {\n        currentlyRun = true;\n        runLength = 1;\n        runStart = i;\n      }\n    }\n  }\n\n  if (runStart !== null && runLength > bestRunLength) {\n    bestRunLength = runLength;\n    bestRunStart = runStart;\n  }\n\n  if (bestRunLength < 2) {\n    return ipString;\n  }\n\n  var left = chunks.slice(0, bestRunStart).join(':');\n  var right = chunks.slice(bestRunStart + bestRunLength).join(':');\n  var result = left + '::' + right;\n  return result;\n};\n\nvar fromBinaryIPv6 = function (binaryString) {\n  var chunks = split(binaryString, 16);\n  var hexChunks = chunks.map(fromBinary).map(toHex);\n  var compressedChunks = compressIPv6(hexChunks.join(':'));\n  return compressedChunks;\n};\n\nvar fromBinaryIPv64 = function (binaryString) {\n  var v6 = binaryString.substring(0, 96);\n  var v4 = binaryString.substring(96);\n  var left = fromBinaryIPv6(v6);\n  var right = fromBinaryIPv4(v4);\n  var compressedChunks = left;\n\n  if (compressedChunks[compressedChunks.length - 1] !== ':') {\n    compressedChunks += ':';\n  }\n\n  return compressedChunks + right;\n};\n\nvar anonymizeIPv4 = function (ipString, maskLength) {\n  var binary = binaryIPv4(ipString);\n  var segment = binary.substring(0, maskLength);\n  var anonymizedBinary = padRight(segment, 32);\n  return fromBinaryIPv4(anonymizedBinary);\n};\n\nvar anonymizeIPv6 = function (ipString, maskLength) {\n  var binary = binaryIPv6(ipString);\n  var segment = binary.substring(0, maskLength);\n  var anonymizedBinary = padRight(segment, 128);\n  return fromBinaryIPv6(anonymizedBinary);\n};\n\nvar anonymizeIPv64 = function (ipString, maskLength) {\n  var binary = binaryIPv64(ipString);\n  var segment = binary.substring(0, maskLength);\n  var anonymizedBinary = padRight(segment, 128);\n  return fromBinaryIPv64(anonymizedBinary);\n};\n\nvar anonymizeIP = function (ipString) {\n  let v4MaskLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  let v6MaskLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 24;\n\n  if (typeof ipString !== 'string') {\n    return null;\n  }\n\n  ipString = ipString.trim().toLowerCase();\n  var type = ipType(ipString);\n\n  if (type === 'IPv4') {\n    return anonymizeIPv4(ipString, v4MaskLength);\n  }\n\n  if (type === 'IPv6') {\n    return anonymizeIPv6(ipString, v6MaskLength);\n  }\n\n  if (type === 'IPv6_4') {\n    if (isIPv4MappedIPv6(ipString)) {\n      return anonymizeIPv64(ipString, v4MaskLength + 96);\n    } else {\n      return anonymizeIPv64(ipString, v6MaskLength);\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = anonymizeIP;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/ip-anonymize/index.js"],"names":["isIPv4","ipString","match","octets","split","octet","number","Number","isIPv6","chunks","toLowerCase","length","right","i","isIPv64","v6","v4","splitIPv64","isIPv4MappedIPv6","binaryIPv64","substring","includes","ipType","padRight","str","char","padLeft","chunk","push","toBinary","n","toString","fromBinary","binaryString","parseInt","binaryIPv4","octetStrings","map","join","toHex","binaryIPv6","left","undefined","chunkStrings","concat","binaryChunks","separatorIndex","lastIndexOf","fromBinaryIPv4","compressIPv6","bestRunLength","bestRunStart","currentlyRun","runLength","runStart","slice","result","fromBinaryIPv6","hexChunks","compressedChunks","fromBinaryIPv64","anonymizeIPv4","maskLength","binary","segment","anonymizedBinary","anonymizeIPv6","anonymizeIPv64","anonymizeIP","v4MaskLength","v6MaskLength","trim","type","module","exports"],"mappings":"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","sourcesContent":["var isIPv4 = function (ipString) {\n  if (!ipString.match(/^([0-9]{1,3}\\.){3}[0-9]{1,3}$/)) {\n    return false\n  }\n  var octets = ipString.split('.')\n  for (let octet of octets) {\n    var number = Number(octet)\n    if (number > 255) {\n      return false\n    }\n  }\n  return true\n}\n\nvar isIPv6 = function (ipString, chunks = 8) {\n  ipString = ipString.toLowerCase()\n  if (ipString === '::') {\n    return true\n  }\n\n  if (!ipString.match(/^([0-9a-f]{0,4}:?){2,8}$/)) {\n    return false\n  }\n\n  // If there is a colon at the end, it must be a double colon\n  if (ipString[ipString.length - 1] === ':') {\n    if (ipString[ipString.length - 2] !== ':') {\n      return false\n    }\n  }\n\n  // No more than one double colon\n  if (ipString.split('::').length > 2) {\n    return false\n  }\n\n  // If no double colon, then exactly `chunks` chunks\n  if (ipString.split('::').length === 1) {\n    if (ipString.split(':').length !== chunks) {\n      return false\n    }\n  }\n\n  if (ipString.split('::').length === 2) {\n    var right = ipString.split('::')[1]\n    right = right.split(':')\n    for (let i = 0; i < right.length - 1; i++) {\n      if (right[i] === '') {\n        return false\n      }\n    }\n  }\n\n  return true\n}\n\nvar isIPv64 = function (ipString) {\n  var [v6, v4] = splitIPv64(ipString)\n  return isIPv6(v6, 6) && isIPv4(v4)\n}\n\n// Reference: https://web.archive.org/web/20181019071947/http://www.tcpipguide.com/free/t_IPv6IPv4AddressEmbedding-2.htm\n// Either starts with 96 0s or 80 0s followed by 16 1s\nvar isIPv4MappedIPv6 = function (ipString) {\n  return isIPv64(ipString) &&\n    (!binaryIPv64(ipString).substring(0, 96).includes('1') ||\n      (!binaryIPv64(ipString).substring(0, 80).includes('1') &&\n        !binaryIPv64(ipString).substring(80, 96).includes('0')))\n}\n\nvar ipType = function (ipString) {\n  if (isIPv4(ipString)) {\n    return 'IPv4'\n  }\n  if (isIPv6(ipString)) {\n    return 'IPv6'\n  }\n  if (isIPv64(ipString)) {\n    return 'IPv6_4'\n  }\n  return 'None'\n}\n\nvar padRight = function (str, length, char = '0') {\n  while (str.length < length) {\n    str += char\n  }\n  return str\n}\n\nvar padLeft = function (str, length, char = '0') {\n  while (str.length < length) {\n    str = char + str\n  }\n  return str\n}\n\nvar split = function (str, length) {\n  var chunks = []\n  while (str.length > 0) {\n    var chunk = str.substring(0, length)\n    chunks.push(chunk)\n    str = str.substring(length)\n  }\n  return chunks\n}\n\nvar toBinary = function (n) {\n  return Number(n).toString(2)\n}\n\nvar fromBinary = function (binaryString) {\n  return parseInt(binaryString, 2)\n}\n\nvar binaryIPv4 = function (ipString) {\n  var octetStrings = ipString.split('.')\n  return octetStrings.map(str => padLeft(toBinary(str), 8)).join('')\n}\n\nvar toHex = function (n) {\n  return n.toString(16)\n}\n\nvar binaryIPv6 = function (ipString) {\n  var [left, right] = ipString.split('::')\n\n  left = left.split(':')\n  if (right !== undefined) {\n    right = right.split(':')\n  } else {\n    right = []\n  }\n\n  while ((left.length + right.length) < 8) {\n    left.push('0')\n  }\n  var chunkStrings = left.concat(right)\n\n  for (let i = 0; i < chunkStrings.length; i++) {\n    if (chunkStrings[i].length === 0) {\n      chunkStrings[i] = '0'\n    }\n  }\n\n  var chunks = chunkStrings.map(str => parseInt(str, 16))\n\n  var binaryChunks = chunks.map(n => padLeft(toBinary(n), 16))\n  return binaryChunks.join('')\n}\n\nvar splitIPv64 = function (ipString) {\n  var separatorIndex = ipString.lastIndexOf(':')\n  var v6 = ipString.substring(0, separatorIndex)\n  var v4 = ipString.substring(separatorIndex + 1)\n\n  if (v6[v6.length - 1] === ':') {\n    v6 = v6 + ':'\n  }\n\n  return [v6, v4]\n}\n\nvar binaryIPv64 = function (ipString) {\n  var [v6, v4] = splitIPv64(ipString)\n\n  var [left, right] = v6.split('::')\n  left = left.split(':')\n  if (right !== undefined) {\n    right = right.split(':')\n  } else {\n    right = []\n  }\n\n  while ((left.length + right.length) < 6) {\n    left.push('0')\n  }\n  var chunkStrings = left.concat(right)\n\n  for (let i = 0; i < chunkStrings.length; i++) {\n    if (chunkStrings[i].length === 0) {\n      chunkStrings[i] = '0'\n    }\n  }\n\n  var chunks = chunkStrings.map(str => parseInt(str, 16))\n\n  var binaryChunks = chunks.map(n => padLeft(toBinary(n), 16))\n  return binaryChunks.join('') + binaryIPv4(v4)\n}\n\nvar fromBinaryIPv4 = function (binaryString) {\n  var octets = split(binaryString, 8)\n  return octets.map(fromBinary).join('.')\n}\n\nvar compressIPv6 = function (ipString) {\n  var chunks = ipString.split(':')\n\n  var bestRunLength = 0\n  var bestRunStart = null\n\n  var currentlyRun = false\n  var runLength = 0\n  var runStart = null\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (currentlyRun) {\n      if (chunks[i] === '0') {\n        runLength++\n      } else {\n        if (runLength > bestRunLength) {\n          bestRunLength = runLength\n          bestRunStart = runStart\n        }\n        currentlyRun = false\n        runLength = 0\n        runStart = null\n      }\n    } else {\n      if (chunks[i] === '0') {\n        currentlyRun = true\n        runLength = 1\n        runStart = i\n      }\n    }\n  }\n  if (runStart !== null && runLength > bestRunLength) {\n    bestRunLength = runLength\n    bestRunStart = runStart\n  }\n\n  if (bestRunLength < 2) {\n    return ipString\n  }\n\n  var left = chunks.slice(0, bestRunStart).join(':')\n  var right = chunks.slice(bestRunStart + bestRunLength).join(':')\n  var result = left + '::' + right\n  return result\n}\n\nvar fromBinaryIPv6 = function (binaryString) {\n  var chunks = split(binaryString, 16)\n  var hexChunks = chunks.map(fromBinary).map(toHex)\n  var compressedChunks = compressIPv6(hexChunks.join(':'))\n  return compressedChunks\n}\n\nvar fromBinaryIPv64 = function (binaryString) {\n  var v6 = binaryString.substring(0, 96)\n  var v4 = binaryString.substring(96)\n\n  var left = fromBinaryIPv6(v6)\n  var right = fromBinaryIPv4(v4)\n\n  var compressedChunks = left\n  if (compressedChunks[compressedChunks.length - 1] !== ':') {\n    compressedChunks += ':'\n  }\n  return compressedChunks + right\n}\n\nvar anonymizeIPv4 = function (ipString, maskLength) {\n  var binary = binaryIPv4(ipString)\n  var segment = binary.substring(0, maskLength)\n  var anonymizedBinary = padRight(segment, 32)\n  return fromBinaryIPv4(anonymizedBinary)\n}\n\nvar anonymizeIPv6 = function (ipString, maskLength) {\n  var binary = binaryIPv6(ipString)\n  var segment = binary.substring(0, maskLength)\n  var anonymizedBinary = padRight(segment, 128)\n  return fromBinaryIPv6(anonymizedBinary)\n}\n\nvar anonymizeIPv64 = function (ipString, maskLength) {\n  var binary = binaryIPv64(ipString)\n  var segment = binary.substring(0, maskLength)\n  var anonymizedBinary = padRight(segment, 128)\n  return fromBinaryIPv64(anonymizedBinary)\n}\n\nvar anonymizeIP = function (ipString, v4MaskLength = 24, v6MaskLength = 24) {\n  if (typeof ipString !== 'string') {\n    return null\n  }\n  ipString = ipString.trim().toLowerCase()\n\n  var type = ipType(ipString)\n  if (type === 'IPv4') {\n    return anonymizeIPv4(ipString, v4MaskLength)\n  }\n  if (type === 'IPv6') {\n    return anonymizeIPv6(ipString, v6MaskLength)\n  }\n  if (type === 'IPv6_4') {\n    if (isIPv4MappedIPv6(ipString)) {\n      return anonymizeIPv64(ipString, v4MaskLength + 96)\n    } else {\n      return anonymizeIPv64(ipString, v6MaskLength)\n    }\n  }\n  return null\n}\n\nmodule.exports = anonymizeIP\n"]},"metadata":{},"sourceType":"script"}
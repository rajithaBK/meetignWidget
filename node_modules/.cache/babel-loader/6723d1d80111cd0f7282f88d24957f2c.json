{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5280\r\n */\n\nvar DistributionPoint = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for DistributionPoint class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   * @property {Object} [distributionPoint]\r\n   * @property {Object} [reasons]\r\n   * @property {Object} [cRLIssuer]\r\n   */\n  function DistributionPoint() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, DistributionPoint);\n\n    //region Internal properties of the object\n    if (\"distributionPoint\" in parameters)\n      /**\r\n       * @type {Array.<GeneralName>}\r\n       * @desc distributionPoint\r\n       */\n      this.distributionPoint = getParametersValue(parameters, \"distributionPoint\", DistributionPoint.defaultValues(\"distributionPoint\"));\n    if (\"reasons\" in parameters)\n      /**\r\n       * @type {BitString}\r\n       * @desc values\r\n       */\n      this.reasons = getParametersValue(parameters, \"reasons\", DistributionPoint.defaultValues(\"reasons\"));\n    if (\"cRLIssuer\" in parameters)\n      /**\r\n       * @type {Array.<GeneralName>}\r\n       * @desc cRLIssuer\r\n       */\n      this.cRLIssuer = getParametersValue(parameters, \"cRLIssuer\", DistributionPoint.defaultValues(\"cRLIssuer\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(DistributionPoint, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"distributionPoint\", \"distributionPointNames\", \"reasons\", \"cRLIssuer\", \"cRLIssuerNames\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({\n        names: {\n          distributionPoint: \"distributionPoint\",\n          distributionPointNames: \"distributionPointNames\",\n          reasons: \"reasons\",\n          cRLIssuer: \"cRLIssuer\",\n          cRLIssuerNames: \"cRLIssuerNames\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for DistributionPoint\"); //endregion\n      //region Get internal properties from parsed schema\n\n      if (\"distributionPoint\" in asn1.result) {\n        if (asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant\n          this.distributionPoint = Array.from(asn1.result.distributionPointNames, function (element) {\n            return new GeneralName({\n              schema: element\n            });\n          });\n\n        if (asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant\n          {\n            this.distributionPoint = new RelativeDistinguishedNames({\n              schema: new asn1js.Sequence({\n                value: asn1.result.distributionPoint.valueBlock.value\n              })\n            });\n          }\n      }\n\n      if (\"reasons\" in asn1.result) this.reasons = new asn1js.BitString({\n        valueHex: asn1.result.reasons.valueBlock.valueHex\n      });\n      if (\"cRLIssuer\" in asn1.result) this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, function (element) {\n        return new GeneralName({\n          schema: element\n        });\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence\n      var outputArray = [];\n\n      if (\"distributionPoint\" in this) {\n        var internalValue;\n\n        if (this.distributionPoint instanceof Array) {\n          internalValue = new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: Array.from(this.distributionPoint, function (element) {\n              return element.toSchema();\n            })\n          });\n        } else {\n          internalValue = new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 1 // [1]\n\n            },\n            value: [this.distributionPoint.toSchema()]\n          });\n        }\n\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [internalValue]\n        }));\n      }\n\n      if (\"reasons\" in this) {\n        outputArray.push(new asn1js.Primitive({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          valueHex: this.reasons.valueBlock.valueHex\n        }));\n      }\n\n      if (\"cRLIssuer\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          value: Array.from(this.cRLIssuer, function (element) {\n            return element.toSchema();\n          })\n        }));\n      } //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var object = {};\n\n      if (\"distributionPoint\" in this) {\n        if (this.distributionPoint instanceof Array) object.distributionPoint = Array.from(this.distributionPoint, function (element) {\n          return element.toJSON();\n        });else object.distributionPoint = this.distributionPoint.toJSON();\n      }\n\n      if (\"reasons\" in this) object.reasons = this.reasons.toJSON();\n      if (\"cRLIssuer\" in this) object.cRLIssuer = Array.from(this.cRLIssuer, function (element) {\n        return element.toJSON();\n      });\n      return object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"distributionPoint\":\n          return [];\n\n        case \"reasons\":\n          return new asn1js.BitString();\n\n        case \"cRLIssuer\":\n          return [];\n\n        default:\n          throw new Error(\"Invalid member name for DistributionPoint class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * DistributionPoint ::= SEQUENCE {\r\n     *    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n     *    reasons                 [1]     ReasonFlags OPTIONAL,\r\n     *    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n     *\r\n     * DistributionPointName ::= CHOICE {\r\n     *    fullName                [0]     GeneralNames,\r\n     *    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n     *\r\n     * ReasonFlags ::= BIT STRING {\r\n     *    unused                  (0),\r\n     *    keyCompromise           (1),\r\n     *    cACompromise            (2),\r\n     *    affiliationChanged      (3),\r\n     *    superseded              (4),\r\n     *    cessationOfOperation    (5),\r\n     *    certificateHold         (6),\r\n     *    privilegeWithdrawn      (7),\r\n     *    aACompromise            (8) }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [distributionPoint]\r\n       * @property {string} [distributionPointNames]\r\n       * @property {string} [reasons]\r\n       * @property {string} [cRLIssuer]\r\n       * @property {string} [cRLIssuerNames]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Choice({\n            value: [new asn1js.Constructed({\n              name: names.distributionPoint || \"\",\n              optional: true,\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 0 // [0]\n\n              },\n              value: [new asn1js.Repeated({\n                name: names.distributionPointNames || \"\",\n                value: GeneralName.schema()\n              })]\n            }), new asn1js.Constructed({\n              name: names.distributionPoint || \"\",\n              optional: true,\n              idBlock: {\n                tagClass: 3,\n                // CONTEXT-SPECIFIC\n                tagNumber: 1 // [1]\n\n              },\n              value: RelativeDistinguishedNames.schema().valueBlock.value\n            })]\n          })]\n        }), new asn1js.Primitive({\n          name: names.reasons || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          }\n        }), // IMPLICIT bitstring value\n        new asn1js.Constructed({\n          name: names.cRLIssuer || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 2 // [2]\n\n          },\n          value: [new asn1js.Repeated({\n            name: names.cRLIssuerNames || \"\",\n            value: GeneralName.schema()\n          })]\n        }) // IMPLICIT bitstring value\n        ]\n      });\n    }\n  }]);\n\n  return DistributionPoint;\n}(); //**************************************************************************************\n\n\nexport { DistributionPoint as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/DistributionPoint.js"],"names":["asn1js","getParametersValue","clearProps","GeneralName","RelativeDistinguishedNames","DistributionPoint","parameters","distributionPoint","defaultValues","reasons","cRLIssuer","fromSchema","schema","asn1","compareSchema","names","distributionPointNames","cRLIssuerNames","verified","Error","result","idBlock","tagNumber","Array","from","element","Sequence","value","valueBlock","BitString","valueHex","outputArray","internalValue","Constructed","tagClass","toSchema","push","Primitive","object","toJSON","memberName","name","blockName","optional","Choice","Repeated"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class DistributionPoint\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DistributionPoint class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Object} [distributionPoint]\r\n\t * @property {Object} [reasons]\r\n\t * @property {Object} [cRLIssuer]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"distributionPoint\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc distributionPoint\r\n\t\t\t */\r\n\t\t\tthis.distributionPoint = getParametersValue(parameters, \"distributionPoint\", DistributionPoint.defaultValues(\"distributionPoint\"));\r\n\r\n\t\tif(\"reasons\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc values\r\n\t\t\t */\r\n\t\t\tthis.reasons = getParametersValue(parameters, \"reasons\", DistributionPoint.defaultValues(\"reasons\"));\r\n\r\n\t\tif(\"cRLIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc cRLIssuer\r\n\t\t\t */\r\n\t\t\tthis.cRLIssuer = getParametersValue(parameters, \"cRLIssuer\", DistributionPoint.defaultValues(\"cRLIssuer\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"distributionPoint\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"reasons\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"cRLIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DistributionPoint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * DistributionPoint ::= SEQUENCE {\r\n\t *    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n\t *    reasons                 [1]     ReasonFlags OPTIONAL,\r\n\t *    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n\t *\r\n\t * DistributionPointName ::= CHOICE {\r\n\t *    fullName                [0]     GeneralNames,\r\n\t *    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n\t *\r\n\t * ReasonFlags ::= BIT STRING {\r\n\t *    unused                  (0),\r\n\t *    keyCompromise           (1),\r\n\t *    cACompromise            (2),\r\n\t *    affiliationChanged      (3),\r\n\t *    superseded              (4),\r\n\t *    cessationOfOperation    (5),\r\n\t *    certificateHold         (6),\r\n\t *    privilegeWithdrawn      (7),\r\n\t *    aACompromise            (8) }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [distributionPoint]\r\n\t\t * @property {string} [distributionPointNames]\r\n\t\t * @property {string} [reasons]\r\n\t\t * @property {string} [cRLIssuer]\r\n\t\t * @property {string} [cRLIssuerNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\t\t\tname: (names.distributionPointNames || \"\"),\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: RelativeDistinguishedNames.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.reasons || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t}), // IMPLICIT bitstring value\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.cRLIssuer || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.cRLIssuerNames || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT bitstring value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"distributionPoint\",\r\n\t\t\t\"distributionPointNames\",\r\n\t\t\t\"reasons\",\r\n\t\t\t\"cRLIssuer\",\r\n\t\t\t\"cRLIssuerNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDistributionPoint.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdistributionPoint: \"distributionPoint\",\r\n\t\t\t\t\tdistributionPointNames: \"distributionPointNames\",\r\n\t\t\t\t\treasons: \"reasons\",\r\n\t\t\t\t\tcRLIssuer: \"cRLIssuer\",\r\n\t\t\t\t\tcRLIssuerNames: \"cRLIssuerNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DistributionPoint\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"distributionPoint\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant\r\n\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\r\n\r\n\t\t\tif(asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant\r\n\t\t\t{\r\n\t\t\t\tthis.distributionPoint = new RelativeDistinguishedNames({\r\n\t\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(\"reasons\" in asn1.result)\r\n\t\t\tthis.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\r\n\r\n\t\tif(\"cRLIssuer\" in asn1.result)\r\n\t\t\tthis.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"distributionPoint\" in this)\r\n\t\t{\r\n\t\t\tlet internalValue;\r\n\t\t\t\r\n\t\t\tif(this.distributionPoint instanceof Array)\r\n\t\t\t{\r\n\t\t\t\tinternalValue = new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinternalValue = new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.distributionPoint.toSchema()]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [internalValue]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"reasons\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.reasons.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"cRLIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.cRLIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"distributionPoint\" in this)\r\n\t\t{\r\n\t\t\tif(this.distributionPoint instanceof Array)\r\n\t\t\t\tobject.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());\r\n\t\t\telse\r\n\t\t\t\tobject.distributionPoint = this.distributionPoint.toJSON();\r\n\t\t}\r\n\r\n\t\tif(\"reasons\" in this)\r\n\t\t\tobject.reasons = this.reasons.toJSON();\r\n\r\n\t\tif(\"cRLIssuer\" in this)\r\n\t\t\tobject.cRLIssuer = Array.from(this.cRLIssuer, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
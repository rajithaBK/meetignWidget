{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _forEach2 = _interopRequireDefault(require(\"lodash/forEach\"));\n\nvar _constants = require(\"../constants\");\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar StatsUtil = {};\n\nStatsUtil.generateSingularOptions = function (senderReceiver, config, meeting, name) {\n  var options = {};\n  options[name] = {};\n  options[name][senderReceiver.correlate] = senderReceiver;\n  StatsUtil.generateOptions(options, config, meeting);\n};\n\nStatsUtil.generateOptions = function (options, config, meeting) {\n  if (!options || !config || !meeting) {\n    throw new _parameter.default('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');\n  }\n\n  StatsUtil.configOptions(meeting, config, options, _constants.STATS.SENDERS);\n  StatsUtil.configOptions(meeting, config, options, _constants.STATS.RECEIVERS);\n};\n\nStatsUtil.configOptions = function (meeting, config, options, name) {\n  if (options[name]) {\n    (0, _forEach2.default)(options[name], function (type) {\n      if (!type.correlate) {\n        throw new _parameter.default(\"stats/util->validateInitialization#each \".concat(type, \" must be provided with a correlate as audio OR video OR share.\"));\n      }\n\n      if (!config[name][type.correlate]) {\n        return;\n      }\n\n      var typeConfig = config[name][type.correlate];\n      var media = meeting[typeConfig.parent][typeConfig.peerConnection];\n      var filter = media[typeConfig.transceiver][typeConfig.child];\n      (0, _assign.default)(type, {\n        media: media,\n        filter: filter,\n        name: typeConfig.name\n      });\n    });\n  }\n};\n\nvar _default = StatsUtil;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAEA;;AAGA;;AAEA,IAAMA,SAAS,GAAG,EAAlB;;AAEAA,SAAS,CAACC,uBAAVD,GAAoC,UAACE,cAAD,EAAiBC,MAAjB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAA2C;AAC7E,MAAMC,OAAO,GAAG,EAAhB;AAEAA,SAAO,CAACD,IAAD,CAAPC,GAAgB,EAAhBA;AACAA,SAAO,CAACD,IAAD,CAAPC,CAAcJ,cAAc,CAACK,SAA7BD,IAA0CJ,cAA1CI;AACAN,WAAS,CAACQ,eAAVR,CAA0BM,OAA1BN,EAAmCG,MAAnCH,EAA2CI,OAA3CJ;AALF;;AAQAA,SAAS,CAACQ,eAAVR,GAA4B,UAACM,OAAD,EAAUH,MAAV,EAAkBC,OAAlB,EAA8B;AACxD,MAAI,CAACE,OAAD,IAAY,CAACH,MAAb,IAAuB,CAACC,OAA5B,EAAqC;AACnC,UAAM,IAAIK,kBAAJ,CAAmB,sGAAnB,CAAN;AACD;;AACDT,WAAS,CAACU,aAAVV,CAAwBI,OAAxBJ,EAAiCG,MAAjCH,EAAyCM,OAAzCN,EAAkDW,iBAAMC,OAAxDZ;AACAA,WAAS,CAACU,aAAVV,CAAwBI,OAAxBJ,EAAiCG,MAAjCH,EAAyCM,OAAzCN,EAAkDW,iBAAME,SAAxDb;AALF;;AAQAA,SAAS,CAACU,aAAVV,GAA0B,UAACI,OAAD,EAAUD,MAAV,EAAkBG,OAAlB,EAA2BD,IAA3B,EAAoC;AAC5D,MAAIC,OAAO,CAACD,IAAD,CAAX,EAAmB;AACjB,2BAAQC,OAAO,CAACD,IAAD,CAAf,EAAuB,UAACS,IAAD,EAAU;AAC/B,UAAI,CAACA,IAAI,CAACP,SAAV,EAAqB;AACnB,cAAM,IAAIE,kBAAJ,mDAA8DK,IAA9D,oEAAN;AACD;;AACD,UAAI,CAACX,MAAM,CAACE,IAAD,CAANF,CAAaW,IAAI,CAACP,SAAlBJ,CAAL,EAAmC;AACjC;AACD;;AACD,UAAMY,UAAU,GAAGZ,MAAM,CAACE,IAAD,CAANF,CAAaW,IAAI,CAACP,SAAlBJ,CAAnB;AACA,UAAMa,KAAK,GAAGZ,OAAO,CAACW,UAAU,CAACE,MAAZ,CAAPb,CAA2BW,UAAU,CAACG,cAAtCd,CAAd;AACA,UAAMe,MAAM,GAAGH,KAAK,CAACD,UAAU,CAACK,WAAZ,CAALJ,CAA8BD,UAAU,CAACM,KAAzCL,CAAf;AAEA,2BAAcF,IAAd,EAAoB;AAACE,aAAK,EAALA,KAAD;AAAQG,cAAM,EAANA,MAAR;AAAgBd,YAAI,EAAEU,UAAU,CAACV;AAAjC,OAApB;AAXF;AAaD;AAfH;;eAkBeL","names":["StatsUtil","generateSingularOptions","senderReceiver","config","meeting","name","options","correlate","generateOptions","ParameterError","configOptions","STATS","SENDERS","RECEIVERS","type","typeConfig","media","parent","peerConnection","filter","transceiver","child"],"sources":["util.js"],"sourcesContent":["import {forEach} from 'lodash';\n\nimport {\n  STATS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst StatsUtil = {};\n\nStatsUtil.generateSingularOptions = (senderReceiver, config, meeting, name) => {\n  const options = {};\n\n  options[name] = {};\n  options[name][senderReceiver.correlate] = senderReceiver;\n  StatsUtil.generateOptions(options, config, meeting);\n};\n\nStatsUtil.generateOptions = (options, config, meeting) => {\n  if (!options || !config || !meeting) {\n    throw new ParameterError('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');\n  }\n  StatsUtil.configOptions(meeting, config, options, STATS.SENDERS);\n  StatsUtil.configOptions(meeting, config, options, STATS.RECEIVERS);\n};\n\nStatsUtil.configOptions = (meeting, config, options, name) => {\n  if (options[name]) {\n    forEach(options[name], (type) => {\n      if (!type.correlate) {\n        throw new ParameterError(`stats/util->validateInitialization#each ${type} must be provided with a correlate as audio OR video OR share.`);\n      }\n      if (!config[name][type.correlate]) {\n        return;\n      }\n      const typeConfig = config[name][type.correlate];\n      const media = meeting[typeConfig.parent][typeConfig.peerConnection];\n      const filter = media[typeConfig.transceiver][typeConfig.child];\n\n      Object.assign(type, {media, filter, name: typeConfig.name});\n    });\n  }\n};\n\nexport default StatsUtil;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\n/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\nfunction getUTCDate(date) {\n  return new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n}\n\nfunction getParametersValue(parameters, name, defaultValue) {\n  var _parameters$name;\n\n  if (parameters instanceof Object === false) {\n    return defaultValue;\n  }\n\n  return (_parameters$name = parameters[name]) !== null && _parameters$name !== void 0 ? _parameters$name : defaultValue;\n}\n\nfunction bufferToHexCodes(inputBuffer) {\n  var inputOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var inputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : inputBuffer.byteLength - inputOffset;\n  var insertSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var result = \"\";\n\n  var _iterator = _createForOfIteratorHelper(new Uint8Array(inputBuffer, inputOffset, inputLength)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      var str = item.toString(16).toUpperCase();\n\n      if (str.length === 1) {\n        result += \"0\";\n      }\n\n      result += str;\n\n      if (insertSpace) {\n        result += \" \";\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result.trim();\n}\n\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n  if (!(inputBuffer instanceof ArrayBuffer)) {\n    baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\n    return false;\n  }\n\n  if (!inputBuffer.byteLength) {\n    baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n    return false;\n  }\n\n  if (inputOffset < 0) {\n    baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n    return false;\n  }\n\n  if (inputLength < 0) {\n    baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n    return false;\n  }\n\n  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {\n    baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n    return false;\n  }\n\n  return true;\n}\n\nfunction utilFromBase(inputBuffer, inputBase) {\n  var result = 0;\n\n  if (inputBuffer.length === 1) {\n    return inputBuffer[0];\n  }\n\n  for (var i = inputBuffer.length - 1; i >= 0; i--) {\n    result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);\n  }\n\n  return result;\n}\n\nfunction utilToBase(value, base) {\n  var reserved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  var internalReserved = reserved;\n  var internalValue = value;\n  var result = 0;\n  var biggest = Math.pow(2, base);\n\n  for (var i = 1; i < 8; i++) {\n    if (value < biggest) {\n      var retBuf = void 0;\n\n      if (internalReserved < 0) {\n        retBuf = new ArrayBuffer(i);\n        result = i;\n      } else {\n        if (internalReserved < i) {\n          return new ArrayBuffer(0);\n        }\n\n        retBuf = new ArrayBuffer(internalReserved);\n        result = internalReserved;\n      }\n\n      var retView = new Uint8Array(retBuf);\n\n      for (var j = i - 1; j >= 0; j--) {\n        var basis = Math.pow(2, j * base);\n        retView[result - j - 1] = Math.floor(internalValue / basis);\n        internalValue -= retView[result - j - 1] * basis;\n      }\n\n      return retBuf;\n    }\n\n    biggest *= Math.pow(2, base);\n  }\n\n  return new ArrayBuffer(0);\n}\n\nfunction utilConcatBuf() {\n  var outputLength = 0;\n  var prevLength = 0;\n\n  for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {\n    buffers[_key] = arguments[_key];\n  }\n\n  for (var _i = 0, _buffers = buffers; _i < _buffers.length; _i++) {\n    var buffer = _buffers[_i];\n    outputLength += buffer.byteLength;\n  }\n\n  var retBuf = new ArrayBuffer(outputLength);\n  var retView = new Uint8Array(retBuf);\n\n  for (var _i2 = 0, _buffers2 = buffers; _i2 < _buffers2.length; _i2++) {\n    var _buffer = _buffers2[_i2];\n    retView.set(new Uint8Array(_buffer), prevLength);\n    prevLength += _buffer.byteLength;\n  }\n\n  return retBuf;\n}\n\nfunction utilConcatView() {\n  var outputLength = 0;\n  var prevLength = 0;\n\n  for (var _len2 = arguments.length, views = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    views[_key2] = arguments[_key2];\n  }\n\n  for (var _i3 = 0, _views = views; _i3 < _views.length; _i3++) {\n    var view = _views[_i3];\n    outputLength += view.length;\n  }\n\n  var retBuf = new ArrayBuffer(outputLength);\n  var retView = new Uint8Array(retBuf);\n\n  for (var _i4 = 0, _views2 = views; _i4 < _views2.length; _i4++) {\n    var _view = _views2[_i4];\n    retView.set(_view, prevLength);\n    prevLength += _view.length;\n  }\n\n  return retView;\n}\n\nfunction utilDecodeTC() {\n  var buf = new Uint8Array(this.valueHex);\n\n  if (this.valueHex.byteLength >= 2) {\n    var condition1 = buf[0] === 0xFF && buf[1] & 0x80;\n    var condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00;\n\n    if (condition1 || condition2) {\n      this.warnings.push(\"Needlessly long format\");\n    }\n  }\n\n  var bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n  var bigIntView = new Uint8Array(bigIntBuffer);\n\n  for (var i = 0; i < this.valueHex.byteLength; i++) {\n    bigIntView[i] = 0;\n  }\n\n  bigIntView[0] = buf[0] & 0x80;\n  var bigInt = utilFromBase(bigIntView, 8);\n  var smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n  var smallIntView = new Uint8Array(smallIntBuffer);\n\n  for (var j = 0; j < this.valueHex.byteLength; j++) {\n    smallIntView[j] = buf[j];\n  }\n\n  smallIntView[0] &= 0x7F;\n  var smallInt = utilFromBase(smallIntView, 8);\n  return smallInt - bigInt;\n}\n\nfunction utilEncodeTC(value) {\n  var modValue = value < 0 ? value * -1 : value;\n  var bigInt = 128;\n\n  for (var i = 1; i < 8; i++) {\n    if (modValue <= bigInt) {\n      if (value < 0) {\n        var smallInt = bigInt - modValue;\n\n        var _retBuf = utilToBase(smallInt, 8, i);\n\n        var _retView = new Uint8Array(_retBuf);\n\n        _retView[0] |= 0x80;\n        return _retBuf;\n      }\n\n      var retBuf = utilToBase(modValue, 8, i);\n      var retView = new Uint8Array(retBuf);\n\n      if (retView[0] & 0x80) {\n        var tempBuf = retBuf.slice(0);\n        var tempView = new Uint8Array(tempBuf);\n        retBuf = new ArrayBuffer(retBuf.byteLength + 1);\n        retView = new Uint8Array(retBuf);\n\n        for (var k = 0; k < tempBuf.byteLength; k++) {\n          retView[k + 1] = tempView[k];\n        }\n\n        retView[0] = 0x00;\n      }\n\n      return retBuf;\n    }\n\n    bigInt *= Math.pow(2, 8);\n  }\n\n  return new ArrayBuffer(0);\n}\n\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\n  if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\n    return false;\n  }\n\n  var view1 = new Uint8Array(inputBuffer1);\n  var view2 = new Uint8Array(inputBuffer2);\n\n  for (var i = 0; i < view1.length; i++) {\n    if (view1[i] !== view2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction padNumber(inputNumber, fullLength) {\n  var str = inputNumber.toString(10);\n\n  if (fullLength < str.length) {\n    return \"\";\n  }\n\n  var dif = fullLength - str.length;\n  var padding = new Array(dif);\n\n  for (var i = 0; i < dif; i++) {\n    padding[i] = \"0\";\n  }\n\n  var paddingString = padding.join(\"\");\n  return paddingString.concat(str);\n}\n\nvar base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\n\nfunction toBase64(input) {\n  var useUrlTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var skipPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var skipLeadingZeros = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var i = 0;\n  var flag1 = 0;\n  var flag2 = 0;\n  var output = \"\";\n  var template = useUrlTemplate ? base64UrlTemplate : base64Template;\n\n  if (skipLeadingZeros) {\n    var nonZeroPosition = 0;\n\n    for (var _i5 = 0; _i5 < input.length; _i5++) {\n      if (input.charCodeAt(_i5) !== 0) {\n        nonZeroPosition = _i5;\n        break;\n      }\n    }\n\n    input = input.slice(nonZeroPosition);\n  }\n\n  while (i < input.length) {\n    var chr1 = input.charCodeAt(i++);\n\n    if (i >= input.length) {\n      flag1 = 1;\n    }\n\n    var chr2 = input.charCodeAt(i++);\n\n    if (i >= input.length) {\n      flag2 = 1;\n    }\n\n    var chr3 = input.charCodeAt(i++);\n    var enc1 = chr1 >> 2;\n    var enc2 = (chr1 & 0x03) << 4 | chr2 >> 4;\n    var enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6;\n    var enc4 = chr3 & 0x3F;\n\n    if (flag1 === 1) {\n      enc3 = enc4 = 64;\n    } else {\n      if (flag2 === 1) {\n        enc4 = 64;\n      }\n    }\n\n    if (skipPadding) {\n      if (enc3 === 64) {\n        output += \"\".concat(template.charAt(enc1)).concat(template.charAt(enc2));\n      } else {\n        if (enc4 === 64) {\n          output += \"\".concat(template.charAt(enc1)).concat(template.charAt(enc2)).concat(template.charAt(enc3));\n        } else {\n          output += \"\".concat(template.charAt(enc1)).concat(template.charAt(enc2)).concat(template.charAt(enc3)).concat(template.charAt(enc4));\n        }\n      }\n    } else {\n      output += \"\".concat(template.charAt(enc1)).concat(template.charAt(enc2)).concat(template.charAt(enc3)).concat(template.charAt(enc4));\n    }\n  }\n\n  return output;\n}\n\nfunction fromBase64(input) {\n  var useUrlTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var cutTailZeros = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var template = useUrlTemplate ? base64UrlTemplate : base64Template;\n\n  function indexOf(toSearch) {\n    for (var _i6 = 0; _i6 < 64; _i6++) {\n      if (template.charAt(_i6) === toSearch) return _i6;\n    }\n\n    return 64;\n  }\n\n  function test(incoming) {\n    return incoming === 64 ? 0x00 : incoming;\n  }\n\n  var i = 0;\n  var output = \"\";\n\n  while (i < input.length) {\n    var enc1 = indexOf(input.charAt(i++));\n    var enc2 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n    var enc3 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n    var enc4 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n    var chr1 = test(enc1) << 2 | test(enc2) >> 4;\n    var chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2;\n    var chr3 = (test(enc3) & 0x03) << 6 | test(enc4);\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  if (cutTailZeros) {\n    var outputLength = output.length;\n    var nonZeroStart = -1;\n\n    for (var _i7 = outputLength - 1; _i7 >= 0; _i7--) {\n      if (output.charCodeAt(_i7) !== 0) {\n        nonZeroStart = _i7;\n        break;\n      }\n    }\n\n    if (nonZeroStart !== -1) {\n      output = output.slice(0, nonZeroStart + 1);\n    } else {\n      output = \"\";\n    }\n  }\n\n  return output;\n}\n\nfunction arrayBufferToString(buffer) {\n  var resultString = \"\";\n  var view = new Uint8Array(buffer);\n\n  var _iterator2 = _createForOfIteratorHelper(view),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var element = _step2.value;\n      resultString += String.fromCharCode(element);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return resultString;\n}\n\nfunction stringToArrayBuffer(str) {\n  var stringLength = str.length;\n  var resultBuffer = new ArrayBuffer(stringLength);\n  var resultView = new Uint8Array(resultBuffer);\n\n  for (var i = 0; i < stringLength; i++) {\n    resultView[i] = str.charCodeAt(i);\n  }\n\n  return resultBuffer;\n}\n\nvar log2 = Math.log(2);\n\nfunction nearestPowerOf2(length) {\n  var base = Math.log(length) / log2;\n  var floor = Math.floor(base);\n  var round = Math.round(base);\n  return floor === round ? floor : round;\n}\n\nfunction clearProps(object, propsArray) {\n  var _iterator3 = _createForOfIteratorHelper(propsArray),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var prop = _step3.value;\n      delete object[prop];\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pvutils/build/utils.es.js"],"names":["getUTCDate","date","Date","getTime","getTimezoneOffset","getParametersValue","parameters","name","defaultValue","Object","bufferToHexCodes","inputBuffer","inputOffset","inputLength","byteLength","insertSpace","result","Uint8Array","item","str","toString","toUpperCase","length","trim","checkBufferParams","baseBlock","ArrayBuffer","error","utilFromBase","inputBase","i","Math","pow","utilToBase","value","base","reserved","internalReserved","internalValue","biggest","retBuf","retView","j","basis","floor","utilConcatBuf","outputLength","prevLength","buffers","buffer","set","utilConcatView","views","view","utilDecodeTC","buf","valueHex","condition1","condition2","warnings","push","bigIntBuffer","bigIntView","bigInt","smallIntBuffer","smallIntView","smallInt","utilEncodeTC","modValue","tempBuf","slice","tempView","k","isEqualBuffer","inputBuffer1","inputBuffer2","view1","view2","padNumber","inputNumber","fullLength","dif","padding","Array","paddingString","join","concat","base64Template","base64UrlTemplate","toBase64","input","useUrlTemplate","skipPadding","skipLeadingZeros","flag1","flag2","output","template","nonZeroPosition","charCodeAt","chr1","chr2","chr3","enc1","enc2","enc3","enc4","charAt","fromBase64","cutTailZeros","indexOf","toSearch","test","incoming","String","fromCharCode","nonZeroStart","arrayBufferToString","resultString","element","stringToArrayBuffer","stringLength","resultBuffer","resultView","log2","log","nearestPowerOf2","round","clearProps","object","propsArray","prop"],"mappings":"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","sourcesContent":["/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return parameters[name] ?? defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n"]},"metadata":{},"sourceType":"module"}
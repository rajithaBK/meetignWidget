{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\nimport Certificate from \"./Certificate.js\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar KeyAgreeRecipientInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for KeyAgreeRecipientInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function KeyAgreeRecipientInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KeyAgreeRecipientInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {number}\r\n     * @desc version\r\n     */\n    this.version = getParametersValue(parameters, \"version\", KeyAgreeRecipientInfo.defaultValues(\"version\"));\n    /**\r\n     * @type {OriginatorIdentifierOrKey}\r\n     * @desc originator\r\n     */\n\n    this.originator = getParametersValue(parameters, \"originator\", KeyAgreeRecipientInfo.defaultValues(\"originator\"));\n    if (\"ukm\" in parameters)\n      /**\r\n       * @type {OctetString}\r\n       * @desc ukm\r\n       */\n      this.ukm = getParametersValue(parameters, \"ukm\", KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\n    /**\r\n     * @type {AlgorithmIdentifier}\r\n     * @desc keyEncryptionAlgorithm\r\n     */\n\n    this.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyAgreeRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\n    /**\r\n     * @type {RecipientEncryptedKeys}\r\n     * @desc recipientEncryptedKeys\r\n     */\n\n    this.recipientEncryptedKeys = getParametersValue(parameters, \"recipientEncryptedKeys\", KeyAgreeRecipientInfo.defaultValues(\"recipientEncryptedKeys\"));\n    /**\r\n     * @type {Certificate}\r\n     * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n     */\n\n    this.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyAgreeRecipientInfo.defaultValues(\"recipientCertificate\")); //endregion\n\n    /**\r\n     * @type {CryptoKey}\r\n     * @desc recipientPublicKey\r\n     */\n\n    this.recipientPublicKey = getParametersValue(parameters, \"recipientPublicKey\", KeyAgreeRecipientInfo.defaultValues(\"recipientPublicKey\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(KeyAgreeRecipientInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"version\", \"originator\", \"ukm\", \"keyEncryptionAlgorithm\", \"recipientEncryptedKeys\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\n        names: {\n          version: \"version\",\n          originator: {\n            names: {\n              blockName: \"originator\"\n            }\n          },\n          ukm: \"ukm\",\n          keyEncryptionAlgorithm: {\n            names: {\n              blockName: \"keyEncryptionAlgorithm\"\n            }\n          },\n          recipientEncryptedKeys: {\n            names: {\n              blockName: \"recipientEncryptedKeys\"\n            }\n          }\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.version = asn1.result.version.valueBlock.valueDec;\n      this.originator = new OriginatorIdentifierOrKey({\n        schema: asn1.result.originator\n      });\n      if (\"ukm\" in asn1.result) this.ukm = asn1.result.ukm;\n      this.keyEncryptionAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.keyEncryptionAlgorithm\n      });\n      this.recipientEncryptedKeys = new RecipientEncryptedKeys({\n        schema: asn1.result.recipientEncryptedKeys\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for final sequence\n      var outputArray = [];\n      outputArray.push(new asn1js.Integer({\n        value: this.version\n      }));\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [this.originator.toSchema()]\n      }));\n\n      if (\"ukm\" in this) {\n        outputArray.push(new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [this.ukm]\n        }));\n      }\n\n      outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n      outputArray.push(this.recipientEncryptedKeys.toSchema()); //endregion\n      //region Construct and return new ASN.1 schema for this object\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        version: this.version,\n        originator: this.originator.toJSON()\n      };\n      if (\"ukm\" in this) _object.ukm = this.ukm.toJSON();\n      _object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();\n      _object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"version\":\n          return 0;\n\n        case \"originator\":\n          return new OriginatorIdentifierOrKey();\n\n        case \"ukm\":\n          return new asn1js.OctetString();\n\n        case \"keyEncryptionAlgorithm\":\n          return new AlgorithmIdentifier();\n\n        case \"recipientEncryptedKeys\":\n          return new RecipientEncryptedKeys();\n\n        case \"recipientCertificate\":\n          return new Certificate();\n\n        case \"recipientPublicKey\":\n          return null;\n\n        default:\n          throw new Error(\"Invalid member name for KeyAgreeRecipientInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"version\":\n          return memberValue === 0;\n\n        case \"originator\":\n          return memberValue.variant === -1 && \"value\" in memberValue === false;\n\n        case \"ukm\":\n          return memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\n\n        case \"keyEncryptionAlgorithm\":\n          return memberValue.algorithmId === \"\" && \"algorithmParams\" in memberValue === false;\n\n        case \"recipientEncryptedKeys\":\n          return memberValue.encryptedKeys.length === 0;\n\n        case \"recipientCertificate\":\n          return false;\n        // For now leave it as is\n\n        case \"recipientPublicKey\":\n          return false;\n\n        default:\n          throw new Error(\"Invalid member name for KeyAgreeRecipientInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * KeyAgreeRecipientInfo ::= SEQUENCE {\r\n     *    version CMSVersion,  -- always set to 3\r\n     *    originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n     *    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n     *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n     *    recipientEncryptedKeys RecipientEncryptedKeys }\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [version]\r\n       * @property {string} [originator]\r\n       * @property {string} [ukm]\r\n       * @property {string} [keyEncryptionAlgorithm]\r\n       * @property {string} [recipientEncryptedKeys]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.Integer({\n          name: names.version || \"\"\n        }), new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [OriginatorIdentifierOrKey.schema(names.originator || {})]\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 1 // [1]\n\n          },\n          value: [new asn1js.OctetString({\n            name: names.ukm || \"\"\n          })]\n        }), AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}), RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})]\n      });\n    }\n  }]);\n\n  return KeyAgreeRecipientInfo;\n}(); //**************************************************************************************\n\n\nexport { KeyAgreeRecipientInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/KeyAgreeRecipientInfo.js"],"names":["asn1js","getParametersValue","clearProps","OriginatorIdentifierOrKey","AlgorithmIdentifier","RecipientEncryptedKeys","Certificate","KeyAgreeRecipientInfo","parameters","version","defaultValues","originator","ukm","keyEncryptionAlgorithm","recipientEncryptedKeys","recipientCertificate","recipientPublicKey","fromSchema","schema","asn1","compareSchema","names","blockName","verified","Error","result","valueBlock","valueDec","outputArray","push","Integer","value","Constructed","idBlock","tagClass","tagNumber","toSchema","optional","Sequence","_object","toJSON","memberName","OctetString","memberValue","variant","isEqual","algorithmId","encryptedKeys","length","name"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyAgreeRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyAgreeRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyAgreeRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OriginatorIdentifierOrKey}\r\n\t\t * @desc originator\r\n\t\t */\r\n\t\tthis.originator = getParametersValue(parameters, \"originator\", KeyAgreeRecipientInfo.defaultValues(\"originator\"));\r\n\r\n\t\tif(\"ukm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc ukm\r\n\t\t\t */\r\n\t\t\tthis.ukm = getParametersValue(parameters, \"ukm\", KeyAgreeRecipientInfo.defaultValues(\"ukm\"));\r\n\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyAgreeRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {RecipientEncryptedKeys}\r\n\t\t * @desc recipientEncryptedKeys\r\n\t\t */\r\n\t\tthis.recipientEncryptedKeys = getParametersValue(parameters, \"recipientEncryptedKeys\", KeyAgreeRecipientInfo.defaultValues(\"recipientEncryptedKeys\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyAgreeRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\t\t/**\r\n\t\t * @type {CryptoKey}\r\n\t\t * @desc recipientPublicKey\r\n\t\t */\r\n\t\tthis.recipientPublicKey = getParametersValue(parameters, \"recipientPublicKey\", KeyAgreeRecipientInfo.defaultValues(\"recipientPublicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn new OriginatorIdentifierOrKey();\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn new RecipientEncryptedKeys();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tcase \"recipientPublicKey\":\r\n\t\t\t\treturn null;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"originator\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"ukm\":\r\n\t\t\t\treturn (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(\"ukm\")));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"recipientEncryptedKeys\":\r\n\t\t\t\treturn (memberValue.encryptedKeys.length === 0);\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now leave it as is\r\n\t\t\tcase \"recipientPublicKey\":\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyAgreeRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyAgreeRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 3\r\n\t *    originator [0] EXPLICIT OriginatorIdentifierOrKey,\r\n\t *    ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    recipientEncryptedKeys RecipientEncryptedKeys }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originator]\r\n\t\t * @property {string} [ukm]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [recipientEncryptedKeys]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"\",\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: names.version || \"\" }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tOriginatorIdentifierOrKey.schema(names.originator || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.OctetString({ name: names.ukm || \"\" })]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tRecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originator\",\r\n\t\t\t\"ukm\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"recipientEncryptedKeys\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyAgreeRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginator: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"originator\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tukm: \"ukm\",\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\trecipientEncryptedKeys: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"recipientEncryptedKeys\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyAgreeRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\r\n\r\n\t\tif(\"ukm\" in asn1.result)\r\n\t\t\tthis.ukm = asn1.result.ukm;\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for final sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t},\r\n\t\t\tvalue: [this.originator.toSchema()]\r\n\t\t}));\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.ukm]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.recipientEncryptedKeys.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\toriginator: this.originator.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"ukm\" in this)\r\n\t\t\t_object.ukm = this.ukm.toJSON();\r\n\r\n\t\t_object.keyEncryptionAlgorithm = this.keyEncryptionAlgorithm.toJSON();\r\n\t\t_object.recipientEncryptedKeys = this.recipientEncryptedKeys.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
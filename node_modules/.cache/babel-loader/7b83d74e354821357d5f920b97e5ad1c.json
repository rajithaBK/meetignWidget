{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\n\n\nvar Device = _webexCore.WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Gets the audio state of the device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraAudioState>} {volume, microphones, url}\n   */\n  getAudioState: function getAudioState(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: \"\".concat(space.url, \"/audio\")\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Updates audio state for lyra device, should be called every 10 minutes or\n   * when mic or volume state is changed\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {Types~LyraAudioState} audioState\n   * @param {object} audioState.volume optional\n   * @param {boolean} audioState.volume.level\n   * @param {object} audioState.microphones optional\n   * @param {boolean} audioState.microphones.muted\n   * @param {string} audioState.deviceUrl\n   * @returns {Promise}\n   */\n  putAudioState: function putAudioState(space) {\n    var audioState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!audioState.deviceUrl) {\n      return _promise.default.reject(new Error('audioState.deviceUrl is required'));\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: \"\".concat(space.url, \"/audio\"),\n      body: audioState\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Mutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  mute: function mute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: \"\".concat(space.url, \"/audio/microphones/actions/mute/invoke\")\n    });\n  },\n\n  /**\n   * Unmutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  unmute: function unmute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: \"\".concat(space.url, \"/audio/microphones/actions/un-mute/invoke\")\n    });\n  },\n\n  /**\n   * Increases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  increaseVolume: function increaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: \"\".concat(space.url, \"/audio/volume/actions/increase/invoke\")\n    });\n  },\n\n  /**\n   * Decreases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  decreaseVolume: function decreaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: \"\".concat(space.url, \"/audio/volume/actions/decrease/invoke\")\n    });\n  },\n\n  /**\n   * Sets lyra device's volume but should use increase and decrease api instead\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {integer} level to be set\n   * @returns {Promise}\n   */\n  setVolume: function setVolume(space) {\n    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.webex.request({\n      method: 'POST',\n      uri: \"\".concat(space.url, \"/audio/volume/actions/set/invoke\"),\n      body: {\n        level: level\n      }\n    });\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = Device;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAIA;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;;AACA,IAAMA,MAAM,GAAGC,uBAAYC,MAAZD,CAAmB;AAChCE,WAAS,EAAE,MADqB;;AAGhC;AACF;AACA;AACA;AACA;AACA;AACEC,eATgC,yBASlBC,KATkB,EASX;AACnB,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,KADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX;AAFqB,KAAnB,EAIJC,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAb;AAJD,MAAP;AAV8B;;AAiBhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,eA9BgC,yBA8BlBT,KA9BkB,EA8BM;AAAA,QAAjBU,UAAiB,uEAAJ,EAAI;;AACpC,QAAI,CAACA,UAAU,CAACC,SAAhB,EAA2B;AACzB,aAAOC,iBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,kCAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKb,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,KADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX,WAFqB;AAGxBG,UAAI,EAAEE;AAHkB,KAAnB,EAKJJ,IALI,CAKC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAb;AALD,MAAP;AAnC8B;;AA2ChC;AACF;AACA;AACA;AACA;AACA;AACEO,MAjDgC,gBAiD3Bf,KAjD2B,EAiDpB;AACV,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,MADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX;AAFqB,KAAnB,CAAP;AAlD8B;;AAwDhC;AACF;AACA;AACA;AACA;AACA;AACEW,QA9DgC,kBA8DzBhB,KA9DyB,EA8DlB;AACZ,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,MADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX;AAFqB,KAAnB,CAAP;AA/D8B;;AAqEhC;AACF;AACA;AACA;AACA;AACA;AACEY,gBA3EgC,0BA2EjBjB,KA3EiB,EA2EV;AACpB,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,MADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX;AAFqB,KAAnB,CAAP;AA5E8B;;AAkFhC;AACF;AACA;AACA;AACA;AACA;AACEa,gBAxFgC,0BAwFjBlB,KAxFiB,EAwFV;AACpB,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,MADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX;AAFqB,KAAnB,CAAP;AAzF8B;;AA+FhC;AACF;AACA;AACA;AACA;AACA;AACA;AACEc,WAtGgC,qBAsGtBnB,KAtGsB,EAsGJ;AAAA,QAAXoB,KAAW,uEAAH,CAAG;AAC1B,WAAO,KAAKnB,KAAL,CAAWC,OAAX,CAAmB;AACxBC,YAAM,EAAE,MADgB;AAExBC,SAAG,YAAKJ,KAAK,CAACK,GAAX,qCAFqB;AAGxBG,UAAI,EAAE;AACJY,aAAK,EAALA;AADI;AAHkB,KAAnB,CAAP;AAvG8B;AAAAC;AAAA,CAAnBzB,CAAf;;eAkHeD","names":["Device","WebexPlugin","extend","namespace","getAudioState","space","webex","request","method","uri","url","then","res","body","putAudioState","audioState","deviceUrl","_promise","reject","Error","mute","unmute","increaseVolume","decreaseVolume","setVolume","level","version"],"sources":["device.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\nconst Device = WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Gets the audio state of the device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraAudioState>} {volume, microphones, url}\n   */\n  getAudioState(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: `${space.url}/audio`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates audio state for lyra device, should be called every 10 minutes or\n   * when mic or volume state is changed\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {Types~LyraAudioState} audioState\n   * @param {object} audioState.volume optional\n   * @param {boolean} audioState.volume.level\n   * @param {object} audioState.microphones optional\n   * @param {boolean} audioState.microphones.muted\n   * @param {string} audioState.deviceUrl\n   * @returns {Promise}\n   */\n  putAudioState(space, audioState = {}) {\n    if (!audioState.deviceUrl) {\n      return Promise.reject(new Error('audioState.deviceUrl is required'));\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: `${space.url}/audio`,\n      body: audioState\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Mutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  mute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/microphones/actions/mute/invoke`\n    });\n  },\n\n  /**\n   * Unmutes lyra device\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  unmute(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/microphones/actions/un-mute/invoke`\n    });\n  },\n\n  /**\n   * Increases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  increaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/increase/invoke`\n    });\n  },\n\n  /**\n   * Decreases lyra device's volume\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise}\n   */\n  decreaseVolume(space) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/decrease/invoke`\n    });\n  },\n\n  /**\n   * Sets lyra device's volume but should use increase and decrease api instead\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {integer} level to be set\n   * @returns {Promise}\n   */\n  setVolume(space, level = 0) {\n    return this.webex.request({\n      method: 'POST',\n      uri: `${space.url}/audio/volume/actions/set/invoke`,\n      body: {\n        level\n      }\n    });\n  }\n\n});\n\nexport default Device;\n"]},"metadata":{},"sourceType":"script"}
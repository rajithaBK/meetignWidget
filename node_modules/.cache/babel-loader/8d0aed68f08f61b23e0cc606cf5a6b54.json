{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs2/core-js/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _loggerProxy = _interopRequireDefault(require(\"../common/logs/logger-proxy\"));\n\nvar _constants = require(\"../constants\");\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nvar _peerConnectionManager = _interopRequireDefault(require(\"../peer-connection-manager\"));\n\nvar _reconnection = _interopRequireDefault(require(\"../common/errors/reconnection\"));\n\nvar _media = _interopRequireDefault(require(\"../common/errors/media\"));\n\nvar _browserDetection = _interopRequireDefault(require(\"../common/browser-detection\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar _BrowserDetection = (0, _browserDetection.default)(),\n    isBrowser = _BrowserDetection.isBrowser;\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property sendAudio\n * @property sendVideo\n * @property sendShare\n * @property isSharing\n * @property {Object} sharePreferences\n */\n\n/**\n *\n * @public\n * @export\n * Mimic browser APIs as \"the ultimate browser\".\n * Handles the quirks of each browser.\n * Extends and enhances adapter.js, i.e., the \"media\" file from the web client.\n */\n\n\nvar Media = {};\n/**\n * @param {boolean} enabled\n * @param {MediaStreamTrack} track\n * @returns {Boolean}\n * @public\n */\n\nMedia.setLocalTrack = function (enabled, track) {\n  if (track) {\n    track.enabled = enabled;\n    return true;\n  }\n\n  return false;\n};\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise}\n */\n\n\nMedia.reconnectMedia = function (peerConnection, _ref) {\n  var meetingId = _ref.meetingId,\n      remoteQualityLevel = _ref.remoteQualityLevel,\n      enableRtx = _ref.enableRtx,\n      enableExtmap = _ref.enableExtmap;\n\n  if (peerConnection.connectionState === _constants.PEER_CONNECTION_STATE.CLOSED || peerConnection.connectionState === _constants.PEER_CONNECTION_STATE.FAILED) {\n    return _promise.default.reject(new _reconnection.default('Reinitiate peerconnection'));\n  }\n\n  return _peerConnectionManager.default.createOffer(peerConnection, {\n    meetingId: meetingId,\n    remoteQualityLevel: remoteQualityLevel,\n    enableRtx: enableRtx,\n    enableExtmap: enableExtmap\n  });\n};\n/**\n * format the media array for send\n * @param {String} mediaId\n * @param {Boolean} audioMuted\n * @param {Boolean} videoMuted\n * @returns {Array} medias\n */\n\n\nMedia.generateLocalMedias = function (mediaId, audioMuted, videoMuted) {\n  if (mediaId) {\n    return [{\n      localSdp: (0, _stringify.default)({\n        audioMuted: audioMuted,\n        videoMuted: videoMuted\n      }),\n      mediaId: mediaId\n    }];\n  }\n\n  return [];\n};\n/**\n * make a browser call to get the media\n * @param {SendOptions} options\n * @param {Object} config SDK Configuration for meetings plugin\n * @returns {Promise}\n */\n\n\nMedia.getLocalMedia = function (options, config) {\n  var sendAudio = options.sendAudio,\n      sendVideo = options.sendVideo,\n      sendShare = options.sendShare,\n      sharePreferences = options.sharePreferences,\n      isSharing = options.isSharing;\n\n  if (sendAudio || sendVideo) {\n    return Media.getMedia(sendAudio, sendVideo, config);\n  }\n\n  if (sendShare && !isSharing) {\n    return Media.getDisplayMedia({\n      sendAudio: false,\n      sendShare: true,\n      sharePreferences: sharePreferences\n    }, config);\n  }\n\n  return _promise.default.resolve(undefined);\n};\n/**\n * Returns the direction and tracks\n * @param {string} trackType type of track (audio/video)\n * @param {object}  track  tracks passed\n * @param {boolean} receiveTracks do you want to receive tracks from the remote side\n * @returns {Object} returns direction tracks to be added in transceiver\n */\n\n\nMedia.checkTracks = function (trackType, track, receiveTracks) {\n  var getDirection = function getDirection(sendTracks, receiveTracks) {\n    if (sendTracks && receiveTracks) {\n      return 'sendrecv';\n    }\n\n    if (sendTracks && !receiveTracks) {\n      return 'sendonly';\n    }\n\n    if (!sendTracks && receiveTracks) {\n      return 'recvonly';\n    }\n\n    return 'inactive';\n  };\n\n  if (track) {\n    return {\n      track: track,\n      direction: getDirection(!!track, receiveTracks)\n    };\n  }\n\n  return {\n    track: trackType,\n    direction: getDirection(!!track, receiveTracks)\n  };\n};\n/**\n * creates peerconnection and attaches streams\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Array} [peerConnection, ]\n */\n\n\nMedia.attachMedia = function (mediaProperties, _ref2) {\n  var meetingId = _ref2.meetingId,\n      remoteQualityLevel = _ref2.remoteQualityLevel,\n      enableRtx = _ref2.enableRtx,\n      enableExtmap = _ref2.enableExtmap;\n  var mediaDirection = mediaProperties.mediaDirection,\n      audioTrack = mediaProperties.audioTrack,\n      videoTrack = mediaProperties.videoTrack,\n      shareTrack = mediaProperties.shareTrack,\n      peerConnection = mediaProperties.peerConnection;\n  var result = null; // Add Transceiver for audio\n\n  result = Media.checkTracks('audio', mediaDirection.sendAudio && audioTrack, mediaDirection.receiveAudio);\n  peerConnection.audioTransceiver = peerConnection.addTransceiver(result.track, {\n    direction: result.direction\n  }); // Add Transceiver for video\n\n  result = Media.checkTracks('video', mediaDirection.sendVideo && videoTrack, mediaDirection.receiveVideo);\n  peerConnection.videoTransceiver = peerConnection.addTransceiver(result.track, {\n    direction: result.direction\n  }); // Add Transceiver for share\n\n  result = Media.checkTracks('video', mediaDirection.sendShare && shareTrack, mediaDirection.receiveShare);\n  peerConnection.shareTransceiver = peerConnection.addTransceiver(result.track, {\n    direction: result.direction\n  });\n\n  peerConnection.onnegotiationneeded = function (event) {\n    _loggerProxy.default.logger.info(\"Media:index#attachMedia --> onnegotiationneeded#PeerConnection: \".concat(event));\n  };\n\n  return _peerConnectionManager.default.createOffer(peerConnection, {\n    meetingId: meetingId,\n    remoteQualityLevel: remoteQualityLevel,\n    enableRtx: enableRtx,\n    enableExtmap: enableExtmap\n  });\n};\n/**\n * updates all the media streams and creates a new media offer\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise}\n */\n\n\nMedia.updateMedia = function (mediaProperties, _ref3) {\n  var meetingId = _ref3.meetingId,\n      remoteQualityLevel = _ref3.remoteQualityLevel,\n      enableRtx = _ref3.enableRtx,\n      enableExtmap = _ref3.enableExtmap;\n  var mediaDirection = mediaProperties.mediaDirection,\n      audioTrack = mediaProperties.audioTrack,\n      videoTrack = mediaProperties.videoTrack,\n      shareTrack = mediaProperties.shareTrack,\n      peerConnection = mediaProperties.peerConnection; // update audio transceiver\n\n  Media.setTrackOnTransceiver(peerConnection.audioTransceiver, {\n    type: 'audio',\n    track: audioTrack,\n    sendTrack: mediaDirection.sendAudio && audioTrack,\n    receiveTrack: mediaDirection.receiveAudio\n  }); // update video transceiver\n\n  Media.setTrackOnTransceiver(peerConnection.videoTransceiver, {\n    type: 'video',\n    track: videoTrack,\n    sendTrack: mediaDirection.sendVideo && videoTrack,\n    receiveTrack: mediaDirection.receiveVideo\n  }); // update content transceiver\n\n  Media.setTrackOnTransceiver(peerConnection.shareTransceiver, {\n    type: 'video',\n    track: shareTrack,\n    sendTrack: mediaDirection.sendShare && shareTrack,\n    receiveTrack: mediaDirection.receiveShare\n  });\n\n  peerConnection.onnegotiationneeded = function (event) {\n    _loggerProxy.default.logger.info(\"Media:index#updateMedia --> onnegotiationneeded#PeerConnection: \".concat(event));\n  };\n\n  return _peerConnectionManager.default.createOffer(peerConnection, {\n    meetingId: meetingId,\n    remoteQualityLevel: remoteQualityLevel,\n    enableRtx: enableRtx,\n    enableExtmap: enableExtmap\n  });\n};\n/**\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options\n * @param {MediaStreamTrack} options.track\n * @returns {undefined}\n */\n\n\nMedia.setTrackOnTransceiver = function (transceiver, options) {\n  var type = options.type,\n      track = options.track,\n      sendTrack = options.sendTrack,\n      receiveTrack = options.receiveTrack;\n\n  try {\n    var result = Media.checkTracks(type, sendTrack && track, receiveTrack);\n    transceiver.direction = result.direction;\n\n    if (options.track) {\n      transceiver.sender.replaceTrack(track);\n    }\n  } catch (e) {\n    _loggerProxy.default.logger.error(\"Media:index#setTrackOnTransceiver --> \".concat(e));\n\n    throw e;\n  }\n};\n/**\n * creates a new offer\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @param {RTCPeerConnection} peerConnection\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options see #Media.setTrackOnTransceiver\n * @returns {Promise}\n */\n\n\nMedia.updateTransceiver = function (_ref4, peerConnection, transceiver, options) {\n  var meetingId = _ref4.meetingId,\n      remoteQualityLevel = _ref4.remoteQualityLevel,\n      enableRtx = _ref4.enableRtx,\n      enableExtmap = _ref4.enableExtmap;\n  Media.setTrackOnTransceiver(transceiver, options);\n  return _peerConnectionManager.default.createOffer(peerConnection, {\n    meetingId: meetingId,\n    remoteQualityLevel: remoteQualityLevel,\n    enableRtx: enableRtx,\n    enableExtmap: enableExtmap\n  });\n};\n/**\n * generates share streams\n * @param {Object} options parameter\n * @param {Boolean} options.sendAudio send audio from the display share\n * @param {Boolean} options.sendShare send video from the display share\n * @param {Object} options.sharePreferences\n * @param {MediaTrackConstraints} options.sharePreferences.shareConstraints constraints to apply to video\n *   @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints}\n * @param {Boolean} options.sharePreferences.highFrameRate if shareConstraints isn't provided, set default values based off of this boolean\n * @param {Object} config SDK Configuration for meetings plugin\n * @returns {Promise.<MediaStream>}\n */\n\n\nMedia.getDisplayMedia = function (options) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // SDK screen share resolution settings from Webex.init\n\n  var customResolution = config.screenResolution || {}; // user defined screen share frame rate\n\n  var customShareFrameRate = config.screenFrameRate || null; // user defined share preferences\n\n  var hasSharePreferences = options.sharePreferences;\n  var hasCustomConstraints = hasSharePreferences && hasSharePreferences.shareConstraints;\n  var hasHighFrameRate = hasSharePreferences && hasSharePreferences.highFrameRate;\n  var _Config$meetings = _config.default.meetings,\n      screenResolution = _Config$meetings.screenResolution,\n      resolution = _Config$meetings.resolution,\n      videoShareFrameRate = _Config$meetings.videoShareFrameRate,\n      screenFrameRate = _Config$meetings.screenFrameRate,\n      aspectRatio = _Config$meetings.aspectRatio;\n  var shareConstraints = {\n    cursor: _constants.MEDIA_TRACK_CONSTRAINT.CURSOR.AWLAYS,\n    aspectRatio: aspectRatio\n  };\n\n  if (hasCustomConstraints) {\n    shareConstraints = hasSharePreferences.shareConstraints;\n  } else if (hasHighFrameRate) {\n    shareConstraints = _objectSpread(_objectSpread({}, shareConstraints), {}, {\n      frameRate: videoShareFrameRate,\n      height: resolution.idealHeight,\n      width: resolution.idealWidth\n    }, config.resolution);\n  } else {\n    shareConstraints = _objectSpread(_objectSpread({}, shareConstraints), {}, {\n      frameRate: customShareFrameRate || screenFrameRate,\n      height: customResolution.idealHeight || screenResolution.idealHeight,\n      width: customResolution.idealWidth || screenResolution.idealWidth\n    }, config.screenResolution);\n  } // chrome and webkit based browsers (edge, safari) automatically adjust everything\n  // and we have noticed higher quality with those browser types\n  // firefox specifically has some issues with resolution and frame rate decision making\n  // so we are making it optional and configurable (with defaults) for firefox\n  // to have higher quality, and for developers to control the values\n  // eventually we may have to add the same functionality to chrome, OR conversely, get to with firefox\n\n\n  if (isBrowser('firefox')) {\n    var mediaConfig = {\n      audio: options.sendAudio,\n      video: options.sendShare\n    };\n    return navigator.mediaDevices.getDisplayMedia({\n      audio: options.sendAudio,\n      video: mediaConfig\n    }).then(function (stream) {\n      if (options.sendShare && stream.getVideoTracks().length > 0) {\n        // Firefox has a bug with the spec where changing in the height and width only happens\n        // after we get the inital tracks\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1321221\n        stream.getVideoTracks()[0].applyConstraints(shareConstraints);\n      }\n\n      return stream;\n    });\n  }\n\n  var getDisplayMediaParams = {\n    video: options.sendShare ? shareConstraints : false\n  }; // safari doesn't support sending screen share audio\n  // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia\n\n  if (options.sendAudio && isBrowser('safari')) {\n    getDisplayMediaParams.audio = options.sendAudio;\n  }\n\n  return navigator.mediaDevices.getDisplayMedia(getDisplayMediaParams);\n};\n/**\n * generates audio and video using constraints (often called after getSupportedDevices)\n * @param {Object|Boolean} audio gum constraints\n * @param {Object|Boolean} video gum constraints\n * @param {Object} config SDK Configuration for meetings plugin\n * @returns {Object} {streams}\n */\n\n\nMedia.getMedia = function (audio, video, config) {\n  var defaultWidth = {\n    ideal: config.resolution.idealWidth,\n    max: config.resolution.maxWidth\n  };\n  var defaultHeight = {\n    ideal: config.resolution.idealHeight,\n    max: config.resolution.maxHeight\n  };\n  var mediaConfig = {\n    audio: audio,\n    // TODO: Remove temporary workaround once Firefox fixes low constraint issues\n    // eslint-disable-next-line no-nested-ternary\n    video: video ? isBrowser('firefox') && video.width && video.width.max === 320 ? {\n      deviceId: video.deviceId ? video.deviceId : undefined,\n      width: 320,\n      height: 180\n    } : {\n      deviceId: video.deviceId ? video.deviceId : undefined,\n      width: video.width ? video.width : defaultWidth,\n      height: video.height ? video.height : defaultHeight\n    } : false,\n    fake: process.env.NODE_ENV === 'test' // Special case to get fake media for Firefox browser for testing\n\n  };\n  return navigator.mediaDevices.getUserMedia(mediaConfig).catch(function (err) {\n    var logPath = 'Media:index#getMedia --> navigator.mediaDevices.getUserMedia';\n\n    _loggerProxy.default.logger.error(\"\".concat(logPath, \" failed - \").concat(err, \" (\").concat(err.constraint, \")\"));\n\n    throw err;\n  });\n};\n/**\n * Checks if the machine has at least one audio or video device (Dont use this for screen share)\n * @param {object} [options]\n * {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n * }\n * @returns {Object} {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n *}\n */\n\n\nMedia.getSupportedDevice = function (_ref5) {\n  var sendAudio = _ref5.sendAudio,\n      sendVideo = _ref5.sendVideo;\n  return _promise.default.resolve().then(function () {\n    if (!navigator.mediaDevices || navigator.mediaDevices.enumerateDevices === undefined) {\n      return {\n        sendAudio: false,\n        sendVideo: false\n      };\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n      var supported = {\n        audio: devices.filter(function (device) {\n          return device.kind === _constants.AUDIO_INPUT;\n        }).length > 0,\n        video: devices.filter(function (device) {\n          return device.kind === _constants.VIDEO_INPUT;\n        }).length > 0\n      };\n      return {\n        sendAudio: supported.audio && sendAudio,\n        sendVideo: supported.video && sendVideo\n      };\n    });\n  });\n};\n/**\n * proxy to browser navigator.mediaDevices.enumerateDevices()\n * @returns {Promise}\n */\n\n\nMedia.getDevices = function () {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  return _promise.default.reject(new _media.default('enumerateDevices not supported.'));\n};\n/**\n *\n * Toggle a specific stream\n * noop as of now, does nothing\n * @returns {null}\n */\n\n\nMedia.toggleStream = function () {};\n/**\n * Stop input stream\n * @param {MediaTrack} track A media stream\n * @returns {null}\n */\n\n\nMedia.stopTracks = function (track) {\n  if (!track) {\n    return _promise.default.resolve();\n  }\n\n  return _promise.default.resolve().then(function () {\n    if (track && track.stop) {\n      try {\n        track.stop();\n      } catch (e) {\n        _loggerProxy.default.logger.error(\"Media:index#stopTracks --> Unable to stop the track with state \".concat(track.readyState, \", error: \").concat(e));\n      }\n    }\n  });\n};\n/**\n *\n * Stop input stream\n * @param {Stream} stream A media stream\n * @returns {null}\n * @deprecated after v1.89.3\n */\n\n\nMedia.stopStream = function (stream) {\n  _loggerProxy.default.logger.warn('Media:index#stopStream --> [DEPRECATION WARNING]: stopStream has been deprecated after v1.89.3');\n\n  if (!stream) {\n    return _promise.default.resolve();\n  }\n  /*\n   * To release local media\n   * 1) Chrome requires all tracks to be stopped (stream.stop got deprecated)\n   * 2) Firefox requires the stream to be stopped\n   */\n\n\n  return _promise.default.resolve().then(function () {\n    if (stream.getTracks) {\n      stream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    } else if (stream.stop) {\n      stream.stop();\n    }\n  });\n};\n/**\n * generates streams for audio video and share\n * @param {object} mediaSetting parameter\n * @param {Object} mediaSetting.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} mediaSetting.sendVideo sendVideo: {Boolean} sendVideo constraints\n * @param {Object} mediaSetting.sendShare sendShare: {Boolean} sendShare constraints\n * @param {Object} mediaSetting.isSharing isSharing: {Boolean} isSharing constraints\n * @param {Object} audioVideo parameter\n * @param {Object} audioVideo.audio {deviceId: {String}}\n * @param {Object} audioVideo.video {deviceId: {String}}\n * @param {Object} sharePreferences parameter\n * @param {Object} sharePreferences.shareConstraints parameter\n * @param {Boolean} sharePreferences.highFrameRate parameter\n * @param {Object} config SDK Config\n * @returns {Array} [localStream, shareStream]\n */\n\n\nMedia.getUserMedia = function (mediaSetting, audioVideo, sharePreferences, config) {\n  return Media.getLocalMedia({\n    sendAudio: mediaSetting.sendAudio ? audioVideo.audio || mediaSetting.sendAudio : false,\n    sendVideo: mediaSetting.sendVideo ? audioVideo.video || mediaSetting.sendVideo : false\n  }, config).then(function (localStream) {\n    return Media.getLocalMedia({\n      sendShare: mediaSetting.sendShare,\n      isSharing: mediaSetting.isSharing,\n      sharePreferences: sharePreferences\n    }, config).then(function (shareStream) {\n      return [localStream, shareStream];\n    });\n  });\n};\n\nvar _default = Media;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["isBrowser","Media","setLocalTrack","enabled","track","reconnectMedia","peerConnection","meetingId","remoteQualityLevel","enableRtx","enableExtmap","connectionState","PEER_CONNECTION_STATE","CLOSED","FAILED","_promise","reject","ReconnectionError","PeerConnectionManager","createOffer","generateLocalMedias","mediaId","audioMuted","videoMuted","localSdp","getLocalMedia","options","config","sendAudio","sendVideo","sendShare","sharePreferences","isSharing","getMedia","getDisplayMedia","resolve","undefined","checkTracks","trackType","receiveTracks","getDirection","sendTracks","direction","attachMedia","mediaProperties","mediaDirection","audioTrack","videoTrack","shareTrack","result","receiveAudio","audioTransceiver","addTransceiver","receiveVideo","videoTransceiver","receiveShare","shareTransceiver","onnegotiationneeded","event","LoggerProxy","logger","info","updateMedia","setTrackOnTransceiver","type","sendTrack","receiveTrack","transceiver","sender","replaceTrack","e","error","updateTransceiver","customResolution","screenResolution","customShareFrameRate","screenFrameRate","hasSharePreferences","hasCustomConstraints","shareConstraints","hasHighFrameRate","highFrameRate","Config","meetings","resolution","videoShareFrameRate","aspectRatio","cursor","MEDIA_TRACK_CONSTRAINT","CURSOR","AWLAYS","frameRate","height","idealHeight","width","idealWidth","mediaConfig","audio","video","navigator","mediaDevices","then","stream","getVideoTracks","length","applyConstraints","getDisplayMediaParams","defaultWidth","ideal","max","maxWidth","defaultHeight","maxHeight","deviceId","fake","process","env","NODE_ENV","getUserMedia","catch","err","logPath","constraint","getSupportedDevice","enumerateDevices","devices","supported","filter","device","kind","AUDIO_INPUT","VIDEO_INPUT","getDevices","MediaError","toggleStream","stopTracks","stop","readyState","stopStream","warn","getTracks","forEach","mediaSetting","audioVideo","localStream","shareStream"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n/* globals navigator */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  AUDIO_INPUT,\n  VIDEO_INPUT,\n  PEER_CONNECTION_STATE,\n  MEDIA_TRACK_CONSTRAINT\n} from '../constants';\nimport Config from '../config';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport ReconnectionError from '../common/errors/reconnection';\nimport MediaError from '../common/errors/media';\nimport BrowserDetection from '../common/browser-detection';\n\nconst {isBrowser} = BrowserDetection();\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property sendAudio\n * @property sendVideo\n * @property sendShare\n * @property isSharing\n * @property {Object} sharePreferences\n */\n/**\n *\n * @public\n * @export\n * Mimic browser APIs as \"the ultimate browser\".\n * Handles the quirks of each browser.\n * Extends and enhances adapter.js, i.e., the \"media\" file from the web client.\n */\nconst Media = {};\n\n/**\n * @param {boolean} enabled\n * @param {MediaStreamTrack} track\n * @returns {Boolean}\n * @public\n */\nMedia.setLocalTrack = (enabled, track) => {\n  if (track) {\n    track.enabled = enabled;\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise}\n */\nMedia.reconnectMedia = (peerConnection, {\n  meetingId,\n  remoteQualityLevel,\n  enableRtx,\n  enableExtmap\n}) => {\n  if (peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED ||\n    peerConnection.connectionState === PEER_CONNECTION_STATE.FAILED) {\n    return Promise.reject(new ReconnectionError('Reinitiate peerconnection'));\n  }\n\n  return PeerConnectionManager.createOffer(peerConnection, {\n    meetingId,\n    remoteQualityLevel,\n    enableRtx,\n    enableExtmap\n  });\n};\n\n/**\n * format the media array for send\n * @param {String} mediaId\n * @param {Boolean} audioMuted\n * @param {Boolean} videoMuted\n * @returns {Array} medias\n */\nMedia.generateLocalMedias = (mediaId, audioMuted, videoMuted) => {\n  if (mediaId) {\n    return [\n      {\n        localSdp: JSON.stringify({\n          audioMuted,\n          videoMuted\n        }),\n        mediaId\n      }\n    ];\n  }\n\n  return [];\n};\n\n/**\n * make a browser call to get the media\n * @param {SendOptions} options\n * @param {Object} config SDK Configuration for meetings plugin\n * @returns {Promise}\n */\nMedia.getLocalMedia = (options, config) => {\n  const {\n    sendAudio, sendVideo, sendShare, sharePreferences, isSharing\n  } = options;\n\n  if (sendAudio || sendVideo) {\n    return Media.getMedia(sendAudio, sendVideo, config);\n  }\n\n  if (sendShare && !isSharing) {\n    return Media.getDisplayMedia(\n      {\n        sendAudio: false,\n        sendShare: true,\n        sharePreferences\n      },\n      config\n    );\n  }\n\n  return Promise.resolve(undefined);\n};\n/**\n * Returns the direction and tracks\n * @param {string} trackType type of track (audio/video)\n * @param {object}  track  tracks passed\n * @param {boolean} receiveTracks do you want to receive tracks from the remote side\n * @returns {Object} returns direction tracks to be added in transceiver\n */\nMedia.checkTracks = (trackType, track, receiveTracks) => {\n  const getDirection = (sendTracks, receiveTracks) => {\n    if (sendTracks && receiveTracks) {\n      return 'sendrecv';\n    } if (sendTracks && !receiveTracks) {\n      return 'sendonly';\n    } if (!sendTracks && receiveTracks) {\n      return 'recvonly';\n    }\n\n    return 'inactive';\n  };\n\n  if (track) {\n    return {track, direction: getDirection(!!track, receiveTracks)};\n  }\n\n  return {track: trackType, direction: getDirection(!!track, receiveTracks)};\n};\n/**\n * creates peerconnection and attaches streams\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Array} [peerConnection, ]\n */\nMedia.attachMedia = (mediaProperties, {\n  meetingId,\n  remoteQualityLevel,\n  enableRtx,\n  enableExtmap\n}) => {\n  const {\n    mediaDirection,\n    audioTrack,\n    videoTrack,\n    shareTrack,\n    peerConnection\n  } = mediaProperties;\n\n  let result = null;\n\n  // Add Transceiver for audio\n  result = Media.checkTracks('audio', mediaDirection.sendAudio && audioTrack, mediaDirection.receiveAudio);\n  peerConnection.audioTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  // Add Transceiver for video\n  result = Media.checkTracks('video', mediaDirection.sendVideo && videoTrack, mediaDirection.receiveVideo);\n  peerConnection.videoTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  // Add Transceiver for share\n  result = Media.checkTracks('video', mediaDirection.sendShare && shareTrack, mediaDirection.receiveShare);\n  peerConnection.shareTransceiver = peerConnection.addTransceiver(result.track, {direction: result.direction});\n\n  peerConnection.onnegotiationneeded = (event) => {\n    LoggerProxy.logger.info(`Media:index#attachMedia --> onnegotiationneeded#PeerConnection: ${event}`);\n  };\n\n  return PeerConnectionManager.createOffer(peerConnection, {\n    meetingId,\n    remoteQualityLevel,\n    enableRtx,\n    enableExtmap\n  });\n};\n\n/**\n * updates all the media streams and creates a new media offer\n * @param {MediaDirection} mediaProperties\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @returns {Promise}\n */\nMedia.updateMedia = (mediaProperties, {\n  meetingId,\n  remoteQualityLevel,\n  enableRtx,\n  enableExtmap\n}) => {\n  const {\n    mediaDirection,\n    audioTrack,\n    videoTrack,\n    shareTrack,\n    peerConnection\n  } = mediaProperties;\n\n  // update audio transceiver\n  Media.setTrackOnTransceiver(peerConnection.audioTransceiver, {\n    type: 'audio',\n    track: audioTrack,\n    sendTrack: mediaDirection.sendAudio && audioTrack,\n    receiveTrack: mediaDirection.receiveAudio\n  });\n\n  // update video transceiver\n  Media.setTrackOnTransceiver(peerConnection.videoTransceiver, {\n    type: 'video',\n    track: videoTrack,\n    sendTrack: mediaDirection.sendVideo && videoTrack,\n    receiveTrack: mediaDirection.receiveVideo\n  });\n\n  // update content transceiver\n  Media.setTrackOnTransceiver(peerConnection.shareTransceiver, {\n    type: 'video',\n    track: shareTrack,\n    sendTrack: mediaDirection.sendShare && shareTrack,\n    receiveTrack: mediaDirection.receiveShare\n  });\n  peerConnection.onnegotiationneeded = (event) => {\n    LoggerProxy.logger.info(`Media:index#updateMedia --> onnegotiationneeded#PeerConnection: ${event}`);\n  };\n\n  return PeerConnectionManager.createOffer(peerConnection, {\n    meetingId,\n    remoteQualityLevel,\n    enableRtx,\n    enableExtmap\n  });\n};\n\n/**\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options\n * @param {MediaStreamTrack} options.track\n * @returns {undefined}\n */\nMedia.setTrackOnTransceiver = (transceiver, options) => {\n  const {\n    type, track, sendTrack, receiveTrack\n  } = options;\n\n  try {\n    const result = Media.checkTracks(type, sendTrack && track, receiveTrack);\n\n    transceiver.direction = result.direction;\n    if (options.track) {\n      transceiver.sender.replaceTrack(track);\n    }\n  }\n  catch (e) {\n    LoggerProxy.logger.error(`Media:index#setTrackOnTransceiver --> ${e}`);\n    throw e;\n  }\n};\n\n/**\n * creates a new offer\n * @param {Object} meetingProperties\n * @param {string} meetingProperties.meetingId\n * @param {string} meetingProperties.remoteQualityLevel LOW|MEDIUM|HIGH\n * @param {RTCPeerConnection} peerConnection\n * @param {RTCRtpTransceiver} transceiver\n * @param {Object} options see #Media.setTrackOnTransceiver\n * @returns {Promise}\n */\nMedia.updateTransceiver = ({\n  meetingId,\n  remoteQualityLevel,\n  enableRtx,\n  enableExtmap\n}, peerConnection, transceiver, options) => {\n  Media.setTrackOnTransceiver(transceiver, options);\n\n  return PeerConnectionManager.createOffer(peerConnection, {\n    meetingId,\n    remoteQualityLevel,\n    enableRtx,\n    enableExtmap\n  });\n};\n\n/**\n * generates share streams\n * @param {Object} options parameter\n * @param {Boolean} options.sendAudio send audio from the display share\n * @param {Boolean} options.sendShare send video from the display share\n * @param {Object} options.sharePreferences\n * @param {MediaTrackConstraints} options.sharePreferences.shareConstraints constraints to apply to video\n *   @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints}\n * @param {Boolean} options.sharePreferences.highFrameRate if shareConstraints isn't provided, set default values based off of this boolean\n * @param {Object} config SDK Configuration for meetings plugin\n * @returns {Promise.<MediaStream>}\n */\nMedia.getDisplayMedia = (options, config = {}) => {\n  // SDK screen share resolution settings from Webex.init\n  const customResolution = config.screenResolution || {};\n  // user defined screen share frame rate\n  const customShareFrameRate = config.screenFrameRate || null;\n  // user defined share preferences\n  const hasSharePreferences = options.sharePreferences;\n  const hasCustomConstraints = hasSharePreferences && hasSharePreferences.shareConstraints;\n  const hasHighFrameRate = hasSharePreferences && hasSharePreferences.highFrameRate;\n  const {\n    screenResolution,\n    resolution,\n    videoShareFrameRate,\n    screenFrameRate,\n    aspectRatio\n  } = Config.meetings;\n\n  let shareConstraints = {\n    cursor: MEDIA_TRACK_CONSTRAINT.CURSOR.AWLAYS,\n    aspectRatio\n  };\n\n  if (hasCustomConstraints) {\n    shareConstraints = hasSharePreferences.shareConstraints;\n  }\n  else if (hasHighFrameRate) {\n    shareConstraints = {\n      ...shareConstraints,\n      frameRate: videoShareFrameRate,\n      height: resolution.idealHeight,\n      width: resolution.idealWidth,\n      ...config.resolution\n    };\n  }\n  else {\n    shareConstraints = {\n      ...shareConstraints,\n      frameRate: customShareFrameRate || screenFrameRate,\n      height: customResolution.idealHeight || screenResolution.idealHeight,\n      width: customResolution.idealWidth || screenResolution.idealWidth,\n      ...config.screenResolution\n    };\n  }\n\n  // chrome and webkit based browsers (edge, safari) automatically adjust everything\n  // and we have noticed higher quality with those browser types\n  // firefox specifically has some issues with resolution and frame rate decision making\n  // so we are making it optional and configurable (with defaults) for firefox\n  // to have higher quality, and for developers to control the values\n  // eventually we may have to add the same functionality to chrome, OR conversely, get to with firefox\n\n\n  if (isBrowser('firefox')) {\n    const mediaConfig = {\n      audio: options.sendAudio,\n      video: options.sendShare\n    };\n\n\n    return navigator.mediaDevices.getDisplayMedia({audio: options.sendAudio, video: mediaConfig})\n      .then((stream) => {\n        if (options.sendShare && stream.getVideoTracks().length > 0) {\n          // Firefox has a bug with the spec where changing in the height and width only happens\n          // after we get the inital tracks\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1321221\n          stream.getVideoTracks()[0].applyConstraints(shareConstraints);\n        }\n\n\n        return stream;\n      });\n  }\n\n  const getDisplayMediaParams = {video: options.sendShare ? shareConstraints : false};\n\n  // safari doesn't support sending screen share audio\n  // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia\n  if (options.sendAudio && isBrowser('safari')) {\n    getDisplayMediaParams.audio = options.sendAudio;\n  }\n\n  return navigator.mediaDevices.getDisplayMedia(getDisplayMediaParams);\n};\n\n/**\n * generates audio and video using constraints (often called after getSupportedDevices)\n * @param {Object|Boolean} audio gum constraints\n * @param {Object|Boolean} video gum constraints\n * @param {Object} config SDK Configuration for meetings plugin\n * @returns {Object} {streams}\n */\nMedia.getMedia = (audio, video, config) => {\n  const defaultWidth = {ideal: config.resolution.idealWidth, max: config.resolution.maxWidth};\n  const defaultHeight = {ideal: config.resolution.idealHeight, max: config.resolution.maxHeight};\n  const mediaConfig = {\n    audio,\n    // TODO: Remove temporary workaround once Firefox fixes low constraint issues\n    // eslint-disable-next-line no-nested-ternary\n    video: video ?\n      isBrowser('firefox') && video.width && video.width.max === 320 ?\n        {\n          deviceId: video.deviceId ? video.deviceId : undefined,\n          width: 320,\n          height: 180\n        } :\n        {\n          deviceId: video.deviceId ? video.deviceId : undefined,\n          width: video.width ? video.width : defaultWidth,\n          height: video.height ? video.height : defaultHeight\n        } :\n      false,\n    fake: process.env.NODE_ENV === 'test' // Special case to get fake media for Firefox browser for testing\n  };\n\n  return navigator.mediaDevices\n    .getUserMedia(mediaConfig)\n    .catch((err) => {\n      const logPath = 'Media:index#getMedia --> navigator.mediaDevices.getUserMedia';\n\n      LoggerProxy.logger.error(`${logPath} failed - ${err} (${err.constraint})`);\n      throw err;\n    });\n};\n\n/**\n * Checks if the machine has at least one audio or video device (Dont use this for screen share)\n * @param {object} [options]\n * {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n * }\n * @returns {Object} {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n *}\n */\nMedia.getSupportedDevice = ({sendAudio, sendVideo}) =>\n  Promise.resolve().then(() => {\n    if (!navigator.mediaDevices || navigator.mediaDevices.enumerateDevices === undefined) {\n      return {\n        sendAudio: false,\n        sendVideo: false\n      };\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const supported = {\n        audio: devices.filter((device) => device.kind === AUDIO_INPUT).length > 0,\n        video: devices.filter((device) => device.kind === VIDEO_INPUT).length > 0\n      };\n\n      return {\n        sendAudio: supported.audio && sendAudio,\n        sendVideo: supported.video && sendVideo\n      };\n    });\n  });\n\n/**\n * proxy to browser navigator.mediaDevices.enumerateDevices()\n * @returns {Promise}\n */\nMedia.getDevices = () => {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  return Promise.reject(new MediaError('enumerateDevices not supported.'));\n};\n\n/**\n *\n * Toggle a specific stream\n * noop as of now, does nothing\n * @returns {null}\n */\nMedia.toggleStream = () => {};\n\n/**\n * Stop input stream\n * @param {MediaTrack} track A media stream\n * @returns {null}\n */\nMedia.stopTracks = (track) => {\n  if (!track) {\n    return Promise.resolve();\n  }\n\n  return Promise.resolve().then(() => {\n    if (track && track.stop) {\n      try {\n        track.stop();\n      }\n      catch (e) {\n        LoggerProxy.logger.error(`Media:index#stopTracks --> Unable to stop the track with state ${track.readyState}, error: ${e}`);\n      }\n    }\n  });\n};\n\n/**\n *\n * Stop input stream\n * @param {Stream} stream A media stream\n * @returns {null}\n * @deprecated after v1.89.3\n */\nMedia.stopStream = (stream) => {\n  LoggerProxy.logger.warn('Media:index#stopStream --> [DEPRECATION WARNING]: stopStream has been deprecated after v1.89.3');\n  if (!stream) {\n    return Promise.resolve();\n  }\n\n  /*\n   * To release local media\n   * 1) Chrome requires all tracks to be stopped (stream.stop got deprecated)\n   * 2) Firefox requires the stream to be stopped\n   */\n  return Promise.resolve().then(() => {\n    if (stream.getTracks) {\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    }\n    else if (stream.stop) {\n      stream.stop();\n    }\n  });\n};\n\n/**\n * generates streams for audio video and share\n * @param {object} mediaSetting parameter\n * @param {Object} mediaSetting.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} mediaSetting.sendVideo sendVideo: {Boolean} sendVideo constraints\n * @param {Object} mediaSetting.sendShare sendShare: {Boolean} sendShare constraints\n * @param {Object} mediaSetting.isSharing isSharing: {Boolean} isSharing constraints\n * @param {Object} audioVideo parameter\n * @param {Object} audioVideo.audio {deviceId: {String}}\n * @param {Object} audioVideo.video {deviceId: {String}}\n * @param {Object} sharePreferences parameter\n * @param {Object} sharePreferences.shareConstraints parameter\n * @param {Boolean} sharePreferences.highFrameRate parameter\n * @param {Object} config SDK Config\n * @returns {Array} [localStream, shareStream]\n */\nMedia.getUserMedia = (mediaSetting, audioVideo, sharePreferences, config) => Media.getLocalMedia({\n  sendAudio: mediaSetting.sendAudio ? audioVideo.audio || mediaSetting.sendAudio : false,\n  sendVideo: mediaSetting.sendVideo ? audioVideo.video || mediaSetting.sendVideo : false\n}, config).then((localStream) => Media.getLocalMedia({\n  sendShare: mediaSetting.sendShare,\n  isSharing: mediaSetting.isSharing,\n  sharePreferences\n}, config).then((shareStream) => [localStream, shareStream]));\n\nexport default Media;\n"]},"metadata":{},"sourceType":"script"}
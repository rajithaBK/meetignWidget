{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _apply = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/reflect/apply\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _cloneDeep2 = _interopRequireDefault(require(\"lodash/cloneDeep\"));\n\nvar _webexCore = require(\"@webex/webex-core\");\n\nvar _common = require(\"@webex/common\");\n/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n\nvar debug = require('debug')('attachmentActions');\n/**\n * @typedef {Object} AttachmentActionObject\n * @property {string} id - (server generated) Unique identifier for the attachment action\n * @property {string} messageId - The ID of the message in which attachment action is to be performed\n * @property {string} type - The type of attachment action eg., submit\n * @property {Object} inputs - The inputs for form fields in attachment message\n * @property {string} personId - (server generated) The ID for the author of the attachment action\n * @property {string} roomId - (server generated) The ID for the room of the message\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * AttachmentActions are events that communicate information when a user clicks on an\n * Action.Submit button in a card displayed in Webex\n * Information conveyed in an AttachmentAction includes details about the user that\n * clicked the button along with any card specific inputs. See the\n * {@link https://developer.webex.com/docs/api/v1/attachment-actions|Attachments Actions API Documentation}\n * for more details\n * @class\n */\n\n\nvar AttachmentActions = _webexCore.WebexPlugin.extend({\n  /**\n   * Initializer used to generate AttachmentActions\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize: function initialize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _apply.default)(_webexCore.WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming attachmentAction events\n   * This is an alternate approach to registering for attachmentAction webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The attachmentActions.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload, specifically: `inputs`.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.attachmentActions.listen()\n   *   .then(() => {\n   *     console.log('listening to attachmentActions events');\n   *     webex.attachmentActions.on('created', (event) => console.log(`Got an attachmentActions:created event:\\n${event}`));\n   *   })\n   *   .catch((e) => console.error(`Unable to register for attachmentAction events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.attachmentActions.stopListening();\n   * webex.attachmentActions.off('created');\n   */\n  listen: function listen() {\n    var _this = this; // Create a common envelope that we will wrap all events in\n\n\n    return (0, _common.createEventEnvelope)(this.webex, _common.SDK_EVENT.EXTERNAL.RESOURCE.ATTACHMENT_ACTIONS).then(function (envelope) {\n      _this.eventEnvelope = envelope; // Register to listen to events\n\n      return _this.webex.internal.mercury.connect().then(function () {\n        _this.listenTo(_this.webex.internal.mercury, _common.SDK_EVENT.INTERNAL.WEBEX_ACTIVITY, function (event) {\n          return _this.onWebexApiEvent(event);\n        });\n      });\n    });\n  },\n\n  /**\n     * Post a new attachment action for a message with attachment.\n     * @instance\n     * @memberof AttachmentActions\n     * @param {AttachmentActionObject} attachmentAction\n     * @returns {Promise<AttachmentActionObject>}\n     * @example\n     * webex.rooms.create({title: 'Create Message with card Example'})\n     *   .then(function(room) {\n     *     return webex.messages.create({\n     *       text: 'Howdy!',\n     *       roomId: room.id,\n     *       attachments:[ {\n     *          contentType: 'application/vnd.microsoft.card.adaptive',\n     *         content: {\n     *           type: 'AdaptiveCard',\n     *           version: '1.0',\n     *           body: [\n     *            {\n     *             type: 'TextBlock',\n     *             text: '',\n     *             size: 'large'\n     *             },\n     *           {\n     *             type: 'TextBlock',\n     *             text: 'Adaptive Cards',\n     *             separation: 'none'\n     *           }\n     *           {\n     *           type: 'Input.Date',\n     *           id: 'dueDate'\n     *           }\n     *       ],\n     *     actions: [\n     *         {\n     *             type: 'Action.Submit',\n     *             title: 'Due Date'\n     *         }\n     *     ]\n     *   }\n     *  }]\n     *     });\n     *   })\n     *   .then(function(message) {\n     *    return webex.attachmentActions.create({\n     *      type: 'submit',\n     *      messageId: message.id,\n     *      inputs:{\n     *        dueDate: '26/06/1995'\n     *      }\n     *    })\n     *    .then(function(attachmentAction)){\n     *      var assert = require('assert');\n     *      assert(attachmentAction.id);\n     *      assert(attachmentAction.type);\n     *      assert(attachmentAction.personId);\n     *      assert(attachmentAction.inputs);\n     *      assert(attachmentAction.messageId);\n     *      assert(attachmentAction.roomId);\n     *      assert(attachmentAction.created);\n     *      return 'success';\n     *     }\n     *   });\n     *   // => success\n     */\n  create: function create(attachmentAction) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'attachment/actions',\n      body: attachmentAction\n    }).then(function (res) {\n      return res.body;\n    });\n  },\n\n  /**\n   * Returns a single attachment action.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {string} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * var attachmentAction;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           },\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      });\n   *   })\n   *   .then(function(attachmentAction) {\n   *     return webex.attachmentActions.get(attachmentAction.id)\n   *   })\n   *    .then(function(attachmentAction){\n   *        var assert = require('assert');\n   *        assert.deepEqual(attachmentAction, attachmentAction);\n   *        return 'success';\n   *      })\n   *   // => success\n   */\n  get: function get(attachmentAction) {\n    var id = attachmentAction.id || attachmentAction;\n    return this.request({\n      service: 'hydra',\n      resource: \"attachment/actions/\".concat(id)\n    }).then(function (res) {\n      return res.body.items || res.body;\n    });\n  },\n\n  /**\n   * This function is called when an internal mercury events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent: function onWebexApiEvent(event) {\n    var activity = event.data.activity;\n    /* eslint-disable no-case-declarations */\n\n    switch (activity.verb) {\n      case _common.SDK_EVENT.INTERNAL.ACTIVITY_VERB.CARD_ACTION:\n        var createdEvent = this.getattachmentActionEvent(activity, _common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(\"attachmentAction \\\"created\\\" payload:             \".concat((0, _stringify.default)(createdEvent)));\n          this.trigger(_common.SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n\n        break;\n\n      default:\n        {\n          break;\n        }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the attachmentAction resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getattachmentActionEvent: function getattachmentActionEvent(activity, event) {\n    try {\n      var sdkEvent = (0, _cloneDeep2.default)(this.eventEnvelope);\n      var cluster = (0, _common.getHydraClusterString)(this.webex, activity.target.url);\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID, cluster);\n      sdkEvent.data.roomId = (0, _common.constructHydraId)(_common.hydraTypes.ROOM, activity.target.id, cluster);\n      sdkEvent.data.messageId = (0, _common.constructHydraId)(_common.hydraTypes.MESSAGE, activity.parent.id, cluster);\n      sdkEvent.data.personId = (0, _common.constructHydraId)(_common.hydraTypes.PEOPLE, activity.actor.entryUUID, cluster); // Seems like it would be nice to have this, but its not in the hydra webhook\n      // sdkEvent.data.personEmail =\n      //   activity.actor.emailAddress || activity.actor.entryEmail;\n\n      sdkEvent.data.id = (0, _common.constructHydraId)(_common.hydraTypes.ATTACHMENT_ACTION, activity.id, cluster);\n\n      if (activity.object.inputs) {\n        sdkEvent.data.inputs = activity.object.inputs;\n      }\n\n      sdkEvent.data.type = activity.object.objectType;\n      return sdkEvent;\n    } catch (e) {\n      this.webex.logger.error(\"Unable to generate SDK event from mercury 'socket activity for attachmentAction:\".concat(event, \" event: \").concat(e.message));\n      return null;\n    }\n  },\n  version: \"1.154.2\"\n});\n\nvar _default = AttachmentActions;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAIA;;AAGA;AAPA;AACA;AACA;;;AAcA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAPA,CAAiB,mBAAjBA,CAAd;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,iBAAiB,GAAGC,uBAAYC,MAAZD,CAAmB;AAC3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,YAT2C,wBASvB;AAAA,sCAANC,IAAM;AAANA,UAAM,MAANA,GAAMC,eAAND;AAAM;;AAClB,wBAAcH,uBAAYK,SAAZL,CAAsBE,UAApC,EAAgD,IAAhD,EAAsDC,IAAtD;AAVyC;;AAa3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,QAzC2C,oBAyClC;AAAA,sBACP;;;AACA,WAAO,iCAAoB,KAAKC,KAAzB,EACLC,kBAAUC,QAAVD,CAAmBE,QAAnBF,CAA4BG,kBADvB,EAEJC,IAFI,CAEC,UAACC,QAAD,EAAc;AAClBC,WAAI,CAACC,aAAL,GAAqBF,QAArB,CADkB,CAGlB;;AACA,aAAOC,KAAI,CAACP,KAAL,CAAWS,QAAX,CAAoBC,OAApB,CAA4BC,OAA5B,GAAsCN,IAAtC,CAA2C,YAAM;AACtDE,aAAI,CAACK,QAAL,CAAcL,KAAI,CAACP,KAAL,CAAWS,QAAX,CAAoBC,OAAlC,EACET,kBAAUY,QAAVZ,CAAmBa,cADrB,EAEE,UAACC,KAAD;AAAA,iBAAWR,KAAI,CAACS,eAAL,CAAqBD,KAArB,CAAX;AAFF;AADK,QAAP;AANG,MAAP;AA3CyC;;AAyD3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,QA1H2C,kBA0HpCC,gBA1HoC,EA0HlB;AACvB,WAAO,KAAKC,OAAL,CAAa;AAClBC,YAAM,EAAE,MADU;AAElBC,aAAO,EAAE,OAFS;AAGlBC,cAAQ,EAAE,oBAHQ;AAIlBC,UAAI,EAAEL;AAJY,KAAb,EAMJb,IANI,CAMC,UAACmB,GAAD;AAAA,aAASA,GAAG,CAACD,IAAb;AAND,MAAP;AA3HyC;;AAoI3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,KAlM2C,eAkMvCP,gBAlMuC,EAkMrB;AACpB,QAAMQ,EAAE,GAAGR,gBAAgB,CAACQ,EAAjBR,IAAuBA,gBAAlC;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,aAAO,EAAE,OADS;AAElBC,cAAQ,+BAAwBI,EAAxB;AAFU,KAAb,EAIJrB,IAJI,CAIC,UAACmB,GAAD;AAAA,aAASA,GAAG,CAACD,IAAJC,CAASG,KAATH,IAAkBA,GAAG,CAACD,IAA/B;AAJD,MAAP;AArMyC;;AA4M3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEP,iBArN2C,2BAqN3BD,KArN2B,EAqNpB;AACrB,QAAOa,QAAP,GAAmBb,KAAK,CAACc,IAANd,CAAZa,QAAP;AAEA;;AACA,YAAQA,QAAQ,CAACE,IAAjB;AACE,WAAK7B,kBAAUY,QAAVZ,CAAmB8B,aAAnB9B,CAAiC+B,WAAtC;AACE,YAAMC,YAAY,GAChB,KAAKC,wBAAL,CAA8BN,QAA9B,EACE3B,kBAAUC,QAAVD,CAAmBkC,UAAnBlC,CAA8BmC,OADhC,CADF;;AAIA,YAAIH,YAAJ,EAAkB;AAChB3C,eAAK,6DACD,wBAAe2C,YAAf,CADC,EAAL3C;AAEA,eAAK+C,OAAL,CAAapC,kBAAUC,QAAVD,CAAmBkC,UAAnBlC,CAA8BmC,OAA3C,EAAoDH,YAApD;AACD;;AACD;;AAEF;AAAS;AACP;AACD;AAfH;AAzNyC;;AA4O3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,0BAtP2C,oCAsPlBN,QAtPkB,EAsPRb,KAtPQ,EAsPD;AACxC,QAAI;AACF,UAAMuB,QAAQ,GAAG,yBAAU,KAAK9B,aAAf,CAAjB;AACA,UAAM+B,OAAO,GAAG,mCAAsB,KAAKvC,KAA3B,EAAkC4B,QAAQ,CAACY,MAATZ,CAAgBa,GAAlD,CAAhB;AAEAH,cAAQ,CAACvB,KAATuB,GAAiBvB,KAAjBuB;AACAA,cAAQ,CAACT,IAATS,CAAcI,OAAdJ,GAAwBV,QAAQ,CAACe,SAAjCL;AACAA,cAAQ,CAACM,OAATN,GACE,8BAAiBO,mBAAWC,MAA5B,EAAoClB,QAAQ,CAACmB,KAATnB,CAAeoB,SAAnD,EAA8DT,OAA9D,CADFD;AAEAA,cAAQ,CAACT,IAATS,CAAcW,MAAdX,GACE,8BAAiBO,mBAAWK,IAA5B,EAAkCtB,QAAQ,CAACY,MAATZ,CAAgBF,EAAlD,EAAsDa,OAAtD,CADFD;AAEAA,cAAQ,CAACT,IAATS,CAAca,SAAdb,GACE,8BAAiBO,mBAAWO,OAA5B,EAAqCxB,QAAQ,CAACyB,MAATzB,CAAgBF,EAArD,EAAyDa,OAAzD,CADFD;AAEAA,cAAQ,CAACT,IAATS,CAAcgB,QAAdhB,GACE,8BAAiBO,mBAAWC,MAA5B,EAAoClB,QAAQ,CAACmB,KAATnB,CAAeoB,SAAnD,EAA8DT,OAA9D,CADFD,CAZE,CAcF;AACA;AACA;;AAEAA,cAAQ,CAACT,IAATS,CAAcZ,EAAdY,GACE,8BAAiBO,mBAAWU,iBAA5B,EAA+C3B,QAAQ,CAACF,EAAxD,EAA4Da,OAA5D,CADFD;;AAEA,UAAIV,QAAQ,CAAC4B,MAAT5B,CAAgB6B,MAApB,EAA4B;AAC1BnB,gBAAQ,CAACT,IAATS,CAAcmB,MAAdnB,GAAuBV,QAAQ,CAAC4B,MAAT5B,CAAgB6B,MAAvCnB;AACD;;AACDA,cAAQ,CAACT,IAATS,CAAcoB,IAAdpB,GAAqBV,QAAQ,CAAC4B,MAAT5B,CAAgB+B,UAArCrB;AAEA,aAAOA,QAAP;AAzBF,MA2BA,OAAOsB,CAAP,EAAU;AACR,WAAK5D,KAAL,CAAW6D,MAAX,CAAkBC,KAAlB,2FACkC/C,KADlC,qBACkD6C,CAAC,CAACG,OADpD;AAGA,aAAO,IAAP;AACD;AAvRwC;AAAAC;AAAA,CAAnBvE,CAA1B;;eA4ReD","names":["debug","require","AttachmentActions","WebexPlugin","extend","initialize","args","arguments","prototype","listen","webex","SDK_EVENT","EXTERNAL","RESOURCE","ATTACHMENT_ACTIONS","then","envelope","_this","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","WEBEX_ACTIVITY","event","onWebexApiEvent","create","attachmentAction","request","method","service","resource","body","res","get","id","items","activity","data","verb","ACTIVITY_VERB","CARD_ACTION","createdEvent","getattachmentActionEvent","EVENT_TYPE","CREATED","trigger","sdkEvent","cluster","target","url","created","published","actorId","hydraTypes","PEOPLE","actor","entryUUID","roomId","ROOM","messageId","MESSAGE","parent","personId","ATTACHMENT_ACTION","object","inputs","type","objectType","e","logger","error","message","version"],"sources":["attachmentActions.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  WebexPlugin\n} from '@webex/webex-core';\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  constructHydraId,\n  getHydraClusterString,\n  hydraTypes\n} from '@webex/common';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('attachmentActions');\n\n\n/**\n * @typedef {Object} AttachmentActionObject\n * @property {string} id - (server generated) Unique identifier for the attachment action\n * @property {string} messageId - The ID of the message in which attachment action is to be performed\n * @property {string} type - The type of attachment action eg., submit\n * @property {Object} inputs - The inputs for form fields in attachment message\n * @property {string} personId - (server generated) The ID for the author of the attachment action\n * @property {string} roomId - (server generated) The ID for the room of the message\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * AttachmentActions are events that communicate information when a user clicks on an\n * Action.Submit button in a card displayed in Webex\n * Information conveyed in an AttachmentAction includes details about the user that\n * clicked the button along with any card specific inputs. See the\n * {@link https://developer.webex.com/docs/api/v1/attachment-actions|Attachments Actions API Documentation}\n * for more details\n * @class\n */\nconst AttachmentActions = WebexPlugin.extend({\n  /**\n   * Initializer used to generate AttachmentActions\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming attachmentAction events\n   * This is an alternate approach to registering for attachmentAction webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The attachmentActions.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload, specifically: `inputs`.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.attachmentActions.listen()\n   *   .then(() => {\n   *     console.log('listening to attachmentActions events');\n   *     webex.attachmentActions.on('created', (event) => console.log(`Got an attachmentActions:created event:\\n${event}`));\n   *   })\n   *   .catch((e) => console.error(`Unable to register for attachmentAction events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.attachmentActions.stopListening();\n   * webex.attachmentActions.off('created');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.ATTACHMENT_ACTIONS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.WEBEX_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n     * Post a new attachment action for a message with attachment.\n     * @instance\n     * @memberof AttachmentActions\n     * @param {AttachmentActionObject} attachmentAction\n     * @returns {Promise<AttachmentActionObject>}\n     * @example\n     * webex.rooms.create({title: 'Create Message with card Example'})\n     *   .then(function(room) {\n     *     return webex.messages.create({\n     *       text: 'Howdy!',\n     *       roomId: room.id,\n     *       attachments:[ {\n     *          contentType: 'application/vnd.microsoft.card.adaptive',\n     *         content: {\n     *           type: 'AdaptiveCard',\n     *           version: '1.0',\n     *           body: [\n     *            {\n     *             type: 'TextBlock',\n     *             text: '',\n     *             size: 'large'\n     *             },\n     *           {\n     *             type: 'TextBlock',\n     *             text: 'Adaptive Cards',\n     *             separation: 'none'\n     *           }\n     *           {\n     *           type: 'Input.Date',\n     *           id: 'dueDate'\n     *           }\n     *       ],\n     *     actions: [\n     *         {\n     *             type: 'Action.Submit',\n     *             title: 'Due Date'\n     *         }\n     *     ]\n     *   }\n     *  }]\n     *     });\n     *   })\n     *   .then(function(message) {\n     *    return webex.attachmentActions.create({\n     *      type: 'submit',\n     *      messageId: message.id,\n     *      inputs:{\n     *        dueDate: '26/06/1995'\n     *      }\n     *    })\n     *    .then(function(attachmentAction)){\n     *      var assert = require('assert');\n     *      assert(attachmentAction.id);\n     *      assert(attachmentAction.type);\n     *      assert(attachmentAction.personId);\n     *      assert(attachmentAction.inputs);\n     *      assert(attachmentAction.messageId);\n     *      assert(attachmentAction.roomId);\n     *      assert(attachmentAction.created);\n     *      return 'success';\n     *     }\n     *   });\n     *   // => success\n     */\n  create(attachmentAction) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'attachment/actions',\n      body: attachmentAction\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single attachment action.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {string} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * var attachmentAction;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           },\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      });\n   *   })\n   *   .then(function(attachmentAction) {\n   *     return webex.attachmentActions.get(attachmentAction.id)\n   *   })\n   *    .then(function(attachmentAction){\n   *        var assert = require('assert');\n   *        assert.deepEqual(attachmentAction, attachmentAction);\n   *        return 'success';\n   *      })\n   *   // => success\n   */\n  get(attachmentAction) {\n    const id = attachmentAction.id || attachmentAction;\n\n    return this.request({\n      service: 'hydra',\n      resource: `attachment/actions/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * This function is called when an internal mercury events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CARD_ACTION:\n        const createdEvent =\n          this.getattachmentActionEvent(activity,\n            SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(`attachmentAction \"created\" payload: \\\n            ${JSON.stringify(createdEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n        break;\n\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the attachmentAction resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof AttachmentAction\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getattachmentActionEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      const cluster = getHydraClusterString(this.webex, activity.target.url);\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID, cluster);\n      sdkEvent.data.roomId =\n        constructHydraId(hydraTypes.ROOM, activity.target.id, cluster);\n      sdkEvent.data.messageId =\n        constructHydraId(hydraTypes.MESSAGE, activity.parent.id, cluster);\n      sdkEvent.data.personId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID, cluster);\n      // Seems like it would be nice to have this, but its not in the hydra webhook\n      // sdkEvent.data.personEmail =\n      //   activity.actor.emailAddress || activity.actor.entryEmail;\n\n      sdkEvent.data.id =\n        constructHydraId(hydraTypes.ATTACHMENT_ACTION, activity.id, cluster);\n      if (activity.object.inputs) {\n        sdkEvent.data.inputs = activity.object.inputs;\n      }\n      sdkEvent.data.type = activity.object.objectType;\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for attachmentAction:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default AttachmentActions;\n"]},"metadata":{},"sourceType":"script"}
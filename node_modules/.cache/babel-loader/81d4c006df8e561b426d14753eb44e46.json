{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralSubtree from \"./GeneralSubtree.js\"; //**************************************************************************************\n\n/**\n * Class from RFC5280\n */\n\nexport default class NameConstraints {\n  //**********************************************************************************\n\n  /**\n   * Constructor for NameConstraints class\n   * @param {Object} [parameters={}]\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n   */\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    //region Internal properties of the object\n    if (\"permittedSubtrees\" in parameters)\n      /**\n       * @type {Array.<GeneralSubtree>}\n       * @desc permittedSubtrees\n       */\n      this.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n    if (\"excludedSubtrees\" in parameters)\n      /**\n       * @type {Array.<GeneralSubtree>}\n       * @desc excludedSubtrees\n       */\n      this.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\")); //endregion\n    //region If input argument array contains \"schema\" for this object\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n\n\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"permittedSubtrees\":\n        return [];\n\n      case \"excludedSubtrees\":\n        return [];\n\n      default:\n        throw new Error(`Invalid member name for NameConstraints class: ${memberName}`);\n    }\n  } //**********************************************************************************\n\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * NameConstraints ::= SEQUENCE {\n   *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n   *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n\n\n  static schema() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [permittedSubtrees]\n     * @property {string} [excludedSubtrees]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.permittedSubtrees || \"\",\n          value: GeneralSubtree.schema()\n        })]\n      }), new asn1js.Constructed({\n        optional: true,\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: [new asn1js.Repeated({\n          name: names.excludedSubtrees || \"\",\n          value: GeneralSubtree.schema()\n        })]\n      })]\n    });\n  } //**********************************************************************************\n\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n\n\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"permittedSubtrees\", \"excludedSubtrees\"]); //endregion\n    //region Check the schema is valid\n\n    const asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\n      names: {\n        permittedSubtrees: \"permittedSubtrees\",\n        excludedSubtrees: \"excludedSubtrees\"\n      }\n    }));\n    if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for NameConstraints\"); //endregion\n    //region Get internal properties from parsed schema\n\n    if (\"permittedSubtrees\" in asn1.result) this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({\n      schema: element\n    }));\n    if (\"excludedSubtrees\" in asn1.result) this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({\n      schema: element\n    })); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n\n\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"permittedSubtrees\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 0 // [0]\n\n        },\n        value: Array.from(this.permittedSubtrees, element => element.toSchema())\n      }));\n    }\n\n    if (\"excludedSubtrees\" in this) {\n      outputArray.push(new asn1js.Constructed({\n        idBlock: {\n          tagClass: 3,\n          // CONTEXT-SPECIFIC\n          tagNumber: 1 // [1]\n\n        },\n        value: Array.from(this.excludedSubtrees, element => element.toSchema())\n      }));\n    } //endregion\n    //region Construct and return new ASN.1 schema for this object\n\n\n    return new asn1js.Sequence({\n      value: outputArray\n    }); //endregion\n  } //**********************************************************************************\n\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n\n\n  toJSON() {\n    const object = {};\n    if (\"permittedSubtrees\" in this) object.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\n    if (\"excludedSubtrees\" in this) object.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\n    return object;\n  } //**********************************************************************************\n\n\n} //**************************************************************************************","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/NameConstraints.js"],"names":["asn1js","getParametersValue","clearProps","GeneralSubtree","NameConstraints","constructor","parameters","permittedSubtrees","defaultValues","excludedSubtrees","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralSubtree from \"./GeneralSubtree.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class NameConstraints\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for NameConstraints class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"permittedSubtrees\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralSubtree>}\n\t\t\t * @desc permittedSubtrees\n\t\t\t */\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n\n\t\tif(\"excludedSubtrees\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralSubtree>}\n\t\t\t * @desc excludedSubtrees\n\t\t\t */\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"permittedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tcase \"excludedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * NameConstraints ::= SEQUENCE {\n\t *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n\t *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [permittedSubtrees]\n\t\t * @property {string} [excludedSubtrees]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"permittedSubtrees\",\n\t\t\t\"excludedSubtrees\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tNameConstraints.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"permittedSubtrees\" in asn1.result)\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n\n\t\tif(\"excludedSubtrees\" in asn1.result)\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\t\t\n\t\tif(\"permittedSubtrees\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"excludedSubtrees\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {};\n\t\t\n\t\tif(\"permittedSubtrees\" in this)\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\n\n\t\tif(\"excludedSubtrees\" in this)\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rkanthet/Documents/test_window_object/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\"; //**************************************************************************************\n\n/**\r\n * Class from RFC5652\r\n */\n\nvar EncapsulatedContentInfo = /*#__PURE__*/function () {\n  //**********************************************************************************\n\n  /**\r\n   * Constructor for EncapsulatedContentInfo class\r\n   * @param {Object} [parameters={}]\r\n   * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n   */\n  function EncapsulatedContentInfo() {\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, EncapsulatedContentInfo);\n\n    //region Internal properties of the object\n\n    /**\r\n     * @type {string}\r\n     * @desc eContentType\r\n     */\n    this.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\n\n    if (\"eContent\" in parameters) {\n      /**\r\n       * @type {OctetString}\r\n       * @desc eContent\r\n       */\n      this.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\n\n      if (this.eContent.idBlock.tagClass === 1 && this.eContent.idBlock.tagNumber === 4) {\n        //region Divide OCTETSTRING value down to small pieces\n        if (this.eContent.idBlock.isConstructed === false) {\n          var constrString = new asn1js.OctetString({\n            idBlock: {\n              isConstructed: true\n            },\n            isConstructed: true\n          });\n          var offset = 0;\n          var length = this.eContent.valueBlock.valueHex.byteLength;\n\n          while (length > 0) {\n            var pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, offset + 65536 > this.eContent.valueBlock.valueHex.byteLength ? this.eContent.valueBlock.valueHex.byteLength - offset : 65536);\n\n            var _array = new ArrayBuffer(pieceView.length);\n\n            var _view = new Uint8Array(_array);\n\n            for (var i = 0; i < _view.length; i++) {\n              _view[i] = pieceView[i];\n            }\n\n            constrString.valueBlock.value.push(new asn1js.OctetString({\n              valueHex: _array\n            }));\n            length -= pieceView.length;\n            offset += pieceView.length;\n          }\n\n          this.eContent = constrString;\n        } //endregion\n\n      }\n    } //endregion\n    //region If input argument array contains \"schema\" for this object\n\n\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema); //endregion\n  } //**********************************************************************************\n\n  /**\r\n   * Return default values for all class members\r\n   * @param {string} memberName String name for a class member\r\n   */\n\n\n  _createClass(EncapsulatedContentInfo, [{\n    key: \"fromSchema\",\n    value: //**********************************************************************************\n\n    /**\r\n     * Convert parsed asn1js object into current class\r\n     * @param {!Object} schema\r\n     */\n    function fromSchema(schema) {\n      //region Clear input data first\n      clearProps(schema, [\"eContentType\", \"eContent\"]); //endregion\n      //region Check the schema is valid\n\n      var asn1 = asn1js.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\n        names: {\n          eContentType: \"eContentType\",\n          eContent: \"eContent\"\n        }\n      }));\n      if (asn1.verified === false) throw new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\"); //endregion\n      //region Get internal properties from parsed schema\n\n      this.eContentType = asn1.result.eContentType.valueBlock.toString();\n      if (\"eContent\" in asn1.result) this.eContent = asn1.result.eContent; //endregion\n    } //**********************************************************************************\n\n    /**\r\n     * Convert current object to asn1js object and set correct values\r\n     * @returns {Object} asn1js object\r\n     */\n\n  }, {\n    key: \"toSchema\",\n    value: function toSchema() {\n      //region Create array for output sequence \n      var outputArray = [];\n      outputArray.push(new asn1js.ObjectIdentifier({\n        value: this.eContentType\n      }));\n\n      if (\"eContent\" in this) {\n        if (EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false) {\n          outputArray.push(new asn1js.Constructed({\n            optional: true,\n            idBlock: {\n              tagClass: 3,\n              // CONTEXT-SPECIFIC\n              tagNumber: 0 // [0]\n\n            },\n            value: [this.eContent]\n          }));\n        }\n      } //endregion \n      //region Construct and return new ASN.1 schema for this object \n\n\n      return new asn1js.Sequence({\n        value: outputArray\n      }); //endregion \n    } //**********************************************************************************\n\n    /**\r\n     * Convertion for the class to JSON object\r\n     * @returns {Object}\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _object = {\n        eContentType: this.eContentType\n      };\n\n      if (\"eContent\" in this) {\n        if (EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false) _object.eContent = this.eContent.toJSON();\n      }\n\n      return _object;\n    } //**********************************************************************************\n\n  }], [{\n    key: \"defaultValues\",\n    value: function defaultValues(memberName) {\n      switch (memberName) {\n        case \"eContentType\":\n          return \"\";\n\n        case \"eContent\":\n          return new asn1js.OctetString();\n\n        default:\n          throw new Error(\"Invalid member name for EncapsulatedContentInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Compare values with default values for all class members\r\n     * @param {string} memberName String name for a class member\r\n     * @param {*} memberValue Value to compare with default value\r\n     */\n\n  }, {\n    key: \"compareWithDefault\",\n    value: function compareWithDefault(memberName, memberValue) {\n      switch (memberName) {\n        case \"eContentType\":\n          return memberValue === \"\";\n\n        case \"eContent\":\n          {\n            if (memberValue.idBlock.tagClass === 1 && memberValue.idBlock.tagNumber === 4) return memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\"));\n            return false;\n          }\n\n        default:\n          throw new Error(\"Invalid member name for EncapsulatedContentInfo class: \".concat(memberName));\n      }\n    } //**********************************************************************************\n\n    /**\r\n     * Return value of pre-defined ASN.1 schema for current class\r\n     *\r\n     * ASN.1 schema:\r\n     * ```asn1\r\n     * EncapsulatedContentInfo ::= SEQUENCE {\r\n     *    eContentType ContentType,\r\n     *    eContent [0] EXPLICIT OCTET STRING OPTIONAL } * Changed it to ANY, as in PKCS#7\r\n     * ```\r\n     *\r\n     * @param {Object} parameters Input parameters for the schema\r\n     * @returns {Object} asn1js schema object\r\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /**\r\n       * @type {Object}\r\n       * @property {string} [blockName]\r\n       * @property {string} [type]\r\n       * @property {string} [setName]\r\n       * @property {string} [values]\r\n       */\n      var names = getParametersValue(parameters, \"names\", {});\n      return new asn1js.Sequence({\n        name: names.blockName || \"\",\n        value: [new asn1js.ObjectIdentifier({\n          name: names.eContentType || \"\"\n        }), new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3,\n            // CONTEXT-SPECIFIC\n            tagNumber: 0 // [0]\n\n          },\n          value: [new asn1js.Any({\n            name: names.eContent || \"\"\n          }) // In order to aling this with PKCS#7 and CMS as well\n          ]\n        })]\n      });\n    }\n  }]);\n\n  return EncapsulatedContentInfo;\n}(); //**************************************************************************************\n\n\nexport { EncapsulatedContentInfo as default };","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/pkijs/src/EncapsulatedContentInfo.js"],"names":["asn1js","getParametersValue","clearProps","EncapsulatedContentInfo","parameters","eContentType","defaultValues","eContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","asn1","compareSchema","names","verified","Error","result","toString","outputArray","ObjectIdentifier","compareWithDefault","Constructed","optional","Sequence","_object","toJSON","memberName","memberValue","isEqual","name","blockName","Any"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncapsulatedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncapsulatedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc eContentType\r\n\t\t */\r\n\t\tthis.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\r\n\r\n\t\tif(\"eContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc eContent\r\n\t\t\t */\r\n\t\t\tthis.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\r\n\t\t\tif((this.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.eContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.eContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, ((offset + 65536) > this.eContent.valueBlock.valueHex.byteLength) ? (this.eContent.valueBlock.valueHex.byteLength - offset) : 65536);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.eContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\t{\r\n\t\t\t\t\tif((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\r\n\t\t\t\t\t\treturn (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\")));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncapsulatedContentInfo ::= SEQUENCE {\r\n\t *    eContentType ContentType,\r\n\t *    eContent [0] EXPLICIT OCTET STRING OPTIONAL } * Changed it to ANY, as in PKCS#7\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.eContentType || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Any({ name: (names.eContent || \"\") }) // In order to aling this with PKCS#7 and CMS as well\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"eContentType\",\r\n\t\t\t\"eContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncapsulatedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\teContentType: \"eContentType\",\r\n\t\t\t\t\teContent: \"eContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.eContentType = asn1.result.eContentType.valueBlock.toString();\r\n\t\tif(\"eContent\" in asn1.result)\r\n\t\t\tthis.eContent = asn1.result.eContent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.eContent]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\teContentType: this.eContentType\r\n\t\t};\r\n\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t\t_object.eContent = this.eContent.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _constants = require(\"../constants\");\n\nvar _parameter = _interopRequireDefault(require(\"../common/errors/parameter\"));\n\nvar SelfUtils = {};\nvar PSTN_DEVICE_TYPE = 'PROVISIONAL';\n/**\n * parses the relevant values for self: muted, guest, moderator, mediaStatus, state, joinedWith, pstnDevices, creator, id\n * @param {Object} self\n * @param {String} deviceId\n * @returns {undefined}\n */\n\nSelfUtils.parse = function (self, deviceId) {\n  if (self) {\n    var joinedWith = self.devices.find(function (device) {\n      return deviceId === device.url;\n    });\n    var pstnDevices = self.devices.filter(function (device) {\n      return PSTN_DEVICE_TYPE === device.deviceType;\n    });\n    return {\n      remoteMuted: SelfUtils.getRemoteMuted(self),\n      unmuteAllowed: SelfUtils.getUnmuteAllowed(self),\n      localAudioUnmuteRequested: SelfUtils.getLocalAudioUnmuteRequested(self),\n      localAudioUnmuteRequired: SelfUtils.getLocalAudioUnmuteRequired(self),\n      lastModified: SelfUtils.getLastModified(self),\n      modifiedBy: SelfUtils.getModifiedBy(self),\n      guest: self.guest,\n      moderator: self.moderator,\n      // cumulative media stats\n      mediaStatus: SelfUtils.getStatus(self.status),\n      // TODO: what should be the status if user has refreshed the page,\n      // check the joinedWith parameter and communicate to the user\n      state: self.state,\n      // TODO: give a proper name . With same device as login or different login`\n      // Some times we might have joined with both mobile and web\n      joinedWith: joinedWith,\n      pstnDevices: pstnDevices,\n      // current media stats is for the current device who has joined\n      currentMediaStatus: SelfUtils.getMediaStatus(joinedWith === null || joinedWith === void 0 ? void 0 : joinedWith.mediaSessions),\n      creator: self.isCreator,\n      // check if its used,\n      selfId: self.id,\n      selfIdentity: SelfUtils.getSelfIdentity(self),\n      selfUrl: self.url,\n      removed: self.removed\n    };\n  }\n\n  return null;\n};\n\nSelfUtils.getSelves = function (oldSelf, newSelf, deviceId) {\n  var previous = oldSelf && SelfUtils.parse(oldSelf, deviceId);\n  var current = newSelf && SelfUtils.parse(newSelf, deviceId);\n  var updates = {};\n  updates.isUnadmittedGuest = SelfUtils.isUnadmittedGuest(current);\n  updates.isAdmittedGuest = SelfUtils.isAdmittedGuest(previous, current);\n  updates.isMutedByOthersChanged = SelfUtils.mutedByOthersChanged(previous, current);\n  updates.localAudioUnmuteRequestedByServer = SelfUtils.localAudioUnmuteRequestedByServer(previous, current);\n  updates.localAudioUnmuteRequiredByServer = SelfUtils.localAudioUnmuteRequiredByServer(previous, current);\n  updates.moderatorChanged = SelfUtils.moderatorChanged(previous, current);\n  updates.isMediaInactiveOrReleased = SelfUtils.wasMediaInactiveOrReleased(previous, current);\n  updates.isMediaInactive = SelfUtils.isMediaInactive(previous, current);\n  updates.audioStateChange = (previous === null || previous === void 0 ? void 0 : previous.currentMediaStatus.audio) !== current.currentMediaStatus.audio;\n  updates.videoStateChange = (previous === null || previous === void 0 ? void 0 : previous.currentMediaStatus.video) !== current.currentMediaStatus.video;\n  updates.shareStateChange = (previous === null || previous === void 0 ? void 0 : previous.currentMediaStatus.share) !== current.currentMediaStatus.share;\n  return {\n    previous: previous,\n    current: current,\n    updates: updates\n  };\n};\n\nSelfUtils.isMediaInactive = function (previous, current) {\n  if (previous && previous.joinedWith && previous.joinedWith.mediaSessions && current && current.joinedWith && current.joinedWith.mediaSessions) {\n    var previousMediaStatus = SelfUtils.getMediaStatus(previous.joinedWith.mediaSessions);\n    var currentMediaStatus = SelfUtils.getMediaStatus(current.joinedWith.mediaSessions);\n\n    if (previousMediaStatus.audio && currentMediaStatus.audio && previousMediaStatus.audio.state !== _constants.MEDIA_STATE.inactive && currentMediaStatus.audio.state === _constants.MEDIA_STATE.inactive && currentMediaStatus.audio.direction !== _constants.MEDIA_STATE.inactive) {\n      return true;\n    }\n\n    if (previousMediaStatus.video && currentMediaStatus.video && previousMediaStatus.video.state !== _constants.MEDIA_STATE.inactive && currentMediaStatus.video.state === _constants.MEDIA_STATE.inactive && currentMediaStatus.video.direction !== _constants.MEDIA_STATE.inactive) {\n      return true;\n    }\n\n    if (previousMediaStatus.share && currentMediaStatus.share && previousMediaStatus.share.state !== _constants.MEDIA_STATE.inactive && currentMediaStatus.share.state === _constants.MEDIA_STATE.inactive && currentMediaStatus.share.direction !== _constants.MEDIA_STATE.inactive) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n};\n\nSelfUtils.getLastModified = function (self) {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.lastModified) {\n    return null;\n  }\n\n  return self.controls.audio.meta.lastModified;\n};\n\nSelfUtils.getModifiedBy = function (self) {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.modifiedBy) {\n    return null;\n  }\n\n  return self.controls.audio.meta.modifiedBy;\n};\n/**\n * get the id from the self object\n * @param {Object} self\n * @returns {String}\n */\n\n\nSelfUtils.getSelfIdentity = function (self) {\n  if (!self && !self.person) {\n    return null;\n  }\n\n  return self.person.id;\n};\n/**\n * get the \"remote mute\" property from the self object\n * @param {Object} self\n * @returns {Boolean}\n */\n\n\nSelfUtils.getRemoteMuted = function (self) {\n  if (!self || !self.controls || !self.controls.audio) {\n    return null;\n  }\n\n  return self.controls.audio.muted;\n};\n\nSelfUtils.getLocalAudioUnmuteRequested = function (self) {\n  var _self$controls, _self$controls$audio;\n\n  return !!(self !== null && self !== void 0 && (_self$controls = self.controls) !== null && _self$controls !== void 0 && (_self$controls$audio = _self$controls.audio) !== null && _self$controls$audio !== void 0 && _self$controls$audio.requestedToUnmute);\n};\n\nSelfUtils.getUnmuteAllowed = function (self) {\n  if (!self || !self.controls || !self.controls.audio) {\n    return null;\n  }\n\n  return !self.controls.audio.disallowUnmute;\n};\n\nSelfUtils.getLocalAudioUnmuteRequired = function (self) {\n  var _self$controls2, _self$controls2$audio;\n\n  return !!(self !== null && self !== void 0 && (_self$controls2 = self.controls) !== null && _self$controls2 !== void 0 && (_self$controls2$audio = _self$controls2.audio) !== null && _self$controls2$audio !== void 0 && _self$controls2$audio.localAudioUnmuteRequired);\n};\n\nSelfUtils.getStatus = function (status) {\n  return {\n    audio: status.audioStatus,\n    video: status.videoStatus,\n    slides: status.videoSlidesStatus\n  };\n};\n/**\n * @param {Object} oldSelf\n * @param {Object} changedSelf\n * @returns {Boolean}\n */\n\n\nSelfUtils.wasMediaInactiveOrReleased = function () {\n  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var changedSelf = arguments.length > 1 ? arguments[1] : undefined;\n  return oldSelf.joinedWith && oldSelf.joinedWith.state === _constants._JOINED_ && changedSelf.joinedWith.state === _constants._LEFT_ && (changedSelf.joinedWith.reason === _constants.MEETING_END_REASON.INACTIVE || changedSelf.joinedWith.reason === _constants.MEETING_END_REASON.MEDIA_RELEASED);\n};\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\n\n\nSelfUtils.isLocusGuestUnadmitted = function (check) {\n  var _check$joinedWith, _check$joinedWith$int;\n\n  return check && ((_check$joinedWith = check.joinedWith) === null || _check$joinedWith === void 0 ? void 0 : (_check$joinedWith$int = _check$joinedWith.intent) === null || _check$joinedWith$int === void 0 ? void 0 : _check$joinedWith$int.type) === _constants._WAIT_ && check.state === _constants._IDLE_;\n};\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\n\n\nSelfUtils.isLocusGuestAdmitted = function (check) {\n  var _check$joinedWith2, _check$joinedWith2$in;\n\n  return check && ((_check$joinedWith2 = check.joinedWith) === null || _check$joinedWith2 === void 0 ? void 0 : (_check$joinedWith2$in = _check$joinedWith2.intent) === null || _check$joinedWith2$in === void 0 ? void 0 : _check$joinedWith2$in.type) !== _constants._WAIT_ && check.state === _constants._JOINED_;\n};\n/**\n * @param {Object} self\n * @returns {Boolean}\n * @throws {Error} when self is undefined\n */\n\n\nSelfUtils.isUnadmittedGuest = function (self) {\n  if (!self) {\n    throw new _parameter.default('self must be defined to determine if self is unadmitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(self);\n};\n\nSelfUtils.moderatorChanged = function (oldSelf, changedSelf) {\n  if (!oldSelf) {\n    return true;\n  }\n\n  if (!changedSelf) {\n    throw new _parameter.default('New self must be defined to determine if self transitioned moderator status.');\n  }\n\n  return oldSelf.moderator !== changedSelf.moderator;\n};\n/**\n * @param {Object} oldSelf\n * @param {Object} changedSelf\n * @returns {Boolean}\n * @throws {Error} if changed self was undefined\n */\n\n\nSelfUtils.isAdmittedGuest = function (oldSelf, changedSelf) {\n  if (!oldSelf) {\n    // if there was no previous locus, it couldn't have been admitted yet\n    return false;\n  }\n\n  if (!changedSelf) {\n    throw new _parameter.default('New self must be defined to determine if self transitioned to admitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(oldSelf) && SelfUtils.isLocusGuestAdmitted(changedSelf);\n};\n\nSelfUtils.mutedByOthersChanged = function (oldSelf, changedSelf) {\n  if (!changedSelf) {\n    throw new _parameter.default('New self must be defined to determine if self was muted by others.');\n  }\n\n  if (!oldSelf || oldSelf.remoteMuted === null) {\n    if (changedSelf.remoteMuted) {\n      return true; // this happens when mute on-entry is enabled\n    } // we don't want to be sending the 'meeting:self:unmutedByOthers' notification on meeting join\n\n\n    return false;\n  }\n\n  return changedSelf.remoteMuted !== null && (oldSelf.remoteMuted !== changedSelf.remoteMuted || changedSelf.remoteMuted && oldSelf.unmuteAllowed !== changedSelf.unmuteAllowed);\n};\n\nSelfUtils.localAudioUnmuteRequestedByServer = function () {\n  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var changedSelf = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (!changedSelf) {\n    throw new _parameter.default('New self must be defined to determine if self received request to unmute.');\n  }\n\n  return changedSelf.localAudioUnmuteRequested && !oldSelf.localAudioUnmuteRequested;\n};\n\nSelfUtils.localAudioUnmuteRequiredByServer = function () {\n  var oldSelf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var changedSelf = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (!changedSelf) {\n    throw new _parameter.default('New self must be defined to determine if localAudioUnmuteRequired changed.');\n  }\n\n  return !changedSelf.remoteMuted && changedSelf.localAudioUnmuteRequired && oldSelf.localAudioUnmuteRequired !== changedSelf.localAudioUnmuteRequired;\n};\n/**\n * extract the sipUrl from the partner\n * @param {Object} partner\n * @param {Object} info\n * @returns {Object}\n */\n\n\nSelfUtils.getSipUrl = function (partner, type, sipUri) {\n  // For webex meeting the sipUrl gets updated in info parser\n  if (partner && type === _constants._CALL_) {\n    return {\n      sipUri: partner.person.sipUrl || partner.person.id\n    };\n  }\n\n  return {\n    sipUri: sipUri\n  };\n};\n\nSelfUtils.getMediaStatus = function () {\n  var mediaSessions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var mediaStatus = {\n    audio: {},\n    video: {},\n    share: {}\n  };\n  mediaStatus.audio = mediaSessions.find(function (media) {\n    return media.mediaType === _constants.AUDIO && media.mediaContent === _constants.MediaContent.main;\n  });\n  mediaStatus.video = mediaSessions.find(function (media) {\n    return media.mediaType === _constants.VIDEO && media.mediaContent === _constants.MediaContent.main;\n  });\n  mediaStatus.share = mediaSessions.find(function (media) {\n    return media.mediaType === _constants.VIDEO && media.mediaContent === _constants.MediaContent.slides;\n  });\n  return mediaStatus;\n};\n\nvar _default = SelfUtils;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["SelfUtils","PSTN_DEVICE_TYPE","parse","self","deviceId","joinedWith","devices","find","device","url","pstnDevices","filter","deviceType","remoteMuted","getRemoteMuted","unmuteAllowed","getUnmuteAllowed","localAudioUnmuteRequested","getLocalAudioUnmuteRequested","localAudioUnmuteRequired","getLocalAudioUnmuteRequired","lastModified","getLastModified","modifiedBy","getModifiedBy","guest","moderator","mediaStatus","getStatus","status","state","currentMediaStatus","getMediaStatus","mediaSessions","creator","isCreator","selfId","id","selfIdentity","getSelfIdentity","selfUrl","removed","getSelves","oldSelf","newSelf","previous","current","updates","isUnadmittedGuest","isAdmittedGuest","isMutedByOthersChanged","mutedByOthersChanged","localAudioUnmuteRequestedByServer","localAudioUnmuteRequiredByServer","moderatorChanged","isMediaInactiveOrReleased","wasMediaInactiveOrReleased","isMediaInactive","audioStateChange","audio","videoStateChange","video","shareStateChange","share","previousMediaStatus","MEDIA_STATE","inactive","direction","controls","meta","person","muted","_self$controls","_self$controls$audio","requestedToUnmute","disallowUnmute","_self$controls2","_self$controls2$audio","audioStatus","videoStatus","slides","videoSlidesStatus","changedSelf","_JOINED_","_LEFT_","reason","MEETING_END_REASON","INACTIVE","MEDIA_RELEASED","isLocusGuestUnadmitted","check","intent","type","_WAIT_","_IDLE_","isLocusGuestAdmitted","ParameterError","getSipUrl","partner","sipUri","_CALL_","sipUrl","media","mediaType","AUDIO","mediaContent","MediaContent","main","VIDEO"],"sources":["selfUtils.js"],"sourcesContent":["\nimport {\n  _IDLE_,\n  _JOINED_,\n  _CALL_,\n  _WAIT_,\n  _LEFT_,\n  MEETING_END_REASON,\n  MEDIA_STATE,\n  AUDIO,\n  VIDEO,\n  MediaContent\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst SelfUtils = {};\nconst PSTN_DEVICE_TYPE = 'PROVISIONAL';\n\n/**\n * parses the relevant values for self: muted, guest, moderator, mediaStatus, state, joinedWith, pstnDevices, creator, id\n * @param {Object} self\n * @param {String} deviceId\n * @returns {undefined}\n */\nSelfUtils.parse = (self, deviceId) => {\n  if (self) {\n    const joinedWith = self.devices.find((device) => deviceId === device.url);\n    const pstnDevices = self.devices.filter((device) => PSTN_DEVICE_TYPE === device.deviceType);\n\n    return {\n      remoteMuted: SelfUtils.getRemoteMuted(self),\n      unmuteAllowed: SelfUtils.getUnmuteAllowed(self),\n      localAudioUnmuteRequested: SelfUtils.getLocalAudioUnmuteRequested(self),\n      localAudioUnmuteRequired: SelfUtils.getLocalAudioUnmuteRequired(self),\n      lastModified: SelfUtils.getLastModified(self),\n      modifiedBy: SelfUtils.getModifiedBy(self),\n      guest: self.guest,\n      moderator: self.moderator,\n      // cumulative media stats\n      mediaStatus: SelfUtils.getStatus(self.status),\n      // TODO: what should be the status if user has refreshed the page,\n      // check the joinedWith parameter and communicate to the user\n      state: self.state,\n      // TODO: give a proper name . With same device as login or different login`\n      // Some times we might have joined with both mobile and web\n      joinedWith,\n      pstnDevices,\n      // current media stats is for the current device who has joined\n      currentMediaStatus: SelfUtils.getMediaStatus(\n        joinedWith?.mediaSessions\n      ),\n      creator: self.isCreator, // check if its used,\n      selfId: self.id,\n      selfIdentity: SelfUtils.getSelfIdentity(self),\n      selfUrl: self.url,\n      removed: self.removed\n    };\n  }\n\n  return null;\n};\n\nSelfUtils.getSelves = (oldSelf, newSelf, deviceId) => {\n  const previous = oldSelf && SelfUtils.parse(oldSelf, deviceId);\n  const current = newSelf && SelfUtils.parse(newSelf, deviceId);\n  const updates = {};\n\n  updates.isUnadmittedGuest = SelfUtils.isUnadmittedGuest(current);\n  updates.isAdmittedGuest = SelfUtils.isAdmittedGuest(previous, current);\n  updates.isMutedByOthersChanged = SelfUtils.mutedByOthersChanged(previous, current);\n  updates.localAudioUnmuteRequestedByServer = SelfUtils.localAudioUnmuteRequestedByServer(previous, current);\n  updates.localAudioUnmuteRequiredByServer = SelfUtils.localAudioUnmuteRequiredByServer(previous, current);\n  updates.moderatorChanged = SelfUtils.moderatorChanged(previous, current);\n  updates.isMediaInactiveOrReleased = SelfUtils.wasMediaInactiveOrReleased(previous, current);\n\n  updates.isMediaInactive = SelfUtils.isMediaInactive(previous, current);\n  updates.audioStateChange = previous?.currentMediaStatus.audio !== current.currentMediaStatus.audio;\n  updates.videoStateChange = previous?.currentMediaStatus.video !== current.currentMediaStatus.video;\n  updates.shareStateChange = previous?.currentMediaStatus.share !== current.currentMediaStatus.share;\n\n  return {\n    previous,\n    current,\n    updates\n  };\n};\n\nSelfUtils.isMediaInactive = (previous, current) => {\n  if (\n    previous &&\n    previous.joinedWith &&\n    previous.joinedWith.mediaSessions &&\n    current &&\n    current.joinedWith &&\n    current.joinedWith.mediaSessions\n  ) {\n    const previousMediaStatus = SelfUtils.getMediaStatus(\n      previous.joinedWith.mediaSessions\n    );\n    const currentMediaStatus = SelfUtils.getMediaStatus(\n      current.joinedWith.mediaSessions\n    );\n\n    if (\n      previousMediaStatus.audio && currentMediaStatus.audio &&\n      previousMediaStatus.audio.state !== MEDIA_STATE.inactive &&\n      currentMediaStatus.audio.state === MEDIA_STATE.inactive &&\n      currentMediaStatus.audio.direction !== MEDIA_STATE.inactive\n    ) {\n      return true;\n    }\n\n    if (\n      previousMediaStatus.video && currentMediaStatus.video &&\n      previousMediaStatus.video.state !== MEDIA_STATE.inactive &&\n      currentMediaStatus.video.state === MEDIA_STATE.inactive &&\n      currentMediaStatus.video.direction !== MEDIA_STATE.inactive\n    ) {\n      return true;\n    }\n\n    if (\n      previousMediaStatus.share && currentMediaStatus.share &&\n      previousMediaStatus.share.state !== MEDIA_STATE.inactive &&\n      currentMediaStatus.share.state === MEDIA_STATE.inactive &&\n      currentMediaStatus.share.direction !== MEDIA_STATE.inactive\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n};\n\nSelfUtils.getLastModified = (self) => {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.lastModified) {\n    return null;\n  }\n\n  return self.controls.audio.meta.lastModified;\n};\n\nSelfUtils.getModifiedBy = (self) => {\n  if (!self || !self.controls || !self.controls.audio || !self.controls.audio.meta || !self.controls.audio.meta.modifiedBy) {\n    return null;\n  }\n\n  return self.controls.audio.meta.modifiedBy;\n};\n\n/**\n * get the id from the self object\n * @param {Object} self\n * @returns {String}\n */\nSelfUtils.getSelfIdentity = (self) => {\n  if (!self && !self.person) {\n    return null;\n  }\n\n  return self.person.id;\n};\n\n/**\n * get the \"remote mute\" property from the self object\n * @param {Object} self\n * @returns {Boolean}\n */\nSelfUtils.getRemoteMuted = (self) => {\n  if (!self || !self.controls || !self.controls.audio) {\n    return null;\n  }\n\n  return self.controls.audio.muted;\n};\n\nSelfUtils.getLocalAudioUnmuteRequested = (self) => !!self?.controls?.audio?.requestedToUnmute;\n\nSelfUtils.getUnmuteAllowed = (self) => {\n  if (!self || !self.controls || !self.controls.audio) {\n    return null;\n  }\n\n  return !self.controls.audio.disallowUnmute;\n};\n\n\nSelfUtils.getLocalAudioUnmuteRequired = (self) => !!self?.controls?.audio?.localAudioUnmuteRequired;\n\nSelfUtils.getStatus = (status) => ({\n  audio: status.audioStatus,\n  video: status.videoStatus,\n  slides: status.videoSlidesStatus\n});\n\n\n/**\n * @param {Object} oldSelf\n * @param {Object} changedSelf\n * @returns {Boolean}\n */\nSelfUtils.wasMediaInactiveOrReleased = (oldSelf = {}, changedSelf) => oldSelf.joinedWith && oldSelf.joinedWith.state === _JOINED_ && changedSelf.joinedWith.state === _LEFT_ &&\n (changedSelf.joinedWith.reason === MEETING_END_REASON.INACTIVE || changedSelf.joinedWith.reason === MEETING_END_REASON.MEDIA_RELEASED);\n\n\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\nSelfUtils.isLocusGuestUnadmitted = (check) => check && check.joinedWith?.intent?.type === _WAIT_ && check.state === _IDLE_;\n\n/**\n * @param {Object} check\n * @returns {Boolean}\n */\nSelfUtils.isLocusGuestAdmitted = (check) => check && check.joinedWith?.intent?.type !== _WAIT_ && check.state === _JOINED_;\n\n/**\n * @param {Object} self\n * @returns {Boolean}\n * @throws {Error} when self is undefined\n */\nSelfUtils.isUnadmittedGuest = (self) => {\n  if (!self) {\n    throw new ParameterError('self must be defined to determine if self is unadmitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(self);\n};\n\nSelfUtils.moderatorChanged = (oldSelf, changedSelf) => {\n  if (!oldSelf) {\n    return true;\n  }\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self transitioned moderator status.');\n  }\n\n  return oldSelf.moderator !== changedSelf.moderator;\n};\n\n/**\n * @param {Object} oldSelf\n * @param {Object} changedSelf\n * @returns {Boolean}\n * @throws {Error} if changed self was undefined\n */\nSelfUtils.isAdmittedGuest = (oldSelf, changedSelf) => {\n  if (!oldSelf) {\n    // if there was no previous locus, it couldn't have been admitted yet\n    return false;\n  }\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self transitioned to admitted as guest.');\n  }\n\n  return SelfUtils.isLocusGuestUnadmitted(oldSelf) && SelfUtils.isLocusGuestAdmitted(changedSelf);\n};\n\nSelfUtils.mutedByOthersChanged = (oldSelf, changedSelf) => {\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self was muted by others.');\n  }\n\n  if (!oldSelf || (oldSelf.remoteMuted === null)) {\n    if (changedSelf.remoteMuted) {\n      return true; // this happens when mute on-entry is enabled\n    }\n\n    // we don't want to be sending the 'meeting:self:unmutedByOthers' notification on meeting join\n    return false;\n  }\n\n  return (changedSelf.remoteMuted !== null) &&\n    ((oldSelf.remoteMuted !== changedSelf.remoteMuted) || (changedSelf.remoteMuted && (oldSelf.unmuteAllowed !== changedSelf.unmuteAllowed)));\n};\n\nSelfUtils.localAudioUnmuteRequestedByServer = (oldSelf = {}, changedSelf) => {\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if self received request to unmute.');\n  }\n\n  return changedSelf.localAudioUnmuteRequested && !oldSelf.localAudioUnmuteRequested;\n};\n\n\nSelfUtils.localAudioUnmuteRequiredByServer = (oldSelf = {}, changedSelf) => {\n  if (!changedSelf) {\n    throw new ParameterError('New self must be defined to determine if localAudioUnmuteRequired changed.');\n  }\n\n  return !changedSelf.remoteMuted && changedSelf.localAudioUnmuteRequired && (oldSelf.localAudioUnmuteRequired !== changedSelf.localAudioUnmuteRequired);\n};\n\n/**\n * extract the sipUrl from the partner\n * @param {Object} partner\n * @param {Object} info\n * @returns {Object}\n */\n\nSelfUtils.getSipUrl = (partner, type, sipUri) => {\n  // For webex meeting the sipUrl gets updated in info parser\n  if (partner && type === _CALL_) {\n    return {sipUri: partner.person.sipUrl || partner.person.id};\n  }\n\n  return {sipUri};\n};\n\nSelfUtils.getMediaStatus = (mediaSessions = []) => {\n  const mediaStatus = {\n    audio: {},\n    video: {},\n    share: {}\n  };\n\n  mediaStatus.audio = mediaSessions.find((media) => media.mediaType === AUDIO && media.mediaContent === MediaContent.main);\n  mediaStatus.video = mediaSessions.find((media) => media.mediaType === VIDEO && media.mediaContent === MediaContent.main);\n  mediaStatus.share = mediaSessions.find((media) => media.mediaType === VIDEO && media.mediaContent === MediaContent.slides);\n\n  return mediaStatus;\n};\n\n\nexport default SelfUtils;\n"]},"metadata":{},"sourceType":"script"}
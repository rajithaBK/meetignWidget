{"ast":null,"code":"// GENERATED FILE. DO NOT EDIT.\nvar Long = function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n\n  var wasm = null;\n\n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n\n\n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n\n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n\n\n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n\n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n\n\n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n\n\n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n\n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n\n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n\n    if (unsigned) {\n      value >>>= 0;\n\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n\n\n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n\n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n\n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n\n\n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n\n\n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n\n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n\n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n\n\n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n\n\n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n\n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n\n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n\n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n\n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n\n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n\n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n\n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n\n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n\n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n\n\n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n\n\n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n\n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) {\n          digits = '0' + digits;\n        }\n\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n\n\n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n\n\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n\n\n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n\n\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n\n\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) != 0) break;\n    }\n\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n\n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n\n\n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n\n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n\n\n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n\n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n\n\n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n\n\n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n\n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n\n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n\n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n\n\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n\n\n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n\n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n\n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n\n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n\n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n\n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n\n    rem = this;\n\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n\n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n\n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n\n\n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n\n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n\n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n\n\n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n\n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n\n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n\n\n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n\n\n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n\n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n\n\n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n\n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n\n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n\n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n\n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n\n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n\n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n\n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n\n\n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n\n\n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n\n\n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n\n\n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n\n\n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n\n\n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n\n\n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n\n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n}({});\n\nif (typeof define === 'function' && define.amd) define([], function () {\n  return Long;\n});else if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;","map":{"version":3,"sources":["C:/Users/rkanthet/Documents/test_window_object/node_modules/long/umd/index.js"],"names":["Long","exports","Object","defineProperty","value","default","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","prototype","__isLong__","isLong","obj","ctz32","c","Math","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","_default","define","amd","module"],"mappings":"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","sourcesContent":["// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n"]},"metadata":{},"sourceType":"script"}
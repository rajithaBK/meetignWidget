import{throwError as e}from"rxjs";class t{constructor(e){this.datasource=e}connect(){return Promise.reject(new Error("connect() must be defined in WebexAdapter"))}disconnect(){return Promise.reject(new Error("disconnect() must be defined in WebexAdapter"))}}class r extends t{getActivity(t){return e(new Error("getActivity(ID) must be defined in ActivitiesAdapter"))}}const n={JOIN:"JOIN",CANCEL:"CANCEL",CLOSE:"CLOSE",TOGGLE:"TOGGLE",MULTISELECT:"MULTISELECT"},i={ACTIVE:"active",INACTIVE:"inactive",DISABLED:"disabled"},s={NOT_JOINED:"NOT_JOINED",LOBBY:"LOBBY",JOINED:"JOINED",LEFT:"LEFT"},o={ASKING:"ASKING",ALLOWED:"ALLOWED",DENIED:"DENIED",DISMISSED:"DISMISSED",ERROR:"ERROR",IGNORED:"IGNORED"};class d extends t{constructor(e){super(e),this.meetingControls={}}createMeeting(t){return e(new Error("createMeeting(destination) must be defined in MeetingsAdapter"))}incomingMeeting(t){return e(new Error("incomingMeeting(destination) must be defined in MeetingsAdapter"))}getMeeting(t){return e(new Error("getMeeting(ID) must be defined in MeetingsAdapter"))}joinMeeting(e){throw new Error("joinMeeting(ID) must be defined in MeetingsAdapter")}leaveMeeting(e){throw new Error("leaveMeeting(ID) must be defined in MeetingsAdapter")}supportedControls(){return e(new Error("supportedControls() must be defined in MeetingsAdapter"))}clearPasswordRequiredFlag(e){throw new Error("clearPasswordRequiredFlag(ID) must be defined in MeetingsAdapter")}clearInvalidPasswordFlag(e){throw new Error("clearInvalidPasswordFlag(ID) must be defined in MeetingsAdapter")}}const a={ROOM:"room",MEETING:"meeting"};class E extends t{getMembersFromDestination(t,r){return e(new Error("getMembersFromDestination(destinationID, destinationType) must be defined in MembershipsAdapter"))}}class g extends t{getOrg(t){return e(new Error("getOrg(ID) must be defined in OrganizationsAdapter"))}}const c={ACTIVE:"active",BOT:"bot",CALL:"call",DO_NOT_DISTURB:"dnd",INACTIVE:"inactive",MEETING:"meeting",OUT_OF_OFFICE:"ooo",PRESENTING:"presenting",SELF:"self",TYPING:"typing"};class I extends t{getMe(){return e(new Error("getMe() must be defined in PeopleAdapter"))}getPerson(t){return e(new Error("getPerson(ID) must be defined in PeopleAdapter"))}}const m={GROUP:"group",DIRECT:"direct"};class u extends t{getRoom(t){return e(new Error("getRoom(ID) must be defined in RoomsAdapter"))}getRoomActivities(t){return e(new Error("getRoomActivities(ID) must be defined in RoomsAdapter"))}getPreviousRoomActivities(t){return e(new Error("getPreviousRoomActivities(ID) must be defined in RoomsAdapter"))}hasMoreActivities(e){throw new Error("hasMoreActivities(ID) must be defined in RoomsAdapter")}}export{r as ActivitiesAdapter,a as DestinationType,o as MediaPermissions,i as MeetingControlState,n as MeetingControlType,s as MeetingState,d as MeetingsAdapter,E as MembershipsAdapter,g as OrganizationsAdapter,I as PeopleAdapter,c as PersonStatus,m as RoomType,u as RoomsAdapter,t as WebexAdapter};
//# sourceMappingURL=webex-component-adapter-interfaces.es.min.js.map

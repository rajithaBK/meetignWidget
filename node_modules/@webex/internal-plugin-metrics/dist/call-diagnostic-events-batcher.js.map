{"version":3,"sources":["call-diagnostic-events-batcher.js"],"names":["CallDiagnosticEventsBatcher","Batcher","extend","namespace","getBuildType","webClientDomain","includes","process","env","NODE_ENV","prepareItem","item","origin","buildType","event","eventData","networkType","eventPayload","resolve","prepareRequest","queue","forEach","originTime","sent","Date","toISOString","submitHttpRequest","payload","webex","request","method","service","resource","body","metrics"],"mappings":";;;;;;;;;;;;;;;;AAIA;;AAJA;AACA;AACA;AAIA,IAAMA,2BAA2B,GAAGC,iBAAQC,MAAR,CAAe;AACjDC,EAAAA,SAAS,EAAE,SADsC;;AAGjD;AACF;AACA;AACA;AACEC,EAAAA,YAPiD,wBAOpCC,eAPoC,EAOnB;AAC5B,QACEA,eAAe,SAAf,IAAAA,eAAe,WAAf,IAAAA,eAAe,CAAEC,QAAjB,CAA0B,iBAA1B,KACAD,eADA,aACAA,eADA,eACAA,eAAe,CAAEC,QAAjB,CAA0B,WAA1B,CADA,IAEAD,eAFA,aAEAA,eAFA,eAEAA,eAAe,CAAEC,QAAjB,CAA0B,WAA1B,CAFA,IAGAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAJ3B,EAKE;AACA,aAAO,MAAP;AACD;;AAED,WAAOF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,MAAxC,GAAiD,MAAxD;AACD,GAlBgD;AAoBjDC,EAAAA,WApBiD,uBAoBrCC,IApBqC,EAoB/B;AAAA;;AAChB;AACA;AACA,QAAMC,MAAM,GAAG;AACbC,MAAAA,SAAS,EAAE,KAAKT,YAAL,gBAAkBO,IAAI,CAACG,KAAvB,yEAAkB,YAAYC,SAA9B,0DAAkB,sBAAuBV,eAAzC,CADE;AAEbW,MAAAA,WAAW,EAAE;AAFA,KAAf;AAKAL,IAAAA,IAAI,CAACM,YAAL,CAAkBL,MAAlB,GAA2B,qBAAcA,MAAd,EAAsBD,IAAI,CAACM,YAAL,CAAkBL,MAAxC,CAA3B;AAEA,WAAO,iBAAQM,OAAR,CAAgBP,IAAhB,CAAP;AACD,GA/BgD;AAiCjDQ,EAAAA,cAjCiD,0BAiClCC,KAjCkC,EAiC3B;AACpB;AACAA,IAAAA,KAAK,CAACC,OAAN,CAAc,UAACV,IAAD,EAAU;AACtBA,MAAAA,IAAI,CAACM,YAAL,CAAkBK,UAAlB,GAA+BX,IAAI,CAACM,YAAL,CAAkBK,UAAlB,IAAgC,EAA/D;AACAX,MAAAA,IAAI,CAACM,YAAL,CAAkBK,UAAlB,CAA6BC,IAA7B,GAAoC,IAAIC,IAAJ,GAAWC,WAAX,EAApC;AACD,KAHD;AAKA,WAAO,iBAAQP,OAAR,CAAgBE,KAAhB,CAAP;AACD,GAzCgD;AA2CjDM,EAAAA,iBA3CiD,6BA2C/BC,OA3C+B,EA2CtB;AACzB,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,MAAAA,MAAM,EAAE,MADgB;AAExBC,MAAAA,OAAO,EAAE,SAFe;AAGxBC,MAAAA,QAAQ,EAAE,eAHc;AAIxBC,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAEP;AADL;AAJkB,KAAnB,CAAP;AAQD;AApDgD,CAAf,CAApC;;eAuDe3B,2B","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport Batcher from './batcher';\n\nconst CallDiagnosticEventsBatcher = Batcher.extend({\n  namespace: 'Metrics',\n\n  /**\n   * @param {string} webClientDomain\n   * @returns {string}\n  */\n  getBuildType(webClientDomain) {\n    if (\n      webClientDomain?.includes('teams.webex.com') ||\n      webClientDomain?.includes('localhost') ||\n      webClientDomain?.includes('127.0.0.1') ||\n      process.env.NODE_ENV !== 'production'\n    ) {\n      return 'test';\n    }\n\n    return process.env.NODE_ENV === 'production' ? 'prod' : 'test';\n  },\n\n  prepareItem(item) {\n    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n    const origin = {\n      buildType: this.getBuildType(item.event?.eventData?.webClientDomain),\n      networkType: 'unknown'\n    };\n\n    item.eventPayload.origin = Object.assign(origin, item.eventPayload.origin);\n\n    return Promise.resolve(item);\n  },\n\n  prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach((item) => {\n      item.eventPayload.originTime = item.eventPayload.originTime || {};\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n\n    return Promise.resolve(queue);\n  },\n\n  submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n\nexport default CallDiagnosticEventsBatcher;\n"]}
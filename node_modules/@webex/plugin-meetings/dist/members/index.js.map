{"version":3,"sources":["index.js"],"names":["Members","attrs","options","MEETINGS","membersRequest","MembersRequest","membersCollection","MembersCollection","locusUrl","hostId","type","selfId","mediaShareContentId","mediaShareWhiteboardId","recordingId","payload","newSelfId","oldSelfId","newSelf","id","oldSelf","theSelf","get","setIsSelf","notSelf","Trigger","trigger","file","function","EVENT_TRIGGERS","MEMBERS_SELF_UPDATE","activeSelfId","endedSelfId","newHostId","oldHostId","newHost","oldHost","theHost","setIsHost","notHost","MEMBERS_HOST_UPDATE","activeHostId","endedHostId","delta","handleLocusInfoUpdatedParticipants","full","handleMembersUpdate","MEMBERS_UPDATE","currentContent","current","content","previousContent","previous","currentWhiteboard","whiteboard","previousWhiteboard","whoSharing","whoStopped","beneficiaryId","disposition","FLOOR_ACTION","GRANTED","RELEASED","shareMember","setIsContentSharing","stopMember","MEMBERS_CONTENT_UPDATE","activeSharingId","endedSharingId","setLocusUrl","setType","membersUpdate","updated","constructMembers","added","getAll","list","forEach","member","set","participants","LoggerProxy","logger","warn","memberUpdate","update","locus","url","ParameterError","owner","info","fullState","self","person","contentId","contentMediaShare","mediaShares","length","find","mediaShare","name","CONTENT","floor","beneficiary","whiteboardId","whiteboardMediaShare","WHITEBOARD","participant","hideInRoster","existing","push","Member","contentSharingId","whiteboardSharingId","invitee","alertIfActive","reject","MembersUtil","isInvalidInvitee","generateAddMemberOptions","addMembers","cancelPhoneInviteOptions","cancelPhoneInvite","memberIds","generateAdmitMemberOptions","admitMember","memberId","generateRemoveMemberOptions","removeMember","mute","generateMuteMemberOptions","muteMember","moderator","generateTransferHostMemberOptions","transferHostToMember","tones","deviceArray","devices","device","deviceType","genderateSendDTMFOptions","sendDialPadKey","Error","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;IACqBA,O;;;;;AAGnB;AACF;AACA;AACA;AACA;AACA;AACE,mBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;AAC1B,8BAAM,EAAN,EAAUA,OAAV;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAR8B,4FARhBC,mBAQgB;AAS1B,UAAKC,cAAL,GAAsB,IAAIC,gBAAJ,CAAmB,EAAnB,EAAuBH,OAAvB,CAAtB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKI,iBAAL,GAAyB,IAAIC,mBAAJ,EAAzB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,QAAL,GAAgBP,KAAK,CAACO,QAAN,IAAkB,IAAlC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,IAAL,GAAY,IAAZ;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,MAAL,GAAc,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,mBAAL,GAA2B,IAA3B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,sBAAL,GAA8B,IAA9B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,UAAKC,WAAL,GAAmB,IAAnB;AA/E0B;AAgF3B;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,yBAAgBC,OAAhB,EAAyB;AACvB,UAAIC,SAAS,GAAG,IAAhB;AACA,UAAIC,SAAS,GAAG,IAAhB;;AAEA,UAAIF,OAAJ,EAAa;AACX,YAAIA,OAAO,CAACG,OAAZ,EAAqB;AACnBF,UAAAA,SAAS,GAAGD,OAAO,CAACG,OAAR,CAAgBC,EAA5B;AACD;;AACD,YAAIJ,OAAO,CAACK,OAAZ,EAAqB;AACnBH,UAAAA,SAAS,GAAGF,OAAO,CAACK,OAAR,CAAgBD,EAA5B;AACD;AACF;;AACD,UAAIH,SAAJ,EAAe;AACb,YAAMK,OAAO,GAAG,KAAKf,iBAAL,CAAuBgB,GAAvB,CAA2BN,SAA3B,CAAhB;;AAEA,YAAIK,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACE,SAAR,CAAkB,IAAlB;AACD;AACF;;AACD,UAAIN,SAAJ,EAAe;AACb,YAAMO,OAAO,GAAG,KAAKlB,iBAAL,CAAuBgB,GAAvB,CAA2BL,SAA3B,CAAhB;;AAEA,YAAIO,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACD,SAAR,CAAkB,KAAlB;AACD;AACF;;AACD,WAAKZ,MAAL,GAAcK,SAAd;;AACAS,4BAAQC,OAAR,CACE,IADF,EAEE;AACEC,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OAFF,EAMEC,0BAAeC,mBANjB,EAOE;AACEC,QAAAA,YAAY,EAAEf,SADhB;AAEEgB,QAAAA,WAAW,EAAEf;AAFf,OAPF;AAYD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBF,OAAhB,EAAyB;AACvB,UAAIkB,SAAS,GAAG,IAAhB;AACA,UAAIC,SAAS,GAAG,IAAhB;;AAEA,UAAInB,OAAJ,EAAa;AACX,YAAIA,OAAO,CAACoB,OAAZ,EAAqB;AACnBF,UAAAA,SAAS,GAAGlB,OAAO,CAACoB,OAAR,CAAgBhB,EAA5B;AACD;;AACD,YAAIJ,OAAO,CAACqB,OAAZ,EAAqB;AACnBF,UAAAA,SAAS,GAAGnB,OAAO,CAACqB,OAAR,CAAgBjB,EAA5B;AACD;AACF;;AACD,UAAIc,SAAJ,EAAe;AACb,YAAMI,OAAO,GAAG,KAAK/B,iBAAL,CAAuBgB,GAAvB,CAA2BW,SAA3B,CAAhB;;AAEA,YAAII,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACC,SAAR,CAAkB,IAAlB;AACD;AACF;;AACD,UAAIJ,SAAJ,EAAe;AACb,YAAMK,OAAO,GAAG,KAAKjC,iBAAL,CAAuBgB,GAAvB,CAA2BY,SAA3B,CAAhB;;AAEA,YAAIK,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACD,SAAR,CAAkB,KAAlB;AACD;AACF;;AACD,WAAK7B,MAAL,GAAcwB,SAAd;;AACAR,4BAAQC,OAAR,CACE,IADF,EAEE;AACEC,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OAFF,EAMEC,0BAAeW,mBANjB,EAOE;AACEC,QAAAA,YAAY,EAAER,SADhB;AAEES,QAAAA,WAAW,EAAER;AAFf,OAPF;AAYD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,iCAAwBnB,OAAxB,EAAiC;AAC/B,UAAIA,OAAJ,EAAa;AACX,YAAM4B,KAAK,GAAG,KAAKC,kCAAL,CAAwC7B,OAAxC,CAAd;AACA,YAAM8B,IAAI,GAAG,KAAKC,mBAAL,CAAyBH,KAAzB,CAAb,CAFW,CAEmC;;AAE9ClB,8BAAQC,OAAR,CACE,IADF,EAEE;AACEC,UAAAA,IAAI,EAAE,SADR;AAEEC,UAAAA,QAAQ,EAAE;AAFZ,SAFF,EAMEC,0BAAekB,cANjB,EAOE;AACEJ,UAAAA,KAAK,EAALA,KADF;AAEEE,UAAAA,IAAI,EAAJA;AAFF,SAPF;AAYD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gCAAuB9B,OAAvB,EAAgC;AAAA;;AAC9B,UAAMiC,cAAc,uBAAGjC,OAAO,CAACkC,OAAX,qDAAG,iBAAiBC,OAAxC;AACA,UAAMC,eAAe,wBAAGpC,OAAO,CAACqC,QAAX,sDAAG,kBAAkBF,OAA1C;AACA,UAAMG,iBAAiB,wBAAGtC,OAAO,CAACkC,OAAX,sDAAG,kBAAiBK,UAA3C;AACA,UAAMC,kBAAkB,yBAAGxC,OAAO,CAACqC,QAAX,uDAAG,mBAAkBE,UAA7C;AACA,UAAIE,UAAU,GAAG,IAAjB;AACA,UAAIC,UAAU,GAAG,IAAjB;;AAEA,UAAIT,cAAJ,aAAIA,cAAJ,eAAIA,cAAc,CAAEU,aAApB,EAAmC;AACjC,YAAIV,cAAc,CAACW,WAAf,KAA+BC,wBAAaC,OAAhD,EAAyD;AACvDL,UAAAA,UAAU,GAAGR,cAAc,CAACU,aAA5B;AACA,eAAK7C,sBAAL,GAA8B,IAA9B;AACA,eAAKD,mBAAL,GAA2B4C,UAA3B;AACD;;AAED,YAAI,CAAAL,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEQ,WAAjB,MAAiCC,wBAAaC,OAAlD,EAA2D;AACzD,cAAIb,cAAc,CAACW,WAAf,KAA+BC,wBAAaE,QAAhD,EAA0D;AACxDL,YAAAA,UAAU,GAAGT,cAAc,CAACU,aAA5B;AACA,iBAAK9C,mBAAL,GAA2B,IAA3B;AACD,WAHD,MAIK,IAAIoC,cAAc,CAACW,WAAf,KAA+BC,wBAAaC,OAA5C,IAAuDb,cAAc,CAACU,aAAf,KAAiCP,eAAe,CAACO,aAA5G,EAA2H;AAC9HD,YAAAA,UAAU,GAAGN,eAAe,CAACO,aAA7B;AACD;AACF;AACF;;AAED,UAAIL,iBAAJ,aAAIA,iBAAJ,eAAIA,iBAAiB,CAAEK,aAAvB,EAAsC;AACpC,YAAIL,iBAAiB,CAACM,WAAlB,KAAkCC,wBAAaC,OAAnD,EAA4D;AAC1DL,UAAAA,UAAU,GAAGH,iBAAiB,CAACK,aAA/B;AACA,eAAK9C,mBAAL,GAA2B,IAA3B;AACA,eAAKC,sBAAL,GAA8B2C,UAA9B;AACD;;AAED,YAAI,CAAAD,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEI,WAApB,MAAoCC,wBAAaC,OAArD,EAA8D;AAC5D,cAAIR,iBAAiB,CAACM,WAAlB,KAAkCC,wBAAaE,QAAnD,EAA6D;AAC3DL,YAAAA,UAAU,GAAGJ,iBAAiB,CAACK,aAA/B;AACA,iBAAK7C,sBAAL,GAA8B,IAA9B;AACD,WAHD,MAIK,IAAIwC,iBAAiB,CAACM,WAAlB,KAAkCC,wBAAaC,OAA/C,IAA0DR,iBAAiB,CAACK,aAAlB,KAAoCH,kBAAkB,CAACG,aAArH,EAAoI;AACvID,YAAAA,UAAU,GAAGF,kBAAkB,CAACG,aAAhC;AACD;AACF;AACF;;AAED,UAAIF,UAAJ,EAAgB;AACd,YAAMO,WAAW,GAAG,KAAKzD,iBAAL,CAAuBgB,GAAvB,CAA2BkC,UAA3B,CAApB;;AAEA,YAAIO,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACC,mBAAZ,CAAgC,IAAhC;AACD;AACF;;AACD,UAAIP,UAAJ,EAAgB;AACd,YAAMQ,UAAU,GAAG,KAAK3D,iBAAL,CAAuBgB,GAAvB,CAA2BmC,UAA3B,CAAnB;;AAEA,YAAIQ,UAAJ,EAAgB;AACdA,UAAAA,UAAU,CAACD,mBAAX,CAA+B,KAA/B;AACD;AACF;;AAEDvC,4BAAQC,OAAR,CACE,IADF,EAEE;AACEC,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OAFF,EAMEC,0BAAeqC,sBANjB,EAOE;AACEC,QAAAA,eAAe,EAAEX,UADnB;AAEEY,QAAAA,cAAc,EAAEX;AAFlB,OAPF;AAYD;AAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAe1C,OAAf,EAAwB;AACtB,UAAIA,OAAJ,EAAa;AACX,aAAKsD,WAAL,CAAiB,IAAjB,EAAuBtD,OAAvB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kCAAyBA,OAAzB,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,UAAIA,OAAJ,EAAa;AACX,aAAKuD,OAAL,CAAavD,OAAb;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,6BAAoBwD,aAApB,EAAmC;AACjC,UAAIA,aAAJ,EAAmB;AACjB,YAAIA,aAAa,CAACC,OAAlB,EAA2B;AACzB,eAAKC,gBAAL,CAAsBF,aAAa,CAACC,OAApC;AACD;;AACD,YAAID,aAAa,CAACG,KAAlB,EAAyB;AACvB,eAAKD,gBAAL,CAAsBF,aAAa,CAACG,KAApC;AACD;AACF;;AAED,aAAO,KAAKpE,iBAAL,CAAuBqE,MAAvB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAAiBC,IAAjB,EAAuB;AAAA;;AACrBA,MAAAA,IAAI,CAACC,OAAL,CAAa,UAACC,MAAD,EAAY;AACvB,QAAA,MAAI,CAACxE,iBAAL,CAAuByE,GAAvB,CAA2BD,MAAM,CAAC3D,EAAlC,EAAsC2D,MAAtC;AACD,OAFD;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,4CAAmC/D,OAAnC,EAA4C;AAC1C,WAAKN,MAAL,GAAcM,OAAO,CAACN,MAAR,IAAkB,KAAKA,MAArC;AACA,WAAKE,MAAL,GAAcI,OAAO,CAACJ,MAAR,IAAkB,KAAKA,MAArC;AACA,WAAKG,WAAL,GAAmBC,OAAO,CAACD,WAA3B;;AACA,UAAI,CAACC,OAAO,CAACiE,YAAb,EAA2B;AACzBC,6BAAYC,MAAZ,CAAmBC,IAAnB,CAAwB,uFAAxB;AACD;;AACD,UAAMC,YAAY,GAAG,KAAKC,MAAL,CAAYtE,OAAO,CAACiE,YAApB,CAArB;AAEA,aAAOI,YAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAYE,KAAZ,EAAoC;AAAA,UAAjB9E,QAAiB,uEAAN,IAAM;;AAClC,UAAIA,QAAJ,EAAc;AACZ,aAAKA,QAAL,GAAgBA,QAAhB;AACD,OAFD,MAGK,IAAI8E,KAAK,KAAKA,KAAK,CAAC9E,QAAN,IAAkB8E,KAAK,CAACC,GAA7B,CAAT,EAA4C;AAC/C,aAAK/E,QAAL,GAAgB8E,KAAK,CAAC9E,QAAN,IAAkB8E,KAAK,CAACC,GAAxC;AACD,OAFI,MAGA;AACH,cAAM,IAAIC,kBAAJ,CAAmB,wFAAnB,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAUF,KAAV,EAAgC;AAAA,UAAf7E,MAAe,uEAAN,IAAM;;AAC9B,UAAIA,MAAJ,EAAY;AACV,aAAKA,MAAL,GAAcA,MAAd;AACD,OAFD,MAGK,IAAI6E,KAAJ,EAAW;AACd,aAAK7E,MAAL,GAAc6E,KAAK,IAAIA,KAAK,CAACG,KAAf,IAAwBH,KAAK,CAACG,KAAN,CAAYC,IAApC,GAA2CJ,KAAK,CAACG,KAAN,CAAYC,IAAvD,GAA8D,IAA5E;AACD,OAFI,MAGA;AACH,cAAM,IAAIF,kBAAJ,CAAmB,oFAAnB,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAAQG,SAAR,EAAgC;AAAA,UAAbjF,IAAa,uEAAN,IAAM;;AAC9B,UAAIA,IAAJ,EAAU;AACR,aAAKA,IAAL,GAAYA,IAAZ;AACD,OAFD,MAGK,IAAIiF,SAAJ,EAAe;AAClB,aAAKjF,IAAL,GAAaiF,SAAS,IAAIA,SAAS,CAACjF,IAAxB,IAAiC,IAA7C;AACD,OAFI,MAGA;AACH,cAAM,IAAI8E,kBAAJ,CAAmB,2FAAnB,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAUF,KAAV,EAAgC;AAAA,UAAf3E,MAAe,uEAAN,IAAM;;AAC9B,UAAIA,MAAJ,EAAY;AACV,aAAKA,MAAL,GAAcA,MAAd;AACD,OAFD,MAGK,IAAI2E,KAAJ,EAAW;AACd,aAAK3E,MAAL,GAAc2E,KAAK,IAAIA,KAAK,CAACM,IAAf,IAAuBN,KAAK,CAACM,IAAN,CAAWC,MAAlC,IAA4CP,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAkB1E,EAA9D,GAAmEmE,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAkB1E,EAArF,GAA0F,IAAxG;AACD,OAFI,MAGA;AACH,cAAM,IAAIqE,kBAAJ,CAAmB,oFAAnB,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gCAAuBF,KAAvB,EAA8BQ,SAA9B,EAAyC;AACvC,UAAIA,SAAJ,EAAe;AACb,aAAKlF,mBAAL,GAA2BkF,SAA3B;AACD,OAFD,MAGK,IAAIR,KAAJ,EAAW;AACd,YAAMS,iBAAiB,GACrBT,KAAK,CAACU,WAAN,IACAV,KAAK,CAACU,WAAN,CAAkBC,MADlB,IAEAX,KAAK,CAACU,WAAN,CAAkBE,IAAlB,CAAuB,UAACC,UAAD;AAAA,iBAAgBA,UAAU,CAACC,IAAX,KAAoBC,kBAApC;AAAA,SAAvB,CAHF;AAKA,aAAKzF,mBAAL,GACGmF,iBAAiB,IAChBA,iBAAiB,CAACO,KADnB,IAECP,iBAAiB,CAACO,KAAlB,CAAwBC,WAFzB,IAGCR,iBAAiB,CAACO,KAAlB,CAAwBC,WAAxB,CAAoCpF,EAHtC,IAIA,IALF;AAMD,OAZI,MAaA;AACH,cAAM,IAAIqE,kBAAJ,CAAmB,oFAAnB,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mCAA0BF,KAA1B,EAAiCkB,YAAjC,EAA+C;AAC7C,UAAIA,YAAJ,EAAkB;AAChB,aAAK3F,sBAAL,GAA8B2F,YAA9B;AACD,OAFD,MAGK,IAAIlB,KAAJ,EAAW;AACd,YAAMmB,oBAAoB,GACxBnB,KAAK,CAACU,WAAN,IACAV,KAAK,CAACU,WAAN,CAAkBC,MADlB,IAEAX,KAAK,CAACU,WAAN,CAAkBE,IAAlB,CAAuB,UAACC,UAAD;AAAA,iBAAgBA,UAAU,CAACC,IAAX,KAAoBM,qBAApC;AAAA,SAAvB,CAHF;AAKA,aAAK7F,sBAAL,GACG4F,oBAAoB,IACnBA,oBAAoB,CAACH,KADtB,IAECG,oBAAoB,CAACH,KAArB,CAA2BC,WAF5B,IAGCE,oBAAoB,CAACH,KAArB,CAA2BC,WAA3B,CAAuCpF,EAHzC,IAIA,IALF;AAMD,OAZI,MAaA;AACH,cAAM,IAAIqE,kBAAJ,CAAmB,oFAAnB,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAOR,YAAP,EAAqB;AAAA;;AACnB,UAAMT,aAAa,GAAG;AAACG,QAAAA,KAAK,EAAE,EAAR;AAAYF,QAAAA,OAAO,EAAE;AAArB,OAAtB;;AAEA,UAAIQ,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACH,OAAb,CAAqB,UAAC8B,WAAD,EAAiB;AACpC,cAAIA,WAAW,CAACC,YAAhB,EAA8B;AAC5B;AACD;;AACD,cAAMC,QAAQ,GAAG,MAAI,CAACvG,iBAAL,CAAuBgB,GAAvB,CAA2BqF,WAAW,CAACxF,EAAvC,CAAjB;;AAEA,cAAI0F,QAAJ,EAAc;AACZ;AACA;AACAtC,YAAAA,aAAa,CAACC,OAAd,CAAsBsC,IAAtB,CACE,IAAIC,eAAJ,CAAWJ,WAAX,EAAwB;AACtB7F,cAAAA,WAAW,EAAE,MAAI,CAACA,WADI;AAEtBH,cAAAA,MAAM,EAAE,MAAI,CAACA,MAFS;AAGtBF,cAAAA,MAAM,EAAE,MAAI,CAACA,MAHS;AAItBuG,cAAAA,gBAAgB,EAAE,MAAI,CAACpG,mBAJD;AAKtBqG,cAAAA,mBAAmB,EAAE,MAAI,CAACpG,sBALJ;AAMtBH,cAAAA,IAAI,EAAE,MAAI,CAACA;AANW,aAAxB,CADF;AAUD,WAbD,MAcK;AACH6D,YAAAA,aAAa,CAACG,KAAd,CAAoBoC,IAApB,CACE,IAAIC,eAAJ,CAAWJ,WAAX,EAAwB;AACtB7F,cAAAA,WAAW,EAAE,MAAI,CAACA,WADI;AAEtBH,cAAAA,MAAM,EAAE,MAAI,CAACA,MAFS;AAGtBF,cAAAA,MAAM,EAAE,MAAI,CAACA,MAHS;AAItBuG,cAAAA,gBAAgB,EAAE,MAAI,CAACpG,mBAJD;AAKtBqG,cAAAA,mBAAmB,EAAE,MAAI,CAACpG,sBALJ;AAMtBH,cAAAA,IAAI,EAAE,MAAI,CAACA;AANW,aAAxB,CADF;AAUD;AACF,SAhCD;AAiCD;;AAED,aAAO6D,aAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAU2C,OAAV,EAAmBC,aAAnB,EAAkC;AAChC,UAAI,CAAC,KAAK3G,QAAV,EAAoB;AAClB,eAAO,iBAAQ4G,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,mEAAnB,CAAf,CAAP;AACD;;AACD,UAAI6B,cAAYC,gBAAZ,CAA6BJ,OAA7B,CAAJ,EAA2C;AACzC,eAAO,iBAAQE,MAAR,CACL,IAAI5B,kBAAJ,CAAmB,8FAAnB,CADK,CAAP;AAGD;;AACD,UAAMtF,OAAO,GAAGmH,cAAYE,wBAAZ,CAAqCL,OAArC,EAA8C,KAAK1G,QAAnD,EAA6D2G,aAA7D,CAAhB;;AAEA,aAAO,KAAK/G,cAAL,CAAoBoH,UAApB,CAA+BtH,OAA/B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,2BAAkBgH,OAAlB,EAA2B;AACzB,UAAI,CAAC,KAAK1G,QAAV,EAAoB;AAClB,eAAO,iBAAQ4G,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,mEAAnB,CAAf,CAAP;AACD;;AACD,UAAI6B,cAAYC,gBAAZ,CAA6BJ,OAA7B,CAAJ,EAA2C;AACzC,eAAO,iBAAQE,MAAR,CACL,IAAI5B,kBAAJ,CAAmB,gEAAnB,CADK,CAAP;AAGD;;AACD,UAAMtF,OAAO,GAAGmH,cAAYI,wBAAZ,CAAqCP,OAArC,EAA8C,KAAK1G,QAAnD,CAAhB;;AAGA,aAAO,KAAKJ,cAAL,CAAoBsH,iBAApB,CAAsCxH,OAAtC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAayH,SAAb,EAAwB;AACtB,UAAI,uBAAQA,SAAR,CAAJ,EAAwB;AACtB,eAAO,iBAAQP,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,kCAAnB,CAAf,CAAP;AACD;;AACD,UAAMtF,OAAO,GAAGmH,cAAYO,0BAAZ,CAAuCD,SAAvC,EAAkD,KAAKnH,QAAvD,CAAhB;;AAEA,aAAO,KAAKJ,cAAL,CAAoByH,WAApB,CAAgC3H,OAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAa4H,QAAb,EAAuB;AACrB,UAAI,CAAC,KAAKtH,QAAV,EAAoB;AAClB,eAAO,iBAAQ4G,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,mEAAnB,CAAf,CAAP;AACD;;AACD,UAAI,CAACsC,QAAL,EAAe;AACb,eAAO,iBAAQV,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,qDAAnB,CAAf,CAAP;AACD;;AACD,UAAMtF,OAAO,GAAGmH,cAAYU,2BAAZ,CAAwCD,QAAxC,EAAkD,KAAKtH,QAAvD,CAAhB;;AAEA,aAAO,KAAKJ,cAAL,CAAoB4H,YAApB,CAAiC9H,OAAjC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,oBAAW4H,QAAX,EAAkC;AAAA,UAAbG,IAAa,uEAAN,IAAM;;AAChC,UAAI,CAAC,KAAKzH,QAAV,EAAoB;AAClB,eAAO,iBAAQ4G,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,4EAAnB,CAAf,CAAP;AACD;;AACD,UAAI,CAACsC,QAAL,EAAe;AACb,eAAO,iBAAQV,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,mDAAnB,CAAf,CAAP;AACD;;AACD,UAAMtF,OAAO,GAAGmH,cAAYa,yBAAZ,CAAsCJ,QAAtC,EAAgDG,IAAhD,EAAsD,KAAKzH,QAA3D,CAAhB;;AAEA,aAAO,KAAKJ,cAAL,CAAoB+H,UAApB,CAA+BjI,OAA/B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,8BAAqB4H,QAArB,EAAiD;AAAA,UAAlBM,SAAkB,uEAAN,IAAM;;AAC/C,UAAI,CAAC,KAAK5H,QAAV,EAAoB;AAClB,eAAO,iBAAQ4G,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,4EAAnB,CAAf,CAAP;AACD;;AACD,UAAI,CAACsC,QAAL,EAAe;AACb,eAAO,iBAAQV,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,+DAAnB,CAAf,CAAP;AACD;;AACD,UAAMtF,OAAO,GAAGmH,cAAYgB,iCAAZ,CAA8CP,QAA9C,EAAwDM,SAAxD,EAAmE,KAAK5H,QAAxE,CAAhB;;AAEA,aAAO,KAAKJ,cAAL,CAAoBkI,oBAApB,CAAyCpI,OAAzC,CAAP;AACD;AAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,0BAA0C;AAAA,UAA3BqI,KAA2B,uEAAnB,EAAmB;AAAA,UAAfT,QAAe,uEAAJ,EAAI;;AACxC,UAAI,CAACS,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;AACzB,eAAO,iBAAQnB,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,8BAAnB,CAAf,CAAP;AACD;;AAED,UAAMV,MAAM,GAAG,KAAKxE,iBAAL,CAAuBgB,GAAvB,CAA2BwG,QAA3B,CAAf;;AAEA,UAAI,CAAChD,MAAL,EAAa;AACX,eAAO,iBAAQsC,MAAR,CAAe,IAAI5B,kBAAJ,CAAmB,4CAAnB,CAAf,CAAP;AACD;;AAED,UAAOhF,QAAP,GAAmB,IAAnB,CAAOA,QAAP;AAEA,UAAMgI,WAAW,GAAG1D,MAAM,CAAC6B,WAAP,CAAmB8B,OAAvC;AACA,UAAMC,MAAM,GAAGF,WAAW,CAACtC,IAAZ,CAAiB;AAAA,YAAEyC,UAAF,QAAEA,UAAF;AAAA,eAAkBA,UAAU,KAAK,KAAjC;AAAA,OAAjB,CAAf;AACA,UAAMpD,GAAG,GAAGmD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEnD,GAApB;;AAEA,UAAI/E,QAAQ,IAAI+E,GAAhB,EAAqB;AACnB,YAAMrF,OAAO,GAAGmH,cAAYuB,wBAAZ,CAAqCrD,GAArC,EAA0CgD,KAA1C,EAAiDT,QAAjD,EAA2DtH,QAA3D,CAAhB;;AAEA,eAAO,KAAKJ,cAAL,CAAoByI,cAApB,CAAmC3I,OAAnC,CAAP;AACD;;AAED,aAAO,iBAAQkH,MAAR,CAAe,IAAI0B,KAAJ,CAAU,4HAAV,CAAf,CAAP;AACD;;;EA7tBkCC,+B","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport {isEmpty} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS, EVENT_TRIGGERS, FLOOR_ACTION, CONTENT, WHITEBOARD} from '../constants';\nimport Trigger from '../common/events/trigger-proxy';\nimport Member from '../member';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nimport MembersCollection from './collection';\nimport MembersRequest from './request';\nimport MembersUtil from './util';\n\n/**\n   * Members Update Event\n   * Emitted when something in the roster list needs to be updated\n   * @event members:update\n   * @instance\n   * @property {Object} delta the changes to the members list\n   * @property {Array} delta.updated array only the updates, includes removals, as they will have updated status and member properties\n   * @property {Array} delta.added array added members to the meeting\n   * @property {Array} full array the full members collection\n   * @memberof Members\n   */\n\n/**\n   * Members Content Update Event\n   * Emitted when who is sharing changes\n   * @event members:content:update\n   * @instance\n   * @property {String} activeContentSharingId\n   * @property {String} endedContentSharingId\n   * @memberof Members\n   */\n\n/**\n   * Members Host Update Event\n   * Emitted when who is the host changes\n   * @event members:host:update\n   * @instance\n   * @property {String} activeHostId\n   * @property {String} endedHostId\n   * @memberof Members\n   */\n\n/**\n   * Members Self Update Event\n   * Emitted when who is the self changes\n   * @event members:self:update\n   * @instance\n   * @property {String} activeSelfId\n   * @property {String} endedSelfId\n   * @memberof Members\n   */\n\n/**\n * @class Members\n */\nexport default class Members extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   * @memberof Members\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * The Members Request object to interact with server\n     * @instance\n     * @type {MembersRequest}\n     * @private\n     * @memberof Members\n    */\n    this.membersRequest = new MembersRequest({}, options);\n    /**\n     * The Members Collection cache\n     * @instance\n     * @type {MembersCollection}\n     * @private\n     * @memberof Members\n    */\n    this.membersCollection = new MembersCollection();\n    /**\n     * The current locus url for the active meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.locusUrl = attrs.locusUrl || null;\n    /**\n     * The current hostId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.hostId = null;\n    /**\n     * The current type for the meeting, could be MEETING or CALL\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.type = null;\n    /**\n     * Locus has a self object, sent individually to the client\n     * i.e., each person in the call gets their own self object from locus.\n     * We need to maintain that self object, because we also get information about all the participants\n     * and differentiate those participants from self.\n     * The self id shouldnt ever change, but it does have properties that will change\n     * and we use values in locus-info, such as to determine if i am admitted to the meeting or not as guest.\n     * The current selfId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.selfId = null;\n    /**\n     * The current mediaShareContentId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.mediaShareContentId = null;\n    /**\n     * The current mediaShareWhiteboardId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.mediaShareWhiteboardId = null;\n    /**\n     * The current recordingId for the meeting, if it exists\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n    */\n    this.recordingId = null;\n  }\n\n  /**\n   * Internal update the self Id value\n   * @param {Object} payload\n   * @param {Object} payload.newSelf\n   * @param {Object} payload.oldSelf\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusSelfUpdate(payload) {\n    let newSelfId = null;\n    let oldSelfId = null;\n\n    if (payload) {\n      if (payload.newSelf) {\n        newSelfId = payload.newSelf.id;\n      }\n      if (payload.oldSelf) {\n        oldSelfId = payload.oldSelf.id;\n      }\n    }\n    if (newSelfId) {\n      const theSelf = this.membersCollection.get(newSelfId);\n\n      if (theSelf) {\n        theSelf.setIsSelf(true);\n      }\n    }\n    if (oldSelfId) {\n      const notSelf = this.membersCollection.get(oldSelfId);\n\n      if (notSelf) {\n        notSelf.setIsSelf(false);\n      }\n    }\n    this.selfId = newSelfId;\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusSelfUpdate'\n      },\n      EVENT_TRIGGERS.MEMBERS_SELF_UPDATE,\n      {\n        activeSelfId: newSelfId,\n        endedSelfId: oldSelfId\n      }\n    );\n  }\n\n  /**\n   * Internal update the hostId value\n   * @param {Object} payload\n   * @param {Object} payload.newHost\n   * @param {Object} payload.oldHost\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusHostUpdate(payload) {\n    let newHostId = null;\n    let oldHostId = null;\n\n    if (payload) {\n      if (payload.newHost) {\n        newHostId = payload.newHost.id;\n      }\n      if (payload.oldHost) {\n        oldHostId = payload.oldHost.id;\n      }\n    }\n    if (newHostId) {\n      const theHost = this.membersCollection.get(newHostId);\n\n      if (theHost) {\n        theHost.setIsHost(true);\n      }\n    }\n    if (oldHostId) {\n      const notHost = this.membersCollection.get(oldHostId);\n\n      if (notHost) {\n        notHost.setIsHost(false);\n      }\n    }\n    this.hostId = newHostId;\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusHostUpdate'\n      },\n      EVENT_TRIGGERS.MEMBERS_HOST_UPDATE,\n      {\n        activeHostId: newHostId,\n        endedHostId: oldHostId\n      }\n    );\n  }\n\n  /**\n   * when new participant updates come in, both delta and full participants, update them in members collection\n   * delta object in the event will have {updated, added} and full will be the full membersCollection\n   * @param {Object} payload\n   * @param {Object} payload.participants\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusParticipantsUpdate(payload) {\n    if (payload) {\n      const delta = this.handleLocusInfoUpdatedParticipants(payload);\n      const full = this.handleMembersUpdate(delta); // SDK should propagate the full list for both delta and non delta updates\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'members',\n          function: 'locusParticipantsUpdate'\n        },\n        EVENT_TRIGGERS.MEMBERS_UPDATE,\n        {\n          delta,\n          full\n        }\n      );\n    }\n  }\n\n  /**\n   * Internal update the content id\n   * @param {Object} payload\n   * @param {Object} payload.current\n   * @param {Object} payload.previous\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusMediaSharesUpdate(payload) {\n    const currentContent = payload.current?.content;\n    const previousContent = payload.previous?.content;\n    const currentWhiteboard = payload.current?.whiteboard;\n    const previousWhiteboard = payload.previous?.whiteboard;\n    let whoSharing = null;\n    let whoStopped = null;\n\n    if (currentContent?.beneficiaryId) {\n      if (currentContent.disposition === FLOOR_ACTION.GRANTED) {\n        whoSharing = currentContent.beneficiaryId;\n        this.mediaShareWhiteboardId = null;\n        this.mediaShareContentId = whoSharing;\n      }\n\n      if (previousContent?.disposition === FLOOR_ACTION.GRANTED) {\n        if (currentContent.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentContent.beneficiaryId;\n          this.mediaShareContentId = null;\n        }\n        else if (currentContent.disposition === FLOOR_ACTION.GRANTED && currentContent.beneficiaryId !== previousContent.beneficiaryId) {\n          whoStopped = previousContent.beneficiaryId;\n        }\n      }\n    }\n\n    if (currentWhiteboard?.beneficiaryId) {\n      if (currentWhiteboard.disposition === FLOOR_ACTION.GRANTED) {\n        whoSharing = currentWhiteboard.beneficiaryId;\n        this.mediaShareContentId = null;\n        this.mediaShareWhiteboardId = whoSharing;\n      }\n\n      if (previousWhiteboard?.disposition === FLOOR_ACTION.GRANTED) {\n        if (currentWhiteboard.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentWhiteboard.beneficiaryId;\n          this.mediaShareWhiteboardId = null;\n        }\n        else if (currentWhiteboard.disposition === FLOOR_ACTION.GRANTED && currentWhiteboard.beneficiaryId !== previousWhiteboard.beneficiaryId) {\n          whoStopped = previousWhiteboard.beneficiaryId;\n        }\n      }\n    }\n\n    if (whoSharing) {\n      const shareMember = this.membersCollection.get(whoSharing);\n\n      if (shareMember) {\n        shareMember.setIsContentSharing(true);\n      }\n    }\n    if (whoStopped) {\n      const stopMember = this.membersCollection.get(whoStopped);\n\n      if (stopMember) {\n        stopMember.setIsContentSharing(false);\n      }\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusMediaSharesUpdate'\n      },\n      EVENT_TRIGGERS.MEMBERS_CONTENT_UPDATE,\n      {\n        activeSharingId: whoSharing,\n        endedSharingId: whoStopped\n      }\n    );\n  }\n\n\n  /**\n   * Internal update the locus url value\n   * @param {Object} payload\n   * @param {String} payload.locusUrl\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusUrlUpdate(payload) {\n    if (payload) {\n      this.setLocusUrl(null, payload);\n    }\n  }\n\n  /**\n   * Internal update the type of meeting\n   * @param {Object} payload\n   * @param {String} payload.type\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusFullStateTypeUpdate(payload) {\n    // TODO: at some point there could be a timing issue here, for updating each member\n    // ie., if the type changes AND there is no locus update, then each member will not know the type of call\n    // which means they cannot determine isMutable && isRemovable\n    // for now this scenario is impossible to occur since we always get a locus update when the type changes\n    // except for in delta locus meetings, but in that case, the type will always have been set differently\n    // from the outset anyway\n    if (payload) {\n      this.setType(payload);\n    }\n  }\n\n  /**\n   * sets values in the members collection for updated and added properties from delta\n   * @param {Object} membersUpdate {updated: [], added: []}\n   * @returns {Object} membersCollection\n   * @private\n   * @memberof Members\n   */\n  handleMembersUpdate(membersUpdate) {\n    if (membersUpdate) {\n      if (membersUpdate.updated) {\n        this.constructMembers(membersUpdate.updated);\n      }\n      if (membersUpdate.added) {\n        this.constructMembers(membersUpdate.added);\n      }\n    }\n\n    return this.membersCollection.getAll();\n  }\n\n  /**\n   * set members to the member collection from each updated/added lists as passed in\n   * @param {Array} list\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  constructMembers(list) {\n    list.forEach((member) => {\n      this.membersCollection.set(member.id, member);\n    });\n  }\n\n  /**\n   * Internal update the participants value\n   * @param {Object} payload\n   * @returns {Object}\n   * @private\n   * @memberof Members\n   */\n  handleLocusInfoUpdatedParticipants(payload) {\n    this.hostId = payload.hostId || this.hostId;\n    this.selfId = payload.selfId || this.selfId;\n    this.recordingId = payload.recordingId;\n    if (!payload.participants) {\n      LoggerProxy.logger.warn('Members:index#handleLocusInfoUpdatedParticipants --> participants payload is missing.');\n    }\n    const memberUpdate = this.update(payload.participants);\n\n    return memberUpdate;\n  }\n\n  /**\n   * Update the locus Url\n   * @param {Object} locus\n   * @param {String} [locusUrl] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  setLocusUrl(locus, locusUrl = null) {\n    if (locusUrl) {\n      this.locusUrl = locusUrl;\n    }\n    else if (locus && (locus.locusUrl || locus.url)) {\n      this.locusUrl = locus.locusUrl || locus.url;\n    }\n    else {\n      throw new ParameterError('Setting locusUrl for the Members module should be done with a locus object or locusUrl');\n    }\n  }\n\n  /**\n   * Update the host id\n   * @param {Object} locus\n   * @param {String} [hostId] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  setHostId(locus, hostId = null) {\n    if (hostId) {\n      this.hostId = hostId;\n    }\n    else if (locus) {\n      this.hostId = locus && locus.owner && locus.owner.info ? locus.owner.info : null;\n    }\n    else {\n      throw new ParameterError('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * Update the type\n   * @param {Object} fullState\n   * @param {String} [type] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  setType(fullState, type = null) {\n    if (type) {\n      this.type = type;\n    }\n    else if (fullState) {\n      this.type = (fullState && fullState.type) || null;\n    }\n    else {\n      throw new ParameterError('Setting type for the Members module should be done with a fullstate object or type string');\n    }\n  }\n\n  /**\n   * Update the self Id\n   * @param {Object} locus\n   * @param {String} [selfId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setSelfId(locus, selfId = null) {\n    if (selfId) {\n      this.selfId = selfId;\n    }\n    else if (locus) {\n      this.selfId = locus && locus.self && locus.self.person && locus.self.person.id ? locus.self.person.id : null;\n    }\n    else {\n      throw new ParameterError('Setting selfid for the Members module should be done with a locus object or selfId');\n    }\n  }\n\n  /**\n   * Update the media share content id\n   * @param {Object} locus\n   * @param {String} [contentId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareContentId(locus, contentId) {\n    if (contentId) {\n      this.mediaShareContentId = contentId;\n    }\n    else if (locus) {\n      const contentMediaShare =\n        locus.mediaShares &&\n        locus.mediaShares.length &&\n        locus.mediaShares.find((mediaShare) => mediaShare.name === CONTENT);\n\n      this.mediaShareContentId =\n        (contentMediaShare &&\n          contentMediaShare.floor &&\n          contentMediaShare.floor.beneficiary &&\n          contentMediaShare.floor.beneficiary.id) ||\n        null;\n    }\n    else {\n      throw new ParameterError('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * Update the media share whiteboard id\n   * @param {Object} locus\n   * @param {String} [whiteboardId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareWhiteboardId(locus, whiteboardId) {\n    if (whiteboardId) {\n      this.mediaShareWhiteboardId = whiteboardId;\n    }\n    else if (locus) {\n      const whiteboardMediaShare =\n        locus.mediaShares &&\n        locus.mediaShares.length &&\n        locus.mediaShares.find((mediaShare) => mediaShare.name === WHITEBOARD);\n\n      this.mediaShareWhiteboardId =\n        (whiteboardMediaShare &&\n          whiteboardMediaShare.floor &&\n          whiteboardMediaShare.floor.beneficiary &&\n          whiteboardMediaShare.floor.beneficiary.id) ||\n        null;\n    }\n    else {\n      throw new ParameterError('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * Find all the updates, and added members\n   * Removed/left members will end up in updates\n   * Each array contains only members\n   * @param {Array} participants the locus participants\n   * @returns {Object} {added: {Array}, updated: {Array}}\n   * @private\n   * @memberof Members\n   */\n  update(participants) {\n    const membersUpdate = {added: [], updated: []};\n\n    if (participants) {\n      participants.forEach((participant) => {\n        if (participant.hideInRoster) {\n          return;\n        }\n        const existing = this.membersCollection.get(participant.id);\n\n        if (existing) {\n          // TODO: compare existing member to new participant coming in properties and determine if updated (this helps for non delta events)\n          // on client re renders, but we will have to determine what values to compare to determine difference, premature optimization\n          membersUpdate.updated.push(\n            new Member(participant, {\n              recordingId: this.recordingId,\n              selfId: this.selfId,\n              hostId: this.hostId,\n              contentSharingId: this.mediaShareContentId,\n              whiteboardSharingId: this.mediaShareWhiteboardId,\n              type: this.type\n            })\n          );\n        }\n        else {\n          membersUpdate.added.push(\n            new Member(participant, {\n              recordingId: this.recordingId,\n              selfId: this.selfId,\n              hostId: this.hostId,\n              contentSharingId: this.mediaShareContentId,\n              whiteboardSharingId: this.mediaShareWhiteboardId,\n              type: this.type\n            })\n          );\n        }\n      });\n    }\n\n    return membersUpdate;\n  }\n\n  /**\n   * Adds a guest Member to the associated meeting\n   * @param {String} invitee\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise}\n   * @memberof Members\n   */\n  addMember(invitee, alertIfActive) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meeting object must be defined.'));\n    }\n    if (MembersUtil.isInvalidInvitee(invitee)) {\n      return Promise.reject(\n        new ParameterError('The invitee must be defined with either a valid email, emailAddress or phoneNumber property.')\n      );\n    }\n    const options = MembersUtil.generateAddMemberOptions(invitee, this.locusUrl, alertIfActive);\n\n    return this.membersRequest.addMembers(options);\n  }\n\n  /**\n   * Cancels an outgoing PSTN call to the associated meeting\n   * @param {String} invitee\n   * @returns {Promise}\n   * @memberof Members\n   */\n  cancelPhoneInvite(invitee) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meeting object must be defined.'));\n    }\n    if (MembersUtil.isInvalidInvitee(invitee)) {\n      return Promise.reject(\n        new ParameterError('The invitee must be defined with a valid phoneNumber property.')\n      );\n    }\n    const options = MembersUtil.cancelPhoneInviteOptions(invitee, this.locusUrl);\n\n\n    return this.membersRequest.cancelPhoneInvite(options);\n  }\n\n  /**\n   * Admits waiting members (invited guests to meeting)\n   * @param {Array} memberIds\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  admitMembers(memberIds) {\n    if (isEmpty(memberIds)) {\n      return Promise.reject(new ParameterError('No member ids provided to admit.'));\n    }\n    const options = MembersUtil.generateAdmitMemberOptions(memberIds, this.locusUrl);\n\n    return this.membersRequest.admitMember(options);\n  }\n\n  /**\n   * Removes a member from the meeting\n   * @param {String} memberId\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  removeMember(memberId) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meeting object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to remove the member.'));\n    }\n    const options = MembersUtil.generateRemoveMemberOptions(memberId, this.locusUrl);\n\n    return this.membersRequest.removeMember(options);\n  }\n\n  /**\n   * Audio mutes another member in a meeting\n   * @param {String} memberId\n   * @param {boolean} [mute] default true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  muteMember(memberId, mute = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meetings members object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to mute the member.'));\n    }\n    const options = MembersUtil.generateMuteMemberOptions(memberId, mute, this.locusUrl);\n\n    return this.membersRequest.muteMember(options);\n  }\n\n  /**\n   * Transfers the host to another member\n   * @param {String} memberId\n   * @param {boolean} [moderator] default true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  transferHostToMember(memberId, moderator = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(new ParameterError('The associated locus url for this meetings members object must be defined.'));\n    }\n    if (!memberId) {\n      return Promise.reject(new ParameterError('The member id must be defined to transfer host to the member.'));\n    }\n    const options = MembersUtil.generateTransferHostMemberOptions(memberId, moderator, this.locusUrl);\n\n    return this.membersRequest.transferHostToMember(options);\n  }\n\n\n  /**\n   * Sends DTMF tones for the PSTN member of a meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @param {String} memberId member id\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  sendDialPadKey(tones = '', memberId = '') {\n    if (!tones && tones !== 0) {\n      return Promise.reject(new ParameterError('DMTF tones must be passed in'));\n    }\n\n    const member = this.membersCollection.get(memberId);\n\n    if (!member) {\n      return Promise.reject(new ParameterError('there is no member associated with that Id'));\n    }\n\n    const {locusUrl} = this;\n\n    const deviceArray = member.participant.devices;\n    const device = deviceArray.find(({deviceType}) => deviceType === 'SIP');\n    const url = device?.url;\n\n    if (locusUrl && url) {\n      const options = MembersUtil.genderateSendDTMFOptions(url, tones, memberId, locusUrl);\n\n      return this.membersRequest.sendDialPadKey(options);\n    }\n\n    return Promise.reject(new Error('Members:index#sendDialPadKey --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service.'));\n  }\n}\n"]}
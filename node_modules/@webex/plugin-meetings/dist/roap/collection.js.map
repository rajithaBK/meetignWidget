{"version":3,"sources":["collection.js"],"names":["RoapCollection","sessions","getSession","id","activeSequences","deleteSession","getSessionSequence","seqId","session","state","RoapStateMachine","createState","finished","deleteSessionSequence","seq","isBusy","onSessionSequenceFinish"],"mappings":";;;;;;;;;;;;AAAA;;AAEA;AACA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,EADW;AAGrBC,EAAAA,UAHqB,sBAGVC,EAHU,EAGN;AACb,QAAI,CAAC,KAAKF,QAAL,CAAcE,EAAd,CAAL,EAAwB;AACtB,WAAKF,QAAL,CAAcE,EAAd,IAAoB;AAClBC,QAAAA,eAAe,EAAE;AADC,OAApB;AAGD;;AACD,WAAO,KAAKH,QAAL,CAAcE,EAAd,CAAP;AACD,GAVoB;AAYrBE,EAAAA,aAZqB,yBAYPF,EAZO,EAYH;AAChB,QAAI,KAAKD,UAAL,CAAgBC,EAAhB,CAAJ,EAAyB;AACvB,aAAO,KAAKF,QAAL,CAAcE,EAAd,CAAP;AACD;AACF,GAhBoB;AAkBrBG,EAAAA,kBAlBqB,8BAkBFH,EAlBE,EAkBEI,KAlBF,EAkBS;AAC5B,QAAMC,OAAO,GAAG,KAAKN,UAAL,CAAgBC,EAAhB,CAAhB;;AACA,QAAI,CAACK,OAAO,CAACD,KAAD,CAAZ,EAAqB;AACnBC,MAAAA,OAAO,CAACD,KAAD,CAAP,GAAiB;AACfE,QAAAA,KAAK,EAAEC,eAAiBC,WAAjB,EADQ;AAEfC,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAIAJ,MAAAA,OAAO,CAACJ,eAAR,IAA2B,CAA3B;AAED;;AACD,WAAOI,OAAO,CAACD,KAAD,CAAd;AACD,GA7BoB;AA+BrBM,EAAAA,qBA/BqB,iCA+BCV,EA/BD,EA+BKI,KA/BL,EA+BY;AAC/B,QAAMO,GAAG,GAAG,KAAKR,kBAAL,CAAwBH,EAAxB,EAA4BI,KAA5B,CAAZ;;AACA,QAAIO,GAAJ,EAAS;AACP,UAAI,CAACA,GAAG,CAACF,QAAT,EAAmB;AACjBJ,QAAAA,OAAO,CAACJ,eAAR,IAA2B,CAA3B;AACD;;AACD,aAAO,KAAKH,QAAL,CAAcE,EAAd,EAAkBI,KAAlB,CAAP;AACD;AACF,GAvCoB;AAyCrBQ,EAAAA,MAzCqB,kBAyCdZ,EAzCc,EAyCV;AACT,QAAMK,OAAO,GAAG,KAAKN,UAAL,CAAgBC,EAAhB,CAAhB;AACA,QAAI,CAACK,OAAL,EAAc,OAAO,KAAP;AAEd,WAAOA,OAAO,CAACJ,eAAR,GAA0B,CAAjC;AACD,GA9CoB;AAgDrBY,EAAAA,uBAhDqB,mCAgDGb,EAhDH,EAgDOI,KAhDP,EAgDc;AACjC,QAAMC,OAAO,GAAG,KAAKN,UAAL,CAAgBC,EAAhB,CAAhB;AACA,QAAMW,GAAG,GAAGN,OAAO,CAACD,KAAD,CAAnB;;AACA,QAAIO,GAAG,IAAI,CAACA,GAAG,CAACF,QAAhB,EAA0B;AACxBE,MAAAA,GAAG,CAACF,QAAJ,GAAe,IAAf;AACAJ,MAAAA,OAAO,CAACJ,eAAR,IAA2B,CAA3B;AACD;AACF;AAvDoB,CAAvB;eA2DeJ,c","sourcesContent":["import RoapStateMachine from '../roap/state';\n\n/* eslint-disable */\nconst RoapCollection = {\n  sessions: {},\n\n  getSession(id) {\n    if (!this.sessions[id]) {\n      this.sessions[id] = {\n        activeSequences: 0,\n      };\n    }\n    return this.sessions[id];\n  },\n\n  deleteSession(id) {\n    if (this.getSession(id)) {\n      delete this.sessions[id];\n    }\n  },\n\n  getSessionSequence(id, seqId) {\n    const session = this.getSession(id);\n    if (!session[seqId]) {\n      session[seqId] = {\n        state: RoapStateMachine.createState(),\n        finished: false,\n      };\n      session.activeSequences += 1;\n\n    }\n    return session[seqId];\n  },\n\n  deleteSessionSequence(id, seqId) {\n    const seq = this.getSessionSequence(id, seqId);\n    if (seq) {\n      if (!seq.finished) {\n        session.activeSequences -= 1;\n      }\n      delete this.sessions[id][seqId];\n    }\n  },\n\n  isBusy(id) {\n    const session = this.getSession(id);\n    if (!session) return false;\n\n    return session.activeSequences > 0;\n  },\n\n  onSessionSequenceFinish(id, seqId) {\n    const session = this.getSession(id);\n    const seq = session[seqId];\n    if (seq && !seq.finished) {\n      seq.finished = true;\n      session.activeSequences -= 1;\n    }\n  }\n\n};\n\nexport default RoapCollection;\n"]}
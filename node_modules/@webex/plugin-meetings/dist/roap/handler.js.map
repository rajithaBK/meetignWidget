{"version":3,"sources":["handler.js"],"names":["checkForAndHandleErrors","action","meeting","correlationId","type","msg","messageType","errorType","RoapUtil","findError","handleError","mediaProperties","peerConnection","then","res","RoapCollection","deleteSessionSequence","seq","catch","err","LoggerProxy","logger","warn","ensureMeeting","compareWithLastRoapMessage","lastRoapMessage","currentRoapMessage","handleSessionStep","roap","session","locusUrl","sequenceId","OFFER","_OFFER_","GLARE_OFFER","remote","metricName","BEHAVIORAL_METRICS","ROAP_GLARE_CONDITION","data","correlation_id","locus_id","split","pop","sequence","Metrics","sendBehavioralMetric","info","state","RoapHandler","attrs","options","roapOk","roapAnswer","roapFinished","ROAP","ROAP_STATE","INIT","WAIT_TX_ANSWER","shouldHandleMedia","updatePeerConnection","answerSdps","locusId","locusSelfId","locusInfo","self","id","mediaId","sdps","audioMuted","isAudioMuted","videoMuted","isVideoMuted","error","ROAP_ANSWER_FAILURE","reason","message","stack","metadata","name","WAIT_TX_OK","setRemoteDescription","ERROR","GLARE","tieBreaker","log","step","ROAP_SIGNAL","GLARE_RESOLVED","perform","signal","prefix","RECEIVE_ROAP_MSG","execute","RX_","SEND_ROAP_MSG","local","TX_","SEND_ROAP_MSG_SUCCESS","RECEIVE_CALL_LEAVE","deleteSession","RESET_ROAP_STATE","getSessionSequence","webex","meetings","meetingCollection","getByKey","handleAction","StatelessWebexPlugin"],"mappings":"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","sourcesContent":["/* no-param-reassign */\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {ROAP, _OFFER_, BEHAVIORAL_METRICS} from '../constants';\nimport Metrics from '../metrics';\n\nimport RoapUtil from './util';\nimport RoapCollection from './collection';\n\n\nconst checkForAndHandleErrors = (action, meeting, correlationId) => {\n  if (action && action.type) {\n    if (action.msg && action.msg.messageType && action.msg.errorType) {\n      if (RoapUtil.findError(action.msg.messageType, action.msg.errorType, action.type)) {\n        RoapUtil.handleError(meeting.mediaProperties.peerConnection)\n          .then((res) => {\n            if (res) {\n              RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n            }\n          })\n          .catch((err) => {\n            LoggerProxy.logger.warn(`Roap:handler#checkForAndHandleErrors --> Cannot reset the peer connection with error: ${err}`);\n          });\n\n        return true;\n      }\n    }\n    if (!RoapUtil.ensureMeeting(meeting, action.type)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst compareWithLastRoapMessage = (lastRoapMessage, currentRoapMessage) => lastRoapMessage?.msg?.seq === currentRoapMessage.msg.seq && lastRoapMessage?.msg?.messageType === currentRoapMessage.msg.messageType;\n\nconst handleSessionStep = ({\n  roap, session, locusUrl, correlationId\n}) => {\n  const {seq: sequenceId, messageType} = roap.msg;\n\n  if (session.OFFER && messageType === _OFFER_) {\n    session.GLARE_OFFER = roap.msg;\n    session.GLARE_OFFER.remote = !!roap.remote;\n    const metricName = BEHAVIORAL_METRICS.ROAP_GLARE_CONDITION;\n    const data = {\n      correlation_id: correlationId,\n      locus_id: locusUrl.split('/').pop(),\n      sequence: sequenceId\n    };\n\n    Metrics.sendBehavioralMetric(metricName, data);\n\n    LoggerProxy.logger.warn(`Roap:handler#handleSessionStep --> Glare condition occurred with new mercury event, sequenceId: ${sequenceId}`);\n  }\n  else {\n    LoggerProxy.logger.info(`Roap:handler#handleSessionStep --> Save OFFER/ANSWER seq:${sequenceId} new mercury event ${messageType}local state: ${JSON.stringify(session.state.state, null, 2)}`);\n    session[messageType] = roap.msg;\n    session[messageType].remote = !!roap.remote;\n  }\n};\n\n/**\n * @class RoapHandler\n */\nexport default class RoapHandler extends StatelessWebexPlugin {\n  constructor(attrs, options, roapOk, roapAnswer, roapFinished) {\n    super({}, options);\n    this.attrs = attrs;\n    this.options = options;\n    this.roapOk = roapOk;\n    this.roapFinished = roapFinished;\n    this.roapAnswer = roapAnswer;\n    this.lastRoapMessage = null;\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Meeting} meeting\n   * @param {Object} action\n   * @returns {null}\n   */\n  perform(session, meeting, action) {\n    switch (session.state.state) {\n      case ROAP.ROAP_STATE.INIT:\n        this.roapFinished(meeting.correlationId, action.msg.seq);\n        break;\n\n        // TODO:  (important )handle roap state for sending offers as well\n      // case ROAP.ROAP_STATE.WAIT_RX_OFFER:\n      // case ROAP.ROAP_STATE.WAIT_RX_ANSWER:\n      // case ROAP.ROAP_STATE.WAIT_RX_OK:\n      case ROAP.ROAP_STATE.WAIT_TX_ANSWER:\n        // eslint-disable-next-line no-warning-comments\n        // TODO: sometime the you get an answer while you are creating an offer so SKIP\n        // Server will send the mercury event comes back\n        if (RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.updatePeerConnection(meeting, session)\n            .then((answerSdps) => {\n              this.roapAnswer({\n                locusId: meeting.locusId,\n                locusSelfId: meeting.locusInfo.self.id,\n                mediaId: meeting.mediaId,\n                sdps: answerSdps,\n                seq: session.OFFER.seq,\n                correlationId: meeting.correlationId,\n                audioMuted: meeting.isAudioMuted(),\n                videoMuted: meeting.isVideoMuted()\n              });\n            })\n            .catch((error) => {\n              const metricName = BEHAVIORAL_METRICS.ROAP_ANSWER_FAILURE;\n              const data = {\n                correlation_id: meeting.correlationId,\n                locus_id: meeting.locusUrl.split('/').pop(),\n                reason: error.message,\n                stack: error.stack\n              };\n              const metadata = {\n                type: error.name\n              };\n\n              Metrics.sendBehavioralMetric(metricName, data, metadata);\n              LoggerProxy.logger.error(`Roap:handler#perform --> Error occured during wait receive answer, continuing, ${error}`);\n            });\n        }\n        break;\n      case ROAP.ROAP_STATE.WAIT_TX_OK:\n        if (!RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.setRemoteDescription(meeting, session).then((res) => {\n            this.roapOk(res);\n          });\n        }\n        break;\n      // case ROAP.ROAP_STATE.IDLE_LOCAL_OFFER:\n      case ROAP.ROAP_STATE.ERROR:\n        LoggerProxy.logger.error(`Roap:handler#perform --> Roap State ERROR for session: ${session}`);\n        break;\n      case ROAP.ROAP_STATE.GLARE:\n        session.GLARE_OFFER.tieBreaker = session.GLARE_OFFER.tieBreaker || 0;\n        session.OFFER.tieBreaker = session.OFFER.tieBreaker || 0;\n        LoggerProxy.logger.warn('Roap:handler#perform --> Roap State resolved the GLARE condition.');\n        if (session.GLARE_OFFER.tieBreaker < session.OFFER.tieBreaker) {\n          // 2\n          LoggerProxy.logger.log('Roap:handler#perform --> Roap State local offer won after GLARE.');\n        }\n        else {\n          LoggerProxy.logger.log('Roap:handler#perform --> Roap State remote offer won after GLARE.');\n        }\n        session.state.step(ROAP.ROAP_SIGNAL.GLARE_RESOLVED, meeting, action);\n        this.perform(session, meeting);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   *\n   * @param {String} signal\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} prefix\n   * @returns {null}\n   */\n  execute(signal, session, action, meeting, prefix) {\n    if (session && session.state) {\n      handleSessionStep({\n        roap: action,\n        locusUrl: meeting.locusUrl,\n        correlationId: meeting.correlationId,\n        session\n      });\n      signal = ROAP.ROAP_SIGNAL[`${prefix}${action.msg.messageType}`];\n      session.state.step(signal, meeting, action);\n      this.perform(session, meeting, action);\n    }\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} correlationId\n   * @returns {Boolean}\n   */\n  handleAction(session, action, meeting, correlationId) {\n    let signal;\n\n\n    switch (action.type) {\n      case ROAP.RECEIVE_ROAP_MSG:\n        LoggerProxy.logger.log(`Roap:handler#handleAction --> RECEIVE_ROAP_MSG event captured, reciving a roap message : ${JSON.stringify(action)}`);\n        if (compareWithLastRoapMessage(this.lastRoapMessage, action)) {\n          LoggerProxy.logger.warn(`Roap:handler#handleAction --> duplicate roap offer from server: ${action.msg.seq}`);\n        }\n        else {\n          this.lastRoapMessage = action;\n          action.remote = true;\n          this.execute(signal, session, action, meeting, ROAP.RX_);\n        }\n        break;\n      case ROAP.SEND_ROAP_MSG:\n        LoggerProxy.logger.log(`Roap:handler#handleAction --> SEND_ROAP_MSG event captured, sending roap message ${JSON.stringify(action)}`);\n\n        action.local = true;\n        this.execute(signal, session, action, meeting, ROAP.TX_);\n        break;\n      case ROAP.SEND_ROAP_MSG_SUCCESS:\n        // NOTE: When server send back an answer via mercury the\n        // remote SDP is already saved sent and ok message is sent back\n        // We dont have to indicate the roapHandler about the RX_ANSWER via SEND_ROAP_MSG_SUCCESS\n        break;\n      case ROAP.RECEIVE_CALL_LEAVE:\n        RoapCollection.deleteSession(correlationId);\n        LoggerProxy.logger.log(`Roap:handler#handleAction --> RECEIVE_CALL_LEAVE event captured, cleaning up the RoapHandler for correlationId: ${correlationId}`); break;\n      case ROAP.RESET_ROAP_STATE:\n        RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n        LoggerProxy.logger.log(`Roap:handler#handleAction --> RESET_ROAP_STATE event captured, resetting the RoapHandler state based on sequenceId: ${action.msg.seq}`); break;\n      default:\n        return true;\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {Object} action\n   * @returns {Boolean}\n   */\n  submit(action) {\n    const {correlationId} = action;\n    let {seq} = action;\n\n    if (!seq && action.msg) {\n      seq = action.msg.seq;\n    }\n    const session = RoapCollection.getSessionSequence(correlationId, seq);\n    const meeting = this.webex.meetings.meetingCollection.getByKey('correlationId', correlationId);\n\n    if (checkForAndHandleErrors(action, meeting, correlationId)) {\n      return true;\n    }\n\n    return this.handleAction(session, action, meeting, correlationId);\n  }\n}\n"]}
"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");

var _Object$keys = require("@babel/runtime-corejs2/core-js/object/keys");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors");

var _Object$defineProperties = require("@babel/runtime-corejs2/core-js/object/define-properties");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.MeetingInfoV2CaptchaError = exports.MeetingInfoV2PasswordError = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/wrapNativeSuper"));

var _constants = require("../constants");

var _utilv = _interopRequireDefault(require("./utilv2"));

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var PASSWORD_ERROR_DEFAULT_MESSAGE = 'Password required. Call fetchMeetingInfo() with password argument';
var CAPTCHA_ERROR_DEFAULT_MESSAGE = 'Captcha required. Call fetchMeetingInfo() with captchaInfo argument';
/**
 * Error to indicate that wbxappapi requires a password
 */

var MeetingInfoV2PasswordError = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(MeetingInfoV2PasswordError, _Error);

  var _super = _createSuper(MeetingInfoV2PasswordError);

  /**
    *
    * @constructor
    * @param {Number} [wbxAppApiErrorCode]
    * @param {Object} [meetingInfo]
    * @param {String} [message]
    */
  function MeetingInfoV2PasswordError(wbxAppApiErrorCode, meetingInfo) {
    var _this;

    var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PASSWORD_ERROR_DEFAULT_MESSAGE;
    (0, _classCallCheck2.default)(this, MeetingInfoV2PasswordError);
    _this = _super.call(this, "".concat(message, ", code=").concat(wbxAppApiErrorCode));
    _this.name = 'MeetingInfoV2PasswordError';
    _this.sdkMessage = message;
    _this.stack = new Error().stack;
    _this.wbxAppApiCode = wbxAppApiErrorCode;
    _this.meetingInfo = meetingInfo;
    return _this;
  }

  return MeetingInfoV2PasswordError;
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
/**
   * Error to indicate that wbxappapi requires a captcha
   */


exports.MeetingInfoV2PasswordError = MeetingInfoV2PasswordError;

var MeetingInfoV2CaptchaError = /*#__PURE__*/function (_Error2) {
  (0, _inherits2.default)(MeetingInfoV2CaptchaError, _Error2);

  var _super2 = _createSuper(MeetingInfoV2CaptchaError);

  /**
    *
    * @constructor
    * @param {Number} [wbxAppApiErrorCode]
    * @param {Object} [captchaInfo]
    * @param {String} [message]
    */
  function MeetingInfoV2CaptchaError(wbxAppApiErrorCode, captchaInfo) {
    var _this2;

    var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : CAPTCHA_ERROR_DEFAULT_MESSAGE;
    (0, _classCallCheck2.default)(this, MeetingInfoV2CaptchaError);
    _this2 = _super2.call(this, "".concat(message, ", code=").concat(wbxAppApiErrorCode));
    _this2.name = 'MeetingInfoV2PasswordError';
    _this2.sdkMessage = message;
    _this2.stack = new Error().stack;
    _this2.wbxAppApiCode = wbxAppApiErrorCode;
    _this2.isPasswordRequired = wbxAppApiErrorCode === 423005;
    _this2.captchaInfo = captchaInfo;
    return _this2;
  }

  return MeetingInfoV2CaptchaError;
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
/**
   * @class MeetingInfo
   */


exports.MeetingInfoV2CaptchaError = MeetingInfoV2CaptchaError;

var MeetingInfoV2 = /*#__PURE__*/function () {
  /**
     *
     * @param {WebexSDK} webex
     */
  function MeetingInfoV2(webex) {
    (0, _classCallCheck2.default)(this, MeetingInfoV2);
    this.webex = webex;
  }
  /**
     * converts hydra id into conversation url and persons Id
     * @param {String} destination one of many different types of destinations to look up info for
     * @param {String} [type] to match up with the destination value
     * @returns {Promise} returns destination and type
     * @public
     * @memberof MeetingInfo
     */


  (0, _createClass2.default)(MeetingInfoV2, [{
    key: "fetchInfoOptions",
    value: function fetchInfoOptions(destination) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return _utilv.default.getDestinationType({
        destination: destination,
        type: type,
        webex: this.webex
      });
    }
    /**
       * Fetches meeting info from the server
       * @param {String} destination one of many different types of destinations to look up info for
       * @param {String} [type] to match up with the destination value
       * @param {String} password
       * @param {Object} captchaInfo
       * @param {String} captchaInfo.code
       * @param {String} captchaInfo.id
       * @returns {Promise} returns a meeting info object
       * @public
       * @memberof MeetingInfo
       */

  }, {
    key: "fetchMeetingInfo",
    value: function () {
      var _fetchMeetingInfo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(destination) {
        var type,
            password,
            captchaInfo,
            destinationType,
            body,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                type = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                password = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
                captchaInfo = _args.length > 3 && _args[3] !== undefined ? _args[3] : null;
                _context.next = 5;
                return _utilv.default.getDestinationType({
                  destination: destination,
                  type: type,
                  webex: this.webex
                });

              case 5:
                destinationType = _context.sent;
                _context.next = 8;
                return _utilv.default.getRequestBody(_objectSpread(_objectSpread({}, destinationType), {}, {
                  password: password,
                  captchaInfo: captchaInfo
                }));

              case 8:
                body = _context.sent;
                return _context.abrupt("return", this.webex.request({
                  method: _constants.HTTP_VERBS.POST,
                  service: 'webex-appapi-service',
                  resource: 'meetingInfo',
                  body: body
                }).catch(function (err) {
                  if ((err === null || err === void 0 ? void 0 : err.statusCode) === 403) {
                    var _err$body, _err$body2, _err$body2$data;

                    throw new MeetingInfoV2PasswordError((_err$body = err.body) === null || _err$body === void 0 ? void 0 : _err$body.code, (_err$body2 = err.body) === null || _err$body2 === void 0 ? void 0 : (_err$body2$data = _err$body2.data) === null || _err$body2$data === void 0 ? void 0 : _err$body2$data.meetingInfo);
                  }

                  if ((err === null || err === void 0 ? void 0 : err.statusCode) === 423) {
                    var _err$body3;

                    throw new MeetingInfoV2CaptchaError((_err$body3 = err.body) === null || _err$body3 === void 0 ? void 0 : _err$body3.code, {
                      captchaId: err.body.captchaID,
                      verificationImageURL: err.body.verificationImageURL,
                      verificationAudioURL: err.body.verificationAudioURL,
                      refreshURL: err.body.refreshURL
                    });
                  }

                  throw err;
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetchMeetingInfo(_x) {
        return _fetchMeetingInfo.apply(this, arguments);
      }

      return fetchMeetingInfo;
    }()
  }]);
  return MeetingInfoV2;
}();

exports.default = MeetingInfoV2;
//# sourceMappingURL=meeting-info-v2.js.map

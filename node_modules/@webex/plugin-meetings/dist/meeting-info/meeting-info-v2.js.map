{"version":3,"sources":["meeting-info-v2.js"],"names":["PASSWORD_ERROR_DEFAULT_MESSAGE","CAPTCHA_ERROR_DEFAULT_MESSAGE","MeetingInfoV2PasswordError","wbxAppApiErrorCode","meetingInfo","message","name","sdkMessage","stack","Error","wbxAppApiCode","MeetingInfoV2CaptchaError","captchaInfo","isPasswordRequired","MeetingInfoV2","webex","destination","type","MeetingInfoUtil","getDestinationType","password","destinationType","getRequestBody","body","request","method","HTTP_VERBS","POST","service","resource","catch","err","statusCode","code","data","captchaId","captchaID","verificationImageURL","verificationAudioURL","refreshURL"],"mappings":"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","sourcesContent":["\nimport {HTTP_VERBS} from '../constants';\n\nimport MeetingInfoUtil from './utilv2';\n\nconst PASSWORD_ERROR_DEFAULT_MESSAGE = 'Password required. Call fetchMeetingInfo() with password argument';\nconst CAPTCHA_ERROR_DEFAULT_MESSAGE = 'Captcha required. Call fetchMeetingInfo() with captchaInfo argument';\n\n/**\n * Error to indicate that wbxappapi requires a password\n */\nexport class MeetingInfoV2PasswordError extends Error {\n  /**\n    *\n    * @constructor\n    * @param {Number} [wbxAppApiErrorCode]\n    * @param {Object} [meetingInfo]\n    * @param {String} [message]\n    */\n  constructor(wbxAppApiErrorCode, meetingInfo, message = PASSWORD_ERROR_DEFAULT_MESSAGE) {\n    super(`${message}, code=${wbxAppApiErrorCode}`);\n    this.name = 'MeetingInfoV2PasswordError';\n    this.sdkMessage = message;\n    this.stack = (new Error()).stack;\n    this.wbxAppApiCode = wbxAppApiErrorCode;\n    this.meetingInfo = meetingInfo;\n  }\n}\n\n/**\n   * Error to indicate that wbxappapi requires a captcha\n   */\nexport class MeetingInfoV2CaptchaError extends Error {\n  /**\n    *\n    * @constructor\n    * @param {Number} [wbxAppApiErrorCode]\n    * @param {Object} [captchaInfo]\n    * @param {String} [message]\n    */\n  constructor(wbxAppApiErrorCode, captchaInfo, message = CAPTCHA_ERROR_DEFAULT_MESSAGE) {\n    super(`${message}, code=${wbxAppApiErrorCode}`);\n    this.name = 'MeetingInfoV2PasswordError';\n    this.sdkMessage = message;\n    this.stack = (new Error()).stack;\n    this.wbxAppApiCode = wbxAppApiErrorCode;\n    this.isPasswordRequired = wbxAppApiErrorCode === 423005;\n    this.captchaInfo = captchaInfo;\n  }\n}\n\n/**\n   * @class MeetingInfo\n   */\nexport default class MeetingInfoV2 {\n  /**\n     *\n     * @param {WebexSDK} webex\n     */\n  constructor(webex) {\n    this.webex = webex;\n  }\n\n  /**\n     * converts hydra id into conversation url and persons Id\n     * @param {String} destination one of many different types of destinations to look up info for\n     * @param {String} [type] to match up with the destination value\n     * @returns {Promise} returns destination and type\n     * @public\n     * @memberof MeetingInfo\n     */\n  fetchInfoOptions(destination, type = null) {\n    return MeetingInfoUtil.getDestinationType({\n      destination,\n      type,\n      webex: this.webex\n    });\n  }\n\n  /**\n     * Fetches meeting info from the server\n     * @param {String} destination one of many different types of destinations to look up info for\n     * @param {String} [type] to match up with the destination value\n     * @param {String} password\n     * @param {Object} captchaInfo\n     * @param {String} captchaInfo.code\n     * @param {String} captchaInfo.id\n     * @returns {Promise} returns a meeting info object\n     * @public\n     * @memberof MeetingInfo\n     */\n  async fetchMeetingInfo(destination, type = null, password = null, captchaInfo = null) {\n    const destinationType = await MeetingInfoUtil.getDestinationType({\n      destination,\n      type,\n      webex: this.webex\n    });\n    const body = await MeetingInfoUtil.getRequestBody({...destinationType, password, captchaInfo});\n\n    return this.webex.request({\n      method: HTTP_VERBS.POST,\n      service: 'webex-appapi-service',\n      resource: 'meetingInfo',\n      body\n    })\n      .catch((err) => {\n        if (err?.statusCode === 403) {\n          throw new MeetingInfoV2PasswordError(err.body?.code, err.body?.data?.meetingInfo);\n        }\n        if (err?.statusCode === 423) {\n          throw new MeetingInfoV2CaptchaError(err.body?.code, {\n            captchaId: err.body.captchaID,\n            verificationImageURL: err.body.verificationImageURL,\n            verificationAudioURL: err.body.verificationAudioURL,\n            refreshURL: err.body.refreshURL\n          });\n        }\n        throw err;\n      });\n  }\n}\n\n"]}
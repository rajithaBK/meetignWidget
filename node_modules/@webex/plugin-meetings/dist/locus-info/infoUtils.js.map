{"version":3,"sources":["infoUtils.js"],"names":["InfoUtils","parse","info","parsed","policy","parsePolicy","moderator","parseModerator","sipUri","meetingId","meetingNumber","displayHints","joined","length","forEach","key","isLocked","LOCK_STATUS_LOCKED","isUnlocked","LOCK_STATUS_UNLOCKED","getInfos","oldInfo","newInfo","previous","current","updates"],"mappings":"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","sourcesContent":["\nconst InfoUtils = {};\n\nInfoUtils.parse = (info) => {\n  const parsed = {\n    policy: InfoUtils.parsePolicy(info),\n    moderator: InfoUtils.parseModerator(info)\n  };\n\n  if (info.sipUri) {\n    parsed.sipUri = info.sipUri;\n  }\n\n  if (info.meetingId) {\n    parsed.meetingNumber = info.meetingId;\n  }\n\n  return parsed;\n};\nInfoUtils.parsePolicy = (info) => {\n  const policy = {};\n\n  // Parses the policy to show valid uses\n  if (info && info.displayHints && info.displayHints.joined && info.displayHints.joined.length > 0) {\n    // TODO: find a better way\n    info.displayHints.joined.forEach((key) => {\n      policy[key] = true;\n    });\n  }\n\n  return policy;\n};\n\nInfoUtils.parseModerator = (info) => {\n  const moderator = {};\n\n  if (info && info.displayHints && info.displayHints.moderator && info.displayHints.moderator.length > 0) {\n    info.displayHints.moderator.forEach((key) => {\n      moderator[key] = true;\n    });\n  }\n\n  return moderator;\n};\n\nInfoUtils.isLocked = (policy) => policy.LOCK_STATUS_LOCKED || false;\n\nInfoUtils.isUnlocked = (policy) => policy.LOCK_STATUS_UNLOCKED || false;\n\nInfoUtils.getInfos = (oldInfo, newInfo) => {\n  let previous = null;\n\n  if (oldInfo) {\n    previous = oldInfo;\n  }\n  const current = newInfo && InfoUtils.parse(newInfo);\n  const updates = {};\n\n  if (current) {\n    current.isLocked = InfoUtils.isLocked(current.policy);\n    current.isUnlocked = InfoUtils.isUnlocked(current.policy);\n\n    if (previous && previous.isUnlocked && current.isLocked || !previous && current.isLocked) {\n      updates.isLocked = current.isLocked;\n    }\n    if (previous && previous.isLocked && current.isUnlocked || !previous && current.isUnlocked) {\n      updates.isUnlocked = current.isUnlocked;\n    }\n  }\n\n  return {\n    previous,\n    current,\n    updates\n  };\n};\n\nexport default InfoUtils;\n"]}
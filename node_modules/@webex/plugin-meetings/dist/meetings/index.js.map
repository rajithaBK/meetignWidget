{"version":3,"sources":["index.js"],"names":["Meetings","args","MEETINGS","request","Request","parent","webex","loggerRequest","LoggerRequest","meetingCollection","MeetingCollection","personalMeetingRoom","reachability","registered","media","getUserMedia","Media","getSupportedDevice","LoggerProxy","set","logger","onReady","MeetingsUtil","checkH264Support","disableNotifications","Metrics","initialSetup","data","meeting","getByKey","LOCUS_URL","locusUrl","CORRELATION_ID","checkForCorrelationId","internal","device","url","locus","SIP_URI","self","callbackInfo","callbackAddress","CONVERSATION_URL","conversationUrl","replaces","length","fullState","state","LOCUS","STATE","INACTIVE","warn","_LEFT_","removed","create","_LOCUS_ID_","then","newMeeting","eventType","LOCUSEVENT","DIFFERENCE","locusInfo","catch","e","console","log","finally","getMeetingByType","_ID_","id","postEvent","event","REMOTE_STARTED","trigger","MERCURY_EVENT","Trigger","file","function","EVENT_TRIGGERS","MEETING_ADDED","type","_MEETING_","_JOIN_","_INCOMING_","parse","envelope","MESSAGE_ROAP","handleLocusEvent","MEETINGS_NETWORK_DISCONNECTED","mercury","on","LOCUS_MERCURY","handleLocusMercury","ROAP","ROAP_MERCURY","handleRoapMercury","ONLINE","syncMeetings","OFFLINE","handleMercuryOffline","off","once","READY","StaticConfig","config","LoggerConfig","logging","meetingInfo","experimental","enableUnifiedMeetings","MeetingInfoV2","MeetingInfo","PersonalMeetingRoom","MEETINGS_READY","changeState","canAuthorize","error","reject","Error","info","resolve","all","getGeoHint","startReachability","message","register","connect","call","listenForEvents","MEETINGS_REGISTERED","sendBehavioralMetric","BEHAVIORAL_METRICS","MEETINGS_REGISTRATION_SUCCESS","MEETINGS_REGISTRATION_FAILED","reason","stack","stopListeningForEvents","disconnect","unregister","MEETINGS_UNREGISTERED","options","uploadLogs","uploadResult","MEETING_LOG_UPLOAD_SUCCESS","meetingId","details","uploadError","MEETING_LOG_UPLOAD_FAILURE","UPLOAD_LOGS_FAILURE","meetingsId","code","Reachability","setReachability","getReachability","gatherReachability","fetchGeoHint","res","geoHintInfo","MeetingUtil","cleanUp","delete","MEETING_REMOVED","destination","fetchInfoOptions","targetDest","_CONVERSATION_URL_","createMeeting","createdMeeting","EVENTS","DESTROY_MEETING","payload","autoUploadLogs","callStart","lastActive","correlationId","feedbackId","locusId","webExMeetingId","destroy","REQUEST_UPLOAD_LOGS","meetingInstance","Meeting","userId","deviceUrl","orgId","roapSeq","meetingInfoProvider","fetchMeetingInfo","CaptchaError","PasswordError","debug","sipUri","setSipUri","meetingAddedType","getMeetingAddedType","value","getAll","getActiveMeetings","locusArray","activeLocusUrl","loci","forEach","push","meetingsCollection","includes","MEETING_REMOVED_REASON","NO_MEETINGS_TO_SYNC","scheduled","get","StatsAnalyzer","StatsCalculator","WebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAwBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;IACqBA,Q;;;;;AAGjB;AACJ;AACA;AACA;AACA;AACA;AACI,sBAAqB;AAAA;;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACnB,oDAASA,IAAT;AAEA;AACN;AACA;AACA;AACA;AACA;AACA;;AATyB,4FARTC,mBAQS;AAUnB,UAAKC,OAAL,GAAe,IAAIC,iBAAJ,CAAY,EAAZ,EAAgB;AAACC,MAAAA,MAAM,EAAE,MAAKC;AAAd,KAAhB,CAAf;AACA;AACN;AACA;AACA;AACA;AACA;AACA;;AACM,UAAKC,aAAL,GAAqB,IAAIC,gBAAJ,CAAkB;AAACF,MAAAA,KAAK,EAAE,MAAKA;AAAb,KAAlB,CAArB;AACA,UAAKG,iBAAL,GAAyB,IAAIC,mBAAJ,EAAzB;AACA;AACN;AACA;AACA;AACA;AACA;AACA;;AACM,UAAKC,mBAAL,GAA2B,IAA3B;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,UAAKC,YAAL,GAAoB,IAApB;AAEA;AACN;AACA;AACA;AACA;AACA;AACA;;AACM,UAAKC,UAAL,GAAkB,KAAlB;AAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,UAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAEC,eAAMD,YADT;AAEXE,MAAAA,kBAAkB,EAAED,eAAMC;AAFf,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","sourcesContent":["/*!\n  * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n*/\n\nimport '@webex/internal-plugin-mercury';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport 'webrtc-adapter';\n\nimport Metrics from '../metrics';\nimport {trigger, eventType} from '../metrics/config';\nimport LoggerConfig from '../common/logs/logger-config';\nimport StaticConfig from '../common/config';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport LoggerRequest from '../common/logs/request';\nimport Trigger from '../common/events/trigger-proxy';\nimport Media from '../media';\nimport MeetingUtil from '../meeting/util';\nimport {\n  MEETINGS,\n  EVENTS,\n  EVENT_TRIGGERS,\n  READY,\n  LOCUSEVENT,\n  LOCUS_URL,\n  ROAP,\n  ONLINE,\n  OFFLINE,\n  _MEETING_,\n  _JOIN_,\n  _LOCUS_ID_,\n  _INCOMING_,\n  LOCUS,\n  CORRELATION_ID,\n  SIP_URI,\n  _LEFT_,\n  _ID_,\n  MEETING_REMOVED_REASON,\n  _CONVERSATION_URL_,\n  CONVERSATION_URL,\n  BEHAVIORAL_METRICS\n} from '../constants';\nimport MeetingInfo from '../meeting-info';\nimport MeetingInfoV2 from '../meeting-info/meeting-info-v2';\nimport Meeting from '../meeting';\nimport PersonalMeetingRoom from '../personal-meeting-room';\nimport Reachability from '../reachability';\nimport Request from '../meetings/request';\nimport StatsAnalyzer from '../analyzer/analyzer';\nimport StatsCalculator from '../analyzer/calculator';\nimport PasswordError from '../common/errors/password-error';\nimport CaptchaError from '../common/errors/captcha-error';\n\nimport MeetingCollection from './collection';\nimport MeetingsUtil from './util';\n\n\n/**\n   * Meetings Ready Event\n   * Emitted when the meetings instance on webex is ready\n   * @event meetings:ready\n   * @instance\n   * @memberof Meetings\n   */\n\n/**\n   * Meetings Network Disconnected Event\n   * Emitted when the meetings instance is disconnected from\n   * the internal mercury server\n   * @event network:disconnected\n   * @instance\n   * @memberof Meetings\n   */\n\n/**\n * Meetings Registered Event\n * Emitted when the meetings instance has been registered and listening\n * @event meetings:registered\n * @instance\n * @memberof Meetings\n */\n\n/**\n    * Meeting Removed Event\n    * Emitted when a meeting was removed from the cache of meetings\n    * @event meeting:removed\n    * @instance\n    * @type {Object}\n    * @property {String} meetingId the removed meeting\n    * @property {Object} response the server response\n    * @property {String} type what type of meeting it was\n    * @memberof Meetings\n    */\n\n/**\n    * Meeting Added Event\n    * Emitted when a meeting was added to the cache of meetings\n    * @event meeting:added\n    * @instance\n    * @type {Object}\n    * @property {String} meetingId the added meeting\n    * @property {String} type what type of meeting it was\n    * @memberof Meetings\n    */\n\n/**\n   * Maintain a cache of meetings and sync with services.\n   * @class\n   */\nexport default class Meetings extends WebexPlugin {\n    namespace = MEETINGS;\n\n    /**\n     * Initializes the Meetings Plugin\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n    constructor(...args) {\n      super(...args);\n\n      /**\n       * The Meetings request to interact with server\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.request = new Request({}, {parent: this.webex});\n      /**\n       * Log upload request helper\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.loggerRequest = new LoggerRequest({webex: this.webex});\n      this.meetingCollection = new MeetingCollection();\n      /**\n       * The PersonalMeetingRoom object to interact with server\n       * @instance\n       * @type {Object}\n       * @public\n       * @memberof Meetings\n       */\n      this.personalMeetingRoom = null;\n      /**\n       * The Reachability object to interact with server, starts as null until {@link Meeting#setReachability} is called\n       * starts as null\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.reachability = null;\n\n      /**\n       * If the meetings plugin has been registered and listening via {@link Meetings#register}\n       * @instance\n       * @type {Boolean}\n       * @public\n       * @memberof Meetings\n       */\n      this.registered = false;\n\n      /**\n       * The public interface for the internal Media util files. These are helpful to expose outside the context\n       * of a meeting so that a user can access media without creating a meeting instance.\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n      this.media = {\n        getUserMedia: Media.getUserMedia,\n        getSupportedDevice: Media.getSupportedDevice\n      };\n\n      LoggerProxy.set(this.webex.logger);\n\n      this.onReady();\n      MeetingsUtil.checkH264Support({disableNotifications: true});\n      Metrics.initialSetup(this.meetingCollection, this.webex);\n    }\n\n    /**\n     * handle locus events and takes meeting actions with them as they come in\n     * @param {Object} data a locus event\n     * @param {String} data.locusUrl\n     * @param {Object} data.locus\n     * @param {String} data.eventType\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    handleLocusEvent(data) {\n      let meeting = null;\n\n      // getting meeting by correlationId. This will happen for the new event\n      // Either the locus\n      // TODO : Add check for the callBack Address\n      meeting = this.meetingCollection.getByKey(LOCUS_URL, data.locusUrl) ||\n      this.meetingCollection.getByKey(CORRELATION_ID, MeetingsUtil.checkForCorrelationId(this.webex.internal.device.url, data.locus)) ||\n      this.meetingCollection.getByKey(SIP_URI, data.locus.self && data.locus.self.callbackInfo && data.locus.self.callbackInfo.callbackAddress) ||\n      this.meetingCollection.getByKey(CONVERSATION_URL, data.locus.conversationUrl);\n\n      // Special case when locus has got replaced, This only happend once if a replace locus exists\n      // https://sqbu-github.cisco.com/WebExSquared/locus/wiki/Locus-changing-mid-call\n\n      if (!meeting && data.locus?.replaces?.length > 0) {\n        // Always the last element in the replace is the active one\n        meeting = this.meetingCollection.getByKey(LOCUS_URL, data.locus.replaces[data.locus.replaces.length - 1].locusUrl);\n      }\n\n      if (!meeting) {\n        // TODO: create meeting when we get a meeting object\n        // const checkForEnded = (locus) => {\n        // TODO: you already ended the meeting but you got an event later\n        // Mainly for 1:1 Callsor meeting\n        // Happens mainly after refresh\n\n        // 1:1 Meeting\n        // 1)  You ended a call before but you got a mercury event\n        // Make sure end the call and cleanup the meeting only if the mercury\n        // event says so\n        // 2) Maintain lastSync time in the meetings object which helps to compare\n        // If the meeting came befor or after the sync . ANy meeting start time before the sync time is invalid\n\n        // For space Meeting\n        // Check the locus object and see who has joined\n\n        // };\n        // rather then locus object change to locus url\n\n        if (data.locus && data.locus.fullState && data.locus.fullState.state === LOCUS.STATE.INACTIVE) {\n          // just ignore the event as its already ended and not active\n          LoggerProxy.logger.warn('Meetings:index#handleLocusEvent --> Locus event received for meeting, after it was ended.');\n\n          return;\n        }\n\n\n        // When its wireless share or guest and user leaves the meeting we dont have to keep the meeting object\n        // Any future events will be neglected\n\n        if (data.locus && data.locus.self && (data.locus.self.state === _LEFT_ && data.locus.self.removed === true)) {\n          // just ignore the event as its already ended and not active\n          LoggerProxy.logger.warn('Meetings:index#handleLocusEvent --> Locus event received for meeting, after it was ended.');\n\n          return;\n        }\n\n        this.create(data.locus, _LOCUS_ID_).then((newMeeting) => {\n          meeting = newMeeting;\n\n          if (data.eventType === LOCUSEVENT.DIFFERENCE) {\n            // its a delta object and we have a new meeting\n            meeting.locusInfo.initialSetup(data.locus, meeting);\n          }\n          else {\n            // Its a new meeting and have a fresh locus object\n            meeting.locusInfo.initialSetup(data.locus);\n          }\n        }).catch((e) => {\n          console.log(e);\n        })\n          .finally(() => {\n            // There will be cases where locus event comes in gets created and deleted because its a 1:1 and meeting gets deleted\n            // because the other user left so before sending 'added' event make sure it exists in the collection\n\n            if (this.getMeetingByType(_ID_, meeting.id)) {\n              Metrics.postEvent({event: eventType.REMOTE_STARTED, meeting, data: {trigger: trigger.MERCURY_EVENT}});\n              Trigger.trigger(\n                this,\n                {\n                  file: 'meetings',\n                  function: 'handleLocusEvent'\n                },\n                EVENT_TRIGGERS.MEETING_ADDED,\n                {\n                  meeting,\n                  type: meeting.type === _MEETING_ ? _JOIN_ : _INCOMING_\n                }\n              );\n            }\n            else {\n              // Meeting got added but was not found in the collection. It might have got destroyed\n              LoggerProxy.logger.warn('Meetings:index#handleLocusEvent --> Created and destroyed meeting object before sending an event');\n            }\n          });\n      }\n      else {\n        meeting.locusInfo.parse(meeting, data);\n      }\n    }\n\n    /**\n     * handles locus events through mercury that are not roap\n     * @param {Object} envelope\n     * @param {Object} envelope.data\n     * @param {String} envelope.data.eventType\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    handleLocusMercury(envelope) {\n      const {data} = envelope;\n      const {eventType} = data;\n\n      if (eventType && eventType !== LOCUSEVENT.MESSAGE_ROAP) {\n        this.handleLocusEvent(data);\n      }\n    }\n\n\n    /**\n     * handles mecury offline event\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    handleMercuryOffline() {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings/index',\n          function: 'handleMercuryOffline'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_DISCONNECTED,\n      );\n    }\n\n\n    /**\n     * registers for locus and roap mercury events\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    listenForEvents() {\n      this.webex.internal.mercury.on(LOCUSEVENT.LOCUS_MERCURY, (envelope) => {\n        this.handleLocusMercury(envelope);\n      });\n      this.webex.internal.mercury.on(ROAP.ROAP_MERCURY, (envelope) => {\n        MeetingsUtil.handleRoapMercury(envelope, this.meetingCollection);\n      });\n\n      this.webex.internal.mercury.on(ONLINE, () => {\n        this.syncMeetings();\n      });\n\n      this.webex.internal.mercury.on(OFFLINE, () => {\n        this.handleMercuryOffline();\n      });\n    }\n\n    /**\n     * stops listening for locus and roap mercury events\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    stopListeningForEvents() {\n      this.webex.internal.mercury.off(LOCUSEVENT.LOCUS_MERCURY);\n      this.webex.internal.mercury.off(ROAP.ROAP_MERCURY);\n      this.webex.internal.mercury.off(ONLINE);\n    }\n\n    /**\n     * @returns {undefined}\n     * @private\n     * @memberof Meetings\n     */\n    onReady() {\n      this.webex.once(READY, () => {\n        StaticConfig.set(this.config);\n        LoggerConfig.set(this.config.logging);\n\n        /**\n       * The MeetingInfo object to interact with server\n       * @instance\n       * @type {Object}\n       * @private\n       * @memberof Meetings\n       */\n        this.meetingInfo = this.config.experimental.enableUnifiedMeetings ? new MeetingInfoV2(this.webex) : new MeetingInfo(this.webex);\n        this.personalMeetingRoom = new PersonalMeetingRoom({meetingInfo: this.meetingInfo}, {parent: this.webex});\n\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'onReady'\n          },\n          EVENT_TRIGGERS.MEETINGS_READY\n        );\n      });\n    }\n\n    /**\n     * API to toggle unified meetings\n     * @param {Boolean} changeState\n     * @private\n     * @memberof Meetings\n     * @returns {undefined}\n    */\n    _toggleUnifiedMeetings(changeState) {\n      if (typeof changeState !== 'boolean') {\n        return;\n      }\n      if (this.config?.experimental?.enableUnifiedMeetings !== changeState) {\n        this.config.experimental.enableUnifiedMeetings = changeState;\n        this.meetingInfo = changeState ? new MeetingInfoV2(this.webex) : new MeetingInfo(this.webex);\n      }\n    }\n\n    /**\n     * Explicitly sets up the meetings plugin by registering\n     * the device, connecting to mercury, and listening for locus events.\n     *\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n    register() {\n      if (!this.webex.canAuthorize) {\n        LoggerProxy.logger.error('Meetings:index#register --> ERROR, Unable to register, SDK cannot authorize');\n\n        return Promise.reject(new Error('SDK cannot authorize'));\n      }\n\n\n      if (this.registered) {\n        LoggerProxy.logger.info('Meetings:index#register --> INFO, Meetings plugin already registered');\n\n        return Promise.resolve();\n      }\n\n      return Promise.all([\n        this.getGeoHint(),\n        this.startReachability().catch((error) => {\n          LoggerProxy.logger.error(`Meetings:index#register --> GDM error, ${error.message}`);\n        }),\n        this.webex.internal.device.register()\n          .then(() => LoggerProxy.logger.info(`Meetings:index#register --> INFO, Device registered ${this.webex.internal.device.url}`))\n          .then(() => this.webex.internal.mercury.connect()),\n        MeetingsUtil.checkH264Support.call(this)\n      ]).then(() => {\n        this.listenForEvents();\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings',\n            function: 'register'\n          },\n          EVENT_TRIGGERS.MEETINGS_REGISTERED\n        );\n        this.registered = true;\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MEETINGS_REGISTRATION_SUCCESS,\n        );\n      })\n        .catch((error) => {\n          LoggerProxy.logger.error(`Meetings:index#register --> ERROR, Unable to register, ${error.message}`);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.MEETINGS_REGISTRATION_FAILED,\n            {\n              reason: error.message,\n              stack: error.stack\n            }\n          );\n\n          return Promise.reject(error);\n        });\n    }\n\n    /**\n     * Explicitly tears down the meetings plugin by deregistering\n     * the device, disconnecting from mercury, and stops listening to locus events\n     *\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n    unregister() {\n      if (!this.registered) {\n        LoggerProxy.logger.info('Meetings:index#unregister --> INFO, Meetings plugin already unregistered');\n\n        return Promise.resolve();\n      }\n\n      this.stopListeningForEvents();\n\n      return this.webex.internal.mercury.disconnect()\n        .then(() => this.webex.internal.device.unregister())\n        .then(() => {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'unregister'\n            },\n            EVENT_TRIGGERS.MEETINGS_UNREGISTERED\n          );\n          this.registered = false;\n        });\n    }\n\n    /**\n     * Uploads logs to the webex services for tracking\n     * @param {Object} [options={}]\n     * @param {String} [options.callStart] Call Start Time\n     * @param {String} [options.feedbackId] ID used for tracking\n     * @param {String} [options.locusId]\n     * @param {String} [options.correlationId]\n     * @param {String} [options.meetingId] webex meeting ID\n     * @param {String} [options.userId] userId\n     * @param {String} [options.orgId] org id\n     * @returns {String} feedback ID logs were submitted under\n     */\n    uploadLogs(options = {}) {\n      LoggerProxy.logger.info('Meetings:index#uploadLogs --> uploading logs');\n\n      return this.loggerRequest.uploadLogs(options)\n        .then((uploadResult) => {\n          LoggerProxy.logger.info('Meetings:index#uploadLogs --> Upload logs for meeting completed.', uploadResult);\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'uploadLogs'\n            },\n            EVENT_TRIGGERS.MEETING_LOG_UPLOAD_SUCCESS,\n            {\n              meetingId: options.meetingId,\n              details: uploadResult\n            }\n          );\n        })\n        .catch((uploadError) => {\n          LoggerProxy.logger.error('Meetings:index#uploadLogs --> Unable to upload logs for meeting', uploadError);\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'uploadLogs'\n            },\n            EVENT_TRIGGERS.MEETING_LOG_UPLOAD_FAILURE,\n            {\n              meetingId: options.meetingId,\n              reason: uploadError\n            }\n          );\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.UPLOAD_LOGS_FAILURE,\n            {\n              meetingId: options.meetingsId,\n              reason: uploadError.message,\n              stack: uploadError.stack,\n              code: uploadError.code\n            }\n          );\n        });\n    }\n\n    /**\n     * initializes the reachability instance for Meetings\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n    setReachability() {\n      this.reachability = new Reachability(this.webex);\n    }\n\n    /**\n     * gets the reachability instance for Meetings\n     * @returns {Reachability}\n     * @public\n     * @memberof Meetings\n     */\n    getReachability() {\n      return this.reachability;\n    }\n\n    /**\n     * initializes and starts gathering reachability for Meetings\n     * @returns {Promise}\n     * @public\n     * @memberof Meetings\n     */\n    startReachability() {\n      if (!this.reachability) {\n        this.setReachability();\n      }\n\n      return this.getReachability().gatherReachability();\n    }\n\n    /**\n     * Get geoHint for info for meetings\n     * @returns {Promise}\n     * @private\n     * @memberof Meetings\n     */\n    getGeoHint() {\n      return this.request.fetchGeoHint().then((res) => {\n        this.geoHintInfo = res;\n      });\n    }\n\n    /**\n     * gets the personal meeting room instance, for saved PMR values for this user\n     * @returns {PersonalMeetingRoom}\n     * @public\n     * @memberof Meetings\n     */\n    getPersonalMeetingRoom() {\n      return this.personalMeetingRoom;\n    }\n\n    /**\n     * @param {Meeting} meeting\n     * @param {Object} reason\n     * @param {String} type\n     * @returns {Undefined}\n     * @private\n     * @memberof Meetings\n     */\n    destroy(meeting, reason) {\n      MeetingUtil.cleanUp(meeting);\n      this.meetingCollection.delete(meeting.id);\n      Trigger.trigger(\n        this,\n        {\n          file: 'meetings',\n          function: 'destroy'\n        },\n        EVENT_TRIGGERS.MEETING_REMOVED,\n        {\n          meetingId: meeting.id,\n          reason\n        }\n      );\n    }\n\n    /**\n     * Create a meeting.\n     * @param {string} destination - sipURL, spaceId, phonenumber, or locus object}\n     * @param {string} [type] - the optional specified type, such as locusId\n     * @returns {Promise<Meeting>} A new Meeting.\n     * @public\n     * @memberof Meetings\n     */\n    create(destination, type = null) {\n      // TODO: type should be from a dictionary\n\n      // Validate meeting information based on the provided destination and\n      // type. This must be performed prior to determining if the meeting is\n      // found in the collection, as we mutate the destination for hydra person\n      // id values.\n      return this.meetingInfo.fetchInfoOptions(destination, type)\n        // Catch a failure to fetch info options.\n        .catch((error) => {\n          LoggerProxy.logger.info(`Meetings:index#create --> INFO, unable to determine info options: ${error.message}`);\n        })\n        .then((options = {}) => {\n          // Normalize the destination.\n          const targetDest = options.destination || destination;\n\n          // check for the conversation URL then sip Url\n          let meeting = null;\n\n          if (type === _CONVERSATION_URL_ || options.type === _CONVERSATION_URL_) {\n            meeting = this.meetingCollection.getByKey(CONVERSATION_URL, targetDest);\n          }\n\n          // Attempt to collect the meeting if it exists.\n          if (!meeting) {\n            meeting = this.meetingCollection.getByKey(SIP_URI, targetDest);\n          }\n\n\n          // Validate if a meeting was found.\n          if (!meeting) {\n            // Create a meeting based on the normalized destination and type.\n            return this.createMeeting(targetDest, type)\n              .then((createdMeeting) => {\n                // If the meeting was successfully created.\n                if (createdMeeting && createdMeeting.on) {\n                  // Create a destruction event for the meeting.\n                  createdMeeting.on(EVENTS.DESTROY_MEETING, (payload) => {\n                    if (this.config.autoUploadLogs) {\n                      this.uploadLogs({\n                        callStart: createdMeeting.locusInfo?.fullState?.lastActive,\n                        correlationId: createdMeeting.correlationId,\n                        feedbackId: createdMeeting.correlationId,\n                        locusId: createdMeeting.locusId,\n                        meetingId: createdMeeting.locusInfo?.info?.webExMeetingId\n                      }).then(() => this.destroy(createdMeeting, payload.reason));\n                    }\n                    else {\n                      this.destroy(createdMeeting, payload.reason);\n                    }\n                  });\n\n                  createdMeeting.on(EVENTS.REQUEST_UPLOAD_LOGS, (meetingInstance) => {\n                    if (this.config.autoUploadLogs) {\n                      this.uploadLogs({\n                        callStart: meetingInstance?.locusInfo?.fullState?.lastActive,\n                        correlationId: meetingInstance.correlationId,\n                        feedbackId: meetingInstance.correlationId,\n                        locusId: meetingInstance.locusId,\n                        meetingId: meetingInstance.locusInfo?.info?.webExMeetingId\n                      });\n                    }\n                  });\n                }\n                else {\n                  LoggerProxy.logger.error(`Meetings:index#create --> ERROR, meeting does not have on method, will not be destroyed, meeting cleanup impossible for meeting: ${meeting}`);\n                }\n\n                // Return the newly created meeting.\n                return Promise.resolve(createdMeeting);\n              });\n          }\n\n          // Return the existing meeting.\n          return Promise.resolve(meeting);\n        });\n    }\n\n    /**\n     * @param {String} destination see create()\n     * @param {String} type see create()\n     * @returns {Promise} a new meeting instance complete with meeting info and destination\n     * @private\n     * @memberof Meetings\n     */\n    async createMeeting(destination, type = null) {\n      const meeting = new Meeting(\n        {\n          userId: this.webex.internal.device.userId,\n          deviceUrl: this.webex.internal.device.url,\n          orgId: this.webex.internal.device.orgId,\n          roapSeq: 0,\n          locus: type === _LOCUS_ID_ ? destination : null, // pass the locus object if present\n          meetingInfoProvider: this.meetingInfo\n        },\n        {\n          parent: this.webex\n        }\n      );\n\n      this.meetingCollection.set(meeting);\n\n      try {\n        await meeting.fetchMeetingInfo({destination, type});\n      }\n      catch (err) {\n        if (!(err instanceof CaptchaError) && !(err instanceof PasswordError)) {\n          // if there is no meeting info we assume its a 1:1 call or wireless share\n          LoggerProxy.logger.info(`Meetings:index#createMeeting --> Info Unable to fetch meeting info for ${destination}.`);\n          LoggerProxy.logger.info('Meetings:index#createMeeting --> Info assuming this destination is a 1:1 or wireless share');\n        }\n        LoggerProxy.logger.debug(`Meetings:index#createMeeting --> Debug ${err} fetching /meetingInfo for creation.`);\n        // We need to save this info for future reference\n        meeting.destination = destination;\n      }\n      finally {\n        // For type LOCUS_ID we need to parse the locus object to get the information\n        // about the caller and callee\n        // Meeting Added event will be created in `handleLocusEvent`\n        if (type !== _LOCUS_ID_) {\n          if (!meeting.sipUri) {\n            meeting.setSipUri(destination);\n          }\n\n          // TODO: check if we have to move this to parser\n          const meetingAddedType = MeetingsUtil.getMeetingAddedType(type);\n\n          // We typically shouldn't need to trigger both and event and return a promise.\n          // Is this a special case? We want to make the public API usage as simple as possible.\n          Trigger.trigger(\n            this,\n            {\n              file: 'meetings',\n              function: 'createMeeting'\n            },\n            EVENT_TRIGGERS.MEETING_ADDED,\n            {\n              meeting,\n              type: meetingAddedType\n            }\n          );\n        }\n      }\n\n      return meeting;\n\n      // Create the meeting calling the necessary service endpoints.\n\n      // Internally, there are many more destinations:\n      //\n      // - locusID\n      // - meetingURL\n      // - globalMeetingID, e.g, *00*meetingID\n      // - meetingID\n      // - meetingURL\n      // - PSTN\n      // - phone number\n      //\n      // Our job is to determine the appropriate one\n      // and its corresponding service so that developers\n      // need only sipURL or spaceID to get a meeting\n      // and its ID, but have the option to use createWithType()\n      // and specify those types to get meetingInfo\n    }\n\n    /**\n     * get a specifc meeting given it's type matched to the value, i.e., locus url\n     * @param {String} type\n     * @param {Object} value\n     * @returns {Meeting}\n     * @public\n     * @memberof Meetings\n     */\n    getMeetingByType(type, value) {\n      return this.meetingCollection.getByKey(type, value);\n    }\n\n    /**\n     * Get all meetings.\n     * @param {object} options\n     * @param {object} options.startDate - get meetings after this start date\n     * @param {object} options.endDate - get meetings before this end date\n     * @returns {Object} All currently active meetings.\n     * @public\n     * @memberof Meetings\n     */\n    getAllMeetings(options = {}) {\n      // Options may include other parameters to filter this collection\n      // of meetings.\n      return this.meetingCollection.getAll(options);\n    }\n\n    /**\n     * syncs all the meeting from server\n     * @returns {undefined}\n     * @public\n     * @memberof Meetings\n     */\n    syncMeetings() {\n      return this.request.getActiveMeetings().then((locusArray) => {\n        const activeLocusUrl = [];\n\n        if (locusArray?.loci && locusArray.loci.length > 0) {\n          locusArray.loci.forEach((locus) => {\n            activeLocusUrl.push(locus.url);\n            this.handleLocusEvent({\n              locus,\n              locusUrl: locus.url\n            });\n          });\n        }\n        const meetingsCollection = this.meetingCollection.getAll();\n\n        if (Object.keys(meetingsCollection).length > 0) {\n          // Some time the mercury event is missed after mercury reconnect\n          // if sync returns no locus then clear all the meetings\n          for (const meeting of Object.values(meetingsCollection)) {\n            if (!activeLocusUrl.includes(meeting.locusUrl)) {\n              // destroy function also uploads logs\n              this.destroy(meeting, MEETING_REMOVED_REASON.NO_MEETINGS_TO_SYNC);\n            }\n          }\n        }\n      });\n    }\n\n    /**\n     * Get all scheduled meetings.\n     * @param {object} options\n     * @param {object} options.startDate - get meetings after this start date\n     * @param {object} options.endDate - get meetings before this end date\n     * @returns {Object} All scheduled meetings.\n     * @memberof Meetings\n     */\n    getScheduledMeetings() {\n      return this.meetingCollection.getAll({scheduled: true});\n    }\n\n    /**\n     * Get the logger instance for plugin-meetings\n     * @returns {Logger}\n     */\n    getLogger() {\n      return LoggerProxy.get();\n    }\n\n    /**\n     * Get the Stats Analyzer singleton\n     * @returns {StatsAnalyzer}\n     * @public\n     * @memberof Meetings\n     */\n    getAnalyzer() {\n      return StatsAnalyzer;\n    }\n\n    /**\n     * Get the Stats Calculator singleton\n     * @returns {StatsCalculator}\n     * @public\n     * @memberof Meetings\n     */\n    getCalculator() {\n      return StatsCalculator;\n    }\n}\n"]}
{"version":3,"sources":["index.js"],"names":["NetworkQualityMonitor","config","indicatorTypes","PACKETLOSS","LATENCY","JITTER","frequencyTypes","UPLINK","DOWNLINK","networkQualityScore","networkQualityStatus","STATS","VIDEO_CORRELATE","AUDIO_CORRELATE","SHARE_CORRELATE","mediaType","emit","file","function","EVENT_TRIGGERS","NETWORK_QUALITY","emitNetworkQuality","remoteRtpResults","statsAnalyzerCurrentStats","roundTripTimeInMilliseconds","roundTripTime","jitterInMilliseconds","jitter","currentPacketLossRatio","send","determinePacketLoss","videoPacketLossRatioThreshold","determineLatency","rttThreshold","deterMineJitter","jitterThreshold","determineIfUndefined","value","acceptable","updateNetworkQualityStatus","EventsScope"],"mappings":"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","sourcesContent":["import EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS, STATS} from '../constants';\n\n\n/**\n  * Meeting - network quality event\n  * Emitted on each interval of retrieving stats Analyzer data\n  * @event network:quality\n  * @type {Object}\n  * @property {string} mediaType {video|audio}\n  * @property {number} networkQualityScore - value determined in determineUplinkNetworkQuality\n  * @memberof NetworkQualityMonitor\n  */\n/**\n * NetworkQualityMonitor class that will emit events based on detected quality\n *\n * @class NetworkQualityMonitor\n * @extends {EventsScope}\n */\nexport default class NetworkQualityMonitor extends EventsScope {\n  /**\n   * Creates a new instance of NetworkQualityMonitor\n   * @constructor\n   * @public\n   * @param {Object} config\n   * @property {Object} indicatorTypes - network properties used to evaluate network quality used as constants\n   * @property {Object} frequencyTypes - frequency properties used as constants {uplink|send} {downlink|receive}\n   * @property {number} networkQualityScore  - 0|1 1 is acceptable 0 is bad/unknown\n   * @property {Object} networkQualityStatus - hash object based on indicatorTypes and frequencyTypes\n   * @property {string} mediaType - audio|video\n   */\n  constructor(config) {\n    super();\n    this.config = config;\n    this.indicatorTypes = Object.freeze({\n      PACKETLOSS: 'packetLoss',\n      LATENCY: 'latency',\n      JITTER: 'jitter'\n    });\n    this.frequencyTypes = Object.freeze({\n      UPLINK: 'uplink',\n      DOWNLINK: 'downlink'\n    });\n    this.networkQualityScore = 1;\n    this.networkQualityStatus = {\n      [this.frequencyTypes.UPLINK]: {\n        [STATS.VIDEO_CORRELATE]: {},\n        [STATS.AUDIO_CORRELATE]: {},\n        [STATS.SHARE_CORRELATE]: {}\n      }\n    };\n    this.mediaType = null;\n  }\n\n  /**\n   * emits NETWORK_QUALITY event on meeting with payload of media type and uplinkNetworkQuality score\n   *\n   * @memberof NetworkQualityMonitor\n   * @returns {void}\n   */\n  emitNetworkQuality() {\n    this.emit(\n      {\n        file: 'networkQualityMonitor',\n        function: 'emitNetworkQuality'\n      },\n      EVENT_TRIGGERS.NETWORK_QUALITY,\n      {\n        mediaType: this.mediaType,\n        networkQualityScore: this.networkQualityScore\n      }\n    );\n  }\n\n  /**\n   * invokes emitNetworkQuality method resets values back to default\n   * @returns {void}\n   * @memberof NetworkQualityMonitor\n   */\n  updateNetworkQualityStatus() {\n    this.emitNetworkQuality();\n\n    // reset values\n    this.networkQualityScore = 1;\n    this.mediaType = null;\n  }\n\n\n  /**\n   * filter data to determine uplink network quality, invoked on same interval as stats analyzer remote-inbout-rtp\n   * @param {Object} configObj\n   * @param {string} configObj.mediaType {audio|video}\n   * @param {RTCStats} configObj.remoteRtpResults RTC stats remote obj\n   * @param {Object} configObj.statsAnalyzerCurrentStats statsResults\n   * @returns {void}\n   * @public\n   * @memberof NetworkQualityMonitor\n   */\n  determineUplinkNetworkQuality({mediaType, remoteRtpResults, statsAnalyzerCurrentStats}) {\n    const roundTripTimeInMilliseconds = remoteRtpResults.roundTripTime * 1000;\n    const jitterInMilliseconds = remoteRtpResults.jitter * 1000;\n    const {currentPacketLossRatio} = statsAnalyzerCurrentStats[mediaType].send;\n\n    this.mediaType = mediaType;\n\n    const {JITTER, PACKETLOSS, LATENCY} = this.indicatorTypes;\n    const {UPLINK} = this.frequencyTypes;\n\n    /**\n     * determines if packetLoss ratio is over threshold set in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const determinePacketLoss = () => {\n      if (currentPacketLossRatio >\n        this.config.videoPacketLossRatioThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * determines if round trip time value is over threshold set in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const determineLatency = () => {\n      if (roundTripTimeInMilliseconds > this.config.rttThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * determines if jitter value is over threshold in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const deterMineJitter = () => {\n      if (jitterInMilliseconds > this.config.jitterThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * returns null if val is specifically undefined\n     * @param {(number|undefined)} value\n     * @returns {(number|null)}\n     */\n    const determineIfUndefined = (value) => (typeof value === 'undefined' ? null : value);\n\n    /**\n     * Values for some browsers specifically Safari will be undefined we explicitly set to null\n     * https://bugs.webkit.org/show_bug.cgi?id=206645\n     * https://bugs.webkit.org/show_bug.cgi?id=212668\n     */\n    // PACKET LOSS\n    this.networkQualityStatus[UPLINK][mediaType][PACKETLOSS] = {\n      acceptable: determinePacketLoss(),\n      value: determineIfUndefined(currentPacketLossRatio)\n    };\n\n\n    // LATENCY measured in Round trip time\n    this.networkQualityStatus[UPLINK][mediaType][LATENCY] = {\n      acceptable: determineLatency(),\n      value: determineIfUndefined(remoteRtpResults.roundTripTime)\n    };\n\n    // JITTER\n    this.networkQualityStatus[UPLINK][mediaType][JITTER] = {\n      acceptable: deterMineJitter(),\n      value: determineIfUndefined(remoteRtpResults.jitter)\n    };\n\n    this.updateNetworkQualityStatus();\n  }\n\n  /**\n   * Get the current status of network quaility object - networkQualityStatus\n   * @returns {Object}\n   * @public\n   */\n  get networkQualityStats() {\n    const {UPLINK} = this.frequencyTypes;\n\n    return this.networkQualityStatus[UPLINK];\n  }\n}\n"]}
{"version":3,"sources":["index.js"],"names":["isBrowser","logRequest","request","header","success","failure","LoggerProxy","logger","info","then","arg","catch","error","MEDIA_UPDATE_TYPE","ALL","AUDIO","VIDEO","SHARE","Meeting","attrs","options","MEETINGS","mediaDirection","audioVideo","VIDEO_RESOLUTIONS","mediaProperties","localQualityLevel","sharePreferences","sendAudio","sendVideo","sendShare","warn","video","deviceId","preferredVideoDevice","lastVideoDeviceId","getVideoDeviceId","setVideoDeviceId","Media","getSupportedDevice","reject","MediaError","devicePermissions","getUserMedia","isSharing","shareStatus","SHARE_STATUS","LOCAL_SHARE_ACTIVE","config","metricName","BEHAVIORAL_METRICS","GET_USER_MEDIA_FAILURE","data","correlation_id","correlationId","locus_id","locusUrl","split","pop","reason","message","stack","metadata","type","name","Metrics","sendBehavioralMetric","getDevices","experimental","enableMediaNegotiatedEvent","Trigger","trigger","file","function","EVENT_TRIGGERS","MEDIA_NEGOTIATED","canUpdateMedia","queuedMediaUpdates","length","shift","pendingPromiseResolve","pendingPromiseReject","mediaUpdateType","log","updateMedia","updateAudio","updateVideo","updateShare","id","uuid","v4","userId","orgId","resource","deviceUrl","roapSeq","ROAP_SEQ_PRE","meetingInfo","members","Members","locus","url","parent","webex","roap","Roap","reconnectionManager","ReconnectionManager","audio","meetingFiniteStateMachine","MeetingStateMachine","create","stats","internalStats","conversationUrl","sipUri","partner","owner","hostId","policy","meetingRequest","MeetingRequest","mediaConnections","updateMediaConnections","slice","MediaProperties","inMeetingActions","InMeetingActions","NO_SHARE","get","shareTransceiver","peerConnection","shareDirection","direction","trackReadyState","sender","track","readyState","activeShare","LIVE","offersToSendData","SENDRECV","configurable","callEvents","floorGrantPending","dialInDeviceStatus","PSTN_STATUS","UNKNOWN","dialInUrl","dialOutDeviceStatus","dialOutUrl","mediaQualityMetrics","statsAnalyzer","networkQualityMonitor","mqaProcessor","networkStatus","locusInfo","LocusInfo","updateMeetingObject","bind","recording","deferJoin","undefined","hasWebsocketConnected","internal","mercury","connected","lastVideoLayoutInfo","layoutType","main","content","transcription","passwordStatus","PASSWORD_STATUS","requiredCaptcha","meetingInfoFailureReason","setUpLocusInfoListeners","init","hasJoinedOnce","destination","password","captchaCode","Error","REQUIRED","captchaInfo","code","captchaId","meetingInfoProvider","fetchMeetingInfo","parseMeetingInfo","body","MEETING_INFO_FAILURE_REASON","NONE","VERIFIED","NOT_REQUIRED","resolve","MeetingInfoV2PasswordError","meetingNumber","WRONG_PASSWORD","refreshCaptcha","PasswordError","MeetingInfoV2CaptchaError","WRONG_CAPTCHA","isPasswordRequired","CaptchaError","OTHER","_SIP_URI_","isPasswordValid","failureReason","URL","refreshURL","hostname","captchaRefreshUrl","response","captchaID","verificationImageURL","verificationAudioURL","setUpLocusInfoSelfListener","setUpLocusInfoMeetingListener","setUpLocusFullStateListener","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setupLocusControlsListener","setUpLocusMediaSharesListener","setUpLocusInfoMeetingInfoListener","setUpLocusInfoAssignHostListener","setUpLocusInfoMediaInactiveListener","on","EVENTS","DISCONNECT_DUE_TO_INACTIVITY","res","locusId","REQUEST_UPLOAD_LOGS","reconnection","autoRejoin","reconnect","MEETING_SELF_LEFT","LOCUS_INFO_CAN_ASSIGN_HOST","payload","MEETING_ACTIONS_UPDATE","canAssignHost","canLock","getCanLock","canUnlock","getCanUnlock","setCanAssignHost","LOCUSINFO","FULL_STATE_MEETING_STATE_CHANGE","MEETING_STATE_CHANGE","FULL_STATE_TYPE_UPDATE","locusFullStateTypeUpdate","event","trackingId","identifiers","services","fullState","locusStartTime","lastActive","mediaAgentAlias","mediaAgentGroupId","mediaAgentCluster","joinRespRxStartAudio","getSetupDelayDuration","audioSetupDelay","joinRespRxStart","joinRespRxStartVideo","videoSetupDelay","joinRespTxStartAudio","getSendingMediaDelayDuration","joinRespTxStart","joinRespTxStartVideo","localSDPGenRemoteSDPRecv","getLocalSDPGenRemoteSDPRecvDelay","joinTimes","callInitiateJoinReq","getCallInitiateJoinReq","joinReqResp","getJoinReqResp","getTotalJmt","MQA_STATS","CA_TYPE","initMediaPayload","initPayload","getAnalyzerMetricsPrePayload","metrics","submitCallDiagnosticEvents","NETWORK_STATUS","DISCONNECTED","MEETINGS_NETWORK_DISCONNECTED","CONNECTED","MEETINGS_NETWORK_CONNECTED","LOCUS_INFO_UPDATE_SELF","locusSelfUpdate","pstnUpdate","newSelf","state","MEETING_STATE","STATES","JOINED","share","self","dialInPstnDevice","pstnDevices","find","device","dialOutPstnDevice","changed","newStatus","dialingStatus","MEETING_SELF_PHONE_AUDIO_UPDATE","dialIn","status","attendeeId","dialOut","LOCUS_INFO_UPDATE_HOST","locusHostUpdate","LOCUS_INFO_UPDATE_PARTICIPANTS","locusParticipantsUpdate","CONTROLS_RECORDING_UPDATED","modifiedBy","lastModified","RECORDING_STATE","RECORDING","MEETING_STARTED_RECORDING","IDLE","MEETING_STOPPED_RECORDING","PAUSED","MEETING_PAUSED_RECORDING","RESUMED","MEETING_RESUMED_RECORDING","LOCUS_INFO_UPDATE_MEDIA_SHARES","current","contentShare","whiteboardShare","whiteboard","previousContentShare","previous","previousWhiteboardShare","beneficiaryId","disposition","resourceUrl","newShareStatus","selfId","FLOOR_ACTION","GRANTED","REMOTE_SHARE_ACTIVE","shareTrack","stopShare","skipSignalingCheck","WHITEBOARD_SHARE_ACTIVE","RELEASED","oldShareStatus","MEETING_STOPPED_SHARING_REMOTE","MEETING_STOPPED_SHARING_LOCAL","SHARE_STOPPED_REASON","SELF_STOPPED","MEETING_STOPPED_SHARING_WHITEBOARD","sendStartedSharingRemote","MEETING_STARTED_SHARING_REMOTE","memberId","receiveShare","finally","MEETING_STARTED_SHARING_LOCAL","postEvent","eventType","LOCAL_SHARE_FLOOR_GRANTED","meeting","MEETING_STARTED_SHARING_WHITEBOARD","WHITEBOARD_SHARE_FLOOR_GRANTED","locusMediaSharesUpdate","LOCUS_INFO_UPDATE_URL","locusUrlUpdate","MEETING_LOCKED","MEETING_UNLOCKED","MEETING_INFO_UPDATED","newCanLock","newCanUnlock","moderator","MeetingUtil","canUserLock","canUserUnlock","getCanAssignHost","setCanLock","setCanUnlock","LOCAL_UNMUTE_REQUIRED","handleServerLocalUnmuteRequired","MEETING_SELF_UNMUTED_BY_OTHERS","SELF_REMOTE_MUTE_STATUS_UPDATED","handleServerRemoteMuteUpdate","muted","unmuteAllowed","isMuted","MEETING_SELF_MUTED_BY_OTHERS","LOCAL_UNMUTE_REQUESTED","MEETING_SELF_REQUESTED_TO_UNMUTE","SELF_UNADMITTED_GUEST","MEETING_SELF_LOBBY_WAITING","LOBBY_ENTERED","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","LOBBY_EXITED","MEDIA_INACTIVITY","MEETING_MEDIA_INACTIVE","MEDIA_STATUS_CHANGE","updateMediaStatus","actual","expected","receiveAudio","receiveVideo","REMOTE_RESPONSE","remote","remoteDeclined","leave","DESTROY_MEETING","wirelessShare","onended","stop","shouldLeave","cleanUp","meetingId","object","forEach","key","invitee","alertIfActive","addMember","cancelPhoneInvite","memberIds","admitMembers","removeMember","mute","muteMember","transferHostToMember","mqaInterval","clearInterval","automaticMetrics","StatsMetrics","getStats","initialize","setStats","setInterval","processMQAData","mqaMetricsInterval","MQAProcessor","DATA_PLACEMENTS","sendRecvData","toLowerCase","endsWith","STATS","SENDER","getSender","RECEIVER","getReceiver","mqa","getMQA","interval","getSlice","process","override","createStats","StatsUtil","generateOptions","CONFIG","WebRTCStats","destroySenders","destroyReceivers","isSelf","webexMeetingInfo","errors","setSipUri","enableUnifiedMeetings","sipUrl","sipMeetingUri","meetingJoinUrl","permissionToken","setLocus","participants","getLocusPartner","_CALL_","person","seq","mtgLocus","mediaId","host","initialSetup","pc","ontrack","MEDIA_ID","AUDIO_TRACK","VIDEO_TRACK","SHARE_TRACK","mediaTrack","trackMediaID","transceiver","mid","target","audioTransceiver","videoTransceiver","receiver","MUTE_AUDIO_FAILURE","EVENT_TYPES","REMOTE_AUDIO","setRemoteAudioTrack","REMOTE_VIDEO","setRemoteVideoTrack","REMOTE_SHARE","setRemoteShare","startAnalyzer","MEDIA_READY","stream","MediaUtil","createMediaStream","unsetRemoteMedia","unsetRemoteTracks","closeRemoteTracks","remoteAudioTrack","remoteVideoTrack","remoteShare","triggerMediaStoppedEvent","mediaType","MEDIA_STOPPED","stopTrack","stopTracks","isTrackStopped","ENDED","isWrongReadyState","all","LOCAL","audioTrack","videoTrack","emitEvent","settings","getSettings","setMediaSettings","echoCancellation","noiseSuppression","mediaSettings","setLocalAudioTrack","applyClientStateLocally","sendLocalMediaReadyEvent","aspectRatio","frameRate","height","width","setLocalVideoTrack","localStream","getTrack","localShare","setLocalShareTrack","contentTracks","displaySurface","cursor","screen","handleShareTrackEnded","LOCAL_SHARE","audioStopped","videoStopped","unsetLocalVideoTrack","unsetLocalShareTrack","ONLINE","MERCURY_CONNECTION_RESTORED","OFFLINE","MERCURY_CONNECTION_LOST","MERCURY_CONNECTION_FAILURE","PeerConnectionManager","close","unsetPeerConnection","detection","off","isUserInJoinedState","UserNotJoinedError","NoMediaEstablishedYetError","ParameterError","LOG_HEADER","handleClientRequest","handleAudioLogging","MUTED","USER_INTERACTION","UNMUTED","UNMUTE_AUDIO_FAILURE","handleVideoLogging","MUTE_VIDEO_FAILURE","UNMUTE_VIDEO_FAILURE","joinOptions","audioVideoOptions","join","joinResponse","getMediaStreams","addMedia","mediaResponse","media","local","JOIN_WITH_MEDIA_FAILURE","isMediaEstablished","currentMediaStatus","validate","ReconnectInProgress","MEETING_RECONNECTION_STARTING","MEETING_RECONNECTION_SUCCESS","MEETING_RECONNECTION_FAILURE","ReconnectionError","MEETING_RECONNECT_FAILURE","uploadLogs","reset","WEBEX_ASSISTANT_STATUS_ACTIVE","onCloseSocket","triggerStopReceivingTranscriptionEvent","onErrorSocket","RECEIVE_TRANSCRIPTION_FAILURE","datachannelUrl","method","HTTP_VERBS","POST","uri","webSocketUrl","Transcription","sessionId","subscribe","MEETING_STARTED_RECEIVING_TRANSCRIPTION","monitorTranscriptionSocketConnection","connect","credentials","supertoken","access_token","closeSocket","MEETING_STOPPED_RECEIVING_TRANSCRIPTION","joinFailed","joinSuccess","setCorrelationId","rejoin","CALL_INITIATED","MEETING_STATE_MACHINE","RINGING","ring","_JOIN_","resourceId","meetingQuality","QUALITY_LEVELS","errorMessage","setLocalQualityLevel","setRemoteQualityLevel","joinMeetingOptions","JOIN_SUCCESS","receiveTranscription","isTranscriptionSupported","fail","JOIN_FAILURE","phoneNumber","dialInPstn","dialOutPstn","pstnStatus","SUCCESS","includes","isPhoneProvisioned","clientUrl","onFullLocus","ADD_DIAL_IN_FAILURE","dial_in_url","client_url","ADD_DIAL_OUT_FAILURE","dial_out_url","disconnectPhoneAudio","MEDIA_CAPABILITIES","mediaCapabilities","rx","share_audio","tx","MOVE_MEDIA","moveToResource","oldCorrelationId","meetings","meetingCollection","set","leaveMeeting","moveMeeting","delete","meetingState","FULL_STATE","ACTIVE","MeetingNotActiveError","isUserInLeftState","guest","isUserInIdleState","UserInLobbyError","validateOptions","setMediaPeerConnection","createPeerConnection","setMercuryListener","setPeerConnectionEvents","preMedia","attachMedia","remoteQualityLevel","enableRtx","enableExtmap","setStartLocalSDPGenRemoteSDPRecvDelay","devices","handleDeviceLogging","handleMediaLogging","setRemoteStream","startInternalStats","autoSendMQA","startMediaQualityMetrics","enableStatsAnalyzer","NetworkQualityMonitor","StatsAnalyzer","MEDIA_QUALITY","intervalMetadata","peerReflexiveIP","geoHintInfo","clientAddress","DEFAULT_IP","intervalData","networkType","NETWORK_QUALITY","sendNetworkQualityEvent","ADD_MEDIA_FAILURE","timerCount","joiningTimer","sendRoapMediaRequest","sdp","connectionState","CONNECTION_STATE","stabilityTimeout","setTimeout","PC_BAIL_TIMEOUT","once","clearTimeout","ADD_MEDIA_SUCCESS","stopAnalyzer","closePeerConnections","unsetPeerConnections","InvalidSdpError","CODE","MEETING_REMOVED_REASON","MEETING_CONNECTION_FAILED","signalingState","SDP","STABLE","RoapCollection","isBusy","queueItem","push","enqueueMediaUpdate","previousSendShareStatus","setContentSlides","UPDATE_MEDIA_FAILURE","checkForStopShare","startShare","previousMediaDirection","sendTrack","receiveTrack","updateTransceiver","previousShareStatus","stopFloorRequest","delay","sharingModeIsActive","isSharingOutOfSync","isLocalShareLive","setMediaDirection","setLocalTracks","_INCOMING_","acknowledgeMeeting","ALERT_DISPLAYED","declineMeeting","decline","LEAVE","canProceed","leaveReason","CLIENT_LEAVE_REQUEST","MEETING_LEAVE_FAILURE","channelUrl","resourceToken","mediaShares","element","WHITEBOARD_SHARE_INITIATED","personUrl","changeMeetingFloor","MEETING_START_WHITEBOARD_SHARE_FAILURE","board","WHITEBOARD_SHARE_STOPPED","STOP_WHITEBOARD_SHARE_FAILURE","CONTENT","SHARE_INITIATED","MEETING_SHARE_FAILURE","SHARE_STOPPED","floor","beneficiary","STOP_FLOOR_REQUEST_FAILURE","startRecording","stopRecording","pauseRecording","resumeRecording","lockMeeting","unlockMeeting","tones","enableDTMF","sendDTMF","rejectWithErrorLog","renderInfo","layoutInfo","LAYOUT_TYPES","mainWidth","Math","round","mainHeight","abs","contentWidth","contentHeight","changeVideoLayoutDebounced","level","previousLevel","setLocalVideoQuality","SET_MEETING_QUALITY_FAILURE","shareConstraints","getDisplayMedia","shareStream","GET_DISPLAY_MEDIA_FAILURE","USER_ENDED_SHARE_STREAMS","networkQualityScore","typeMedia","performance","now","start","end","startLocalSDPGenRemoteSDPRecvDelay","endLocalSDPGenRemoteSDPRecvDelay","calculatedDelay","METRICS_JOIN_TIMES_MAX_DURATION","startCallInitiateJoinReq","endCallInitiateJoinReq","startJoinReqResp","endJoinReqResp","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAEA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AA2CA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,wBAAoB,gCAApB;AAAA,IAAOA,SAAP,qBAAOA,SAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,QAAwD;AAAA,yBAA7CC,MAA6C;AAAA,MAA7CA,MAA6C,4BAApC,EAAoC;AAAA,0BAAhCC,OAAgC;AAAA,MAAhCA,OAAgC,6BAAtB,EAAsB;AAAA,0BAAlBC,OAAkB;AAAA,MAAlBA,OAAkB,6BAAR,EAAQ;;AACzEC,uBAAYC,MAAZ,CAAmBC,IAAnB,CAAwBL,MAAxB;;AAEA,SAAOD,OAAO,CACXO,IADI,CACC,UAACC,GAAD,EAAS;AACbJ,yBAAYC,MAAZ,CAAmBC,IAAnB,CAAwBJ,OAAxB;;AAEA,WAAOM,GAAP;AACD,GALI,EAMJC,KANI,CAME,UAACC,KAAD,EAAW;AAChBN,yBAAYC,MAAZ,CAAmBK,KAAnB,CAAyBP,OAAzB,EAAkCO,KAAlC;;AACA,UAAMA,KAAN;AACD,GATI,CAAP;AAUD,CAbD;;AAeO,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,GAAG,EAAE,KAD0B;AAE/BC,EAAAA,KAAK,EAAE,OAFwB;AAG/BC,EAAAA,KAAK,EAAE,OAHwB;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAA1B;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;IACqBC,O;;;;;AAGnB;AACF;AACA;AACA;AACA;AACA;AACE,mBAAYC,KAAZ,EAAmBC,QAAnB,EAA4B;AAAA;;AAAA;AAC1B,8BAAM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","sourcesContent":["/* globals performance */\nimport uuid from 'uuid';\nimport {cloneDeep, isEqual, pick} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {\n  MeetingNotActiveError, createMeetingsError, UserInLobbyError,\n  NoMediaEstablishedYetError, UserNotJoinedError, InvalidSdpError\n} from '../common/errors/webex-errors';\nimport StatsAnalyzer from '../statsAnalyzer';\nimport NetworkQualityMonitor from '../networkQualityMonitor';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport createMuteState from '../meeting/muteState';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsMetrics from '../stats/metrics';\nimport StatsUtil from '../stats/util';\nimport Transcription from '../transcription';\nimport PasswordError from '../common/errors/password-error';\nimport CaptchaError from '../common/errors/captcha-error';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport {\n  _CALL_,\n  _INCOMING_,\n  _JOIN_,\n  _SIP_URI_,\n  AUDIO,\n  CONNECTION_STATE,\n  CONTENT,\n  ENDED,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  FULL_STATE,\n  LAYOUT_TYPES,\n  LIVE,\n  LOCUSINFO,\n  MEETING_INFO_FAILURE_REASON,\n  MEETING_REMOVED_REASON,\n  MEETING_STATE_MACHINE,\n  MEETING_STATE,\n  MEETINGS,\n  METRICS_JOIN_TIMES_MAX_DURATION,\n  BEHAVIORAL_METRICS,\n  MQA_STATS,\n  NETWORK_STATUS,\n  ONLINE,\n  OFFLINE,\n  PASSWORD_STATUS,\n  PC_BAIL_TIMEOUT,\n  PSTN_STATUS,\n  QUALITY_LEVELS,\n  RECORDING_STATE,\n  ROAP_SEQ_PRE,\n  SDP,\n  SENDRECV,\n  SHARE_STATUS,\n  SHARE_STOPPED_REASON,\n  STATS,\n  VIDEO_RESOLUTIONS,\n  VIDEO,\n  HTTP_VERBS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\nimport {MeetingInfoV2PasswordError, MeetingInfoV2CaptchaError} from '../meeting-info/meeting-info-v2';\nimport MQAProcessor from '../metrics/mqa-processor';\nimport BrowserDetection from '../common/browser-detection';\nimport RoapCollection from '../roap/collection';\n\nimport InMeetingActions from './in-meeting-actions';\n\nconst {isBrowser} = BrowserDetection();\n\nconst logRequest = (request, {header = '', success = '', failure = ''}) => {\n  LoggerProxy.logger.info(header);\n\n  return request\n    .then((arg) => {\n      LoggerProxy.logger.info(success);\n\n      return arg;\n    })\n    .catch((error) => {\n      LoggerProxy.logger.error(failure, error);\n      throw error;\n    });\n};\n\nexport const MEDIA_UPDATE_TYPE = {\n  ALL: 'ALL',\n  AUDIO: 'AUDIO',\n  VIDEO: 'VIDEO',\n  SHARE: 'SHARE'\n};\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n * @property {boolean} isSharing\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [pin]\n * @property {Boolean} [moderator]\n * @property {String|Object} [meetingQuality]\n * @property {String} [meetingQuality.local]\n * @property {String} [meetingQuality.remote]\n * @property {Boolean} [rejoin]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n * Recording\n * @typedef {Object} Recording\n * @property {Object} state\n * @property {String} modifiedBy\n */\n\n/**\n  * Meeting State Change Event\n  * Emitted when ever there is a meeting state change\n  * @event meeting:stateChange\n  * @instance\n  * @type {Object}\n  * @property {String} currentState current state of the meeting\n  * @property {String} previousState previous state of the meeting\n  * @memberof Meeting\n  */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Remote Event\n * Emitted when remote sharing starts\n * @event meeting:startedSharingRemote\n * @instance\n * @type {Object}\n * @property {Boolean} memberId id of the meeting member that started screen share\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Remote Event\n * Emitted when remote screen sharing ends\n * @event meeting:stoppedSharingRemote\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Unmuted By Others Event\n * Emitted when a member is unmuted by another member\n * @event meeting:self:unmutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @property {Boolean} payload.unmuteAllowed - whether the user is allowed to unmute self\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when the host(moderator)/co-host requests a user to unmute\n * @event meeting:self:requestedToUnmute\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a joined user get admitted to the meeting by another member or host\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when joined user enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} reason Reason why user left the meeting\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Left State\n * Emitted when user is inactive for more then 40 seconds, User can rejoin the meeting again\n * @event meeting:self:left\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n  * Meeting network quality event\n  * Emitted on each interval of retrieving stats Analyzer data\n  * @event network:quality\n  * @type {Object}\n  * @property {string} mediaType {video|audio}\n  * @property {number} networkQualityScore - {1|0} 1 indicates acceptable uplink 0 indicates unacceptable uplink based on threshold\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    /**\n     * Correlation ID used for network tracking of meeting join\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * Organization ID\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.orgId = attrs.orgId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({locusUrl: (attrs.locus && attrs.locus.url)}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {MuteState}\n     * @private\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {MuteState}\n     * @private\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.conversationUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaConnections = null;\n    /**\n     * Update the MediaConnections property with new information\n     * @param {array} mediaConnections\n     * @returns {undefined}\n     * @private\n     * @memberof Meeting\n     */\n    this.updateMediaConnections = (mediaConnections) => {\n      if (!isEqual(this.mediaConnections, mediaConnections)) {\n        // grab last/latest item in the new mediaConnections information\n        this.mediaConnections = mediaConnections.slice(-1);\n      }\n    };\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * This is deprecated, please use shareStatus instead.\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     * @deprecated after v1.118.13\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.shareStatus = SHARE_STATUS.NO_SHARE;\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    Object.defineProperty(this, 'isLocalShareLive', {\n      get: () => {\n        const {shareTransceiver} = this.mediaProperties.peerConnection;\n        const shareDirection = shareTransceiver?.direction;\n        const trackReadyState = shareTransceiver?.sender?.track?.readyState;\n        const activeShare = trackReadyState === LIVE;\n        const offersToSendData = shareDirection === SENDRECV;\n\n        if (activeShare && offersToSendData) {\n          return true;\n        }\n\n        return false;\n      },\n      configurable: true\n    });\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n    this.floorGrantPending = false;\n    /**\n     * The latest status of the dial in device (can be \"JOINED\", \"CONNECTED\", \"LEFT\",\n     * \"TRANSFERRING\", \"SUCCESS\" or \"\")\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Meeting\n     */\n    this.dialInDeviceStatus = PSTN_STATUS.UNKNOWN;\n    /**\n     * the url for provisioned device used to dial in\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Meeting\n     */\n    this.dialInUrl = '';\n    /**\n     * The latest status of the dial out device (can be \"JOINED\", \"CONNECTED\", \"LEFT\",\n     * \"TRANSFERRING\", \"SUCCESS\" or \"\")\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Meeting\n     */\n    this.dialOutDeviceStatus = PSTN_STATUS.UNKNOWN;\n    /**\n     * the url for provisioned device used to dial out\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Meeting\n     */\n    this.dialOutUrl = '';\n    /**\n     * @instance\n     * @type {MediaMetrics}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mediaQualityMetrics = null;\n    /**\n     * @instance\n     * @type {StatsAnalyzer}\n     * @private\n     * @memberof Meeting\n     */\n    this.statsAnalyzer = null;\n    /**\n     * @instance\n     * @type {NetworkQualityMonitor}\n     * @private\n     * @memberof Meeting\n     */\n    this.networkQualityMonitor = null;\n    /**\n     * @instance\n     * @type {MQAProcessor}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.mqaProcessor = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.networkStatus = null;\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), this.webex, this.id);\n    // We had to add listeners first before setting up the locus instance\n    /**\n     * @instance\n     * @type {Recording}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.recording = null;\n\n    /**\n     * Promise that exists if joining, and resolves upon method completion.\n     * @instance\n     * @type {Promise}\n     * @private\n     * @memberof Meeting\n     */\n    this.deferJoin = undefined;\n\n    /**\n     * Staus of websocket connection/mercury connection.\n     * @instance\n     * @type {Boolean}\n     * @private\n     * @memberof Meeting\n     */\n    this.hasWebsocketConnected = this.webex.internal.mercury.connected;\n\n    /**\n     * Last sent render information\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof Meeting\n     */\n    this.lastVideoLayoutInfo = {layoutType: undefined, main: undefined, content: undefined};\n\n    /**\n     * Queue of pending media updates requested by the app\n     * @instance\n     * @type {Array}\n     * @private\n     * @memberof Meeting\n     */\n    this.queuedMediaUpdates = [];\n\n    /**\n     * Meeting transcription object\n     * @instance\n     * @type {Transcription}\n     * @private\n     * @memberof Meeting\n     */\n    this.transcription = undefined;\n\n    /**\n     * Password status. If it's PASSWORD_STATUS.REQUIRED then verifyPassword() needs to be called\n     * with the correct password before calling join()\n     * @instance\n     * @type {PASSWORD_STATUS}\n     * @public\n     * @memberof Meeting\n     */\n    this.passwordStatus = PASSWORD_STATUS.UNKNOWN;\n\n    /**\n     * Information about required captcha. If null, then no captcha is required. status. If it's PASSWORD_STATUS.REQUIRED then verifyPassword() needs to be called\n     * with the correct password before calling join()\n     * @instance\n     * @type {Object}\n     * @property {string} captchaId captcha id\n     * @property {string} verificationImageURL Url of the captcha image\n     * @property {string} verificationAudioURL Url of the captcha audio file\n     * @property {string} refreshURL Url used for refreshing the captcha (don't use it directly, call refreshCaptcha() instead)\n     * @public\n     * @memberof Meeting\n     */\n    this.requiredCaptcha = null;\n\n    /**\n     * Indicates the reason for last failure to obtain meeting.meetingInfo. MEETING_INFO_FAILURE_REASON.NONE if meeting info was\n     * retrieved successfully\n     * @instance\n     * @type {MEETING_INFO_FAILURE_REASON}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingInfoFailureReason = undefined;\n\n    this.setUpLocusInfoListeners();\n    this.locusInfo.init(attrs.locus ? attrs.locus : {});\n    this.hasJoinedOnce = false;\n  }\n\n  /**\n   * Fetches meeting information.\n   * @param {Object} options\n   * @param {String} options.destination\n   * @param {String} options.type\n   * @private\n   * @memberof Meeting\n   * @returns {Promise}\n   */\n  async fetchMeetingInfo({\n    destination, type, password = null, captchaCode = null\n  }) {\n    if (captchaCode && !this.requiredCaptcha) {\n      return Promise.reject(new Error('fetchMeetingInfo() called with captchaCode when captcha was not required'));\n    }\n    if (password && (this.passwordStatus !== PASSWORD_STATUS.REQUIRED && this.passwordStatus !== PASSWORD_STATUS.UNKNOWN)) {\n      return Promise.reject(new Error('fetchMeetingInfo() called with password when password was not required'));\n    }\n\n    try {\n      const captchaInfo = captchaCode ? {code: captchaCode, id: this.requiredCaptcha.captchaId} : null;\n\n      const info = await this.attrs.meetingInfoProvider.fetchMeetingInfo(destination, type, password, captchaInfo);\n\n      this.parseMeetingInfo(info);\n      this.meetingInfo = info ? info.body : null;\n      this.meetingInfoFailureReason = MEETING_INFO_FAILURE_REASON.NONE;\n      this.requiredCaptcha = null;\n      if ((this.passwordStatus === PASSWORD_STATUS.REQUIRED) || (this.passwordStatus === PASSWORD_STATUS.VERIFIED)) {\n        this.passwordStatus = PASSWORD_STATUS.VERIFIED;\n      }\n      else {\n        this.passwordStatus = PASSWORD_STATUS.NOT_REQUIRED;\n      }\n\n      return Promise.resolve();\n    }\n    catch (err) {\n      if (err instanceof MeetingInfoV2PasswordError) {\n        LoggerProxy.logger.info(`Meeting:index#fetchMeetingInfo --> Info Unable to fetch meeting info for ${destination} - password required (code=${err?.body?.code}).`);\n\n        // when wbxappapi requires password it still populates partial meeting info in the response\n        if (err.meetingInfo) {\n          this.meetingInfo = err.meetingInfo;\n          this.meetingNumber = err.meetingInfo.meetingNumber;\n        }\n\n        this.passwordStatus = PASSWORD_STATUS.REQUIRED;\n        this.meetingInfoFailureReason = MEETING_INFO_FAILURE_REASON.WRONG_PASSWORD;\n        if (this.requiredCaptcha) {\n          // this is a workaround for captcha service bug, see WEBEX-224862\n          await this.refreshCaptcha();\n        }\n\n        throw (new PasswordError());\n      }\n      else if (err instanceof MeetingInfoV2CaptchaError) {\n        LoggerProxy.logger.info(`Meeting:index#fetchMeetingInfo --> Info Unable to fetch meeting info for ${destination} - captcha required (code=${err?.body?.code}).`);\n\n        this.meetingInfoFailureReason = (this.requiredCaptcha) ?\n          MEETING_INFO_FAILURE_REASON.WRONG_CAPTCHA :\n          MEETING_INFO_FAILURE_REASON.WRONG_PASSWORD;\n\n        if (err.isPasswordRequired) {\n          this.passwordStatus = PASSWORD_STATUS.REQUIRED;\n        }\n\n        this.requiredCaptcha = err.captchaInfo;\n        throw (new CaptchaError());\n      }\n      else {\n        this.meetingInfoFailureReason = MEETING_INFO_FAILURE_REASON.OTHER;\n        throw (err);\n      }\n    }\n  }\n\n  /**\n   * Checks if the supplied password/host key is correct. It returns a promise with information whether the\n   * password and captcha code were correct or not.\n   * @param {String} password - this can be either a password or a host key, can be undefined if only captcha was required\n   * @param {String} captchaCode - can be undefined if captcha was not required by the server\n   * @public\n   * @memberof Meeting\n   * @returns {Promise<{isPasswordValid: boolean, requiredCaptcha: boolean, failureReason: MEETING_INFO_FAILURE_REASON}>}\n   */\n  verifyPassword(password, captchaCode) {\n    return this.fetchMeetingInfo({\n      destination: this.sipUri, type: _SIP_URI_, password, captchaCode\n    })\n      .then(() => ({isPasswordValid: true, requiredCaptcha: null, failureReason: MEETING_INFO_FAILURE_REASON.NONE}))\n      .catch((error) => {\n        if (error instanceof PasswordError || error instanceof CaptchaError) {\n          return {\n            isPasswordValid: this.passwordStatus === PASSWORD_STATUS.VERIFIED,\n            requiredCaptcha: this.requiredCaptcha,\n            failureReason: this.meetingInfoFailureReason\n          };\n        }\n        throw (error);\n      });\n  }\n\n  /**\n   * Refreshes the captcha. As a result the meeting will have new captcha id, image and audio.\n   * If the refresh operation fails, meeting remains with the old captcha properties.\n   * @public\n   * @memberof Meeting\n   * @returns {Promise}\n   */\n  refreshCaptcha() {\n    if (!this.requiredCaptcha) {\n      return Promise.reject(new Error('There is no captcha to refresh'));\n    }\n\n    // in order to get fully populated uris for captcha audio and image in response to refresh captcha request\n    // we have to pass the wbxappapi hostname as the siteFullName parameter\n    const {hostname} = new URL(this.requiredCaptcha.refreshURL);\n\n    return this.meetingRequest.refreshCaptcha({\n      captchaRefreshUrl: `${this.requiredCaptcha.refreshURL}&siteFullName=${hostname}`,\n      captchaId: this.requiredCaptcha.captchaId\n    })\n      .then((response) => {\n        this.requiredCaptcha.captchaId = response.body.captchaID;\n        this.requiredCaptcha.verificationImageURL = response.body.verificationImageURL;\n        this.requiredCaptcha.verificationAudioURL = response.body.verificationAudioURL;\n      });\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setupLocusControlsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n    this.setUpLocusInfoMediaInactiveListener();\n  }\n\n\n  /**\n   * Set up the locus info listener for meetings disconnected due to inactivity\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMediaInactiveListener() {\n    // User gets kicked off the meeting due to inactivity or user did a refresh\n    this.locusInfo.on(EVENTS.DISCONNECT_DUE_TO_INACTIVITY, (res) => {\n      // https:// jira-eng-gpk2.cisco.com/jira/browse/SPARK-240520\n      // TODO: send custom parameter explaining why the inactivity happened\n      // refresh , no media or network got dsconnected or something else\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.DISCONNECT_DUE_TO_INACTIVITY,\n        {\n          correlation_id: this.correlationId,\n          locus_id: this.locusId\n        }\n      );\n\n      // Upload logs on media inactivity\n      // Normally media should not be inactive\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoMediaInactiveListener'\n        },\n        EVENTS.REQUEST_UPLOAD_LOGS,\n        this\n      );\n\n      LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMediaInactiveListener --> Meeting disconnected due to inactivity: ${res.reason}`);\n\n      if (this.config.reconnection.autoRejoin) {\n        this.reconnect();\n      }\n      else {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMediaInactiveListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LEFT,\n          res.reason\n        );\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_MEETING_STATE_CHANGE, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusFullStateListener'\n        },\n        EVENT_TRIGGERS.MEETING_STATE_CHANGE,\n        {\n          payload\n        }\n      );\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * get the metrics payload pre\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @param {Array} options.mediaConnections\n   * @returns {Object}\n   * @memberof Meeting\n   */\n  getAnalyzerMetricsPrePayload(options) {\n    if (options) {\n      const {\n        event,\n        trackingId,\n        mediaConnections\n      } = options;\n\n      if (!event) {\n        LoggerProxy.logger.error('Meeting:index#getAnalyzerMetricsPrePayload --> Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n        return null;\n      }\n\n      const identifiers = {\n        correlationId: this.correlationId,\n        userId: this.userId,\n        deviceId: this.deviceUrl,\n        orgId: this.orgId,\n        locusUrl: this.webex.internal.services.get('locus')\n      };\n\n      if (this.locusUrl && this.locusInfo.fullState) {\n        identifiers.locusUrl = this.locusUrl;\n        identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n        identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n      }\n\n      // Check if mediaConnections has been passed in or else use this.mediaConnections\n      if (mediaConnections) {\n        identifiers.mediaAgentAlias = mediaConnections?.[0].mediaAgentAlias;\n        identifiers.mediaAgentGroupId = mediaConnections?.[0].mediaAgentGroupId;\n        identifiers.mediaAgentCluster = mediaConnections?.[0].mediaAgentCluster;\n      }\n      else if (this.mediaConnections) {\n        identifiers.mediaAgentAlias = this.mediaConnections?.[0].mediaAgentAlias;\n        identifiers.mediaAgentGroupId = this.mediaConnections?.[0].mediaAgentGroupId;\n        identifiers.mediaAgentCluster = this.mediaConnections?.[0].mediaAgentCluster;\n      }\n\n      if (options.trackingId) {\n        identifiers.trackingId = trackingId;\n      }\n\n      let payload = {};\n\n      const joinRespRxStartAudio = this.getSetupDelayDuration('audio');\n\n      if (joinRespRxStartAudio) {\n        options.audioSetupDelay = {\n          joinRespRxStart: joinRespRxStartAudio\n        };\n      }\n\n      const joinRespRxStartVideo = this.getSetupDelayDuration('video');\n\n      if (joinRespRxStartAudio) {\n        options.videoSetupDelay = {\n          joinRespRxStart: joinRespRxStartVideo\n        };\n      }\n\n      const joinRespTxStartAudio = this.getSendingMediaDelayDuration('audio');\n\n      if (joinRespTxStartAudio) {\n        options.audioSetupDelay = {\n          ...options.audioSetupDelay,\n          joinRespTxStart: joinRespTxStartAudio\n        };\n      }\n\n      const joinRespTxStartVideo = this.getSendingMediaDelayDuration('video');\n\n      if (joinRespTxStartVideo) {\n        options.videoSetupDelay = {\n          ...options.videoSetupDelay,\n          joinRespTxStart: joinRespTxStartVideo\n        };\n      }\n\n      const localSDPGenRemoteSDPRecv = this.getLocalSDPGenRemoteSDPRecvDelay();\n\n      if (localSDPGenRemoteSDPRecv) {\n        options.joinTimes = {\n          ...options.joinTimes,\n          localSDPGenRemoteSDPRecv\n        };\n      }\n\n      const callInitiateJoinReq = this.getCallInitiateJoinReq();\n\n      if (callInitiateJoinReq) {\n        options.joinTimes = {\n          ...options.joinTimes,\n          callInitiateJoinReq\n        };\n      }\n\n      const joinReqResp = this.getJoinReqResp();\n\n      if (joinReqResp) {\n        options.joinTimes = {\n          ...options.joinTimes,\n          joinReqResp\n        };\n      }\n\n      const getTotalJmt = this.getTotalJmt();\n\n      if (getTotalJmt) {\n        options.joinTimes = {\n          ...options.joinTimes,\n          getTotalJmt\n        };\n      }\n\n      if (options.type === MQA_STATS.CA_TYPE) {\n        payload = Metrics.initMediaPayload(options.event, identifiers, options);\n      }\n      else {\n        payload = Metrics.initPayload(options.event, identifiers, options);\n      }\n\n      return payload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const payload = this.getAnalyzerMetricsPrePayload({\n      ...pick(this.config.metrics, ['clientType', 'subClientType']),\n      ...options\n    });\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Send the metrics to Media Quality Analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  sendMediaQualityAnalyzerMetrics(options) {\n    const payload = this.getAnalyzerMetricsPrePayload({\n      type: MQA_STATS.CA_TYPE,\n      ...pick(this.config.metrics, ['clientType', 'subClientType']),\n      ...options\n    });\n\n    return this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * sets the network status on meeting object\n   * @param {String} networkStatus\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  setNetworkStatus(networkStatus) {\n    if (networkStatus === NETWORK_STATUS.DISCONNECTED) {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setNetworkStatus'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_DISCONNECTED,\n      );\n    }\n    else if (networkStatus === NETWORK_STATUS.CONNECTED && this.networkStatus === NETWORK_STATUS.DISCONNECTED) {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setNetworkStatus'\n        },\n        EVENT_TRIGGERS.MEETINGS_NETWORK_CONNECTED,\n      );\n    }\n\n    this.networkStatus = networkStatus;\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n      this.pstnUpdate(payload);\n\n      // If user moved to a JOINED state and there is a pending floor grant trigger it\n      if (this.floorGrantPending && payload.newSelf.state === MEETING_STATE.STATES.JOINED) {\n        this.share()\n          .then(() => { this.floorGrantPending = false; });\n      }\n    });\n  }\n\n  /**\n   * Notify any changes on the pstn devices\n   * @param {Object} payload\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  pstnUpdate(payload) {\n    if (this.locusInfo.self) {\n      const dialInPstnDevice = payload.newSelf?.pstnDevices.find((device) => device.url === this.dialInUrl);\n      const dialOutPstnDevice = payload.newSelf?.pstnDevices.find((device) => device.url === this.dialOutUrl);\n      let changed = false;\n\n      if (dialInPstnDevice) {\n        const newStatus = dialInPstnDevice.dialingStatus ?? dialInPstnDevice.state;\n\n        if (newStatus !== this.dialInDeviceStatus) {\n          this.dialInDeviceStatus = newStatus;\n          changed = true;\n        }\n      }\n\n      if (dialOutPstnDevice) {\n        const newStatus = dialOutPstnDevice.dialingStatus ?? dialOutPstnDevice.state;\n\n        if (newStatus !== this.dialOutDeviceStatus) {\n          this.dialOutDeviceStatus = newStatus;\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_PHONE_AUDIO_UPDATE,\n          {\n            dialIn: {\n              status: this.dialInDeviceStatus,\n              attendeeId: dialInPstnDevice?.attendeeId\n            },\n            dialOut: {\n              status: this.dialOutDeviceStatus,\n              attendeeId: dialOutPstnDevice?.attendeeId\n            }\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n\n  /**\n   * Set up the locus info recording update listener\n   * update recording value for the meeting\n   * notifies consumer with:\n   *  meeting:recording:started\n   *  meeting:recording:stopped\n   *  meeting:recording:paused\n   *  meeting:recording:resumed\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setupLocusControlsListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.CONTROLS_RECORDING_UPDATED,\n      ({state, modifiedBy, lastModified}) => {\n        let event;\n\n        switch (state) {\n          case RECORDING_STATE.RECORDING:\n            event = EVENT_TRIGGERS.MEETING_STARTED_RECORDING;\n            break;\n          case RECORDING_STATE.IDLE:\n            event = EVENT_TRIGGERS.MEETING_STOPPED_RECORDING;\n            break;\n          case RECORDING_STATE.PAUSED:\n            event = EVENT_TRIGGERS.MEETING_PAUSED_RECORDING;\n            break;\n          case RECORDING_STATE.RESUMED:\n            event = EVENT_TRIGGERS.MEETING_RESUMED_RECORDING;\n            break;\n          default:\n            event = null;\n            break;\n        }\n\n        // `RESUMED` state should be converted to `RECORDING` after triggering the event\n        this.recording = {\n          state: state === RECORDING_STATE.RESUMED ? RECORDING_STATE.RECORDING : state,\n          modifiedBy,\n          lastModified\n        };\n\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setupLocusControlsListener'\n          },\n          event,\n          this.recording\n        );\n      });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content and whiteboard sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    // Will get triggered on local and remote share\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      const {content: contentShare, whiteboard: whiteboardShare} = payload.current;\n      const previousContentShare = payload.previous?.content;\n      const previousWhiteboardShare = payload.previous?.whiteboard;\n\n      if (\n        (contentShare.beneficiaryId === previousContentShare?.beneficiaryId &&\n          contentShare.disposition === previousContentShare?.disposition) &&\n        (whiteboardShare.beneficiaryId === previousWhiteboardShare?.beneficiaryId &&\n          whiteboardShare.disposition === previousWhiteboardShare?.disposition &&\n          whiteboardShare.resourceUrl === previousWhiteboardShare?.resourceUrl)\n      ) {\n        // nothing changed, so ignore\n        // (this happens when we steal presentation from remote)\n        return;\n      }\n\n      let newShareStatus = this.shareStatus;\n\n      // REMOTE - check if remote started sharing\n      if (\n        this.selfId !== contentShare.beneficiaryId &&\n        contentShare.disposition === FLOOR_ACTION.GRANTED\n      ) {\n        // CONTENT - sharing content remote\n        newShareStatus = SHARE_STATUS.REMOTE_SHARE_ACTIVE;\n      }\n      // LOCAL - check if we started sharing content\n      else if (\n        this.selfId === contentShare.beneficiaryId &&\n        contentShare.disposition === FLOOR_ACTION.GRANTED\n      ) {\n        if (this.mediaProperties.shareTrack?.readyState === 'ended') {\n          this.stopShare({\n            skipSignalingCheck: true\n          })\n            .catch((error) => {\n              LoggerProxy.logger.log('Meeting:index#setUpLocusMediaSharesListener --> Error stopping share: ', error);\n            });\n        }\n        else {\n          // CONTENT - sharing content local\n          newShareStatus = SHARE_STATUS.LOCAL_SHARE_ACTIVE;\n        }\n      }\n      // If we did not hit the cases above, no one is sharng content, so we check if we are sharing whiteboard\n      // There is no concept of local/remote share for whiteboard\n      // It does not matter who requested to share the whiteboard, everyone gets the same view\n      else if (whiteboardShare.disposition === FLOOR_ACTION.GRANTED) {\n        // WHITEBOARD - sharing whiteboard\n        newShareStatus = SHARE_STATUS.WHITEBOARD_SHARE_ACTIVE;\n      }\n      // or if content share is either released or null and whiteboard share is either released or null, no one is sharing\n      else if (\n        (previousContentShare &&\n          (contentShare.disposition === FLOOR_ACTION.RELEASED) || (contentShare.disposition === null)) &&\n        (previousWhiteboardShare &&\n          (whiteboardShare.disposition === FLOOR_ACTION.RELEASED) || (whiteboardShare.disposition === null))\n      ) {\n        newShareStatus = SHARE_STATUS.NO_SHARE;\n      }\n\n      if (newShareStatus !== this.shareStatus) {\n        const oldShareStatus = this.shareStatus;\n\n        // update our state before we send out any notifications\n        this.shareStatus = newShareStatus;\n\n        // send out \"stop\" notifications for the old state\n        switch (oldShareStatus) {\n          case SHARE_STATUS.REMOTE_SHARE_ACTIVE:\n            Trigger.trigger(\n              this,\n              {\n                file: 'meetings/index',\n                function: 'remoteShare'\n              },\n              EVENT_TRIGGERS.MEETING_STOPPED_SHARING_REMOTE\n            );\n            break;\n\n          case SHARE_STATUS.LOCAL_SHARE_ACTIVE:\n            Trigger.trigger(\n              this,\n              {\n                file: 'meeting/index',\n                function: 'stopFloorRequest'\n              },\n              EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n              {\n                reason: SHARE_STOPPED_REASON.SELF_STOPPED\n              }\n            );\n            break;\n\n          case SHARE_STATUS.WHITEBOARD_SHARE_ACTIVE:\n            Trigger.trigger(\n              this,\n              {\n                file: 'meeting/index',\n                function: 'stopWhiteboardShare'\n              },\n              EVENT_TRIGGERS.MEETING_STOPPED_SHARING_WHITEBOARD\n            );\n            break;\n\n          case SHARE_STATUS.NO_SHARE:\n            // nothing to do\n            break;\n\n          default:\n            break;\n        }\n\n        // send \"start\" notifications for the new state\n        switch (newShareStatus) {\n          case SHARE_STATUS.REMOTE_SHARE_ACTIVE: {\n            const sendStartedSharingRemote = () => {\n              Trigger.trigger(\n                this,\n                {\n                  file: 'meetings/index',\n                  function: 'remoteShare'\n                },\n                EVENT_TRIGGERS.MEETING_STARTED_SHARING_REMOTE,\n                {\n                  memberId: contentShare.beneficiaryId\n                }\n              );\n            };\n\n            // if a remote participant is stealing the presentation from us\n            if (!this.mediaProperties.mediaDirection?.sendShare || oldShareStatus === SHARE_STATUS.WHITEBOARD_SHARE_ACTIVE) {\n              sendStartedSharingRemote();\n            }\n            else {\n              this.updateShare({\n                sendShare: false,\n                receiveShare: this.mediaProperties.mediaDirection.receiveShare\n              })\n                .finally(() => {\n                  sendStartedSharingRemote();\n                });\n            }\n            break;\n          }\n\n          case SHARE_STATUS.LOCAL_SHARE_ACTIVE:\n            Trigger.trigger(\n              this,\n              {\n                file: 'meeting/index',\n                function: 'share'\n              },\n              EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n            );\n            Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n            break;\n\n          case SHARE_STATUS.WHITEBOARD_SHARE_ACTIVE:\n            Trigger.trigger(\n              this,\n              {\n                file: 'meeting/index',\n                function: 'startWhiteboardShare'\n              },\n              EVENT_TRIGGERS.MEETING_STARTED_SHARING_WHITEBOARD,\n              {\n                resourceUrl: whiteboardShare.resourceUrl,\n                memberId: whiteboardShare.beneficiaryId\n              }\n            );\n            Metrics.postEvent({event: eventType.WHITEBOARD_SHARE_FLOOR_GRANTED, meeting: this});\n            break;\n\n          case SHARE_STATUS.NO_SHARE:\n          // nothing to do\n            break;\n\n          default:\n            break;\n        }\n\n        this.members.locusMediaSharesUpdate(payload);\n      }\n      else if (newShareStatus === SHARE_STATUS.REMOTE_SHARE_ACTIVE) {\n        // if we got here, then some remote participant has stolen\n        // the presentation from another remote participant\n        Trigger.trigger(\n          this,\n          {\n            file: 'meetings/index',\n            function: 'remoteShare'\n          },\n          EVENT_TRIGGERS.MEETING_STARTED_SHARING_REMOTE,\n          {\n            memberId: contentShare.beneficiaryId\n          }\n        );\n        this.members.locusMediaSharesUpdate(payload);\n      }\n      else if (newShareStatus === SHARE_STATUS.WHITEBOARD_SHARE_ACTIVE) {\n        // if we got here, then some remote participant has stolen\n        // the presentation from another remote participant\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'startWhiteboardShare'\n          },\n          EVENT_TRIGGERS.MEETING_STARTED_SHARING_WHITEBOARD,\n          {\n            resourceUrl: whiteboardShare.resourceUrl,\n            memberId: whiteboardShare.beneficiaryId\n          }\n        );\n        Metrics.postEvent({event: eventType.WHITEBOARD_SHARE_FLOOR_GRANTED, meeting: this});\n        this.members.locusMediaSharesUpdate(payload);\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n      this.locusUrl = payload;\n      this.locusId = this.locusUrl?.split('/').pop();\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.LOCAL_UNMUTE_REQUIRED, (payload) => {\n      if (this.audio) {\n        this.audio.handleServerLocalUnmuteRequired(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_UNMUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_REMOTE_MUTE_STATUS_UPDATED, (payload) => {\n      if (payload) {\n        if (this.audio) {\n          this.audio.handleServerRemoteMuteUpdate(payload.muted, payload.unmuteAllowed);\n        }\n        // with \"mute on entry\" server will send us remote mute even if we don't have media configured,\n        // so if being muted by others, always send the notification,\n        // but if being unmuted, only send it if we are also locally unmuted\n        if (payload.muted || (!this.audio?.isMuted())) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoSelfListener'\n            },\n            payload.muted ? EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS : EVENT_TRIGGERS.MEETING_SELF_UNMUTED_BY_OTHERS,\n            {\n              payload\n            },\n          );\n        }\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.LOCAL_UNMUTE_REQUESTED, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoSelfListener'\n        },\n        EVENT_TRIGGERS.MEETING_SELF_REQUESTED_TO_UNMUTE,\n        {\n          payload\n        }\n      );\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEDIA_INACTIVITY, () => {\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.MEETING_MEDIA_INACTIVE,\n        {\n          correlation_id: this.correlationId,\n          locus_id: this.locusId\n        }\n      );\n      this.reconnect();\n    });\n\n    // There is two stats for mute one is the actual media being sent or received\n    // The second on is if the audio is muted, we need to tell the statsAnalyzer when\n    // the audio is muted or the user is not willing to send media\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEDIA_STATUS_CHANGE, (status) => {\n      if (this.statsAnalyzer) {\n        this.statsAnalyzer.updateMediaStatus({\n          actual: status,\n          expected: {\n            // We need to check what should be the actual direction of media\n            sendAudio: this.mediaProperties.mediaDirection?.sendAudio && !this.audio?.isMuted(),\n            sendVideo: this.mediaProperties.mediaDirection?.sendVideo && !this.video?.isMuted(),\n            sendShare: this.mediaProperties.mediaDirection?.sendShare,\n            receiveAudio: this.mediaProperties.mediaDirection?.receiveAudio,\n            receiveVideo: this.mediaProperties.mediaDirection?.receiveVideo,\n            receiveShare: this.mediaProperties.mediaDirection?.receiveShare\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_RESPONSE, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n\n      if (payload.remoteDeclined) {\n        this.leave({reason: payload.reason}).then(() => {\n          LoggerProxy.logger.info('Meeting:index#setUpLocusInfoMeetingListener --> REMOTE_RESPONSE. Attempting to leave meeting.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMeetingListener --> REMOTE_RESPONSE. Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave({reason: payload.reason}).then(() => {\n          LoggerProxy.logger.warn('Meeting:index#setUpLocusInfoMeetingListener --> DESTROY_MEETING. The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`Meeting:index#setUpLocusInfoMeetingListener --> DESTROY_MEETING. Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        LoggerProxy.logger.info('Meeting:index#setUpLocusInfoMeetingListener --> MEETING_REMOVED_REASON', payload.reason);\n\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            reason: payload.reason,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {String} invitee.phoneNumber\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Cancel an outgoing phone call invitation made during a meeting\n   * @param {Object} invitee\n   * @param {String} invitee.phoneNumber\n   * @returns {Promise} see #members.cancelPhoneInvite\n   * @public\n   * @memberof Meeting\n   */\n  cancelPhoneInvite(invitee) {\n    return this.members.cancelPhoneInvite(invitee);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * If this gets turned off mid meeting after attaching media, it will shut down the MQA metrics and they will\n   * not restart unless the start function is called again\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  cleanMQAInterval() {\n    if (this.mqaInterval) {\n      clearInterval(this.mqaInterval);\n    }\n  }\n\n  /**\n   * Automatically publishes media metrics data and on a config interval\n   * uses the existing getStats data filter, so no new streams are created\n   * but it is separate than history, so history will not be available\n   * @returns {MediaMetrics}\n   * @public\n   * @memberof Meeting\n   */\n  startMediaQualityMetrics() {\n    const automaticMetrics = new StatsMetrics({config: this.config});\n\n    const stats = this.getStats(automaticMetrics.initialize(), true);\n\n    this.mediaQualityMetrics = automaticMetrics;\n\n    this.mediaQualityMetrics.setStats(stats);\n\n    this.mqaInterval = setInterval(() => this.processMQAData(), this.config.metrics.mqaMetricsInterval);\n\n    return automaticMetrics;\n  }\n\n  /**\n   * @private\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  processMQAData() {\n    if (!this.mqaProcessor) {\n      this.mqaProcessor = new MQAProcessor();\n    }\n\n    MQA_STATS.DATA_PLACEMENTS.forEach((key) => {\n      if (this.mediaQualityMetrics && this.mediaQualityMetrics.stats) {\n        let sendRecvData;\n\n        if (key.toLowerCase().endsWith(STATS.SENDER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getSender(key);\n        }\n        else if (key.toLowerCase().endsWith(STATS.RECEIVER)) {\n          sendRecvData = this.mediaQualityMetrics.stats.getReceiver(key);\n        }\n        let mqa;\n\n        if (sendRecvData) {\n          mqa = sendRecvData.getMQA();\n        }\n        if (mqa) {\n          const interval = mqa.getSlice(this.config.metrics.mqaMetricsInterval / 1000); // milliseconds -> second based intervals\n\n          this.mqaProcessor.process(key, interval);\n        }\n      }\n    });\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Truthy when a meeting has an audio connection established\n   * @returns {Boolean}  true if meeting audio is connected otherwise false\n   * @public\n   * @memberof Meeting\n   */\n  isAudioConnected() {\n    return !!this.audio;\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Truthy when a meeting has a video connection established\n   * @returns {Boolean} true if meeting video connected otherwise false\n   * @public\n   * @memberof Meeting\n   */\n  isVideoConnected() {\n    return !!this.video;\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {Object} meetingInfo.body\n   * @param {String} meetingInfo.body.conversationUrl\n   * @param {String} meetingInfo.body.locusUrl\n   * @param {String} meetingInfo.body.sipUri\n   * @param {Object} meetingInfo.body.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    const webexMeetingInfo = meetingInfo?.body;\n\n    // MeetingInfo will be undefined for 1:1 calls\n    if (webexMeetingInfo && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.conversationUrl = webexMeetingInfo.conversationUrl || this.conversationUrl;\n      this.locusUrl = webexMeetingInfo.locusUrl || this.locusUrl;\n      this.setSipUri(this.config.experimental.enableUnifiedMeetings ? webexMeetingInfo.sipUrl : webexMeetingInfo.sipMeetingUri || this.sipUri);\n      if (this.config.experimental.enableUnifiedMeetings) {\n        this.meetingNumber = webexMeetingInfo.meetingNumber;\n        this.meetingJoinUrl = webexMeetingInfo.meetingJoinUrl;\n      }\n      this.owner = webexMeetingInfo.owner || webexMeetingInfo.hostId || this.owner;\n      this.permissionToken = webexMeetingInfo.permissionToken;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.id);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index#setRemoteStream --> ontrack event received for peerConnection: ${event}`);\n\n      const MEDIA_ID = {\n        AUDIO_TRACK: '0',\n        VIDEO_TRACK: '1',\n        SHARE_TRACK: '2'\n      };\n      let eventType = null;\n      const mediaTrack = event.track;\n      let trackMediaID = null;\n\n\n      // In case of safari some time the transceiver is not present for specific os version\n      // sdk tries to determine the transceive using the track id present\n      if (event.transceiver && event.transceiver.mid) {\n        trackMediaID = event.transceiver.mid;\n      }\n      else {\n        const {audioTransceiver, videoTransceiver, shareTransceiver} = event.target;\n\n        // audio kind indicates its a audio stream\n        if (mediaTrack.id === audioTransceiver.receiver.track.id) {\n          trackMediaID = '0';\n        }\n        else\n        if (mediaTrack.id === videoTransceiver.receiver.track.id) {\n          trackMediaID = '1';\n        }\n        else\n        if (mediaTrack.id === shareTransceiver.receiver.track.id) {\n          trackMediaID = '2';\n        }\n        else {\n          trackMediaID = null;\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.MUTE_AUDIO_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop()\n            }\n          );\n        }\n      }\n\n\n      switch (trackMediaID) {\n        case MEDIA_ID.AUDIO_TRACK:\n          eventType = EVENT_TYPES.REMOTE_AUDIO;\n          this.mediaProperties.setRemoteAudioTrack(mediaTrack);\n          break;\n        case MEDIA_ID.VIDEO_TRACK:\n          eventType = EVENT_TYPES.REMOTE_VIDEO;\n          this.mediaProperties.setRemoteVideoTrack(mediaTrack);\n          break;\n        case MEDIA_ID.SHARE_TRACK:\n          if (event.track) {\n            eventType = EVENT_TYPES.REMOTE_SHARE;\n            this.mediaProperties.setRemoteShare(mediaTrack);\n          }\n          break;\n        default: {\n          LoggerProxy.logger.log('Meeting:index#setRemoteStream --> no matching media track id');\n        }\n      }\n\n      // start stats here the stats are coming null if you dont receive streams\n\n      this.statsAnalyzer.startAnalyzer(this.mediaProperties.peerConnection);\n\n      if (eventType && mediaTrack) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: eventType,\n            stream: MediaUtil.createMediaStream([mediaTrack])\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Upload logs for the current meeting\n   * @param {object} options file name and function name\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  uploadLogs(options = {file: 'meeting/index', function: 'uploadLogs'}) {\n    Trigger.trigger(\n      this,\n      options,\n      EVENTS.REQUEST_UPLOAD_LOGS,\n      this\n    );\n  }\n\n\n  /**\n   * Removes remote audio and video stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @deprecated after v1.89.3\n   */\n  unsetRemoteStream() {\n    LoggerProxy.logger.warn('Meeting:index#unsetRemoteStream --> [DEPRECATION WARNING]: unsetRemoteStream has been deprecated after v1.89.3');\n    this.mediaProperties.unsetRemoteMedia();\n  }\n\n  /**\n   * Removes remote audio, video and share tracks from class instance's mediaProperties\n   * @returns {undefined}\n   */\n  unsetRemoteTracks() {\n    this.mediaProperties.unsetRemoteTracks();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @deprecated after v1.89.3\n   */\n  closeRemoteStream() {\n    LoggerProxy.logger.warn('Meeting:index#closeRemoteStream --> [DEPRECATION WARNING]: closeRemoteStream has been deprecated after v1.89.3');\n    this.closeRemoteTracks();\n  }\n\n  /**\n   * Removes the remote tracks on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @memberof Meeting\n   */\n  closeRemoteTracks() {\n    const {\n      remoteAudioTrack,\n      remoteVideoTrack,\n      remoteShare\n    } = this.mediaProperties;\n\n    /**\n     * Triggers an event to the developer\n     * @param {string} mediaType Type of media that was stopped\n     * @returns {void}\n     * @inner\n     */\n    const triggerMediaStoppedEvent = (mediaType) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: mediaType\n        }\n      );\n    };\n\n    /**\n     * Stops a media track and emits an event\n     * @param {MediaStreamTrack} track Media track to stop\n     * @param {string} type Media track type\n     * @returns {Promise}\n     * @inner\n     */\n    // eslint-disable-next-line arrow-body-style\n    const stopTrack = (track, type) => {\n      return Media.stopTracks(track)\n        .then(() => {\n          const isTrackStopped = track && track.readyState === ENDED;\n          const isWrongReadyState = track && !isTrackStopped;\n\n          if (isTrackStopped) {\n            triggerMediaStoppedEvent(type);\n          }\n          else if (isWrongReadyState) {\n            LoggerProxy.logger.warn(`Meeting:index#closeRemoteTracks --> Error: MediaStreamTrack.readyState is ${track.readyState} for ${type}`);\n          }\n        });\n    };\n\n    return Promise.all([\n      stopTrack(remoteAudioTrack, EVENT_TYPES.REMOTE_AUDIO),\n      stopTrack(remoteVideoTrack, EVENT_TYPES.REMOTE_VIDEO),\n      stopTrack(remoteShare, EVENT_TYPES.REMOTE_SHARE)\n    ]);\n  }\n\n  /**\n   * Emits the 'media:ready' event with a local stream that consists of 1 local audio and 1 local video track\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  sendLocalMediaReadyEvent() {\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'setLocalTracks'\n      },\n      EVENT_TRIGGERS.MEDIA_READY,\n      {\n        type: EVENT_TYPES.LOCAL,\n        stream: MediaUtil.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n      }\n    );\n  }\n\n  /**\n   * Sets the local audio track on the class and emits an event to the developer\n   * @param {MediaStreamTrack} audioTrack\n   * @param {Boolean} emitEvent if true, a media ready event is emitted to the developer\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocalAudioTrack(audioTrack, emitEvent = true) {\n    if (audioTrack) {\n      const settings = audioTrack.getSettings();\n\n      this.mediaProperties.setMediaSettings('audio', {\n        echoCancellation: settings.echoCancellation,\n        noiseSuppression: settings.noiseSuppression\n      });\n\n      LoggerProxy.logger.log('Meeting:index#setLocalAudioTrack --> Audio settings.', JSON.stringify(this.mediaProperties.mediaSettings.audio));\n      this.mediaProperties.setLocalAudioTrack(audioTrack);\n      if (this.audio) this.audio.applyClientStateLocally(this);\n    }\n\n    if (emitEvent) {\n      this.sendLocalMediaReadyEvent();\n    }\n  }\n\n  /**\n   * Sets the local video track on the class and emits an event to the developer\n   * @param {MediaStreamTrack} videoTrack\n   * @param {Boolean} emitEvent if true, a media ready event is emitted to the developer\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocalVideoTrack(videoTrack, emitEvent = true) {\n    if (videoTrack) {\n      const {\n        aspectRatio, frameRate, height, width, deviceId\n      } = videoTrack.getSettings();\n\n      this.mediaProperties.setLocalVideoTrack(videoTrack);\n      if (this.video) this.video.applyClientStateLocally(this);\n\n      this.mediaProperties.setMediaSettings('video', {\n        aspectRatio, frameRate, height, width\n      });\n      // store and save the selected video input device\n      if (deviceId) {\n        this.mediaProperties.setVideoDeviceId(deviceId);\n      }\n      LoggerProxy.logger.log('Meeting:index#setLocalVideoTrack --> Video settings.', JSON.stringify(this.mediaProperties.mediaSettings.video));\n    }\n\n    if (emitEvent) {\n      this.sendLocalMediaReadyEvent();\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      const {audioTrack, videoTrack} = MeetingUtil.getTrack(localStream);\n\n      this.setLocalAudioTrack(audioTrack, false);\n      this.setLocalVideoTrack(videoTrack, false);\n\n      this.sendLocalMediaReadyEvent();\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    let settings = null;\n\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n      if (contentTracks) {\n        settings = contentTracks.getSettings();\n        this.mediaProperties.setMediaSettings('screen', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width,\n          displaySurface: settings.displaySurface,\n          cursor: settings.cursor\n        });\n        LoggerProxy.logger.log('Meeting:index#setLocalShareTrack --> Screen settings.', JSON.stringify(this.mediaProperties.mediaSettings.screen));\n      }\n\n      contentTracks.onended = () => this.handleShareTrackEnded(localShare);\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    const {audioTrack, videoTrack} = this.mediaProperties;\n\n    return Media.stopTracks(audioTrack)\n      .then(() => Media.stopTracks(videoTrack))\n      .then(() => {\n        const audioStopped = audioTrack && audioTrack.readyState === ENDED;\n        const videoStopped = videoTrack && videoTrack.readyState === ENDED;\n\n        if (audioStopped && videoStopped) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'closeLocalStream'\n            },\n            EVENT_TRIGGERS.MEDIA_STOPPED, {\n              type: EVENT_TYPES.LOCAL\n            }\n          );\n        }\n        else if (audioTrack || videoTrack) {\n          LoggerProxy.logger.warn('Meeting:index#closeLocalStream --> Error: MediaStreamTrack.readyState is incorrect.');\n        }\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    const track = this.mediaProperties.shareTrack;\n\n    return Media.stopTracks(track).then(() => {\n      if (track && track.readyState === ENDED) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalShare'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL_SHARE\n          }\n        );\n      }\n      else if (track) {\n        // Track exists but with wrong readyState\n        LoggerProxy.logger.warn(`Meeting:index#closeLocalShare --> Error: MediaStreamTrack.readyState is ${track.readyState} for localShare`);\n      }\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * sets up listner for mercury event\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setMercuryListener() {\n    // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n    // if the meeting has active peer connections, it should try to reconnect.\n    this.webex.internal.mercury.on(ONLINE, () => {\n      LoggerProxy.logger.info('Meeting:index#setMercuryListener --> Web socket online');\n\n      // Only send restore event when it was disconnected before and for connected later\n      if (!this.hasWebsocketConnected) {\n        Metrics.postEvent({\n          event: eventType.MERCURY_CONNECTION_RESTORED,\n          meeting: this\n        });\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MERCURY_CONNECTION_RESTORED,\n          {\n            correlation_id: this.correlationId\n          }\n        );\n      }\n      this.hasWebsocketConnected = true;\n    });\n\n    this.webex.internal.mercury.on(OFFLINE, () => {\n      LoggerProxy.logger.error('Meeting:index#setMercuryListener --> Web socket offline');\n      Metrics.postEvent({\n        event: eventType.MERCURY_CONNECTION_LOST,\n        meeting: this\n      });\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.MERCURY_CONNECTION_FAILURE,\n        {\n          correlation_id: this.correlationId\n        }\n      );\n    });\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!MeetingUtil.isUserInJoinedState(this.locusInfo)) {\n      return Promise.reject(new UserNotJoinedError());\n    }\n\n    if (!this.mediaId) {\n      // Happens when addMedia and mute are triggered in succession\n      return Promise.reject(new NoMediaEstablishedYetError());\n    }\n\n    if (!this.audio) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#muteAudio -->';\n\n    // First, stop sending the local audio media\n    return logRequest(this.audio.handleClientRequest(this, true)\n      .then(() => {\n        MeetingUtil.handleAudioLogging(this.mediaProperties.audioTrack);\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      }).catch((error) => {\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MUTE_AUDIO_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          }\n        );\n\n        throw error;\n      }),\n    {\n      header: `${LOG_HEADER} muting audio`,\n      success: `${LOG_HEADER} muted audio successfully`,\n      failure: `${LOG_HEADER} muting audio failed, `\n    });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!MeetingUtil.isUserInJoinedState(this.locusInfo)) {\n      return Promise.reject(new UserNotJoinedError());\n    }\n\n    if (!this.mediaId) {\n      // Happens when addMedia and mute are triggered in succession\n      return Promise.reject(new NoMediaEstablishedYetError());\n    }\n\n    if (!this.audio) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#unmuteAudio -->';\n\n    // First, send the control to unmute the participant on the server\n    return logRequest(this.audio.handleClientRequest(this, false)\n      .then(() => {\n        MeetingUtil.handleAudioLogging(this.mediaProperties.audioTrack);\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      }).catch((error) => {\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.UNMUTE_AUDIO_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          }\n        );\n\n        throw error;\n      }),\n    {\n      header: `${LOG_HEADER} unmuting audio`,\n      success: `${LOG_HEADER} unmuted audio successfully`,\n      failure: `${LOG_HEADER} unmuting audio failed, `\n    });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!MeetingUtil.isUserInJoinedState(this.locusInfo)) {\n      return Promise.reject(new UserNotJoinedError());\n    }\n\n    if (!this.mediaId) {\n      // Happens when addMedia and mute are triggered in succession\n      return Promise.reject(new NoMediaEstablishedYetError());\n    }\n\n    if (!this.video) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#muteVideo -->';\n\n    return logRequest(this.video.handleClientRequest(this, true)\n      .then(() => {\n        MeetingUtil.handleVideoLogging(this.mediaProperties.videoTrack);\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      }).catch((error) => {\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MUTE_VIDEO_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          }\n        );\n\n        throw error;\n      }),\n    {\n      header: `${LOG_HEADER} muting video`,\n      success: `${LOG_HEADER} muted video successfully`,\n      failure: `${LOG_HEADER} muting video failed, `\n    });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!MeetingUtil.isUserInJoinedState(this.locusInfo)) {\n      return Promise.reject(new UserNotJoinedError());\n    }\n\n    if (!this.mediaId) {\n      // Happens when addMedia and mute are triggered in succession\n      return Promise.reject(new NoMediaEstablishedYetError());\n    }\n\n    if (!this.video) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    const LOG_HEADER = 'Meeting:index#unmuteVideo -->';\n\n    return logRequest(this.video.handleClientRequest(this, false)\n      .then(() => {\n        MeetingUtil.handleVideoLogging(this.mediaProperties.videoTrack);\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      }).catch((error) => {\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.UNMUTE_VIDEO_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          }\n        );\n\n        throw error;\n      }),\n    {\n      header: `${LOG_HEADER} unmuting video`,\n      success: `${LOG_HEADER} unmuted video successfully`,\n      failure: `${LOG_HEADER} unmuting video failed, `\n    });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    return this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => ({\n            join: joinResponse,\n            media: mediaResponse,\n            local: [localStream, localShare]\n          }))))\n      .catch((error) => {\n        LoggerProxy.logger.error('Meeting:index#joinWithMedia --> ', error);\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.JOIN_WITH_MEDIA_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          },\n          {\n            type: error.name\n          }\n        );\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   *\n   * @param {object} options\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect(options) {\n    LoggerProxy.logger.log(`Meeting:index#reconnect --> attempting to reconnect meeting ${this.id}`);\n\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      return Promise.reject(new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.'));\n    }\n\n    if (!MeetingUtil.isMediaEstablished(this.currentMediaStatus)) {\n      return Promise.reject(new ParameterError('Cannot reconnect, Media has not established to reconnect'));\n    }\n\n    try {\n      LoggerProxy.logger.info('Meeting:index#reconnect --> Validating reconnect ability.');\n      this.reconnectionManager.validate();\n    }\n    catch (error) {\n      // Unable to reconnect this call\n      if (error instanceof ReconnectInProgress) {\n        LoggerProxy.logger.info('Meeting:index#reconnect --> Unable to reconnect, reconnection in progress.');\n      }\n      else {\n        LoggerProxy.logger.log('Meeting:index#reconnect --> Unable to reconnect.', error);\n      }\n\n      return Promise.resolve();\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n\n\n    return this.reconnectionManager\n      .reconnect(options)\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS\n        );\n        LoggerProxy.logger.log('Meeting:index#reconnect --> Meeting reconnect success');\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n\n        LoggerProxy.logger.error('Meeting:index#reconnect --> Meeting reconnect failed', error);\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MEETING_RECONNECT_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          }\n        );\n\n        this.uploadLogs({\n          file: 'meeting/index',\n          function: 'reconnect'\n        });\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally(() => {\n        this.reconnectionManager.reset();\n      });\n  }\n\n  /**\n   * Check if the meeting supports the Webex Assistant feature\n   * @returns {boolean}\n   * @throws TranscriptionNotSupportedError\n   */\n  isTranscriptionSupported() {\n    if (this.policy?.WEBEX_ASSISTANT_STATUS_ACTIVE) {\n      return true;\n    }\n\n    LoggerProxy.logger.error(\n      'Meeting:index#isTranscriptionSupported --> Webex Assistant is not supported'\n    );\n\n    return false;\n  }\n\n  /**\n   * Monitor the Low-Latency Mercury (LLM) web socket connection on `onError` and `onClose` states\n   * @private\n   * @returns {void}\n   */\n  monitorTranscriptionSocketConnection() {\n    this.transcription.onCloseSocket((event) => {\n      LoggerProxy.logger.info(\n        `Meeting:index#onCloseSocket -->\n        unable to continue receiving transcription;\n        low-latency mercury web socket connection is closed now.\n        ${event}`\n      );\n\n      this.triggerStopReceivingTranscriptionEvent();\n    });\n\n    this.transcription.onErrorSocket((event) => {\n      LoggerProxy.logger.error(\n        `Meeting:index#onErrorSocket -->\n         unable to continue receiving transcription;\n         low-latency mercury web socket connection error had occured.\n        ${event}`\n      );\n\n      this.triggerStopReceivingTranscriptionEvent();\n\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.RECEIVE_TRANSCRIPTION_FAILURE,\n        {\n          correlation_id: this.correlationId,\n          reason: 'unexpected error: transcription LLM web socket connection error had occured.',\n          event\n        }\n      );\n    });\n  }\n\n  /**\n   * Request for a WebSocket Url, open and monitor the WebSocket connection\n   * @private\n   * @returns {Promise<void>} a promise to open the WebSocket connection\n   */\n  async receiveTranscription() {\n    LoggerProxy.logger.info(\n      `Meeting:index#receiveTranscription -->\n      Attempting to generate a web socket url.`\n    );\n\n    try {\n      const {datachannelUrl} = this.locusInfo.info;\n      const {body: {webSocketUrl}} = await this.request({\n        method: HTTP_VERBS.POST,\n        uri: datachannelUrl,\n        body: {deviceUrl: this.deviceUrl}\n      });\n\n      LoggerProxy.logger.info(\n        `Meeting:index#receiveTranscription -->\n        Generated web socket url succesfully.`\n      );\n\n      this.transcription = new Transcription(\n        webSocketUrl,\n        this.webex.sessionId,\n        this.members,\n      );\n\n      LoggerProxy.logger.info(\n        `Meeting:index#receiveTranscription -->\n        opened LLM web socket connection successfully.`\n      );\n\n      // retrieve and pass the payload\n      this.transcription.subscribe((payload) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'join'\n          },\n          EVENT_TRIGGERS.MEETING_STARTED_RECEIVING_TRANSCRIPTION,\n          payload\n        );\n      });\n\n      this.monitorTranscriptionSocketConnection();\n      this.transcription.connect(this.webex.credentials.supertoken.access_token);\n    }\n    catch (error) {\n      LoggerProxy.logger.error(`Meeting:index#receiveTranscription --> ${error}`);\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.RECEIVE_TRANSCRIPTION_FAILURE,\n        {\n          correlation_id: this.correlationId,\n          reason: error.message,\n          stack: error.stack\n        }\n      );\n    }\n  }\n\n  /**\n   * stop recieving Transcription by closing\n   * the web socket connection properly\n   * @returns {void}\n   */\n  stopReceivingTranscription() {\n    if (this.transcription) {\n      this.transcription.closeSocket();\n    }\n  }\n\n  /**\n   * triggers an event to notify that the user\n   * will not receive any more transcription\n   * @private\n   * @returns{void}\n   */\n  triggerStopReceivingTranscriptionEvent() {\n    LoggerProxy.logger.info(`\n      Meeting:index#stopReceivingTranscription -->\n      closed transcription LLM web socket connection successfully.`);\n\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting',\n        function: 'triggerStopReceivingTranscriptionEvent'\n      },\n      EVENT_TRIGGERS.MEETING_STOPPED_RECEIVING_TRANSCRIPTION\n    );\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room\n   * Scenario B: Joining other's claimed personal meeting room, do pass pin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass pin or moderator on first try, -do- pass pin and moderator\n   *             if joining as host on second loop, pass pin and pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, conversationUrl, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If a join request is being processed, refer to the deferred promise.\n    if (this.deferJoin) {\n      return this.deferJoin;\n    }\n\n    // Scope-up the resolve/reject methods for handling within join().\n    let joinFailed;\n    let joinSuccess;\n\n    // Create a deferred promise for a consistent resolve value from utils.\n    // This also prevents redundant API calls.\n    this.deferJoin = new Promise((resolve, reject) => {\n      joinFailed = reject;\n      joinSuccess = resolve;\n    });\n\n    if (!this.hasJoinedOnce) {\n      this.hasJoinedOnce = true;\n    }\n    else {\n      LoggerProxy.logger.log(`Meeting:index#join --> Generating a new correlation id for meeting ${this.id}`);\n      LoggerProxy.logger.log(`Meeting:index#join --> Previous correlation id ${this.correlationId}`);\n      this.setCorrelationId(uuid.v4());\n      LoggerProxy.logger.log(`Meeting:index#join --> New correlation id ${this.correlationId}`);\n    }\n\n    if (options.rejoin) {\n      this.meetingFiniteStateMachine.reset();\n    }\n\n    Metrics.postEvent({\n      event: eventType.CALL_INITIATED,\n      meeting: this,\n      data: {trigger: trigger.USER_INTERACTION}\n    });\n\n    LoggerProxy.logger.log('Meeting:index#join --> Joining a meeting');\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    if (options.meetingQuality) {\n      if (typeof options.meetingQuality === 'string') {\n        if (!QUALITY_LEVELS[options.meetingQuality]) {\n          const errorMessage = `Meeting:index#join --> ${options.meetingQuality} not defined`;\n          const error = new Error(errorMessage);\n\n          LoggerProxy.logger.error(errorMessage);\n\n          joinFailed(error);\n          this.deferJoin = undefined;\n\n          return Promise.reject(error);\n        }\n\n        this.mediaProperties.setLocalQualityLevel(options.meetingQuality);\n        this.mediaProperties.setRemoteQualityLevel(options.meetingQuality);\n      }\n\n      if (typeof options.meetingQuality === 'object') {\n        if (\n          !QUALITY_LEVELS[options.meetingQuality.local] &&\n          !QUALITY_LEVELS[options.meetingQuality.remote]\n        ) {\n          const errorMessage = `Meeting:index#join --> ${\n            options.meetingQuality.local || options.meetingQuality.remote\n          } not defined`;\n\n          LoggerProxy.logger.error(errorMessage);\n\n          const error = new Error(errorMessage);\n\n          joinFailed(error);\n          this.deferJoin = undefined;\n\n          return Promise.reject(new Error(errorMessage));\n        }\n\n        if (options.meetingQuality.local) {\n          this.mediaProperties.setLocalQualityLevel(options.meetingQuality.local);\n        }\n        if (options.meetingQuality.remote) {\n          this.mediaProperties.setRemoteQualityLevel(options.meetingQuality.remote);\n        }\n      }\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options)\n      .then((join) => {\n        this.meetingFiniteStateMachine.join();\n        LoggerProxy.logger.log('Meeting:index#join --> Success');\n\n        return join;\n      })\n      .then((join) => {\n        joinSuccess(join);\n        this.deferJoin = undefined;\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.JOIN_SUCCESS,\n          {\n            correlation_id: this.correlationId\n          }\n        );\n\n        return join;\n      }).then(async (join) => {\n        if (isBrowser) {\n          if (this.config.receiveTranscription || options.receiveTranscription) {\n            if (this.isTranscriptionSupported()) {\n              await this.receiveTranscription();\n              LoggerProxy.logger.info('Meeting:index#join --> enabled to recieve transcription!');\n            }\n          }\n        }\n        else {\n          LoggerProxy.logger.error('Meeting:index#join --> Receving transcription is not supported on this platform');\n        }\n\n\n        return join;\n      })\n      .catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n        LoggerProxy.logger.error('Meeting:index#join --> Failed', error);\n\n        // TODO:  change this to error codes and pre defined dictionary\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.JOIN_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            reason: error.error?.message,\n            stack: error.stack\n          }\n        );\n\n        // Upload logs on join Failure\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'join'\n          },\n          EVENTS.REQUEST_UPLOAD_LOGS,\n          this\n        );\n\n        joinFailed(error);\n        this.deferJoin = undefined;\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Use phone for meeting audio\n   * @param {String} phoneNumber If provided, it will dial-out using this number. If not provided, dial-in will be used\n   * @returns {Promise} Resolves once the dial-in or dial-out request has completed, or rejects if it failed\n   * @public\n   * @memberof Meeting\n   */\n  usePhoneAudio(phoneNumber) {\n    if (!phoneNumber) {\n      return this.dialInPstn();\n    }\n\n    return this.dialOutPstn(phoneNumber);\n  }\n\n  /**\n   * Determines if the given pstnStatus is in a state which implies the phone is provisioned\n   * @param {String} pstnStatus\n   * @returns {Boolean}\n   * @private\n   * @memberof Meeting\n   */\n  isPhoneProvisioned(pstnStatus) {\n    return [PSTN_STATUS.JOINED, PSTN_STATUS.CONNECTED, PSTN_STATUS.SUCCESS].includes(pstnStatus);\n  }\n\n  /**\n   * Enable dial-in for audio\n   * @returns {Promise} Resolves once the dial-in request has completed, or rejects if it failed\n   * @private\n   * @memberof Meeting\n   */\n  dialInPstn() {\n    if (this.isPhoneProvisioned(this.dialInDeviceStatus)) return Promise.resolve(); // prevent multiple dial in devices from being provisioned\n\n    const {correlationId, locusUrl} = this;\n\n    if (!this.dialInUrl) this.dialInUrl = `dialin:///${uuid.v4()}`;\n\n    return this.meetingRequest.dialIn({\n      correlationId,\n      dialInUrl: this.dialInUrl,\n      locusUrl,\n      clientUrl: this.deviceUrl\n    }).then((res) => {\n      this.locusInfo.onFullLocus(res.body.locus);\n    }).catch((error) => {\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.ADD_DIAL_IN_FAILURE,\n        {\n          correlation_id: this.correlationId,\n          dial_in_url: this.dialInUrl,\n          locus_id: locusUrl.split('/').pop(),\n          client_url: this.deviceUrl,\n          reason: error.error?.message,\n          stack: error.stack\n        }\n      );\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Enable dial-out for audio\n   * @param {String} phoneNumber Phone number to dial out to\n   * @returns {Promise} Resolves once the dial-out request has completed (it doesn't wait for the user to answer the phone), or rejects if it failed\n   * @private\n   * @memberof Meeting\n   */\n  dialOutPstn(phoneNumber) {\n    if (this.isPhoneProvisioned(this.dialOutDeviceStatus)) return Promise.resolve(); // prevent multiple dial out devices from being provisioned\n\n    const {correlationId, locusUrl} = this;\n\n    if (!this.dialOutUrl) this.dialOutUrl = `dialout:///${uuid.v4()}`;\n\n    return this.meetingRequest.dialOut({\n      correlationId,\n      dialOutUrl: this.dialOutUrl,\n      phoneNumber,\n      locusUrl,\n      clientUrl: this.deviceUrl\n    }).then((res) => {\n      this.locusInfo.onFullLocus(res.body.locus);\n    }).catch((error) => {\n      Metrics.sendBehavioralMetric(\n        BEHAVIORAL_METRICS.ADD_DIAL_OUT_FAILURE,\n        {\n          correlation_id: this.correlationId,\n          dial_out_url: this.dialOutUrl,\n          locus_id: locusUrl.split('/').pop(),\n          client_url: this.deviceUrl,\n          reason: error.error?.message,\n          stack: error.stack\n        }\n      );\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Disconnect meeting audio via phone.\n   * @returns {Promise} Resolves once the phone audio disconnection has completed\n   * @public\n   * @memberof Meeting\n   * @returns {Promise}\n   */\n  disconnectPhoneAudio() {\n    return Promise.all([\n      this.isPhoneProvisioned(this.dialInDeviceStatus) ?\n        MeetingUtil.disconnectPhoneAudio(this, this.dialInUrl) :\n        Promise.resolve(),\n      this.isPhoneProvisioned(this.dialOutDeviceStatus) ?\n        MeetingUtil.disconnectPhoneAudio(this, this.dialOutUrl) :\n        Promise.resolve()\n    ]);\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    Metrics.postEvent({event: eventType.MOVE_MEDIA, meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.postEvent({event: eventType.MOVE_MEDIA, meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(this.id);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (\n    mediaDirection,\n    // This return an OBJECT {video: {height, widght}}\n    audioVideo = VIDEO_RESOLUTIONS[this.mediaProperties.localQualityLevel],\n    sharePreferences\n  ) => {\n    if (\n      mediaDirection &&\n      (\n        mediaDirection.sendAudio ||\n        mediaDirection.sendVideo ||\n        mediaDirection.sendShare\n      )\n    ) {\n      if (mediaDirection &&\n        (\n          mediaDirection.sendAudio &&\n          mediaDirection.sendVideo &&\n          mediaDirection.sendShare\n        ) &&\n        isBrowser('safari')\n      ) {\n        LoggerProxy.logger.warn('Meeting:index#getMediaStreams --> Setting `sendShare` to FALSE, due to complications with Safari');\n\n        mediaDirection.sendShare = false;\n\n        LoggerProxy.logger.warn('Meeting:index#getMediaStreams --> Enabling `sendShare` along with `sendAudio` & `sendVideo`, on Safari, causes a failure while setting up a screen share at the same time as the camera+mic stream');\n        LoggerProxy.logger.warn('Meeting:index#getMediaStreams --> Please use `meeting.shareScreen()` to manually start the screen share after successfully joining the meeting');\n      }\n\n      // extract deviceId if exists otherwise default to null.\n      const {deviceId: preferredVideoDevice} = (audioVideo && audioVideo.video || {deviceId: null});\n      const lastVideoDeviceId = this.mediaProperties.getVideoDeviceId();\n\n      if (preferredVideoDevice) {\n        // Store new preferred video input device\n        this.mediaProperties.setVideoDeviceId(preferredVideoDevice);\n      }\n      else if (lastVideoDeviceId) {\n        // no new video preference specified so use last stored value,\n        // works with empty object {} or media constraint.\n        // eslint-disable-next-line no-param-reassign\n        audioVideo = {\n          ...audioVideo,\n          video: {\n            ...audioVideo.video,\n            deviceId: lastVideoDeviceId\n          }\n        };\n      }\n\n      return Media.getSupportedDevice({\n        sendAudio: mediaDirection.sendAudio,\n        sendVideo: mediaDirection.sendVideo\n      })\n        .catch((error) => Promise.reject(\n          new MediaError('Given constraints do not match permission set for either camera or microphone', error)\n        ))\n        .then((devicePermissions) =>\n          Media.getUserMedia(\n            {\n              ...mediaDirection,\n              sendAudio: devicePermissions.sendAudio,\n              sendVideo: devicePermissions.sendVideo,\n              isSharing: this.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE\n            },\n            audioVideo,\n            sharePreferences,\n            this.config\n          )\n            .catch((error) => {\n              // Whenever there is a failure when trying to access a user's device\n              // report it as an Behavioral metric\n              // This gives visibility into common errors and can help\n              // with further troubleshooting\n              const metricName = BEHAVIORAL_METRICS.GET_USER_MEDIA_FAILURE;\n              const data = {\n                correlation_id: this.correlationId,\n                locus_id: this.locusUrl?.split('/').pop(),\n                reason: error.message,\n                stack: error.stack\n              };\n              const metadata = {\n                type: error.name\n              };\n\n              Metrics.sendBehavioralMetric(metricName, data, metadata);\n              throw new MediaError('Unable to retrieve media streams', error);\n            }));\n    }\n\n    return Promise.reject(\n      new MediaError('At least one of the mediaDirection value should be true')\n    );\n  };\n\n\n  /**\n   * Checks if the machine has at least one audio or video device\n   * @param {Object} options\n   * @param {Boolean} options.sendAudio\n   * @param {Boolean} options.sendVideo\n   * @returns {Object}\n   * @memberof Meetings\n   */\n  getSupportedDevices = ({sendAudio = true, sendVideo = true}) => Media.getSupportedDevice({sendAudio, sendVideo});\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    const LOG_HEADER = 'Meeting:index#addMedia -->';\n\n    if (this.meetingState !== FULL_STATE.ACTIVE) {\n      return Promise.reject(new MeetingNotActiveError());\n    }\n\n    if (MeetingUtil.isUserInLeftState(this.locusInfo)) {\n      return Promise.reject(new UserNotJoinedError());\n    }\n    // If the user is unjoined or guest waiting in lobby dont allow the user to addMedia\n    if (this.guest && MeetingUtil.isUserInIdleState(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new UserInLobbyError());\n    }\n\n    const {localStream, localShare, mediaSettings} = options;\n\n    LoggerProxy.logger.info(`${LOG_HEADER} Adding Media.`);\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        this.mediaProperties.setMediaPeerConnection(MediaUtil.createPeerConnection());\n        this.setMercuryListener();\n        PeerConnectionManager.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, {\n        meetingId: this.id,\n        remoteQualityLevel: this.mediaProperties.remoteQualityLevel,\n        enableRtx: this.config.enableRtx,\n        enableExtmap: this.config.enableExtmap,\n        setStartLocalSDPGenRemoteSDPRecvDelay: this.setStartLocalSDPGenRemoteSDPRecvDelay.bind(this)\n      })\n        .then((peerConnection) => this.getDevices().then((devices) => {\n          MeetingUtil.handleDeviceLogging(devices);\n\n          return peerConnection;\n        }))\n        .then((peerConnection) => {\n          this.handleMediaLogging(this.mediaProperties);\n          LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection Received from attachMedia `);\n\n          this.setRemoteStream(peerConnection);\n          MeetingUtil.startInternalStats(this);\n\n          if (this.config.metrics.autoSendMQA) {\n            this.startMediaQualityMetrics();\n          }\n\n          if (this.config.stats.enableStatsAnalyzer) {\n            // TODO: ** Dont re create StatsAnalyzer on reconnect or rejoin\n            this.networkQualityMonitor = new NetworkQualityMonitor(this.config.stats);\n            this.statsAnalyzer = new StatsAnalyzer(this.config.stats, this.networkQualityMonitor);\n            this.statsAnalyzer.on(EVENT_TRIGGERS.MEDIA_QUALITY, (options) => {\n              // TODO:  might have to send the same event to the developer\n              // Add ip address info if geo hint is present\n              options.data.intervalMetadata.peerReflexiveIP = this.webex.meetings.geoHintInfo?.clientAddress || options.data.intervalMetadata.peerReflexiveIP || MQA_STATS.DEFAULT_IP;\n              Metrics.postEvent({event: eventType.MEDIA_QUALITY, meeting: this, data: {intervalData: options.data, networkType: options.networkType}});\n            });\n            this.networkQualityMonitor.on(EVENT_TRIGGERS.NETWORK_QUALITY, this.sendNetworkQualityEvent.bind(this));\n          }\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error(`${LOG_HEADER} Error adding media , setting up peerconnection, `, error);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.ADD_MEDIA_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop(),\n              reason: error.message,\n              stack: error.stack\n            }\n          );\n\n          throw error;\n        })\n        .then(() => new Promise((resolve, reject) => {\n          let timerCount = 0;\n\n          // eslint-disable-next-line func-names\n          // eslint-disable-next-line prefer-arrow-callback\n          if (this.type === _CALL_) {\n            resolve();\n          }\n          const joiningTimer = setInterval(() => {\n            timerCount += 1;\n            if (this.meetingState === FULL_STATE.ACTIVE) {\n              clearInterval(joiningTimer);\n              resolve();\n            }\n\n            if (timerCount === 4) {\n              clearInterval(joiningTimer);\n              reject(new Error('Meeting is still not active '));\n            }\n          }, 1000);\n        }))\n        .then(() =>\n          logRequest(this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            }), {\n            header: `${LOG_HEADER} Send Roap Media Request.`,\n            success: `${LOG_HEADER} Successfully send roap media request`,\n            failure: `${LOG_HEADER} Error joining the call on send roap media request, `\n          }))\n        .then(() => {\n          const {peerConnection} = this.mediaProperties;\n\n          return new Promise((resolve, reject) => {\n            if (peerConnection.connectionState === CONNECTION_STATE.CONNECTED) {\n              LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection CONNECTED`);\n\n              resolve(peerConnection);\n\n              return;\n            }\n            // Check if Peer Connection is STABLE (connected)\n            const stabilityTimeout = setTimeout(() => {\n              if (peerConnection.connectionState !== CONNECTION_STATE.CONNECTED) {\n                // TODO: Fix this after the error code pr goes in\n                reject(createMeetingsError(30202, 'Meeting connection failed'));\n              }\n              else {\n                LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection CONNECTED`);\n                resolve(peerConnection);\n              }\n            }, PC_BAIL_TIMEOUT);\n\n            this.once(EVENT_TRIGGERS.MEDIA_READY, () => {\n              LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection CONNECTED, clearing stability timer.`);\n              clearTimeout(stabilityTimeout);\n              resolve(peerConnection);\n            });\n          });\n        })\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (this.state === MEETING_STATE.STATES.JOINED) {\n              return this.share();\n            }\n\n            // When the self state changes to JOINED then request the floor\n            this.floorGrantPending = true;\n          }\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.ADD_MEDIA_SUCCESS,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop()\n            }\n          );\n\n          return Promise.resolve();\n        }))\n      .catch((error) => {\n        // Clean up stats analyzer, peer connection, and turn off listeners\n        if (this.statsAnalyzer) {\n          this.statsAnalyzer.stopAnalyzer();\n          this.statsAnalyzer = null;\n        }\n        if (this.mediaProperties.peerConnection) {\n          this.closePeerConnections();\n          this.unsetPeerConnections();\n        }\n\n        LoggerProxy.logger.error(`${LOG_HEADER} Error adding media failed to initiate PC and send request, `, error);\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.ADD_MEDIA_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack,\n            code: error.code\n          }\n        );\n\n        // Upload logs on error while adding media\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'addMedia'\n          },\n          EVENTS.REQUEST_UPLOAD_LOGS,\n          this\n        );\n\n        // If addMedia failes for not establishing connection then\n        // leave the meeting with reson connection failed as meeting anyways will end\n        // and cannot be connected unless network condition is checked for firewall\n        if (error.code === InvalidSdpError.CODE) {\n          this.leave({reason: MEETING_REMOVED_REASON.MEETING_CONNECTION_FAILED});\n        }\n\n        throw error;\n      });\n  }\n\n  /**\n   * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n   * @returns {Boolean}\n   */\n  canUpdateMedia() {\n    return this.mediaProperties.peerConnection.signalingState === SDP.STABLE && !RoapCollection.isBusy(this.correlationId);\n  }\n\n  /**\n   * Enqueues a media update operation.\n   * @param {String} mediaUpdateType one of MEDIA_UPDATE_TYPE values\n   * @param {Object} options\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  enqueueMediaUpdate(mediaUpdateType, options) {\n    return new Promise((resolve, reject) => {\n      const queueItem = {\n        pendingPromiseResolve: resolve, pendingPromiseReject: reject, mediaUpdateType, options\n      };\n\n      LoggerProxy.logger.log(`Meeting:index#enqueueMediaUpdate --> enqueuing media update type=${mediaUpdateType}`);\n      this.queuedMediaUpdates.push(queueItem);\n    });\n  }\n\n  /**\n   * emits event when the negotation is completed\n   * @returns {void}\n   * @private\n   * @memberof Meeting\n   */\n  mediaNegotiatedEvent = () => {\n    if (this.config.experimental.enableMediaNegotiatedEvent) {\n      LoggerProxy.logger.info('Meeting:mediaNegotiatedEvent --> Media server negotiated');\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'mediaNegotiatedEvent'\n        },\n        EVENT_TRIGGERS.MEDIA_NEGOTIATED,\n      );\n    }\n  }\n\n  /**\n   * Checks if there are any queued media updates and runs the first one from\n   * the queue if we are in a state that allows doing that.\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  processNextQueuedMediaUpdate = () => {\n    if (this.canUpdateMedia() && (this.queuedMediaUpdates.length > 0)) {\n      const {\n        pendingPromiseResolve, pendingPromiseReject, mediaUpdateType, options\n      } = this.queuedMediaUpdates.shift();\n\n      LoggerProxy.logger.log(`Meeting:index#processNextQueuedMediaUpdate --> performing delayed media update type=${mediaUpdateType}`);\n      switch (mediaUpdateType) {\n        case MEDIA_UPDATE_TYPE.ALL:\n          this.updateMedia(options).then(pendingPromiseResolve, pendingPromiseReject);\n          break;\n        case MEDIA_UPDATE_TYPE.AUDIO:\n          this.updateAudio(options).then(pendingPromiseResolve, pendingPromiseReject);\n          break;\n        case MEDIA_UPDATE_TYPE.VIDEO:\n          this.updateVideo(options).then(pendingPromiseResolve, pendingPromiseReject);\n          break;\n        case MEDIA_UPDATE_TYPE.SHARE:\n          this.updateShare(options).then(pendingPromiseResolve, pendingPromiseReject);\n          break;\n        default:\n          LoggerProxy.logger.error(`Peer-connection-manager:index#processNextQueuedMediaUpdate --> unsupported media update type ${mediaUpdateType} found in the queue`);\n          break;\n      }\n    }\n  };\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    const LOG_HEADER = 'Meeting:index#updateMedia -->';\n\n    if (!this.canUpdateMedia()) {\n      return this.enqueueMediaUpdate(MEDIA_UPDATE_TYPE.ALL, options);\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, {\n        meetingId: this.id,\n        remoteQualityLevel: this.mediaProperties.remoteQualityLevel,\n        enableRtx: this.config.enableRtx,\n        enableExtmap: this.config.enableExtmap\n      })\n        .then((peerConnection) => {\n          LoggerProxy.logger.info(`${LOG_HEADER} PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error(`${LOG_HEADER} Error updatedMedia, `, error);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.UPDATE_MEDIA_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop(),\n              reason: error.message,\n              stack: error.stack\n            }\n          );\n\n          throw error;\n        })\n        .then(() =>\n          logRequest(this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            }),\n          {\n            header: `${LOG_HEADER} sendRoapMediaRequest being sent`,\n            success: `${LOG_HEADER} sendRoadMediaRequest successful`,\n            failure: `${LOG_HEADER} Error updateMedia on send roap media request, `\n          }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio track with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} options.stream Stream that contains the audio track to update\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    if (!this.canUpdateMedia()) {\n      return this.enqueueMediaUpdate(MEDIA_UPDATE_TYPE.AUDIO, options);\n    }\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendAudio and receiveAudio parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => {\n        let previousMediaDirection = {};\n\n        if (this.mediaProperties.mediaDirection) {\n          previousMediaDirection = {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          };\n        }\n        else {\n          this.mediaProperties.mediaDirection = {};\n        }\n\n        return MeetingUtil.updateTransceiver(\n          {\n            type: 'audio',\n            sendTrack: options.sendAudio,\n            receiveTrack: options.receiveAudio,\n            track,\n            transceiver: audioTransceiver,\n            peerConnection: this.mediaProperties.peerConnection,\n            previousMediaDirection\n          },\n          {\n            mediaProperties: this.mediaProperties,\n            meeting: this,\n            id: this.id\n          }\n        );\n      })\n      .then(() => {\n        this.setLocalAudioTrack(track);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n\n        // audio state could be undefined if you have not sent audio before\n        this.audio = this.audio || createMuteState(AUDIO, this, this.mediaProperties.mediaDirection);\n      });\n  }\n\n  /**\n   * Update the main video track with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} options.stream Stream that contains the video track to update\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    if (!this.canUpdateMedia()) {\n      return this.enqueueMediaUpdate(MEDIA_UPDATE_TYPE.VIDEO, options);\n    }\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.setLocalVideoTrack(track);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n\n        // video state could be undefined if you have not sent video before\n        this.video = this.video || createMuteState(VIDEO, this, this.mediaProperties.mediaDirection);\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (sendShare && !previousShareStatus) {\n      // When user starts sharing\n      return Promise.resolve(true);\n    }\n\n    if (!sendShare && previousShareStatus) {\n      // When user stops sharing\n      return this.stopFloorRequest()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    if (!options.skipSignalingCheck && !this.canUpdateMedia()) {\n      return this.enqueueMediaUpdate(MEDIA_UPDATE_TYPE.SHARE, options);\n    }\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    this.setLocalShareTrack(stream);\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      })\n      .catch((error) => {\n        this.unsetLocalShareTrack(stream);\n        throw error;\n      })\n      .finally(() => {\n        const delay = 1e3;\n        // Check to see if share was stopped natively before onended was assigned.\n        const sharingModeIsActive = this.mediaProperties.peerConnection.shareTransceiver.direction === SENDRECV;\n        const isSharingOutOfSync = sharingModeIsActive && !this.isLocalShareLive;\n\n        if (isSharingOutOfSync) {\n          // Adding a delay to avoid a 409 from server\n          // which results in user still appearing as if sharing.\n          // Also delay give time for changes to peerConnection.\n          setTimeout(\n            () => this.handleShareTrackEnded(stream),\n            delay\n          );\n        }\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || createMuteState(AUDIO, this, this.mediaProperties.mediaDirection);\n    this.video = this.video || createMuteState(VIDEO, this, this.mediaProperties.mediaDirection);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          correlationId: this.correlationId\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options leave options\n   * @param {String} options.resourceId the device with which to leave from, empty if just the computer\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n    const leaveReason = options.reason || MEETING_REMOVED_REASON.CLIENT_LEAVE_REQUEST;\n\n    LoggerProxy.logger.log('Meeting:index#leave --> Leaving a meeting');\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        this.audio = null;\n        this.video = null;\n        this.isSharing = false;\n        if (this.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE) {\n          this.shareStatus = SHARE_STATUS.NO_SHARE;\n        }\n        this.queuedMediaUpdates = [];\n\n        if (this.transcription) {\n          this.transcription.closeSocket();\n          this.triggerStopReceivingTranscriptionEvent();\n          this.transcription = undefined;\n        }\n\n        // upload logs on leave irrespective of meeting delete\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'leave'\n          },\n          EVENTS.REQUEST_UPLOAD_LOGS,\n          this\n        );\n\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        if (this.wirelessShare || this.guest) {\n          // If screen sharing clean the meeting object\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'leave'\n            },\n            EVENTS.DESTROY_MEETING,\n            {\n              reason: options.reason,\n              meetingId: this.id\n            }\n          );\n        }\n        LoggerProxy.logger.log('Meeting:index#leave --> LEAVE REASON ', leaveReason);\n\n        return leave;\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n        LoggerProxy.logger.error('Meeting:index#leave --> Failed to leave ', error);\n        // upload logs on leave irrespective of meeting delete\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'leave'\n          },\n          EVENTS.REQUEST_UPLOAD_LOGS,\n          this\n        );\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.MEETING_LEAVE_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack,\n            code: error.code\n          }\n        );\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing whiteboard given channelUrl\n   * @param {string} channelUrl whiteboard url\n   * @param {String} resourceToken token created by authorize media injector\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startWhiteboardShare(channelUrl, resourceToken) {\n    const whiteboard = this.locusInfo.mediaShares.find((element) => element.name === 'whiteboard');\n\n    if (!channelUrl) {\n      return Promise.reject(new ParameterError('Cannot share without channelUrl.'));\n    }\n\n    if (whiteboard) {\n      Metrics.postEvent({event: eventType.WHITEBOARD_SHARE_INITIATED, meeting: this});\n\n      const body = {\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: whiteboard.url,\n        resourceUrl: channelUrl\n      };\n\n      if (resourceToken) {\n        body.resourceToken = resourceToken;\n      }\n\n      return this.meetingRequest.changeMeetingFloor(body)\n        .then(() => {\n          this.isSharing = false;\n\n          return Promise.resolve();\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error('Meeting:index#startWhiteboardShare --> Error ', error);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.MEETING_START_WHITEBOARD_SHARE_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop(),\n              reason: error.message,\n              stack: error.stack,\n              board: {channelUrl}\n            }\n          );\n\n          return Promise.reject(error);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without whiteboard.'));\n  }\n\n  /**\n   * Stop sharing whiteboard given channelUrl\n   * @param {string} channelUrl whiteboard url\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopWhiteboardShare(channelUrl) {\n    const whiteboard = this.locusInfo.mediaShares.find((element) => element.name === 'whiteboard');\n\n    if (whiteboard) {\n      Metrics.postEvent({event: eventType.WHITEBOARD_SHARE_STOPPED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: whiteboard.url\n      })\n        .catch((error) => {\n          LoggerProxy.logger.error('Meeting:index#stopWhiteboardShare --> Error ', error);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.STOP_WHITEBOARD_SHARE_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop(),\n              reason: error.message,\n              stack: error.stack,\n              board: {channelUrl}\n            }\n          );\n\n          return Promise.reject(error);\n        })\n        .finally(() => {\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without whiteboard.'));\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && (this.shareStatus !== SHARE_STATUS.LOCAL_SHARE_ACTIVE)) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n\n          return Promise.resolve();\n        })\n        .catch((error) => {\n          LoggerProxy.logger.error('Meeting:index#share --> Error ', error);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.MEETING_SHARE_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop(),\n              reason: error.message,\n              stack: error.stack\n            }\n          );\n\n          return Promise.reject(error);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #updateShare\n   * @public\n   * @memberof Meeting\n   */\n  // Internal only, temporarily allows optional params\n  // eslint-disable-next-line valid-jsdoc\n  stopShare(options = {}) {\n    return this.updateShare({\n      sendShare: false,\n      receiveShare: this.mediaProperties.mediaDirection.receiveShare,\n      ...options\n    });\n  }\n\n  /**\n   * sends stops floor request\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  stopFloorRequest() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && (this.mediaProperties.mediaDirection.sendShare)) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      if (content.floor.beneficiary.id !== this.selfId) {\n        // remote participant started sharing and caused our sharing to stop, we don't want to send any floor action request in that case\n        this.isSharing = false;\n\n        return Promise.resolve();\n      }\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((error) => {\n          LoggerProxy.logger.error('Meeting:index#stopFloorRequest --> Error ', error);\n\n          Metrics.sendBehavioralMetric(\n            BEHAVIORAL_METRICS.STOP_FLOOR_REQUEST_FAILURE,\n            {\n              correlation_id: this.correlationId,\n              locus_id: this.locusUrl.split('/').pop(),\n              reason: error.message,\n              stack: error.stack\n            }\n          );\n\n          return Promise.reject(error);\n        })\n        .finally(() => {\n          this.isSharing = false;\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Logs an error message and returns a rejected promise with same message\n   * @param {String} message\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  rejectWithErrorLog(message) {\n    LoggerProxy.logger.error(message);\n\n    return Promise.reject(new Error(message));\n  }\n\n  /**\n   * Sends DTMF tones to the current meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  sendDTMF(tones) {\n    if (this.locusInfo && this.locusInfo.self) {\n      if (this.locusInfo.self.enableDTMF) {\n        return this.meetingRequest\n          .sendDTMF({\n            locusUrl: this.locusInfo.self.url,\n            deviceUrl: this.deviceUrl,\n            tones\n          });\n      }\n\n      return this.rejectWithErrorLog('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have DTMF enabled');\n    }\n\n    return this.rejectWithErrorLog('Meeting:index#sendDTMF --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service. Have you joined?');\n  }\n\n  /**\n   * Sends request to change layout type for the current meeting for the specific participant/device only\n   * @param {String} layoutType a layout type that should be available in meeting constants LAYOUT_TYPES\n   * @param {Object} renderInfo preferred dimensions for the remote main and content streams (server can ignore it)\n   * @param {Object} renderInfo.main preferred dimensions for the remote main video stream\n   * @param {Number} renderInfo.main.width preferred width of main video stream\n   * @param {Number} renderInfo.main.height preferred height of main video stream\n   * @param {Object} renderInfo.content preferred dimensions for the remote content share stream\n   * @param {Number} renderInfo.content.width preferred width of content share stream\n   * @param {Number} renderInfo.content.height preferred height of content share stream\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  changeVideoLayout(layoutType, renderInfo = {}) {\n    const {main, content} = renderInfo;\n    const {mediaDirection, remoteShare, remoteVideoTrack} = this.mediaProperties;\n\n    const layoutInfo = cloneDeep(this.lastVideoLayoutInfo);\n\n    // TODO: We need a real time value for Audio, Video and Share send indicator\n    if (mediaDirection.receiveVideo !== true || !remoteVideoTrack) {\n      return this.rejectWithErrorLog('Meeting:index#changeVideoLayout --> cannot change video layout, you are not recieving any video/share stream');\n    }\n\n    if (LAYOUT_TYPES.includes(layoutType)) {\n      layoutInfo.layoutType = layoutType;\n    }\n    else {\n      return this.rejectWithErrorLog('Meeting:index#changeVideoLayout --> cannot change video layout, invalid layoutType recieved.');\n    }\n\n    if (main) {\n      const mainWidth = Math.round(main.width);\n      const mainHeight = Math.round(main.height);\n\n      // Stop any \"twitching\" caused by very slight size changes\n      if (\n        !this.lastVideoLayoutInfo.main ||\n        Math.abs(this.lastVideoLayoutInfo.main.height - mainHeight) > 2 ||\n        Math.abs(this.lastVideoLayoutInfo.main.width - mainWidth) > 2\n      ) {\n        layoutInfo.main = {width: mainWidth, height: mainHeight};\n      }\n    }\n\n    if (content) {\n      if (this.mediaProperties.mediaDirection.receiveShare && remoteShare) {\n        const contentWidth = Math.round(content.width);\n        const contentHeight = Math.round(content.height);\n\n        // Stop any \"twitching\" caused by very slight size changes\n        if (!this.lastVideoLayoutInfo.content ||\n          Math.abs(this.lastVideoLayoutInfo.content.height - contentHeight) > 2 ||\n          Math.abs(this.lastVideoLayoutInfo.content.width - contentWidth) > 2\n        ) {\n          layoutInfo.content = {width: contentWidth, height: contentHeight};\n        }\n      }\n      else {\n        return this.rejectWithErrorLog('Meeting:index#changeVideoLayout --> unable to send renderInfo for content, you are not receiving remote share');\n      }\n    }\n\n    if (isEqual(layoutInfo, this.lastVideoLayoutInfo)) {\n      // nothing changed, no need to send any request\n      return Promise.resolve();\n    }\n    this.lastVideoLayoutInfo = cloneDeep(layoutInfo);\n\n    return this.meetingRequest\n      .changeVideoLayoutDebounced({\n        locusUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        layoutType,\n        main: layoutInfo.main,\n        content: layoutInfo.content\n      })\n      .then((response) => {\n        if (response && response.body && response.body.locus) {\n          this.locusInfo.onFullLocus(response.body.locus);\n        }\n      })\n      .catch((error) => {\n        LoggerProxy.logger.error('Meeting:index#changeVideoLayout --> Error ', error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Sets the quality of the local video stream\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setLocalVideoQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setLocalVideoQuality --> Setting quality to ${level}`);\n\n    if (!VIDEO_RESOLUTIONS[level]) {\n      return this.rejectWithErrorLog(`Meeting:index#setLocalVideoQuality --> ${level} not defined`);\n    }\n\n    if (!this.mediaProperties.mediaDirection.sendVideo) {\n      return this.rejectWithErrorLog('Meeting:index#setLocalVideoQuality --> unable to change video quality, sendVideo is disabled');\n    }\n\n    // If level is already the same, don't do anything\n    if (level === this.mediaProperties.localQualityLevel) {\n      LoggerProxy.logger.warn(`Meeting:index#setLocalQualityLevel --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Set the quality level in properties\n    this.mediaProperties.setLocalQualityLevel(level);\n\n    const mediaDirection = {\n      sendAudio: this.mediaProperties.mediaDirection.sendAudio,\n      sendVideo: this.mediaProperties.mediaDirection.sendVideo,\n      sendShare: this.mediaProperties.mediaDirection.sendShare\n    };\n\n    return this.getMediaStreams(mediaDirection, VIDEO_RESOLUTIONS[level])\n      .then(([localStream]) =>\n        this.updateVideo({\n          sendVideo: true,\n          receiveVideo: true,\n          stream: localStream\n        }));\n  }\n\n  /**\n   * Sets the quality level of the remote incoming media\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setRemoteQualityLevel(level) {\n    LoggerProxy.logger.log(`Meeting:index#setRemoteQualityLevel --> Setting quality to ${level}`);\n\n    if (!QUALITY_LEVELS[level]) {\n      return this.rejectWithErrorLog(`Meeting:index#setRemoteQualityLevel --> ${level} not defined`);\n    }\n\n    if (!this.mediaProperties.mediaDirection.receiveAudio && !this.mediaProperties.mediaDirection.receiveVideo) {\n      return this.rejectWithErrorLog('Meeting:index#setRemoteQualityLevel --> unable to change remote quality, receiveVideo and receiveAudio is disabled');\n    }\n\n    // If level is already the same, don't do anything\n    if (level === this.mediaProperties.remoteQualityLevel) {\n      LoggerProxy.logger.warn(`Meeting:index#setRemoteQualityLevel --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Set the quality level in properties\n    this.mediaProperties.setRemoteQualityLevel(level);\n\n    return this.updateMedia({mediaSettings: this.mediaProperties.mediaDirection});\n  }\n\n  /**\n   * Sets the quality level of all meeting media (incoming/outgoing)\n   * @param {String} level {LOW|MEDIUM|HIGH}\n   * @returns {Promise}\n   */\n  setMeetingQuality(level) {\n    LoggerProxy.logger.log(`Meeting:index#setMeetingQuality --> Setting quality to ${level}`);\n\n    if (!QUALITY_LEVELS[level]) {\n      return this.rejectWithErrorLog(`Meeting:index#setMeetingQuality --> ${level} not defined`);\n    }\n\n    const previousLevel = {\n      local: this.mediaProperties.localQualityLevel,\n      remote: this.mediaProperties.remoteQualityLevel\n    };\n\n    // If level is already the same, don't do anything\n    if (\n      level === this.mediaProperties.localQualityLevel &&\n      level === this.mediaProperties.remoteQualityLevel\n    ) {\n      LoggerProxy.logger.warn(`Meeting:index#setMeetingQuality --> Quality already set to ${level}`);\n\n      return Promise.resolve();\n    }\n\n    // Determine the direction of our current media\n    const {receiveAudio, receiveVideo, sendVideo} = this.mediaProperties.mediaDirection;\n\n    return (sendVideo ? this.setLocalVideoQuality(level) : Promise.resolve())\n      .then(() =>\n        ((receiveAudio || receiveVideo) ?\n          this.setRemoteQualityLevel(level) :\n          Promise.resolve()))\n      .catch((error) => {\n        // From troubleshooting it seems that the stream itself doesn't change the max-fs if the peer connection isn't stable\n        this.mediaProperties.setLocalQualityLevel(previousLevel.local);\n        this.mediaProperties.setRemoteQualityLevel(previousLevel.remote);\n\n        LoggerProxy.logger.error(`Meeting:index#setMeetingQuality --> ${error.message}`);\n\n        Metrics.sendBehavioralMetric(\n          BEHAVIORAL_METRICS.SET_MEETING_QUALITY_FAILURE,\n          {\n            correlation_id: this.correlationId,\n            locus_id: this.locusUrl.split('/').pop(),\n            reason: error.message,\n            stack: error.stack\n          },\n          {\n            type: error.name\n          }\n        );\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n  * @param {Object} options parameter\n  * @param {Boolean} options.sendAudio send audio from the display share\n  * @param {Boolean} options.sendShare send video from the display share\n  * @param {Object} options.sharePreferences\n  * @param {MediaTrackConstraints} options.sharePreferences.shareConstraints constraints to apply to video\n  *   @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints}\n  * @param {Boolean} options.sharePreferences.highFrameRate if shareConstraints isn't provided, set default values based off of this boolean\n  * @returns {Promise}\n  */\n  shareScreen(options = {}) {\n    LoggerProxy.logger.log('Meeting:index#shareScreen --> Getting local share');\n\n    const shareConstraints = {\n      sendShare: true,\n      sendAudio: false,\n      ...options\n    };\n\n    return Media.getDisplayMedia(shareConstraints, this.config)\n      .then((shareStream) => this.updateShare({\n        sendShare: true,\n        receiveShare: this.mediaProperties.mediaDirection.receiveShare,\n        stream: shareStream\n      }))\n      .catch((error) => {\n        // Whenever there is a failure when trying to access a user's display\n        // report it as an Behavioral metric\n        // This gives visibility into common errors and can help\n        // with further troubleshooting\n\n        // This metrics will get erros for getDisplayMedia and share errors for now\n        // TODO: The getDisplayMedia errors need to be moved inside `media.getDisplayMedia`\n        const metricName = BEHAVIORAL_METRICS.GET_DISPLAY_MEDIA_FAILURE;\n        const data = {\n          correlation_id: this.correlationId,\n          locus_id: this.locusUrl.split('/').pop(),\n          reason: error.message,\n          stack: error.stack\n        };\n        const metadata = {\n          type: error.name\n        };\n\n        Metrics.sendBehavioralMetric(metricName, data, metadata);\n        throw new MediaError('Unable to retrieve display media stream', error);\n      });\n  }\n\n  /**\n   * Functionality for when a share is ended.\n   * @private\n   * @memberof Meeting\n   * @param {MediaStream} localShare\n   * @returns {undefined}\n   */\n  handleShareTrackEnded(localShare) {\n    if (this.wirelessShare) {\n      this.leave({reason: MEETING_REMOVED_REASON.USER_ENDED_SHARE_STREAMS});\n    }\n    else {\n      // Skip checking for a stable peerConnection\n      // to allow immediately stopping screenshare\n      this.stopShare({\n        skipSignalingCheck: true\n      })\n        .catch((error) => {\n          LoggerProxy.logger.log('Meeting:index#handleShareTrackEnded --> Error stopping share: ', error);\n        });\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'handleShareTrackEnded'\n      },\n      EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n      {\n        type: EVENT_TYPES.LOCAL_SHARE,\n        stream: localShare\n      }\n    );\n  }\n\n  /**\n   * Emits the 'network:quality' event\n   * 1 indicates an acceptable uplink network.\n   * 0 indicates an unacceptable uplink network based on a predefined threshold\n   * @returns {undefined}\n   * @param {Object} res - payload of emitNetworkQuality\n   * @property {string} mediaType {video|audio}\n   * @property {number} networkQualityScore - {1|0}\n   * @private\n   * @memberof Meeting\n   */\n  sendNetworkQualityEvent(res) {\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'addMedia'\n      },\n      EVENT_TRIGGERS.NETWORK_QUALITY,\n      {\n        networkQualityScore: res.networkQualityScore,\n        mediaType: res.mediaType\n      }\n    );\n  }\n\n  /**\n   * Handle logging the media\n   * @param {Object} audioTrack The audio track\n   * @param {Object} videoTrack The video track\n   * @private\n   * @returns {undefined}\n   */\n  handleMediaLogging({audioTrack, videoTrack}) {\n    MeetingUtil.handleVideoLogging(videoTrack);\n    MeetingUtil.handleAudioLogging(audioTrack);\n  }\n\n  /**\n   * @param {string} typeMedia 'audio' or 'video'\n   * @returns {undefined}\n   */\n  setStartSetupDelay(typeMedia) {\n    this[`startSetupDelay${typeMedia}`] = performance.now();\n    this[`endSetupDelay${typeMedia}`] = undefined;\n  }\n\n  /**\n   * @param {string} typeMedia 'audio' or 'video'\n   * @returns {undefined}\n   */\n  setEndSetupDelay(typeMedia) {\n    this[`endSetupDelay${typeMedia}`] = performance.now();\n  }\n\n  /**\n   * @param {string} typeMedia 'audio' or 'video'\n   * @returns {string} duration between start and end of setup\n   */\n  getSetupDelayDuration(typeMedia) {\n    const start = this[`startSetupDelay${typeMedia}`];\n    const end = this[`endSetupDelay${typeMedia}`];\n\n    return (start && end) ? end - start : undefined;\n  }\n\n  /**\n   * @param {string} typeMedia 'audio' or 'video'\n   * @returns {undefined}\n   */\n  setStartSendingMediaDelay(typeMedia) {\n    this[`startSendingMediaDelay${typeMedia}`] = performance.now();\n    this[`endSendingMediaDelay${typeMedia}`] = undefined;\n  }\n\n  /**\n   * @param {string} typeMedia 'audio' or 'video'\n   * @returns {undefined}\n   */\n  setEndSendingMediaDelay(typeMedia) {\n    this[`endSendingMediaDelay${typeMedia}`] = performance.now();\n  }\n\n  /**\n   * @param {string} typeMedia 'audio' or 'video'\n   * @returns {string} duration between join response and first media tx\n   */\n  getSendingMediaDelayDuration(typeMedia) {\n    const start = this[`startSendingMediaDelay${typeMedia}`];\n    const end = this[`endSendingMediaDelay${typeMedia}`];\n\n    return (start && end) ? end - start : undefined;\n  }\n\n  /**\n   *\n   * @returns {undefined}\n   */\n  setStartLocalSDPGenRemoteSDPRecvDelay() {\n    if (!this.startLocalSDPGenRemoteSDPRecvDelay) {\n      this.startLocalSDPGenRemoteSDPRecvDelay = performance.now();\n      this.endLocalSDPGenRemoteSDPRecvDelay = undefined;\n    }\n  }\n\n  /**\n   *\n   * @returns {undefined}\n   */\n  setEndLocalSDPGenRemoteSDPRecvDelay() {\n    if (!this.endLocalSDPGenRemoteSDPRecvDelay) {\n      this.endLocalSDPGenRemoteSDPRecvDelay = performance.now();\n    }\n  }\n\n  /**\n   *\n   * @returns {string} duration between local SDP generation and remote SDP reception\n   */\n  getLocalSDPGenRemoteSDPRecvDelay() {\n    const start = this.startLocalSDPGenRemoteSDPRecvDelay;\n    const end = this.endLocalSDPGenRemoteSDPRecvDelay;\n\n    if (start && end) {\n      const calculatedDelay = end - start;\n\n      return calculatedDelay > METRICS_JOIN_TIMES_MAX_DURATION ?\n        undefined :\n        calculatedDelay;\n    }\n\n    return undefined;\n  }\n\n  /**\n   *\n   * @returns {undefined}\n   */\n  setStartCallInitiateJoinReq() {\n    this.startCallInitiateJoinReq = performance.now();\n    this.endCallInitiateJoinReq = undefined;\n  }\n\n  /**\n   *\n   * @returns {undefined}\n   */\n  setEndCallInitiateJoinReq() {\n    this.endCallInitiateJoinReq = performance.now();\n  }\n\n  /**\n   *\n   * @returns {string} duration between call initiate and sending join request to locus\n   */\n  getCallInitiateJoinReq() {\n    const start = this.startCallInitiateJoinReq;\n    const end = this.endCallInitiateJoinReq;\n\n    if (start && end) {\n      const calculatedDelay = end - start;\n\n      return calculatedDelay > METRICS_JOIN_TIMES_MAX_DURATION ?\n        undefined :\n        calculatedDelay;\n    }\n\n    return undefined;\n  }\n\n  /**\n   *\n   * @returns {undefined}\n   */\n  setStartJoinReqResp() {\n    this.startJoinReqResp = performance.now();\n    this.endJoinReqResp = undefined;\n  }\n\n  /**\n   *\n   * @returns {undefined}\n   */\n  setEndJoinReqResp() {\n    this.endJoinReqResp = performance.now();\n  }\n\n  /**\n   *\n   * @returns {string} duration between sending locus join request and receiving join response\n   */\n  getJoinReqResp() {\n    const start = this.startJoinReqResp;\n    const end = this.endJoinReqResp;\n\n    if (start && end) {\n      const calculatedDelay = end - start;\n\n      return calculatedDelay > METRICS_JOIN_TIMES_MAX_DURATION ?\n        undefined :\n        calculatedDelay;\n    }\n\n    return undefined;\n  }\n\n  /**\n   *\n   * @returns {string} duration between call initiate and successful locus join (even if it is in lobby)\n   */\n  getTotalJmt() {\n    const start = this.startCallInitiateJoinReq;\n    const end = this.endJoinReqResp;\n\n    return (start && end) ? end - start : undefined;\n  }\n}\n"]}
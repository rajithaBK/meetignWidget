{"version":3,"sources":["index.js"],"names":["OSMap","OS_NAME","chrome","macOS","MAC","Windows","WINDOWS","iOS","IOS","Android","ANDROID","Linux","LINUX","getOSName","getOSVersion","getBrowserName","getBrowserVersion","anonymizeIPAddress","localIp","triggerTimers","event","meeting","data","eventType","CALL_INITIATED","setStartCallInitiateJoinReq","LOCUS_JOIN_REQUEST","setEndCallInitiateJoinReq","setStartJoinReqResp","LOCUS_JOIN_RESPONSE","setEndJoinReqResp","setStartSetupDelay","mediaType","AUDIO","VIDEO","setStartSendingMediaDelay","RECEIVING_MEDIA_START","setEndSetupDelay","SENDING_MEDIA_START","setEndSendingMediaDelay","LOCAL_SDP_GENERATED","setStartLocalSDPGenRemoteSDPRecvDelay","REMOTE_SDP_RECEIVED","setEndLocalSDPGenRemoteSDPRecvDelay","Metrics","instance","_events","meetingCollection","keys","webex","options","meetingId","indexOf","LoggerProxy","logger","error","get","callEvents","MEDIA_QUALITY","sendMediaQualityAnalyzerMetrics","push","sendCallAnalyzerMetrics","info","identifiers","payload","eventId","uuid","v4","version","origin","name","networkType","userAgent","userAgentToString","clientInfo","clientType","clientVersion","CLIENT_NAME","localNetworkPrefix","meetings","geoHintInfo","clientAddress","osVersion","subClientType","os","getOsName","browser","browserVersion","originTime","triggered","Date","toISOString","senderCountryCode","countryCode","canProceed","eventData","webClientDomain","window","location","hostname","Object","prototype","hasOwnProperty","call","errors","trigger","pstnAudioType","mediaCapabilities","recoveredBy","joinTimes","OTHERS","audioSetupDelay","videoSetupDelay","UNKNOWN","intervals","intervalData","sourceMetadata","applicationSoftwareType","applicationSoftwareVersion","mediaEngineSoftwareType","mediaEngineSoftwareVersion","startTime","err","showToUser","errorCode","body","ERROR_CODE","MEETING_ERRORS","FREE_USER_MAX_PARTICIPANTS_EXCEEDED","PAID_USER_MAX_PARTICIPANTS_EXCEEDED","SERVICE_MAX_PARTICIPANTS_EXCEEDED","INACTIVE","EXCEEDED_MAX_JOINED_PARTICIPANTS","EXCEEDED_SERVICE_MAX_PARTICIPANTS","MEETING_IS_LOCKED","MEETING_IS_TERMINATING","MEETING_REQUIRE_MODERATOR_PIN_INTENT","MEETING_REQUIRE_MODERATOR_PIN","MEETING_REQUIRE_MODERATOR_ROLE","JOIN_RESTRICTED_USER","GET_RESTRICTED_USER","CREATE_MEDIA_RESTRICTED_USER","JOIN_RESTRICTED_USER_NOT_IN_ROOM","MEETING_NOT_FOUND","NOT_WEBEX_SITE","INVALID_JOIN_TIME","PHONE_NUMBER_NOT_A_NUMBER","PHONE_NUMBER_TOO_LONG","INVALID_DIALABLE_KEY","ONE_ON_ONE_TO_SELF_NOT_ALLOWED","REMOVED_PARTICIPANT","MEETING_LINK_NOT_FOUND","PHONE_NUMBER_TOO_SHORT_AFTER_IDD","INVALID_INVITEE_ADDRESS","PMR_ACCOUNT_LOCKED","RESOURCE_GUEST_FORBIDDEN","PMR_ACCOUNT_SUSPENDED","EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE","INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST","CONVERSATION_NOT_FOUND","RECORDING_CONTROL_NOT_SUPPORTED","RECORDING_NOT_STARTED","RECORDING_NOT_ENABLED","generateErrorPayload","LOCUS_RESPONSE","shownToUser","errorPayload","category","errorDescription","fatal","notFatalErrorList","OTHER","errorData","userAgentOption","browserInfo","util","format","metrics","clientName","toLowerCase","split","osInfo","process","env","NODE_ENV","metricName","metricFields","metricTags","fields","browser_version","os_version","sdk_version","platform","PLATFORM","context","app","locale","tags","org_id","credentials","getOrgId","domain","client_id","config","user_id","internal","device","userId","Error","submitClientMetrics","type"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport util from 'util';\n\nimport {includes} from 'lodash';\nimport uuid from 'uuid';\nimport window from 'global/window';\nimport anonymize from 'ip-anonymize';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {MEETING_ERRORS} from '../constants';\nimport BrowserDetection from '../common/browser-detection';\n\nimport {\n  error, eventType, errorCodes as ERROR_CODE, OS_NAME, UNKNOWN, CLIENT_NAME,\n  mediaType, PLATFORM\n} from './config';\n\nconst OSMap = {\n  'Chrome OS': OS_NAME.chrome,\n  macOS: OS_NAME.MAC,\n  Windows: OS_NAME.WINDOWS,\n  iOS: OS_NAME.IOS,\n  Android: OS_NAME.ANDROID,\n  Linux: OS_NAME.LINUX\n};\n\nconst {\n  getOSName,\n  getOSVersion,\n  getBrowserName,\n  getBrowserVersion\n} = BrowserDetection();\n\n// Apply a CIDR /28 format to the IP address\nconst anonymizeIPAddress = (localIp) => anonymize(localIp);\n\nconst triggerTimers = ({event, meeting, data}) => {\n  switch (event) {\n    case eventType.CALL_INITIATED:\n      meeting.setStartCallInitiateJoinReq();\n      break;\n    case eventType.LOCUS_JOIN_REQUEST:\n      meeting.setEndCallInitiateJoinReq();\n      meeting.setStartJoinReqResp();\n      break;\n    case eventType.LOCUS_JOIN_RESPONSE:\n      meeting.setEndJoinReqResp();\n      meeting.setStartSetupDelay(mediaType.AUDIO);\n      meeting.setStartSetupDelay(mediaType.VIDEO);\n      meeting.setStartSendingMediaDelay(mediaType.AUDIO);\n      meeting.setStartSendingMediaDelay(mediaType.VIDEO);\n      break;\n    case eventType.RECEIVING_MEDIA_START:\n      meeting.setEndSetupDelay(data.mediaType);\n      break;\n    case eventType.SENDING_MEDIA_START:\n      meeting.setEndSendingMediaDelay(data.mediaType);\n      break;\n    case eventType.LOCAL_SDP_GENERATED:\n      meeting.setStartLocalSDPGenRemoteSDPRecvDelay();\n      break;\n    case eventType.REMOTE_SDP_RECEIVED:\n      meeting.setEndLocalSDPGenRemoteSDPRecvDelay();\n      break;\n    default:\n      break;\n  }\n};\n\n/**\n * @description Metrics handles all the call metrics events\n * @export\n * @class Metrics\n */\nclass Metrics {\n  /**\n     * Create Metrics Object\n     * @constructor\n     * @public\n     * @memberof Meetings\n     */\n  constructor() {\n    if (!Metrics.instance) {\n    /**\n     * @instance\n     * @type {Array}\n     * @private\n     * @memberof Metrics\n     */\n      this._events = [];\n      /**\n     * @instance\n     * @type {MeetingCollection}\n     * @private\n     * @memberof Metrics\n     */\n      this.meetingCollection = null;\n      /**\n     * @instance\n     * @type {MeetingCollection}\n     * @private\n     * @memberof Metrics\n     */\n      this.keys = Object.values(eventType);\n      /**\n       * @instance\n       * @type {Metrics}\n       * @private\n       * @memberof Metrics\n       */\n      Metrics.instance = this;\n    }\n\n    return Metrics.instance;\n  }\n\n  /**\n   * Initializes the Metrics singleton with a meeting Collection.\n   *\n   * @param {Object} meetingCollection meetings object\n   * @param {Object} webex  webex SDK object\n   *\n   * @returns {void}\n   */\n  initialSetup(meetingCollection, webex) {\n    this.meetingCollection = meetingCollection;\n    this.webex = webex;\n  }\n\n  /**\n   * poste Meeting event metrics\n   * @param {object} options {meetingId/meeting} as a json object\n   * @param {Meeting} options.meeting Meeting object\n   * @param {String} options.meetingId\n   * @param {object} options.data\n   * @param {object} options.event\n   * @returns {object} null\n   */\n  postEvent(options) {\n    const {meetingId, data = {}, event} = options;\n    let {meeting} = options;\n\n    if (this.keys.indexOf(event) === -1) {\n      LoggerProxy.logger.error(`Metrics:index#postEvent --> Event ${event} doesn't exist in dictionary`);\n    }\n\n    if (!meeting && meetingId) {\n      meeting = this.meetingCollection.get(meetingId);\n      options.meeting = meeting;\n    }\n\n    if (meeting) {\n      triggerTimers(options);\n\n      if (!meeting.callEvents) {\n        meeting.callEvents = [];\n      }\n      if (event === eventType.MEDIA_QUALITY) {\n        data.event = event;\n        meeting.sendMediaQualityAnalyzerMetrics(data);\n      }\n      else {\n        meeting.callEvents.push(event);\n        data.event = event;\n        meeting.sendCallAnalyzerMetrics(data);\n      }\n    }\n\n    else {\n      LoggerProxy.logger.info(`Metrics:index#postEvent --> Event received for meetingId:${meetingId}, but meeting not found in collection.`);\n    }\n  }\n\n  /**\n   *  Docs for Call analyzer metrics\n  *   https://sqbu-github.cisco.com/WebExSquared/call-analyzer/wiki\n  *   https://sqbu-github.cisco.com/WebExSquared/event-dictionary/blob/master/diagnostic-events.raml\n */\n\n  initPayload(eventType, identifiers, options) {\n    const payload = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin: {\n        name: 'endpoint',\n        networkType: 'unknown',\n        userAgent: this.userAgentToString(),\n        clientInfo: {\n          clientType: options.clientType,\n          clientVersion: `${CLIENT_NAME}/${this.webex.version}`,\n          localNetworkPrefix: anonymizeIPAddress(this.webex.meetings.geoHintInfo?.clientAddress),\n          osVersion: getOSVersion() || 'unknown',\n          subClientType: options.subClientType,\n          os: this.getOsName(),\n          browser: getBrowserName(),\n          browserVersion: getBrowserVersion()\n        }\n      },\n      originTime: {\n        triggered: new Date().toISOString()\n      },\n      senderCountryCode: this.webex.meetings.geoHintInfo?.countryCode,\n      event: {\n        name: eventType,\n        canProceed: true,\n        identifiers,\n        eventData: {webClientDomain: window.location.hostname}\n      }\n    };\n\n    // TODO: more options should be checked and some of them should be mandatory in certain conditions\n    if (options) {\n      if (Object.prototype.hasOwnProperty.call(options, 'canProceed')) {\n        payload.event.canProceed = options.canProceed;\n      }\n      if (options.errors) {\n        payload.event.errors = options.errors;\n      }\n      if (options.mediaType) {\n        payload.event.mediaType = options.mediaType;\n      }\n      if (options.trigger) {\n        payload.event.trigger = options.trigger;\n      }\n      if (options.pstnAudioType) {\n        payload.event.pstnAudioType = options.pstnAudioType;\n      }\n      if (options.mediaCapabilities) {\n        payload.event.mediaCapabilities = options.mediaCapabilities;\n      }\n      if (options.recoveredBy) {\n        payload.event.recoveredBy = options.recoveredBy;\n      }\n      if (options.joinTimes) {\n        payload.event.joinTimes = options.joinTimes;\n      }\n    }\n\n    return payload;\n  }\n\n  /**\n   * returns metrics friendly OS versions\n   * @param {String} osName Os name\n   * @returns {String}\n   * @private\n   * @memberof Metrics\n   */\n  getOsName() {\n    return OSMap[getOSName()] ?? OS_NAME.OTHERS;\n  }\n\n  /**\n   * get the payload specific for a media quality event through call analyzer\n   * @param {String} eventType the event name\n   * @param {Object} identifiers contains the identifiers needed for CA\n   * @param {String} identifiers.correlationId\n   * @param {String} identifiers.locusUrl\n   * @param {String} identifiers.locusId\n   * @param {Object} options\n   * @param {Object} options.intervalData\n   * @param {String} options.clientType\n   * @returns {Object}\n   * @public\n   * @memberof Metrics\n   */\n  initMediaPayload(eventType, identifiers, options = {}) {\n    const {audioSetupDelay, videoSetupDelay, joinTimes} = options;\n\n    const payload = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin: {\n        audioSetupDelay,\n        videoSetupDelay,\n        name: 'endpoint',\n        networkType: options.networkType || UNKNOWN,\n        userAgent: this.userAgentToString(),\n        clientInfo: {\n          clientType: options.clientType, // TODO: Only clientType: 'TEAMS_CLIENT' is whitelisted\n          clientVersion: `${CLIENT_NAME}/${this.webex.version}`,\n          localNetworkPrefix: anonymizeIPAddress(this.webex.meetings.geoHintInfo?.clientAddress),\n          os: this.getOsName(),\n          osVersion: getOSVersion() || UNKNOWN,\n          subClientType: options.subClientType,\n          browser: getBrowserName(),\n          browserVersion: getBrowserVersion()\n        }\n      },\n      originTime: {\n        triggered: new Date().toISOString()\n      },\n      senderCountryCode: this.webex.meetings.geoHintInfo?.countryCode,\n      event: {\n        name: eventType,\n        canProceed: true,\n        identifiers,\n        intervals: [options.intervalData],\n        joinTimes,\n        eventData: {\n          webClientDomain: window.location.hostname\n        },\n        sourceMetadata: {\n          applicationSoftwareType: CLIENT_NAME,\n          applicationSoftwareVersion: this.webex.version,\n          mediaEngineSoftwareType: getBrowserName() || 'browser',\n          mediaEngineSoftwareVersion: getOSVersion() || UNKNOWN,\n          startTime: new Date().toISOString()\n        }\n      }\n    };\n\n    return payload;\n  }\n\n  /**\n   * This function Parses a Locus error and returns a diagnostic event payload.\n   * It should keep updating from:\n   * https://sqbu-github.cisco.com/WebExSquared/spark-client-framework/blob/master/spark-client-framework/Adapters/TelephonyAdapter/TelephonyAdapter.cpp#L920\n   *\n   * @param {Object} err the error Object from Locus response\n   * @param {boolean} showToUser true if a toast is shown to user\n   * @returns {{showToUser: boolean, category: string, errorDescription: string,\n   *  errorCode: number, errorData: *, fatal: boolean, name: string}}\n   */\n  parseLocusError(err, showToUser) {\n    let errorCode;\n\n    if (err && err.body && err.body.errorCode) {\n      switch (ERROR_CODE[err.body.errorCode]) {\n        case MEETING_ERRORS.FREE_USER_MAX_PARTICIPANTS_EXCEEDED:\n          errorCode = 3007;\n          break;\n        case MEETING_ERRORS.PAID_USER_MAX_PARTICIPANTS_EXCEEDED:\n        case MEETING_ERRORS.SERVICE_MAX_PARTICIPANTS_EXCEEDED:\n          errorCode = 3002;\n          break;\n        case MEETING_ERRORS.INACTIVE:\n          errorCode = 4001;\n          break;\n        case MEETING_ERRORS.EXCEEDED_MAX_JOINED_PARTICIPANTS:\n        case MEETING_ERRORS.EXCEEDED_SERVICE_MAX_PARTICIPANTS:\n          errorCode = 3001;\n          break;\n        case MEETING_ERRORS.MEETING_IS_LOCKED:\n          errorCode = 4002;\n          break;\n        case MEETING_ERRORS.MEETING_IS_TERMINATING:\n          errorCode = 4003;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN_INTENT:\n          errorCode = 4004;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_PIN:\n          errorCode = 4005;\n          break;\n        case MEETING_ERRORS.MEETING_REQUIRE_MODERATOR_ROLE:\n          errorCode = 4006;\n          break;\n        case MEETING_ERRORS.JOIN_RESTRICTED_USER:\n        case MEETING_ERRORS.GET_RESTRICTED_USER:\n        case MEETING_ERRORS.CREATE_MEDIA_RESTRICTED_USER:\n          errorCode = 3005;\n          break;\n        case MEETING_ERRORS.JOIN_RESTRICTED_USER_NOT_IN_ROOM:\n          errorCode = 4007;\n          break;\n        case MEETING_ERRORS.MEETING_NOT_FOUND:\n          errorCode = 4011;\n          break;\n        case MEETING_ERRORS.NOT_WEBEX_SITE:\n          errorCode = 4012;\n          break;\n        case MEETING_ERRORS.INVALID_JOIN_TIME:\n          errorCode = 4013;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_NOT_A_NUMBER:\n          errorCode = 4016;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_TOO_LONG:\n          errorCode = 4017;\n          break;\n        case MEETING_ERRORS.INVALID_DIALABLE_KEY:\n          errorCode = 4018;\n          break;\n        case MEETING_ERRORS.ONE_ON_ONE_TO_SELF_NOT_ALLOWED:\n          errorCode = 4019;\n          break;\n        case MEETING_ERRORS.REMOVED_PARTICIPANT:\n          errorCode = 4020;\n          break;\n        case MEETING_ERRORS.MEETING_LINK_NOT_FOUND:\n          errorCode = 4021;\n          break;\n        case MEETING_ERRORS.PHONE_NUMBER_TOO_SHORT_AFTER_IDD:\n          errorCode = 4022;\n          break;\n        case MEETING_ERRORS.INVALID_INVITEE_ADDRESS:\n          errorCode = 4023;\n          break;\n        case MEETING_ERRORS.PMR_ACCOUNT_LOCKED:\n          errorCode = 4024;\n          break;\n        case MEETING_ERRORS.RESOURCE_GUEST_FORBIDDEN:\n          errorCode = 4025;\n          break;\n        case MEETING_ERRORS.PMR_ACCOUNT_SUSPENDED:\n          errorCode = 4026;\n          break;\n        case MEETING_ERRORS.EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE:\n          errorCode = 4027;\n          break;\n        case MEETING_ERRORS.INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST:\n          errorCode = 1006;\n          break;\n        case MEETING_ERRORS.CONVERSATION_NOT_FOUND:\n          errorCode = 4028;\n          break;\n        case MEETING_ERRORS.RECORDING_CONTROL_NOT_SUPPORTED:\n        case MEETING_ERRORS.RECORDING_NOT_STARTED:\n        case MEETING_ERRORS.RECORDING_NOT_ENABLED:\n          errorCode = 4029;\n          break;\n        default:\n          errorCode = 4008;\n      }\n    }\n    else {\n      errorCode = 4008;\n    }\n\n    return this.generateErrorPayload(\n      errorCode, showToUser, error.name.LOCUS_RESPONSE, err\n    );\n  }\n\n\n  generateErrorPayload(errorCode, shownToUser, name, err) {\n    if (error.errors[errorCode]) {\n      const errorPayload = {\n        shownToUser: shownToUser || false,\n        category: error.errors[errorCode][2],\n        errorDescription: error.errors[errorCode][0],\n        errorCode,\n        fatal: !includes(error.notFatalErrorList, errorCode),\n        name: name || error.name.OTHER\n      };\n\n      if (err && err.body) {\n        errorPayload.errorData = err.body;\n      }\n\n      return errorPayload;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a formated string of the user agent.\n   *\n   * @returns {string} formatted user agent information\n   */\n  userAgentToString() {\n    let userAgentOption;\n    let browserInfo;\n    const clientInfo = util.format('client=%s', `${this.webex.meetings?.metrics?.clientName}`);\n\n    if (['chrome', 'firefox', 'msie', 'msedge', 'safari'].indexOf(getBrowserName().toLowerCase()) !== -1) {\n      browserInfo = util.format('browser=%s', `${getBrowserName().toLowerCase()}/${getBrowserVersion().split('.')[0]}`);\n    }\n    const osInfo = util.format('os=%s', `${getOSName()}/${getOSVersion().split('.')[0]}`);\n\n    if (browserInfo) {\n      userAgentOption = `(${browserInfo}`;\n    }\n    if (osInfo) {\n      userAgentOption = userAgentOption ? `${userAgentOption}; ${clientInfo}; ${osInfo}` : `${clientInfo}; (${osInfo}`;\n    }\n    if (userAgentOption) {\n      userAgentOption += ')';\n\n      return util.format('webex-js-sdk/%s %s', `${process.env.NODE_ENV}-${this.webex.version}`, userAgentOption);\n    }\n\n    return util.format('webex-js-sdk/%s', `${process.env.NODE_ENV}-${this.webex.version}`);\n  }\n\n  /**\n   * Uploads given metric to the Metrics service as an Behavioral metric.\n   * Metadata about the environment such as browser, OS, SDK and their versions\n   * are automatically added when the metric is sent.\n   *\n   * The Metrics service will send an Behavioral metric to InfluxDB for\n   * aggregation.\n   * See https://confluence-eng-gpk2.cisco.com/conf/display/WBXT/Getting+started+with+Metrics+Service.\n   *\n   * @param {string} metricName  Name of the metric (measurement) to send\n   * @param {Object} metricFields  Key-valye pairs of data or values about this metric\n   * @param {Object} metricTags  Key-value pairs of metric metadata\n   *\n   * @returns {void}\n   */\n  sendBehavioralMetric(metricName, metricFields = {}, metricTags = {}) {\n    const fields = {\n      ...metricFields,\n      browser_version: getBrowserVersion(),\n      os_version: getOSVersion(),\n      sdk_version: this.webex.version,\n      platform: PLATFORM\n    };\n\n    const context = {\n      app: {\n        version: this.webex.version\n      },\n      locale: 'en-US',\n      os: {\n        name: getOSName(),\n        version: getOSVersion()\n      }\n    };\n\n    const tags = {\n      ...metricTags,\n      browser: getBrowserName(),\n      org_id: this.webex.credentials.getOrgId(),\n      os: getOSName(),\n      domain: window.location.hostname,\n      client_id: this.webex.credentials.config.client_id,\n      user_id: this.webex.internal.device.userId\n    };\n\n    if (!metricName) {\n      throw Error('Missing behavioral metric name. Please provide one');\n    }\n\n    this.webex.internal.metrics.submitClientMetrics(metricName, {\n      type: ['behavioral', 'operational'],\n      fields,\n      tags,\n      context\n    });\n  }\n}\n\n// Export Metrics singleton ---------------------------------------------------\nconst instance = new Metrics();\n\nexport default instance;\n"]}